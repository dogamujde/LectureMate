I think we may get going.
Good afternoon everyone.
We have a pre lecture thing which we will do
whilst you're still sitting down.
So here is Alice who you saw on the slide
in the introductory lecture in person for some other reason.
Okay.
Hi everyone.
, I did I tell them to be quiet.
Hi everyone, I'm Alice.
I am the Secretary of Hopes.
So we're the gender diversity and Informatics society.
We do loads of stuff, but basically our main aim
is to create an inclusive space for everyone who studies
informatics to kind of learn, meet new people, have fun.
So we do a bunch of different things.
We do socials, board games nights, pub crawls.
We're doing a ceilidh.
If you haven't done a ceilidh before, it's a
Scottish dance.
You do not need to be able to dance.
They kind of tell you how to do it.
When you're there.
There's free food, free drinks.
We've got a QR code for it on the slide,
, arts and crafts events, that sort of thing.
But we also do tech events, so we get women
and non-binary students and industry to come and give talks
about what they do.
, it's a really good place to network.
You get free pizza, you get advice about what they
think is a good thing to do for your career
path, and you get to learn about different careers.
That's really good.
And then finally, we do a hackathon.
If you haven't done a hackathon before, it's an all
day coding challenge.
It's all one is super beginner friendly.
It's only one day.
Some of them are massively long.
There'll be loads of mentors to help you out.
You're in teams and there are loads of prizes to
win and free food again.
So yeah, this is our Instagram if you'd to
follow us.
And that's where we post all our events and everyone's
welcome.
You don't need to be a woman or non-binary student.
You don't need to study informatics.
It's just very inclusive and we just want everyone to
come basically.
So yeah.
Thank you.
Hopefully I'll see you soon.
Okay.
Good afternoon everybody.
Back to normal.
, you do not get music at the beginning of
my lectures.
This is because I do not fancy the $20,000 fine
and two months in prison that each public performance violation
might result in.
This also because I can't be bothered.
So as you heard in the introductory lecture, I'm dealing
with the computation and logic part of the course.
And since I'm privileged to have your attention, I thought
I might start with a bit of more random stuff
about university teaching learning.
And then just a little bit about my interest before
we move into the material.
So in the introductory lecture, Don gave you the pep
talk, the official story.
I want to inject a little bit of realism into
some of the things that were said then.
And one of the reasons I want to inject a
bit of realism is because I screwed up in my
undergraduate degree, and some of you might be in danger
of doing the same thing that I did, and I
don't want you to.
So I want to say, I'll give you a little
bit of history and advice and warning, as well as
talk a bit about my philosophy of teaching.
So firstly, I don't technology.
, this is my phone.
It's five years old and it will stay there until
it breaks completely.
That means I'm not going to do woo clap, and
I'm not going to do all the other fancy stuff.
But I do a lot of interaction.
So the interaction means you talking to us in the
lecture.
Not too much, otherwise we won't have time.
But it's nice when lectures are a conversation and not
a monologue.
So at various points I'll be asking you to shout
out random things if you feel shy about that.
Of course you don't have to, but try to get
over your shyness.
I managed to get over my shyness to the point
that I can stand up in front of 400 people,
and when I first started as a lecturer, that was
terrifying.
I also wanted to say a little bit about what
a lecture is for.
What do you think a lecture is for?
What's the purpose of lectures, given that there's vast amounts
of research saying that they don't work very well?
Yeah.
To learn.
That's a much better answer than some answers that could
be given, which might be to be taught.
So you've brought one of the key things about university.
Don talked a lot about teaching, but actually university isn't
about teaching.
It's about enabling to learn.
If you follow the news, you know that down in
England, the universities are agitating for an increase in fees.
That's a very good reason for that, because it costs
much more to educate a student than we get paid
to do it.
, but you may have seen on the BBC some
student at in Manchester saying I get lectures every second
day.
I don't get Â£10,000 worth of teaching.
And that's the attitude that doesn't work, because in a
university degree, most of the work is done by you
outside of the timetabled activities.
How much time should you be expecting to spend out
of the timetabled activities?
That's a very difficult question.
So we to say treat university as if it's
a full time job, and by that we mean 40
hours a week, not 35 hours a week.
However, it's not really that.
It depends very much on you.
So the other thing that you need to appreciate for
many reasons is that there are 400 of you, and
there's an enormous range of experience.
And to be blunt, ability, I guess most of you
have a string of A's at Highers or a string
of A's and a star at A-level.
Right.
Because you had to to come here.
But everybody here does.
And there's still an enormous difference between.
People in the class.
So I was a star school pupil.
I went to university and suddenly I was about halfway
up, and the best people were two, three, five, ten
times as clever as me.
So undoubtedly, in this room, some of you are a
good deal cleverer than I am.
And for me, that's one of the perks of being
at university.
The point of being university is to be around very
clever people and learn from them.
So what about lectures?
Lectures are very bad as a means of transmitting information.
So why do I still do lectures?
Because I think lectures can be useful.
Not so much to ram information into your brains.
It doesn't work for me.
It does work for some people, but because they provide
a framework which you can then use to build your
own understanding on.
So my aim in a lecture is to give you
a high level, broad understanding of what it is we're
doing.
There's quite a bit of detail as well, but you
don't necessarily expect to understand the detail in full as
I'm talking about it.
But having the framework in place, you should then be
able to go away, do the reading, do the tutorial
exercises, and hopefully then understand the detail.
Don talked on Monday about programming not being a spectator
sport.
I'm not teaching programming, although there will be programming.
But logic is also not a spectator sport.
In fact, no, mathematics is a spectator sport.
One has to do it to learn it.
, so I said 40 hours is a myth.
How long are you actually going to spend.
So some of you can probably get through the entirety
of first year doing 5 to 10 hours a week
of work.
But that's not many of you.
And you have to be very confident and make sure
that that is you.
Before you assume you can do that, others are going
to have to spend probably realistically 20 hours.
Some people will struggle if you struggle.
Seek help.
What I really want people to understand is that if
you get overconfident and you stop working and you fall
behind, it's going to be very hard to recover.
So if you find that you're struggling with things or
that things are getting difficult, come and talk to your
tutor.
If you're confident in your tutor.
Many of our tutors are students, so you might prefer
not to talk about that with them.
But if you're struggling, then ask to talk to one
of us.
We try to be as available as possible.
Now, hopefully this is all just precautionary.
It's just.
I don't want you to go through what I went
through.
But as you can see, I came out of it,
and I'm here.
So let me just say a bit about me.
Why am I doing this?
I'm a mathematician by education.
I'm a theoretical computer scientist by training.
Afterwards, my PhD was in theoretical computer science.
I've been here all my academic career.
I have been a computer scientist until about the early
2000, when I became more interested in linguistics.
And so actually, mostly I do linguistics these days for
my research.
Unfortunately, I'm in a school of informatics, which takes the
view that any form of reasoning, communication, logic or anything
counts as informatics.
So they're quite happy for me to do linguistics.
.
Why am I teaching you rather, why am I enabling
you to learn on this course?
Well, obviously, the simple answer is because they needed someone
to do it, and they looked at me and said,
you can do it.
And I said, yes.
Great, that will be fun.
And it has been fun.
So last year was the most fun I've had in
my entire teaching career.
And your challenge is to make this year even more
fun.
Okay.
Which brings me to the question of why are you
here?
So there are lots of reasons for going to university.
So this is one of those questions where you might
be shy to put up your hand, but if you're
not shy, then do so.
How many of you are you here?
Primarily because it's what you need to get the job
you want afterwards.
Okay, right.
Don't ask me for advice.
I'm a career academic.
Ask the careers service for advice about jobs.
, how many of you are here?
Basically because you come from a university educated family and
nobody ever thought it would be anything else than that.
You go to university.
Okay.
That's good.
How many people are first generation university students?
Okay, good.
, how many of you here?
Because you really think computer science is interesting.
I hope you're all being completely honest.
And thank you.
That's good.
And how many of you are here?
Because fundamentally, university is a place to put off the
harsh world for a few years and have fun whilst
doing so.
Good.
I think that's a very good reason.
But let me emphasise actually university is about having fun.
Some of the fun is learning, but there will.
There are other sorts of fun, so don't let the
the need to do the academic stuff get in the
way of taking advantage of all the other things there
are in universities.
Just don't take too much advantage of them.
Okay, so that was a kind of general pep talk.
The other thing I wanted to say was something about
the marks on this course, because there was a bit
of.
Well-intentioned dishonesty in the introductory lecture.
I don't showed you that graph.
Right.
And if you appreciate what we mean by it.
So the point is that a first class result, which
corresponds to an A in non honours, is supposed to
be excellent, not just a normal expectation.
However, actually in reality the marks for this course look
this.
Okay, that doesn't mean that you should consider it your
aim to get 100% on the course.
As Don said, it's possible.
, if you want to aim for it.
Just as something as a bit of fun.
Do.
Nobody matters.
43 years ago, I lost one mark on my chemistry
A-level.
Multiple choice.
And I'm still bitter about it, but nobody else cares.
So don't worry about marks.
If you do the work and have fun.
The marks a secondary, especially in first year.
There is one slight exception.
There are a few of you who should worry a
little bit about marks, but not very much.
How many of you are thinking of going to North
America for a third year abroad?
Right.
So early piece of advice you need to maintain a
straight transcript.
However, getting an A on this course is not hard.
Okay.
I mean, you don't strictly need to, but experience shows
that it's a good idea to maintain a straight transcript
if you're trying to go to the Ivy League.
, okay.
So before we move into the material proper, anybody got
any questions or comments about the course more generally or
what I might be doing?
Oh, there's one other thing I meant to say.
Is anybody already feeling annoyed by the Saturday 4 p.m.
quiz deadline?
Right.
So let me deal with that now.
So if you are one of those people, and if
you're a nasty, legalistic minded person, you will go to
our teaching pages and find that we have a policy
that all deadlines have to be at noon on a
weekday.
So the CLL quiz deadline is in violation of policy.
We know that it's intentional because it's the least bad
alternative.
The lecture ends at 3:00 on Friday, so the only
legal deadline would be noon on Monday, which is just
silly for a five minute quiz that you will should
be doing straight after the lecture.
So those of you who don't it are welcome
to contact me, and I'll give you a personal deadline
of 4:00 on Friday, which is the next best alternative?
, so why is it 4 p.m. on Saturday rather
than 12 p.m. on Saturday, while the noon on Saturday.
, because students tell us that noon on Saturday is
not a meaningful time for most of them.
So we get hassle from the teaching office every year
about this.
And every year we do a poll of students.
So last year I did a poll of the class.
50% of the class responded, which is pretty good for
a poll.
That's because I put it in one of the tutorial
exercises, and 2% of students didn't the 4 p.m.
deadline.
75% said it worked well.
20% said it's fine.
Not brilliant, but fine.
2% said they'd rather not in.
2% said they really didn't it.
So if you're one of those who really doesn't
it, I'm sorry, but you're in the very small minority,
so please don't make you go through this thing again.
Okay.
So let's start talking about some actual content computation and
logic.
What's the difference between computation and logic.
So computation we think of as stuff done by computers.
But of course you also do computation.
Once upon a time you were able to arithmetic by
hand and in your heads.
Quite possibly you've forgotten how to do it by now.
, but with a bit of luck you will learn
it again, because I expect everybody to be able to
do mental arithmetic.
But what's logic?
Anybody get taught logic in school?
A very small number of people.
Which is a great pity because logic is useful in
many things.
So logic is the language of reasoning.
And actually it's not easy to do reasoning about the
real world that we live in for many reasons.
So one of those reasons is that the real world
is not a hard edged place, even if we're simply
trying to talk about things, we have to give them
names and we have to put them into different classes
of object.
And almost none of these categories are hard edged at
the level of fundamental physics.
Then they are.
A proton is a proton is a proton.
But above that then most things become a bit hard
to make completely sharp.
There is a branch of logic called fuzzy logic which
specifically tries to deal with this problem.
It was fashionable in the 60s.
It's rather gone out of fashion, and you're not going
to meet it here or indeed anywhere else in your
course.
There are other ways of dealing with these things nowadays,
which if you go on and do database courses in
third and fourth year, you might come across, depending on
what they are by that stage.
Another reason that it's hard to do calculations or reasoning
about the world is that there's a lot of randomness
in the world.
So we're in Scotland.
If you don't already know about Scottish weather, you're going
to find out very quickly.
This is the country where you have four seasons in
a day, sometimes twice over.
And predicting the weather here is very difficult because of
all the chance.
Predicting the stock market.
Wouldn't we all love to be able to predict the
stock market?
But we can't.
Or even things playing snooker or billiards or pool.
In principle, that should be a perfectly deterministic thing.
You should know what happens, but there's always a bit
of randomness.
There's a branch of logic called probabilistic logic, which tries
to do rigorous reasoning about events with chance in them.
Again, we won't talk about that at all.
It does come up in some of the fourth year,
fourth and fifth year courses.
Another problem is that we don't have the information we
need.
So anybody who is dealing with diplomacy, politics, war is
in a has a shortage of the information they would
to have.
That's what spies and intelligence services are for, to try
to get more information.
What do we do if we just don't have it?
Well, again, there's a branch of logic called logics of
imperfect information, which I have worked in at some point,
which tries to give techniques for conducting rigorous arguments when
you don't know everything.
Again, we're not going to talk about it.
Another problem is that it's just too hard to do
the calculations.
Now, what do I mean by that?
It might be that the numerical calculations are too hard.
, how many of you did physics school up to
higher level?
Quite a lot.
You remember the three body three-body problem.
Okay, so calculating the orbits of things, if you have
two objects, one orbiting another, you can calculate the orbit.
If you have three, then it's no longer possible.
I mean we can do it numerically to an approximation,
but we don't have simple equations for it.
So we have to do it by the same sort
of approximation technique that we use for computing the weather
or many other things, or some problems are simply so
complicated that we can't solve them in a reasonable time.
An example of that is timetabling.
, so when do you think the university starts the
process of timetabling the courses for this semester?
Last year.
When?
Last year.
May.
Any advance on May.
September of the year before somebody is even more pessimistic.
So it starts in about March, which means we have
to commit to what we're teaching by March, which is
a right pain, because it means we can't have a
bright idea for a new course.
And so when I first started here, I was introducing
new courses in the first week of term, but all
that has gone, , so timetabling is actually an example
of a problem that is provably very hard.
And the worst example of it is exams.
So as you know, you don't have exams on this
course, but you have exams on other courses and trying
to get 12,000 students to sit exams in several couple
of thousand courses without clashes is a very, very hard
computational problem, which is why the exam timetabling also starts
months early.
Another thing that makes reasoning difficult is us people.
People are very annoying because they're not rational.
So how do you reason about what people are doing
even if they are rational?
You have to understand what it is that they know
or maybe what they believe.
So there are also branches of logic that are designed
to allow reasoning about such things.
And yet again, we're not going to talk about that.
So what are we going to do?
We're going to be very, very simple minded.
And we're going to think only about statements that are
completely hard edged, completely certain, and at least on the
face of it, simple.
So the point of today is to take the complexity
of the world and reduce it to something manageable for
the rest of the course, and also for much of
the rest of your degrees.
So we're an informatics department.
Before you came here, had you heard the word informatics?
Anybody?
A few.
Okay.
, the word did exist, but people us kind
of jumped on it about 20 years ago because we
needed a word that was more general than computer science.
And the really bizarre thing is, in Germany, informatique is
the standard word for computer science.
But some of my former informatique department's colleagues in Germany
wanted to change the name of their departments to computer
science.
But here we are in informatics department, and we define
it as the study of systems that process, that stored
process and communicate information And that begs the question of
what is information?
So if you go and look in the dictionary, you'll
find that it has a fairly long definition, because it's
quite an old word with a lot of history.
And basically it says knowledge about a fact or an
event, something which one knows.
And it's an interesting sideline that the very first use
of the word information that anybody has found in the
English language, broadly understood, is actually in Scots, not in
English, English.
, anybody here have Scots as a native, some dialect
of Scots as a native language?
Nobody.
Do it.
Perhaps.
Here.
Okay.
It's getting worse.
So last year it was about three.
So.
Which is a pity.
, so this quote is about Some guy who spread
some scurrilous gossip about an abbot and wounded him greatly
by spreading the scurrilous gossip.
.
We live in a world which has way too much
information.
You've grown up in it.
I've grown up as it emerged.
, this garbage is from some terms of use.
How many of you have ever read a Terms of
Use document on a website in full?
Okay, just a few.
The rest of you try it one day just to
see what's in there.
, we are in a world which is generating information
at an absurd rate.
This was three years old, so it's probably doubled by
now.
, and what's the use of having 500 hours of
video on YouTube for every minute of time there is
finding the right thing.
So our job as computer scientists is largely to handle
very large amounts of information and get useful things out
of it.
How do we do that?
Well, there's an old engineering principle.
How many of you have heard of the Kiss principle
before?
A few okay.
I got told that I shouldn't spell it out in
full.
It's not a rude word, but apparently if I spelt
it out in full, some of you might think I
were calling you stupid.
Which is the word.
So kiss is keep it simple, stupid.
And what that is intended to say is that engineers
have a tendency to overcomplicate things.
Now, as computer scientists, you are also engineers in some
sense.
Some of you might even become actual engineers with a
chartered engineering qualification.
And there's always a tendency to overcomplicate, especially if you
start something without thinking about it first.
So keeping it simple is a really important principle of
engineering, but it's also a very good principle in maths.
So how many of you are on joint maths degrees
or even single maths degrees?
Okay, thanks.
.
Maths is about many things.
One of them is proving hard theorems, but a lot
of maths is about designing the right notation to think
about the problem, to get the right notation and the
right definition, to think about the problem in the first
place.
And that's something that we'll also see as we work
through the course.
A good definition makes the theorems easier.
, so this is a term where we actually know
who dreamed it up.
The Lockheed skunkworks Lockheed is an American, largely military aircraft,
etc..
Manufacturer, big arms company.
They built things the SR 71, a Blackbird spy
plane, and probably the U-2 as well.
And they had this department where all the wacky way
out, very expensive top secret stuff happened, and it was
known as the Skunk Works.
And this guy was the lead engineer.
And when you're building extremely expensive planes, you want them
to work.
And so keeping it simple is one of the principles
that allowed them to succeed.
Well, the Lockheed success is a good thing, is another
matter.
But we don't do politics in this course.
So we're going to make some simplifying assumptions about the
world.
We're going to assume that when we ask a question
about a world, we get an answer.
That's not true of the real world, because sensors fail
and they're there's fog in the way, all sorts of
reasons why you might not get an answer.
We don't worry about that.
We're going to assume that there's only a finite number
of possible answers to any given question.
I mean, that's fairly reasonable, because we don't really have
any measuring devices that are capable of giving us a
real number as an answer.
And in the simplest case, then for any particular observation
sensor question, there are only two possible answers we can
get.
There are lots of names we might give for that.
Those two answers.
Sometimes they'll be right or wrong.
Sometimes true or false.
Up or down.
Yin yang.
These symbols we will see.
Some people will call these true and false.
Some people call them top and bottom, zero, one, and
so on.
And so we end up with the concept of binary
data.
How many of you did computer science at school?
Slightly more than half.
So all of you are familiar with binary data.
You know what a bit is.
So this is going to be a bit dull.
The rest of you may or may not have seen
bits and binary data.
So key idea everything is reduced to a series of
yes no questions and answers.
Okay.
Any questions at this point.
Okay.
So now I want to set up the the framework
work that we're going to use for talking about logic
and computation.
And this is where we start introducing technical terms.
So as a general rule, if I put something in
purple That means it's a technical term which is being
defined and you should know it.
So what's a universe?
This use of the word universe is peculiar to logic.
It doesn't mean the whole world out there.
It means just a set of things.
I guess you've all come through modern math degrees.
So everybody is familiar with the concept of set as
in set theory, right?
Anybody not familiar with set theory?
At least up to school level.
Okay, so remember that a set is a very primitive
thing.
It has things in it and that's all there is
about it.
Now we don't really care what the things are.
If we have a set of cats and a set
of dogs, we don't actually care that they're cats and
dogs.
We just need ways to talk about them.
So we're just going to have names for things in
a set, and the universes we're going to be talking
about.
Could be quite small.
So, for example, this is the universe of true values.
True and false.
Top, bottom.
This is a modest, modest sized universe.
If we think about the set of people in the
world, which is, what, 6 billion or so at the
moment.
If we think about the set of my emails to
you, which is currently empty, but will cease to be
empty quite soon.
And anything in between, or indeed at the other side.
And so what we're going to be studying in logic
is yes, no questions about universes, about a particular universe.
So any particular logical question is a question and a
universe that we're asking it about.
And I'm going to start By illustrating this on one
universe which will be familiar to most of you, although
not all of you.
Oh, one thing I forgot to say at the beginning.
I didn't write this course.
Michael Forman, who was a professor here for a number
of years, wrote the material for this course.
I've rewritten quite a lot of it, but most of
the content is his, so I'm still acknowledging that.
Michael was a chess player.
He enjoyed chess.
I'm a lousy chess player, although I can in principle
play chess.
Just to give you an idea of how lousy I
am, my son first fool's mated me when he was
six years old.
, so is there anybody who is not at all
familiar with chess?
Okay, a few people.
So chess is a game with these different pieces.
And in English they're generally known as rook, knight, bishop,
queen, king and pawn.
Different names in other languages, but generally around the same.
The purpose of the game doesn't matter for us at
the moment.
All that matters is that there are these different types
of pieces.
Also, there are pieces in black and white most
such board games, but we're not going to worry about
the colour of the pieces.
We're just going to talk about the shape of the
pieces.
So on the face of it, there are one, two,
three, four, five, six different types of chess pieces.
So if I give you a chess piece and ask
you what type of piece is it?
, there are six possible answers and we don't
six.
We only two.
So how do we take a question with six answers
and reduce it to a series of questions with two
answers?
I say, as in the game 20 questions.
I have always been surprised that not everybody knows that.
So if I say the 20 questions game, how many
of you know what that is about?
Two thirds.
, so 20 questions is a game popular amongst children
and sometimes adults in English speaking countries at least, and
probably many others.
So the idea is, I say I'm thinking of something
and you have to guess what it is by asking
me questions to which I can only answer yes or
no.
And it's called 20 questions, because that's a reasonable number
in which to find out with good probability, but not
too much probability.
What I'm thinking about.
And of course, in the real game my object is
to think of something that is very ambiguous, so that
you will find it very hard to pin down exactly
what I'm thinking of.
But we're not doing that.
, so I'm going to introduce some questions that will
split these pieces into a series of yes no questions.
If you are a chess player, then they will probably
seem almost quite, almost natural.
Not quite, because I'm cheating a bit.
If you are not a chess player, then you might
to go away after this and think about if
you were designing a series of questions along the lines
that I'm about to do.
What questions would you ask if you don't know anything
about chess and don't care because there are other questions
you could ask.
So in chess, the most important distinction is between these
very weak pieces and the other pieces, which are much
stronger.
So a natural first question is, is your piece a
pawn or is it not a pawn?
So if you get the answer, it's a yes, it's
a pawn.
Then you're done.
Otherwise, we have to go on and try to distinguish
these pieces.
So then my next question out of 20 for a
chess player might be is it a major piece or
a minor piece.
So these pieces are moderately powerful in chess.
And these pieces, except this one, are very powerful in
chess.
For a chess player, the king is actually a weak
piece.
It's the most important piece because if it's captured, you've
lost.
But it doesn't have very much offensive power of its
own.
It's the kind of king that hides in a bunker
while somebody else does the fighting, whereas the Queen does
the real fighting.
, So we could say, let's ask, is your peace
of mind a peace or a major peace?
If it's a minor peace, we've narrowed it down to
being a knight or a bishop.
So we simply ask, is it a knight?
And we get the answer yes or no?
If it's a major peace, then we can break it
down further.
We could say, for example, is it a rook or
sometimes called a castle, which is why it looks
a castle?
Or is it one of the royal pieces, King or
queen?
If we get the answer yes, it's major.
Then we're done.
Otherwise, we have to break it down further in order
to separate the king and the queen.
So we've got a series of questions for questions with
yes no answers, and we can put them in what
we call a decision tree this.
So each circle is a question.
And then the way I've designed this, the yes answer
goes to the right.
So I'm saying here, is it not a pawn?
And if the answer is yes, that means it's not
a pawn.
And I go to the right and I say, is
it major?
If the answer is yes, I go to the right.
And then I say, is it royal?
And if it's yes, I have to ask, is it
a king?
So the decision tree is a way of laying out
a series of questions together with their answers, so that
you can classify any piece.
Any questions about that.
So we're going to come back to this next time
as well.
Is the concept clear.
Just a simple graphical way of laying out a tree
of questions.
So if you were actually playing 20 questions, you might
even want to think this way.
Now there's something worth noting about this tree.
What it does is to give us a numerical label
to every piece.
So if I look at the pawn, I can identify
it by.
I got the answer zero to the first question.
If I look at the bishop, I can identifying it
identify it by saying I got the answer one, followed
by the answer zero, followed by the answer zero or
false or whatever you want.
So what this is doing is giving us an encoding
into binary digits.
For each of the pieces.
The pawn is zero, the bishop is 100, knight is
one, zero one, and so on.
And the king is 1111.
So notice that this is a variable length encoding.
As we say, some pieces have a short encoding, some
have longer encoding.
How many.
Bits?
So each of these digits is a binary digit 0
or 1?
We call it a bit.
How many bits do I need to describe the sets
for different kinds of chess pieces?
So I've used up to four here.
Do I actually need four?
If you think about how many questions this has taken.
When I ask this question, I start with 16 possible
pieces, and I break it down into eight pawns or
eight major pieces, and I break it down.
How many questions do I have to answer?
If you look at every type of piece and every
piece in the chessboard and ask what they are.
It takes me 34 questions in total, which is quite
a large number, and that number is the number of
bits in the encoding that we use.
So if we had a complete chess set represented in
a computer program by these numerical names for them, then
we would have 34 bits worth of storage.
Would we care?
Well that depends a bit on the application.
So you've grown up in a world where storage is
essentially free.
A very, very long time ago, storage was a very
tight resource.
And there are circumstances in which you might care, but
we're not going to be going that way.
So we might wonder, is this the best way to
do it?
Do you think it's sensible to have a variable length
encoding, where some pieces have a label that is one
digit and some have a label that is four?
Would it be just easier if they all had the
same length?
I mean, it would be easier in some ways.
It might not be a good reason, but yeah.
So here's another encoding.
Here I've decided to give everything a three bit encoding.
Now ideally I would now stop for ten minutes and
ask you to work out what questions have I asked
in order to produce that encoding.
But we don't have time for that in any way.
Making you do things in lectures is mean because I
can't think when people are staring at me.
Some of you might not it too.
, so.
If you go away and think about it, if you
could come up with various possibilities, one thing you might
to do after this lecture is to think about
other possibilities.
So I'm going to show you one.
But are there others?
So that's the tree that corresponds to this encoding.
And those of the questions that I've asked.
So I'm using the same questions, but I'm asking them
in a different order.
So I'm asking major.
Oh sorry.
That's not the same question.
And then I'm separating Bishop and King.
Yes.
So it is the same questions.
So the same questions in a different order.
But there are some dummy questions that don't really apply.
So if I go back to this tree here, if
you look at 011, there is no piece that has
the encoding 011 in my list.
So I've left some stuff blank in the decision tree,
which means over here I don't have an answer to
it.
That's okay.
It just means it's a kind of chess piece that
doesn't exist, which means I'm never going to talk about
it, and it might simply be more convenient to have
three bits per piece, rather than something in between 3
and 4.
.
How many bits do I need?
I showed you something that had 1 to 4.
I showed you something with three.
If I have six different types of chess piece, what's
the absolute minimum number of bits I need?
Three.
Three.
Okay.
Why three?
Let me go back.
So people at the back, I expect you to pipe
up as well.
Where does three come from?
Log base.
Two of six together.
Six possible pieces.
And then you round it up.
Yeah, Because the hint is on the slide.
So if I give you four bits, that's four binary
digits which have 16 two to the four possible values.
So if I gave you two bits, you would have
four possible values 00011011.
And that's not enough.
So we need three bits.
And then we have a couple of codes left over.
and so you just go back and forward with
log and exponent.
do notice this side bar here.
So I put various things in the sidebars of the
slides.
Sometimes they're just for fun.
If they're written in green, they're not just for fun.
They're part of the slide that I want you to
pay attention to.
, so you will find that computer scientists use logarithms
quite a lot.
But we don't real numbers, so we never deal
with natural logarithms, at least in my bit of computer
science.
And we also don't the number ten, so we
don't deal with the kind of logs that you did
at school.
So all our logs are logged to the base two.
And so in computer science it's pretty standard that if
we write log we mean log to the base ten.
As in school, if we write ln we mean log
to the base E as in school.
And if we write log we mean log to the
base two, which is what you're going to be used
to for the rest of your degree here.
If by any chance you have forgotten the laws of
logs since you were last examined on them, please make
sure they are firmly back in your brain, because I'm
going to assume you can do them without thinking along
with many other things.
And we are just approaching time, which is good.
So please bear in mind that after this class there
is another large class, so I can't take questions after
the lecture in here after this class.
Tomorrow.
At the moment there is nothing timetabled afterwards.
So I can and also please go out that door.
The engineers before you did not get the difference between
in and out.
So for a swift change over head that way and
I'll hang around outside if you want to ask questions.
All right.
Good afternoon everyone.
Before we start, Don has asked me to remind you
that if you want to change your tutorial group, do
not email him.
Don't email me either.
Do not email Kendall.
Do not email Vito.
None of us can do anything about it.
The only thing you can do is fill in the
tutorial change group request form, which is linked to from
somewhere on the page.
, tutorial allocation seems to be well, it seems to
have happened.
Whether it's happened correctly, I don't know or most of
you in tutorials according to your timetables.
Now how many knows, right?
Somebody will try to mark your work and hopefully you'll
be in a tutorial by the time they happen.
If you if it comes to first day and you
haven't been assigned to a tutorial, just turn up to
a random one and tell the tutor.
If you're wondering why an informatics department can't assign you
to tutorials, it's because it's not us doing it.
It's a new system.
We have a wonderful new time timetabling system which does
not connect properly to all the other systems we use.
Every week I have to download a manual list of
where you are in order to assign your coursework.
, all right.
So last time, or rather last week, we talked about
bits and binary encodings, and we talked about propositional logic.
And right at the end I talked a little bit
about predicate logic.
And I said predicate logic.
First order logic is way too difficult.
So we're not going to do that.
And we're going to do something easier.
So that will be what we're doing for the next
2 or 3 weeks.
Before I start on that, are there any questions hanging
over from the last week?
Anybody come across something that they wanted to ask?
Okay.
So we are now going to skip back quite a
long way.
2500 years or so.
2250 years.
And look at some good old philosophical logic.
I will show you later that if we were going
to look at good old philosophical logic in the way
that Aristotle did and the way that people did for
the next 1800 years, it would be quite painful.
So we're going to look at it from a modern
point of view, with modern notation and modern ideas, which
makes it much more attractive than it used to be.
There's an optional lecture in the middle of the course,
if you really want to know the horrors that your
predecessors in 1400 had to go through.
So I want to work with examples.
And in order to work with examples, I want something
nice and simple with some easy properties.
So we're going to work with this universe.
So remember from last week universe is a technical term.
It just means a set of things that we're going
to talk about.
And I'm going to talk about some shapes.
And these shapes have various properties.
So if you look at what I've put up in
front of you, you can see that there are shapes.
There are three different node, two different shapes at the
moment disks and triangles or circles and triangles.
You can see that there are at least two different
sizes of things, because there are big things and small
things, and you can see that there are different colours.
I believe that I have chosen the colours so that
everything is distinct, even for full colour blindness.
If you happen to suffer from colour blindness and you
don't find these distinct, please get in touch with me
so I can address that.
, are there any other properties that you think might
be relevant?
So I haven't told you what I'm going to use,
but staring at this diagram.
Ah, there are other properties I might be going to
use.
So I mentioned size.
So big things in small things here.
Orientation, rotation.
, I've got some more or less upright things.
I've got some more or less sideways things.
, it's a bit difficult to tell the difference between
an upright circle and a rotated circle, so probably I'm
not going to use that.
, no, there is nothing else.
So it's just size, colour and shape.
So this is a universe that is small enough to
talk about, but big enough to be interesting.
Here are a bunch of statements about this universe expressed
in English.
, I hope that you can all look at each
of these statements and look at the universe next to
it, and decide whether each statement is true or false.
For example, every red triangle is small is.
True, every small triangle is red.
On the other hand, It's false.
Okay, that was quite easy, wasn't it?
, we'll leave those for the moment.
What did you do when I asked you these two
questions?
How did you go about determining whether they were true
or false?
, somebody said observation.
A bit more detail.
Yeah.
So they're searching for something that contradicts them.
So looking for a counterexample we say in mathematics, for
example, in this one every small triangle is red.
You see a small triangle here that is green.
And that's enough to tell you for that.
Every red triangle is small.
How did you convince yourself that that was true?
Again, you maybe looked for a red triangle that was
not small, or maybe you just stared at it and
said, yes, that's right.
, one of the interesting things about human reasoning is
that we have a fast, intuitive, and imprecise way of
reasoning about small things.
So this universe is maybe a little bit too big
for that to come into play, but for things up
to around five or so, maybe a bit bigger, depending
on who you are, we look at something and decide
immediately whether things are true or not.
Whereas if I gave you 20 objects, then you would
have to probably count them and make notes.
If I gave you 200 objects, you would.
Or do you do?
If I gave a universe with 200 objects and asked
you to check one of these things?
Write a program.
Yes.
The best for correct computer science.
Answer to almost all questions, but not all questions.
Because sometimes it takes longer to write the program than
to do it yourself.
So what we're going to do now is think a
bit about trying to formalise.
We'll make it a little bit more precise.
The thought process we went through in order to determine
whether these statements were true or false.
But first, let me talk about these statements and why
I've chosen these particular statements.
So if you look at the format there, you see
they all have this form.
They start with what in linguistics we call a quanta
or maths we call a quantifier every some or no.
And then there's a noun or noun phrase rather red
triangle, small triangle, red thing.
Then there's a verb is which in many languages would
be unnecessary.
There might be a negation.
I don't have an example there, but there could be
a knot.
And then there's an adjective, a predicate, as we called
it last time.
So statements that have this form every.
Some know A is or is not B are what
we're going to call categorical propositions.
So this is a definition.
It's the modern term for a Greek phrase which I
forget introduced by Aristotle 2300 and something odd years ago.
And this is the kind of statement that we're going
to be working with.
Is it a simple.
Are these things simple propositional statements as we had last
time?
Are they what I call simple propositions?
So they're propositions because they're true or false.
But are they simple?
So last time, I defined a simple proposition as being
either one of these simple binary propositions that is true
or false, or a predicate applied to an object.
So this thing is green is a simple proposition.
These are not simple because they talk about lots of
objects.
They say every red triangle is small, or some big
triangle is green.
So they're talking about more than one thing, which makes
them not simple.
, these words every some do they remind you of
anything I did right at the end of last lecture?
For all.
And there exists so every is English for for all
and some is English for there exists.
So this is looking as if it's one of as
if it's first order logic.
But it's a very restricted form of first order logic.
So at the end of last time I put up
some horrible long formula.
That was the definition of a function being everywhere continuous.
And that's the kind of thing we don't want to
deal with.
So we're going to work with a particular simple form
of statements that does allow us to use some level
of for all in there exists, but only in this
very restricted way.
Any questions?
Okay.
.
So every red triangle is small.
Let me give you what I claim is a formalisation
of the process.
You might have gone through in order to check that
you might have looked for red things, and you might
have looked for triangular things, and you might have looked
for things that are in both regions that are red
and triangular.
And you might have observed that there is nothing in
this tiny region here, which is the area of red
triangular things that are not small because they're outside the
small thing, small area.
You probably didn't do anything as conscious as that, but
if you had to write a program to do it,
that's the kind of thing you would be doing.
Some plausible.
So some people are nodding.
You're very welcome to say no.
It's completely implausible.
I didn't do anything of the sort.
Anybody want to say that?
No.
I don't think I did.
I just looked at it because I drew this diagram.
So I know it took me a lot of conscious
effort to do this.
, every small triangle is red.
Well, that was the one where we could look for
a counterexample.
So again, we look at small things which I've circled
in grey.
We look at triangles, which I've circled in blue.
So that gives us these things.
And we look for something that is outside the red
region.
And we find one could be that one, or it
could have been that one.
One counterexample is enough to disprove a universal statement.
We can keep doing this.
Some big triangle is green.
, well, what am I going to do?
What am I looking for here?
So I'm looking for a big triangle that is green.
But how do I program my search strategy?
For a small region.
So I'm looking for big triangles.
So that's outside of small.
And I'm looking for things that are in the triangle
region.
And then I'm looking for something that is green.
So in the green region.
And I find an example.
So this is a this is an example not a
not a counterexample.
This is a statement.
Something exists.
There is some big triangle that is green.
And so I'm trying to exhibit one.
we would do the same with some small disc
is red.
This was getting a bit fiddly to draw, but I
managed it.
, some small disc is red again.
Small disc.
, I have a small discs.
Small things are here.
Discs are here.
These are the only small discs, and I'm looking for
an example of one that is inside the red region.
And I don't find it because it would have to
be in there and there isn't one.
So there I'm disproving a statement that something exists by
looking at the region that has to contain it and
saying there's nothing in it.
, no red thing is blue.
So this is a negative statement.
If I look at red things and I look at
blue things, there's nothing in between.
And that's what we expect.
So no red thing is blue.
Seems a bit on the obvious side, right?
, can you think of a situation in which it
might not be obvious?
Yeah.
But why are we using things that there's this thing
that that does anything.
So we're using things in such a way that we
have a red thing, and we have another thing that
is blue.
So if we were using thing differently.
I mean, yes, and that's a good point.
It's related to the point I'm leading up to.
Does this statement have to be true in all universes?
No red thing is blue.
No.
Why not?
Or if they talk about different things.
So it might be possible for something to be red
and blue at the same time.
, in English that doesn't work, but in English, purple
is what we call a primary colour.
In languages with not many colour terms, the purple thing
is red, reddish blue, red, blue.
So maybe it's red and blue at the same time.
But more importantly, remember that a universe is an abstract
thing.
So just because in this universe, red means red and
blue means blue.
And it's a fact about human colour perception that things
are not generally red and blue at the same time.
We could be in another universe where that's not true.
Red might not mean red, and blue might not mean
blue.
So in this particular universe, the words mean what we
think they mean.
But universes are entirely abstract things.
There's no meaning assigned in advance to English words.
We have to state what they mean as part of
the universe.
And in this case, I've defined the universe so that
these things are blue and I've coloured them to make
them look they are indeed blue.
Okay.
, because I've lost one of my display connectors, I
don't have my normal laptop and set up, so I
can't remember what the next slide is.
Okay.
, any questions about this Semi-Formal way of searching for
proofs or counterexamples.
Okay, so what we're going to be leading up to
probably not today, but maybe today, depending on how things
go, is formalising this a little bit more so that
it works with abstract objects instead of specific universes?
So a few minutes ago, I said that these categorical
propositions are in some sense predicate logic, and they are
a very restricted form of predicate logic.
So using standard predicate logic notation, this is what the
categorical statements look .
So every red thing is small in traditional modern logical
notation we would write that as for all x where
is x.
Sorry x is red implies x is small.
We're going to be working with this kind of notation.
In the programming we do so it's necessary to understand
it.
So this is the point where we can start talking
about what these symbols for all and there exists mean.
So given that for all means for all, every every
x, if I look at every any x then if
it's red it is small.
Is that consistent and happy with what we've done so
far?
Anybody have any worries about what that notation is meaning?
Yeah.
Why is there a dot simply to separate the x
from the ears?
.
there are a bazillion different notations for this.
I am extremely lazy, so I always choose the notation
which has the fewest symbols in it.
Some people will write.
With square brackets.
I dots because I can read the dot as
such that particularly in the existential case, there exists an
x such that.
But it's just notation.
Punctuation, really.
Anything else?
Okay, so here's a slightly more complex example.
Every small triangle is red.
How do we talk about something being.
A small triangle.
Well, if it's a small triangle in English, that means
that in logic it's small and it's a triangle.
So the logical formula that we would write here is
for every x, if x is small and x is
a triangle, then x is red.
Does that make sense?
Using the boolean combinations that we talked about last time,
something a little curious, we seem to have privileged the
word triangle here, because triangle is a noun and small
is an adjective.
But in our universe there is no hierarchy.
It's not the case that shape is more important than
size or colour.
How might we rephrase this to make it match the
logic a little more accurately but keep it in English.
Every small triangular shape or thing.
So thing is the word I'm using in in this
universe.
Yeah.
So this is just one of those small little quirks
that you always, you have to think about when you
turn natural language into formulae, which bits of natural language
are supposed to be important and which are just because
we're talking in English.
So similarly here some small disc is read.
This is an existential statement where asserting the existence of
something.
So this says there is some x such that x
is small and x is a disc and x is
read.
So the structure here looks rather different.
When we talked about a universal property, the stuff that
came before the ears was on the left side of
an arrow, and what came after the is was on
the right side of an arrow in the existential statement.
Then we're just using and.
If I'm using an.
So I've got small desk and red all joined by
ans but I've got brackets here because that's the way
the sentences do.
The brackets matter.
They don't matter for an because and is associative.
You can put the brackets anywhere you want.
What does that tell us about other two statements that
are basically the same as this.
Is for some small read things are disks some.
Yeah.
So any permutation of small disk and read is basically
the same statement in logical form if you take the
brackets away.
.
So don't do this now, but think about it later.
Going back and looking at the definition of a categorical
statement that I had back here.
So this is all the possible categorical statements that we're
going to talk about.
Try to write down the general logical forms in this
predicate logic notation that categorical propositions can take.
, you'll find this useful because you're going to be
programming these things.
Programming stuff is a very good way of making sure
that you understand it.
Precisely.
And.
Okay, so before I talk about programming, any final questions
about these definitions and notions that we've just introduced.
Okay, so I'm supposed to be teaching you computation and
logic.
I'm not supposed to be teaching you Haskell.
And since I'm no expert in Haskell, it's a good
thing that I'm not supposed to be teaching you Haskell.
But nonetheless, we're going to keep these two threads of
the course woven together.
And one of the things we're going to do is
use Haskell to implement logic.
After all, a programming language isn't just a useless thing
you have to learn.
It's supposed to be useful for something.
And Haskell is a language that is very well designed
for implementing things about logic.
, in Don's first real lecture, did he give you
any pep talks about all the wonderful things you can
do with Haskell?
Kind of.
Did he tell you that Facebook uses Haskell?
Yeah, of course he would.
, I have no idea why Facebook uses Haskell.
.
It's remarkable things you would never expect to be well
suited to a language Haskell turn out to be.
But Haskell is really, really good at doing the kind
of logical and mathematical manipulation that we want for things
proving that programs do what they're supposed to do.
So there's a whole enormous industry of verification, software verification,
which is essentially about making sure that when your plane
is being flown by the autopilot, it does what it's
supposed to do.
And if you follow the news during your lifetime, as
you've seen a number of instances where that has failed.
, what we would to do is ensure that
there are no failures, because every control system that might
kill people if it goes wrong, is proved to work.
Haskell is one of the languages.
Not that people do this directly in Haskell, but Haskell
is used to write tools in which people do more
complex verification things.
But you're not going to meet that until fourth year.
So here we're just going to do relatively simple computations
with logic.
But they will show you that Haskell can be useful
for logical computations.
It was even useful for me because later on in
the course, there are lots of slides that were that
were very time consuming to produce by hand.
And eventually I got fed up and I wrote the
Haskell program to write the slides for me, which saved
me a lot of time and also ensured that they
were correct, which hadn't been the case before.
I'll mention that when we get to that bit of
the course.
So.
Here's let me just go back there.
Here is some Haskell speak, which I believe you should
now understand.
Right.
This is all Haskell notation that you've seen.
You've seen the introduction of a data type called thing,
which just has things called rest through to Z.
, has this bit of magic been mentioned yet?
No.
, for the moment, it's just a piece of magic.
It will be explained to you later.
What it actually does is just tell Haskell that these
things are supposed to behave the way you expect, so
that Z is equal to Z, and it tells Haskell
to do the obvious thing and print them when we
want to print them.
But at this stage, it's just magic.
And this is defining a Haskell variable called things, which
is a list of all the things in the universe.
So this is the universe.
The things are true to Z.
Now the question is, how are we going to talk
about the different properties of the things?
So the universe is over here for reference on all
these slides.
How in Haskell am I going to code up the
idea of things being triangular, red or whatever?
So if you were to think about this without being
told how to do it, this is maybe one way
that you might think about doing it.
You might say, well, clearly we have a property called
colour.
So I'm going to define a data type called colour,
which can be the various colours.
We have red blue, green and we have a data
type called shape which can be disk or triangle and
a data type called size which can be big or
small.
And then you might go off and define a function
called colour in lowercase, which takes a thing such as
r, and gives you back a colour such as green.
So these are all declarations.
How do you define these functions?
You write them down case by case.
So this is the declaration of the function colour with
its type.
And this is the start of the definition.
The colour of r is green because it is and
the colour of s is green and the colour of
t is blue.
So I believe that you can define functions in Haskell
now.
So this is familiar to you right.
Okay.
you could do it this.
But if you did it this, you would soon
find yourself in a state of having to do way
too much work.
Any time.
We talked about a different universe.
So there's a cleaner way that we can think about
it.
And this is an instance of a general principle of
programming problems solving programming problems.
Roughly, you should try to be as general as possible.
In the first code you write.
Because if you write something very specific and then you
have to make it more general, that's more work.
So if you want to be as general as possible
at the beginning, so that you can apply your code
to other circumstances and other situations.
So here's another way of approaching it.
Instead of defining a bunch of types, I'm actually going
to take the logic seriously.
And the logic we said we have predicates.
So is green is a predicate.
It takes a thing and gives you back whether it's
green or not.
So we're no longer messing around with colours.
We're just dealing with predicates, which is logic, which is
good.
So we might say I could define a predicate.
What is the type of predicates?
Well, a predicate is a function that takes a thing
and gives you back a true or false.
In Haskell, that means a predicate about things is something
that takes a thing, gives you a boolean, so is
green would have the type of thing predicate predicates about
things.
Happy with that so far.
Now this is where Haskell becomes excitingly polymorphic and depending
on where we are, I'm not sure that might have
been in today's lecture.
Has this idea been introduced yet?
Yes.
Okay, so this is a great thing about Haskell.
You can write functions that are quite general.
So this is a function that called rather sorry.
It's a data type called predicate with a parameter called
u.
So this is a type.
This means that we can type declare predicates about things.
We can declare predicates about numbers or integers or whatever.
So here we're defining the predicate type constructor as it's
called, to be a thing that takes some type and
gives you back the type from think whatever it is
to boolean.
So here green is a predicate on things.
And that's just written that.
So technically inside Haskell this is a type constructor that
takes the type of thing and gives you back predicates
about things the same as that, in fact.
But it happens to look conveniently the mathematical English
way of saying it's a predicate about things.
And that means that we can now write functions that
work generally on predicates about any universe, without having to
worry about what universe we're actually talking about.
Whereas if we did this thing, then we would be
binding our idea of predicate to the specific universe in
question.
So this is a case of being general.
Define your notion of predicate to be independent of whatever
universe we're currently talking about.
, so if I do that, how do I write
the definitions for a particular universe?
So this is one way you might do it.
You might write out all the definitions are is green.
So I say is green of R is true, S
is green.
So I say is green of S is true, T
is not green.
So I write, is green of t is false, and
so on and so on.
This is basically writing out a long table of all
the properties of all the things in the universe, which
is ultimately what you have to do in general, because
a universe is an arbitrary thing, and it just comes
along with its property definitions.
Of course, in any particular universe, there might be ways
in which we can save a bit of time.
So in this universe, if I make this definition is
Queen of X is true.
If x is an element of the list r s,
y is red of x is the same as is
x an element of the list uv.
So again, I believe you have seen all this Haskell
notation.
Is anybody want a reminder of what all this stuff
means?
So as I said in the first lecture.
It's really important to keep up, so never feel shy
about asking if you have moment, even momentarily forgotten what
something means.
, just as a side issue, I've been talking in
logic about universes, which are sets of objects.
Here I'm showing you Haskell.
Is this thing a set?
No.
Why isn't it a set?
Because it's a list.
, what's the difference between lists and sets?
Order matters and duplicates matter I can have are twice
in a list.
, so this sounds a bad idea, right?
Because I'm supposed to be implementing a logic that is
talking about sets, and I'm showing you lots of stuff
that is working with lists.
, why might I be white?
My.
Why might I be doing that?
One of the key words is on the slide.
Laziness.
Okay, I'm lazy.
Dawns.
Lazy.
We're lazy.
You're lazy.
This is not the proper way to do it.
The proper way to do it is to define a
notion of set in Haskell that works a set
does.
In fact, you don't need to do that because Haskell
has a module that implements sets, so it's just a
matter of importing the predefined module.
The reason we don't do that is just because it
would reduce introduce additional complication at this point right at
the start of your Haskell careers.
So we're being lazy and programming badly because we want
to keep the actual code in front of you very,
very simple.
But do bear this in mind.
Is this too lazy?
So whenever you do something in a lazy way, it
might come back and bite you.
For example, suppose I were to add another object to
the universe, so I have to go back and change
this definition.
And going back to something I said next time.
This is an even lazier way of doing it.
So I've defined green and I've defined red and I
might say, okay, I know there are three colours.
Anything that is not green or red must be blue.
So I define thing to be blue.
If it is not green or red, how bad is
this as a way of doing it?
Very bad because it's true of this universe.
But if I introduce a new colour yellow, then
it will no longer be a good definition.
I will have to go back and find it, and
probably I won't do that until I find something wrong
much later.
.
So let me mention this little footnote.
I'm guessing that none of you know who Larry Wall
is.
Anybody know who Larry Wall is?
Thank you.
, for, you know, at least I don't think so.
, he wrote lots of things.
So.
In particular, there's a programming language called Perl, which is
my favourite language.
It's basically what people use before Python.
So those of you who are using Python 20 years
ago or 30, whenever it was, you might have used
Perl.
Larry Wall also wrote a lot of other things that
are no longer maybe.
Yes, he wrote, other things are still very much in
use.
For example, if you are writing a big software project,
you want to know whether things change and if somebody
else changes something, you want them to be able to
send you the change in a form that is short.
So if somebody changes a 10,000 line program by modifying
two lines of it, ideally you want them to be
able to send you just the changes and you want
to apply that to your version of the program to
get yours up to date with that.
It's a very simple task, but it's not so simple
to get it completely right and clean.
And there are standard utilities called diff for working out
the smallest difference between two files, and patch for taking
a difference and applying it to your old file to
get the new file.
Larry wrote those.
He wrote large chunks of Usenet, which is still exists,
but most of you have probably not heard of.
Anybody heard of Usenet?
Very small number.
, it's what we had before.
Web forums and social media and all that crap.
It was an efficient way of having conversations, unlike the
modern systems.
So Larry is definitely one of my favourite people in
the computing, historical historical world.
The three chief virtues of a programmer are laziness, impatience,
and hubris.
None of these are things that would be agreed with
by software engineers.
So he's definitely talking about programmers rather than software engineers.
Laziness.
Why do we want to be lazy in general?
Because the short of the code, the easier it is
to understand.
And another reason is that your time is very expensive
and computer time is very cheap, so it is not
efficient to write some complicated code in order to shave
1% off the running time of your program.
Unless it's really, really important that your program is fast.
In almost all circumstances, your time is much more important.
, it really goes along with impatience.
You can't be bothered to do things perfectly.
You do them good enough and come back and bite
you.
So this seems a bit contradictory, because not long ago
I said that we should be doing things correctly, and
impatience is largely about not doing things correctly.
Unfortunately, in the real world you don't have time to
do things perfectly.
Our ideal curiosity how many of you are expecting, or
at least thinking about, ending up in a career where
you're going to do significant amounts of programming?
Okay.
And the others of you might end up doing it
because your boss notices you have a computer science degree
and can presumably program.
The real world has nasty things managers and deadlines
and so on.
So patience is a virtue.
Hubris.
Okay, who knows what hubris means?
Right.
Why haven't you asked me yet what hubris means?
.
Appropriately, hubris is a Greek word very familiar to Aristotle.
.
Hubris is about pride.
And in Greek mythology, hubris is particularly applied to the
kind of pride that makes people stand up and say
things.
I bet Zeus couldn't hit me with a thunderbolt from
here, which is swiftly followed by nemesis when Zeus hears
them and strikes them down with his lightning bolt.
So in English, hubris is a word used to describe
the kind of pride that and overconfidence in your abilities
that leads you to do things that you otherwise wouldn't
sensibly do, which is actually quite useful in a programmer,
because you end up taking on some task that is
too big for you, and then you have to do
it anyway, because you can't face explaining to your boss
why you couldn't do it.
And you learn a lot of stuff and then you've
done the task.
So hubris is a benefit sometimes, but if it's a
project where failure gets you sacked, then maybe that's not
the best thing to do.
Okay.
Any questions about this slide.
Okay.
So this is where we get on to the bit
of Haskell that always struck me as a remarkably complicated
thing.
Have you done list comprehension yet?
Yes.
Excellent.
I have to ask this every year because we keep
swapping the lectures around because of Don's travel, and I
can never remember what's been done when.
So Haskell's list comprehension statement is an amazing thing.
It didn't exist in any of the languages I used
when I was starting out.
So this is basically the list version of the statement.
The set of x such that x is a member
of things and x is blue, or x is big
and x is a disc.
, we don't want to do things this because
it isn't a categorical statement, but you can do things
that.
And you will be doing a lot of this.
So given list comprehension and given some Boolean operators on
lists which I'll talk about if you haven't done them,
we can talk about categorical statements.
So I'm going to show you some Haskell for some
of the categorical statements.
Every small triangle is red.
So I claim that this is a Haskell statement.
What does it mean?
It says give me the list of x is such
that x is in things, x is a triangle and
x is small.
Okay.
So that gives me the set of things that are
small triangles.
And then I'm going to do a bit of magic.
I'm going to say instead of giving me the list
of things that are small triangles, give me the list
of truth values of red about things that are small
triangles.
So this is basically taking this list and applying the
red predicate to every element of it.
So I get back false true false.
because S is not red, V is red and X
is not red.
Have you done list comprehensions this with a predicate
in there?
Some people think they have, so probably you have.
, we'll do a lot of this, but remember, I
mean, the way I to think of it is
forget about the predicate.
Just go back to give me the set of X's
that satisfy this property and then apply red to all
those things.
If you haven't already, you will come across a function
called map, which applies a predicate to a list of
things and gives you back the list of values.
So really, we're just applying red to everything that came
out of there.
And then the next bit of wonderful Haskell magic is
that Haskell has a Boolean operator.
Something that returns true or false.
And what it does is to go down a list
and just and everything together.
So if I apply and to this list, it gives
me false and true and false, which is false.
So I claim that this Haskell statement here is a
Haskell implementation of every small triangle is read.
On the basis of the explanation so far.
How many of you buy that?
Very few people buy it.
So those of you who don't buy it, at which
point do you get worried?
Are you happy with this line?
Set of X's that are triangular and small.
who is positively happy.
They understand this line.
Okay.
Somebody who isn't positively happy.
Can you say more about where you're worried?
And if you don't to say here, then you
can post anonymously on Piazza.
So go back, review the Haskell lecture about the list
comprehension and use the textbook.
And use this example to think about how list comprehension
is working, because we're going to use these examples for
the next 2 or 3 weeks.
So this is a list of things.
And this is just applying a particular function.
In this case it's a predicate to all of the
things that come back from here.
Here I got the list of x and now I'm
just getting is read of, S is read of V
is read of X in Haskell is doing the computation.
And this is the thing that you may not yet
have covered in the Haskell courses, but this is an
operator on the lists that goes along the list and
does, and each time so forth, and true and false.
So what I would you to do is to
study this slide.
Go back to the Haskell Lectures about comprehension, , and
the various forms there.
Try to ensure that you've got it in your head
by Thursday, which is my next lecture.
And then at the start of Thursday, we'll go through
this slide again before I go on to the rest
of the content.
So see you on Thursday.
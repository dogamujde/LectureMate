WEBVTT

00:01:28.020 --> 00:01:28.830
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:01:30.000 --> 00:01:30.720
<v Speaker 0>Let's go.

NOTE CONF {"raw":[98,100]}

00:01:31.650 --> 00:01:32.610
<v Speaker 0>Good afternoon.

NOTE CONF {"raw":[100,100]}

00:01:39.510 --> 00:01:40.080
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:01:40.080 --> 00:01:44.370
<v Speaker 0>So, um, William Tell overture by Rossini.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:01:44.700 --> 00:01:44.940
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:01:47.070 --> 00:01:50.760
<v Speaker 0>Okay, I said today I would start by or I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:50.760 --> 00:01:52.410
<v Speaker 0>would have, as part of my lecture.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:01:52.410 --> 00:01:56.310
<v Speaker 0>Um, opportunity for you to ask questions about the, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,66]}

00:01:56.310 --> 00:01:57.780
<v Speaker 0>programming project.

NOTE CONF {"raw":[100,100]}

00:01:57.880 --> 00:02:00.730
<v Speaker 0>So for those of you who haven't found it yet,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:00.730 --> 00:02:03.100
<v Speaker 0>this is the course learn page and you go down

NOTE CONF {"raw":[100,100,100,100,54,100,100,100,100,100]}

00:02:03.100 --> 00:02:05.320
<v Speaker 0>and you find programming project.

NOTE CONF {"raw":[100,100,100,100,100]}

00:02:05.560 --> 00:02:09.789
<v Speaker 0>And there's the instructions and there's two files to download.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:10.720 --> 00:02:11.260
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:02:11.260 --> 00:02:12.340
<v Speaker 0>So um.

NOTE CONF {"raw":[100,100]}

00:02:21.160 --> 00:02:21.640
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:02:21.640 --> 00:02:24.100
<v Speaker 0>So I don't know how many of you have read

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,72,100]}

00:02:24.100 --> 00:02:27.430
<v Speaker 0>this handout, but, uh, the basic exercise is, um, you've

NOTE CONF {"raw":[100,100,100,52,100,100,100,100,100,100]}

00:02:27.430 --> 00:02:28.450
<v Speaker 0>got the sequin calculus.

NOTE CONF {"raw":[100,100,51,100]}

00:02:28.450 --> 00:02:31.570
<v Speaker 0>So this is an exercise which combines, uh, functional programming

NOTE CONF {"raw":[100,100,100,100,100,100,100,88,100,100]}

00:02:31.570 --> 00:02:32.560
<v Speaker 0>and computation and logic.

NOTE CONF {"raw":[100,100,100,100]}

00:02:32.560 --> 00:02:32.800
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:02:32.800 --> 00:02:34.000
<v Speaker 0>So it's a SQL calculus.

NOTE CONF {"raw":[100,100,100,71,100]}

00:02:34.000 --> 00:02:36.220
<v Speaker 0>You've learned this from Julian.

NOTE CONF {"raw":[100,100,100,100,96]}

00:02:37.090 --> 00:02:38.710
<v Speaker 0>And those are the rules.

NOTE CONF {"raw":[100,100,100,100,100]}

00:02:38.710 --> 00:02:41.410
<v Speaker 0>And you know how to do proofs using the rules.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:41.410 --> 00:02:45.730
<v Speaker 0>And here are two examples of doing proofs starting from

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:45.730 --> 00:02:48.580
<v Speaker 0>a sequence like this one here at the bottom.

NOTE CONF {"raw":[100,97,100,100,100,100,100,100,100]}

00:02:48.670 --> 00:02:49.720
<v Speaker 0>Whoops.

NOTE CONF {"raw":[71]}

00:02:50.380 --> 00:02:51.610
<v Speaker 0>Won't leave them out alone.

NOTE CONF {"raw":[100,54,72,91,97]}

00:02:51.610 --> 00:02:53.890
<v Speaker 0>Won't allow me to highlight that.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:02:53.890 --> 00:02:54.490
<v Speaker 0>Yes it will.

NOTE CONF {"raw":[52,84,85]}

00:02:54.490 --> 00:02:56.590
<v Speaker 0>Okay, so starting with a sequence like the one at

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:56.590 --> 00:03:00.130
<v Speaker 0>the bottom and then working upwards, applying the rules where

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:00.130 --> 00:03:00.910
<v Speaker 0>each rule.

NOTE CONF {"raw":[100,100]}

00:03:00.910 --> 00:03:02.920
<v Speaker 0>Here you can see which ones have been applied.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:03:02.920 --> 00:03:06.130
<v Speaker 0>And some of them, some of them have one, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,96,100]}

00:03:06.130 --> 00:03:07.060
<v Speaker 0>premise.

NOTE CONF {"raw":[100]}

00:03:07.060 --> 00:03:09.430
<v Speaker 0>And so you get a sort of straight line proof.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:09.430 --> 00:03:13.480
<v Speaker 0>And some of them have two premises like um, or

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,78,100]}

00:03:13.480 --> 00:03:14.710
<v Speaker 0>left here.

NOTE CONF {"raw":[100,100]}

00:03:15.010 --> 00:03:16.750
<v Speaker 0>Um, has two premises.

NOTE CONF {"raw":[100,100,100,100]}

00:03:17.020 --> 00:03:22.960
<v Speaker 0>That's this rule, uh, here, this one bottom left.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:03:22.960 --> 00:03:26.620
<v Speaker 0>And so the proof branches and at the end you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:26.620 --> 00:03:32.620
<v Speaker 0>get either no premises like this, this proof here, no

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:32.620 --> 00:03:37.390
<v Speaker 0>premises, uh, or you end up with, uh, some, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,93,100,100]}

00:03:37.390 --> 00:03:40.540
<v Speaker 0>premises which are so-called simple sequence, meaning that they don't

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:40.540 --> 00:03:42.730
<v Speaker 0>have any connections, connectives in them.

NOTE CONF {"raw":[100,100,95,100,100,100]}

00:03:42.730 --> 00:03:47.440
<v Speaker 0>And so here's, here's one and here is another one.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:47.440 --> 00:03:49.900
<v Speaker 0>And you can't take these any further because there's no

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:49.900 --> 00:03:54.520
<v Speaker 0>connectives to um, there's no connectives to, uh, take apart.

NOTE CONF {"raw":[100,100,100,100,100,100,100,73,100,98]}

00:03:54.520 --> 00:03:58.580
<v Speaker 0>And the immediate rule doesn't apply because the things on

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,92,100]}

00:03:58.580 --> 00:03:59.660
<v Speaker 0>the left and right are different.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:03:59.660 --> 00:04:01.880
<v Speaker 0>Okay, so you know this already.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:04:02.450 --> 00:04:04.580
<v Speaker 0>And what you're supposed to do with this exercise is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:04.580 --> 00:04:06.710
<v Speaker 0>to implement this in Haskell.

NOTE CONF {"raw":[100,100,100,100,100]}

00:04:07.940 --> 00:04:08.480
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:04:08.480 --> 00:04:12.230
<v Speaker 0>And so you're given representations of, uh, propositions in sequence.

NOTE CONF {"raw":[100,100,100,100,100,100,60,100,98,100]}

00:04:12.980 --> 00:04:17.750
<v Speaker 0>And your job is to implement a function.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:04:20.060 --> 00:04:23.780
<v Speaker 0>That takes a sequence and gives a list of sequence.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:23.780 --> 00:04:25.610
<v Speaker 0>So that's the sequence at the bottom.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:04:26.930 --> 00:04:28.460
<v Speaker 0>Could you stop talking please.

NOTE CONF {"raw":[100,100,100,100,100]}

00:04:30.800 --> 00:04:32.480
<v Speaker 0>This is the sequence at the bottom.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:04:33.260 --> 00:04:35.480
<v Speaker 0>And this is the and this is the list of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:35.480 --> 00:04:41.390
<v Speaker 0>sequence that are the assumptions, uh, the basic the simple

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:41.390 --> 00:04:46.730
<v Speaker 0>sequence that, uh, lead via that proof to that sequence.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:46.730 --> 00:04:47.030
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:04:47.030 --> 00:04:49.070
<v Speaker 0>So you are supposed to compute that.

NOTE CONF {"raw":[100,100,100,98,100,100,100]}

00:04:50.270 --> 00:04:52.880
<v Speaker 0>And uh, here are some examples of what it should

NOTE CONF {"raw":[100,82,100,100,100,100,100,100,100,100]}

00:04:52.880 --> 00:04:53.570
<v Speaker 0>do.

NOTE CONF {"raw":[100]}

00:04:53.900 --> 00:04:56.960
<v Speaker 0>Um, so you know, for the for the first proof

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:56.960 --> 00:04:59.810
<v Speaker 0>up that I showed you this one here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:05:01.130 --> 00:05:01.940
<v Speaker 0>Okay.

NOTE CONF {"raw":[86]}

00:05:02.150 --> 00:05:06.560
<v Speaker 0>Uh, the thing at the bottom that involves, uh, uh,

NOTE CONF {"raw":[60,100,100,100,100,100,100,100,96,100]}

00:05:06.560 --> 00:05:08.750
<v Speaker 0>and or of an end of an or with some

NOTE CONF {"raw":[100,100,100,100,68,100,100,100,100,100]}

00:05:08.750 --> 00:05:09.770
<v Speaker 0>negations.

NOTE CONF {"raw":[100]}

00:05:10.940 --> 00:05:15.650
<v Speaker 0>So, uh, that's this sequence here.

NOTE CONF {"raw":[100,100,100,100,73,100]}

00:05:15.650 --> 00:05:18.560
<v Speaker 0>And when you do the proof, you get the list

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:18.560 --> 00:05:23.390
<v Speaker 0>of no, uh, sequences, assumptions, which is, uh, because up

NOTE CONF {"raw":[100,98,100,73,100,100,100,88,100,100]}

00:05:23.390 --> 00:05:26.600
<v Speaker 0>at the top here, there are no, uh, assumptions required

NOTE CONF {"raw":[100,100,100,100,100,100,100,80,100,100]}

00:05:26.600 --> 00:05:27.770
<v Speaker 0>for this proof.

NOTE CONF {"raw":[100,100,100]}

00:05:27.800 --> 00:05:31.700
<v Speaker 0>You know, and for the other one, for the other

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:31.700 --> 00:05:32.450
<v Speaker 0>example.

NOTE CONF {"raw":[100]}

00:05:32.450 --> 00:05:32.750
<v Speaker 0>Sorry.

NOTE CONF {"raw":[99]}

00:05:32.750 --> 00:05:33.890
<v Speaker 0>I show it to you again.

NOTE CONF {"raw":[69,100,100,100,100,100]}

00:05:35.000 --> 00:05:37.370
<v Speaker 0>I mean, those of you who've read this carefully and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:37.370 --> 00:05:38.840
<v Speaker 0>thought about it, this is all.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:05:38.840 --> 00:05:39.830
<v Speaker 0>You know this already.

NOTE CONF {"raw":[100,100,100,100]}

00:05:39.830 --> 00:05:41.750
<v Speaker 0>But for those who haven't, I just wanted to make

NOTE CONF {"raw":[100,100,100,100,100,100,100,61,100,100]}

00:05:41.750 --> 00:05:43.340
<v Speaker 0>sure you know what I'm talking about.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:05:43.340 --> 00:05:47.930
<v Speaker 0>So for this proof, you end up with, uh, two

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,95,100]}

00:05:48.260 --> 00:05:50.780
<v Speaker 0>simple sequence at the top, which happened to be identical

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:50.780 --> 00:05:51.620
<v Speaker 0>in this case.

NOTE CONF {"raw":[100,100,100]}

00:05:51.620 --> 00:05:55.530
<v Speaker 0>In this particular proof, There's more than one possible proof.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:55.650 --> 00:06:00.630
<v Speaker 0>And so you end up with, um, you try this.

NOTE CONF {"raw":[100,100,100,100,100,100,85,100,100,100]}

00:06:00.630 --> 00:06:03.750
<v Speaker 0>And in my implementation, you end up with, uh, with

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:03.750 --> 00:06:05.910
<v Speaker 0>a list, with one simple sequence.

NOTE CONF {"raw":[100,100,100,100,100,91]}

00:06:06.420 --> 00:06:10.590
<v Speaker 0>Um, but, uh, it would also be correct if you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:10.590 --> 00:06:14.550
<v Speaker 0>have two that are, um, different representations of the same

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:14.550 --> 00:06:20.100
<v Speaker 0>1 or 2 that are identical, but, but duplicated.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,79]}

00:06:20.100 --> 00:06:20.670
<v Speaker 0>Okay.

NOTE CONF {"raw":[98]}

00:06:20.760 --> 00:06:24.720
<v Speaker 0>Um, because we're using unordered list to represent sets anyway,

NOTE CONF {"raw":[98,100,100,100,100,100,100,100,100,100]}

00:06:24.720 --> 00:06:25.950
<v Speaker 0>so that's what you're supposed to do.

NOTE CONF {"raw":[100,100,100,97,100,100,100]}

00:06:25.950 --> 00:06:29.670
<v Speaker 0>And um, there's some suggestions of how you might proceed,

NOTE CONF {"raw":[98,63,100,100,100,100,100,100,100,100]}

00:06:29.670 --> 00:06:31.530
<v Speaker 0>but you can do it differently if you wish.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:06:32.970 --> 00:06:35.550
<v Speaker 0>Um, okay.

NOTE CONF {"raw":[100,100]}

00:06:35.730 --> 00:06:39.750
<v Speaker 0>So that's the, um, the compulsory part of the project

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:39.750 --> 00:06:42.030
<v Speaker 0>is to implement this one function.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:06:42.030 --> 00:06:42.600
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:06:42.600 --> 00:06:46.320
<v Speaker 0>So this is not broken down into, into um, substeps

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,75,100]}

00:06:46.320 --> 00:06:48.750
<v Speaker 0>like it would be in a tutorial exercise.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:06:48.750 --> 00:06:51.480
<v Speaker 0>You just have to implement this one function.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:06:51.480 --> 00:06:53.280
<v Speaker 0>And that's the only thing that matters.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:06:55.410 --> 00:06:56.100
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:06:56.610 --> 00:07:01.830
<v Speaker 0>And then in the, uh, in the optional part, uh,

NOTE CONF {"raw":[100,100,100,100,72,100,100,100,100,93]}

00:07:01.830 --> 00:07:07.350
<v Speaker 0>add implication and by implication and there's the rules and

NOTE CONF {"raw":[58,100,100,100,100,100,100,100,100,100]}

00:07:07.350 --> 00:07:11.730
<v Speaker 0>there's an example, proof and uh, same function.

NOTE CONF {"raw":[100,100,100,100,97,86,100,100]}

00:07:11.730 --> 00:07:15.030
<v Speaker 0>But it should work with implication and by implication.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:07:16.740 --> 00:07:17.520
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:07:17.520 --> 00:07:20.790
<v Speaker 0>And then finally, if you, uh, if you're bored and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:20.790 --> 00:07:23.820
<v Speaker 0>want to challenge, you can try to do the challenge

NOTE CONF {"raw":[100,76,100,100,100,100,100,100,100,100]}

00:07:23.820 --> 00:07:26.520
<v Speaker 0>part, which is, um, trying to make the proofs as

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:26.520 --> 00:07:29.580
<v Speaker 0>short as possible and counting how many steps they take.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:31.020 --> 00:07:31.800
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:07:32.130 --> 00:07:35.640
<v Speaker 0>So that's the exercise or that's the project.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:07:35.640 --> 00:07:38.730
<v Speaker 0>And um, in order to make your lives easier and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:38.730 --> 00:07:41.460
<v Speaker 0>also to make your tutors lives easier and to make

NOTE CONF {"raw":[100,100,100,100,77,84,100,100,100,100]}

00:07:41.460 --> 00:07:45.480
<v Speaker 0>my, my life easier, um, I decided on this exercise.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:45.480 --> 00:07:48.300
<v Speaker 0>I give you, um, I give you the tests that

NOTE CONF {"raw":[100,100,100,92,100,100,100,100,100,100]}

00:07:48.300 --> 00:07:49.950
<v Speaker 0>are going to be used for marking.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:07:50.280 --> 00:07:51.420
<v Speaker 0>And so.

NOTE CONF {"raw":[100,100]}

00:07:51.430 --> 00:07:53.590
<v Speaker 0>and you can and you can run them before you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:53.590 --> 00:07:54.400
<v Speaker 0>submit.

NOTE CONF {"raw":[100]}

00:07:54.400 --> 00:07:57.070
<v Speaker 0>Or that is to say, when you submit, they will

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:57.070 --> 00:07:59.410
<v Speaker 0>run automatically and you can see what the results are.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:59.770 --> 00:08:00.370
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:08:00.370 --> 00:08:04.540
<v Speaker 0>So um, and they're broken up into categories.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:08:04.540 --> 00:08:07.840
<v Speaker 0>So if any of these tests work, any of these

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:07.840 --> 00:08:09.580
<v Speaker 0>tests work, you get one point.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:08:11.380 --> 00:08:13.930
<v Speaker 0>If all of these tests plus the next one work,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:13.930 --> 00:08:15.160
<v Speaker 0>you get two points.

NOTE CONF {"raw":[100,100,100,100]}

00:08:15.160 --> 00:08:18.370
<v Speaker 0>So these are these are these represent basic single rule

NOTE CONF {"raw":[100,100,100,100,97,100,100,100,100,100]}

00:08:18.370 --> 00:08:19.480
<v Speaker 0>applications.

NOTE CONF {"raw":[100]}

00:08:20.020 --> 00:08:22.720
<v Speaker 0>This one is a straight line.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:08:23.290 --> 00:08:24.820
<v Speaker 0>Uh proof no branching.

NOTE CONF {"raw":[90,100,100,100]}

00:08:26.770 --> 00:08:29.980
<v Speaker 0>Uh, if most or all of these work as well

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:29.980 --> 00:08:31.480
<v Speaker 0>then you get three points.

NOTE CONF {"raw":[100,100,100,100,100]}

00:08:32.830 --> 00:08:34.360
<v Speaker 0>These look complicated.

NOTE CONF {"raw":[100,100,100]}

00:08:34.360 --> 00:08:37.630
<v Speaker 0>Um, I generated them with quick check just to get

NOTE CONF {"raw":[100,100,100,100,100,87,87,100,100,100]}

00:08:37.630 --> 00:08:44.020
<v Speaker 0>some some things, some sequence that, you know, exercise different

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:44.020 --> 00:08:44.410
<v Speaker 0>rules.

NOTE CONF {"raw":[100]}

00:08:44.410 --> 00:08:46.510
<v Speaker 0>So, um, they don't prove anything very interesting.

NOTE CONF {"raw":[100,75,100,100,100,100,100,100]}

00:08:46.510 --> 00:08:49.000
<v Speaker 0>They're just, uh, they're just, um.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:08:50.950 --> 00:08:51.820
<v Speaker 0>Examples.

NOTE CONF {"raw":[100]}

00:08:51.820 --> 00:08:54.370
<v Speaker 0>I think the first two are the two examples that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:54.370 --> 00:08:57.910
<v Speaker 0>are actually in the higher up in the handout.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:08:58.690 --> 00:09:01.540
<v Speaker 0>And to get four points you also have to handle

NOTE CONF {"raw":[100,100,100,99,100,100,100,100,100,100]}

00:09:01.540 --> 00:09:01.960
<v Speaker 0>all these.

NOTE CONF {"raw":[100,100]}

00:09:01.960 --> 00:09:05.380
<v Speaker 0>And these handle these have some implication and by implication

NOTE CONF {"raw":[100,100,100,100,100,78,99,100,100,100]}

00:09:05.380 --> 00:09:06.520
<v Speaker 0>in them okay.

NOTE CONF {"raw":[100,100,100]}

00:09:06.520 --> 00:09:08.860
<v Speaker 0>And then there's some for the challenge questions.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:09:09.220 --> 00:09:11.470
<v Speaker 0>The challenge part if you if you want to try

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:11.470 --> 00:09:15.820
<v Speaker 0>that and I've included some proofs here with um, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,56,100]}

00:09:15.820 --> 00:09:18.430
<v Speaker 0>you know 491 steps.

NOTE CONF {"raw":[100,100,100,100]}

00:09:19.120 --> 00:09:22.150
<v Speaker 0>Um, so these proofs can get to be quite large.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:23.380 --> 00:09:25.540
<v Speaker 0>So that's the exercise.

NOTE CONF {"raw":[100,100,100,100]}

00:09:25.750 --> 00:09:27.370
<v Speaker 0>Who has questions?

NOTE CONF {"raw":[100,100,100]}

00:09:27.730 --> 00:09:28.210
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:09:31.120 --> 00:09:33.730
<v Speaker 0>Can you get.

NOTE CONF {"raw":[100,100,64]}

00:09:33.730 --> 00:09:34.510
<v Speaker 1>More than once?

NOTE CONF {"raw":[100,100,100]}

00:09:36.970 --> 00:09:38.140
<v Speaker 0>Sorry, I don't get that.

NOTE CONF {"raw":[100,100,100,100,100]}

00:09:42.310 --> 00:09:44.110
<v Speaker 2>Can you, um, can we submit it more than one?

NOTE CONF {"raw":[78,78,100,100,100,100,100,100,100,87]}

00:09:44.110 --> 00:09:44.980
<v Speaker 0>Well, can you submit more ones?

NOTE CONF {"raw":[51,100,100,99,98,99]}

00:09:44.980 --> 00:09:45.550
<v Speaker 0>Yeah, sure.

NOTE CONF {"raw":[100,100]}

00:09:45.790 --> 00:09:47.170
<v Speaker 0>Uh, yeah.

NOTE CONF {"raw":[100,100]}

00:09:47.170 --> 00:09:49.330
<v Speaker 0>You can can submit as many times as you want,

NOTE CONF {"raw":[100,68,100,100,100,100,100,100,100,100]}

00:09:49.330 --> 00:09:52.660
<v Speaker 0>and you're encouraged to do that in order to test

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:52.840 --> 00:09:55.000
<v Speaker 0>your program as you go.

NOTE CONF {"raw":[100,97,100,100,100]}

00:09:55.030 --> 00:09:55.630
<v Speaker 0>All right.

NOTE CONF {"raw":[92,92]}

00:09:55.630 --> 00:09:58.330
<v Speaker 0>So, um, you know, for example.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:09:58.660 --> 00:10:01.990
<v Speaker 0>So I suggest that you do, um, that one way

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:01.990 --> 00:10:05.440
<v Speaker 0>of proceeding is to implement the rules and then implement

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:05.440 --> 00:10:08.170
<v Speaker 0>your proof function that uses the implementation of the rules.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:08.170 --> 00:10:09.460
<v Speaker 0>It's kind of obvious that you're going to have to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:09.460 --> 00:10:10.540
<v Speaker 0>do that somehow.

NOTE CONF {"raw":[100,100,100]}

00:10:10.540 --> 00:10:11.020
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:10:11.020 --> 00:10:14.710
<v Speaker 0>And so once you've implemented the rules um, well you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:14.710 --> 00:10:17.230
<v Speaker 0>can't you can't get these tests to run until you've

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:17.230 --> 00:10:20.620
<v Speaker 0>also got a proof function because that's, that's, you know,

NOTE CONF {"raw":[100,100,97,97,100,100,100,100,100,100]}

00:10:20.620 --> 00:10:21.790
<v Speaker 0>part of the test.

NOTE CONF {"raw":[100,100,100,100]}

00:10:21.790 --> 00:10:25.240
<v Speaker 0>But, um, you could check that your rule implementations are

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:25.240 --> 00:10:25.930
<v Speaker 0>correct.

NOTE CONF {"raw":[100]}

00:10:26.500 --> 00:10:27.370
<v Speaker 0>Um, there.

NOTE CONF {"raw":[100,81]}

00:10:27.370 --> 00:10:27.850
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:10:27.850 --> 00:10:30.130
<v Speaker 0>So do that as much as you, as you wish.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:30.460 --> 00:10:33.190
<v Speaker 0>Um, and only the last one counts.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:10:34.450 --> 00:10:35.110
<v Speaker 0>Let's see.

NOTE CONF {"raw":[100,100]}

00:10:41.800 --> 00:10:43.090
<v Speaker 0>Sorry, it's not working.

NOTE CONF {"raw":[100,100,100,100]}

00:10:44.200 --> 00:10:46.750
<v Speaker 3>Is the whole project out of, uh, four marks?

NOTE CONF {"raw":[50,100,100,100,97,100,87,60,99]}

00:10:47.540 --> 00:10:48.350
<v Speaker 0>Yes.

NOTE CONF {"raw":[100]}

00:10:48.530 --> 00:10:49.130
<v Speaker 0>Yep.

NOTE CONF {"raw":[71]}

00:10:49.340 --> 00:10:49.880
<v Speaker 0>Yep.

NOTE CONF {"raw":[95]}

00:10:54.200 --> 00:10:55.160
<v Speaker 0>So, yeah.

NOTE CONF {"raw":[100,100]}

00:10:55.160 --> 00:10:58.130
<v Speaker 0>Uh, that's the that's I mean, I didn't want to

NOTE CONF {"raw":[99,100,100,100,100,100,100,100,100,100]}

00:10:58.130 --> 00:11:01.130
<v Speaker 0>I didn't want to give it a finer granularity than

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:01.130 --> 00:11:01.550
<v Speaker 0>that.

NOTE CONF {"raw":[100]}

00:11:01.550 --> 00:11:03.170
<v Speaker 0>Makes it harder to mark.

NOTE CONF {"raw":[100,100,100,100,100]}

00:11:03.560 --> 00:11:04.250
<v Speaker 0>Um, simply.

NOTE CONF {"raw":[100,100]}

00:11:04.250 --> 00:11:04.760
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:11:04.760 --> 00:11:05.450
<v Speaker 0>So.

NOTE CONF {"raw":[100]}

00:11:05.450 --> 00:11:06.530
<v Speaker 0>Oh, you do, you haven't.

NOTE CONF {"raw":[100,98,97,62,30]}

00:11:09.020 --> 00:11:09.950
<v Speaker 0>You want this back?

NOTE CONF {"raw":[100,100,100,100]}

00:11:09.950 --> 00:11:10.250
<v Speaker 0>No.

NOTE CONF {"raw":[100]}

00:11:10.250 --> 00:11:10.610
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:11:10.610 --> 00:11:11.060
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:11:11.060 --> 00:11:11.420
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:11:11.420 --> 00:11:12.110
<v Speaker 0>So, um.

NOTE CONF {"raw":[100,97]}

00:11:12.110 --> 00:11:12.530
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:11:12.710 --> 00:11:14.990
<v Speaker 0>1 to 4 or actually 0 to 4.

NOTE CONF {"raw":[100,100,100,87,100,100,100,100]}

00:11:14.990 --> 00:11:18.140
<v Speaker 0>And the result will be multiplied by five to give

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:18.140 --> 00:11:19.070
<v Speaker 0>you a percentage.

NOTE CONF {"raw":[100,100,100]}

00:11:20.510 --> 00:11:20.810
<v Speaker 0>Some.

NOTE CONF {"raw":[79]}

00:11:20.810 --> 00:11:21.800
<v Speaker 0>Somehow it's broken.

NOTE CONF {"raw":[100,100,100]}

00:11:21.800 --> 00:11:24.500
<v Speaker 0>I don't know, um, there's a switch inside, but, uh,

NOTE CONF {"raw":[100,100,100,86,100,100,100,100,100,60]}

00:11:24.500 --> 00:11:25.550
<v Speaker 0>can you just speak up if.

NOTE CONF {"raw":[100,100,100,100,100,80]}

00:11:25.550 --> 00:11:29.930
<v Speaker 4>There's something similar to the tutorial after this assessment?

NOTE CONF {"raw":[82,100,100,100,100,100,100,100,76]}

00:11:29.930 --> 00:11:30.380
<v Speaker 4>No, this.

NOTE CONF {"raw":[91,99]}

00:11:30.380 --> 00:11:30.650
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:11:30.650 --> 00:11:32.240
<v Speaker 0>So there's no tutorial following this.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:11:32.240 --> 00:11:34.790
<v Speaker 0>So you just submit it and you get a mark

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,76,100]}

00:11:34.790 --> 00:11:37.460
<v Speaker 0>and um, and that's it.

NOTE CONF {"raw":[100,100,100,100,100]}

00:11:37.850 --> 00:11:41.960
<v Speaker 0>Um, and by the way this is an exercise which,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:41.960 --> 00:11:42.440
<v Speaker 0>um.

NOTE CONF {"raw":[100]}

00:11:43.850 --> 00:11:44.210
<v Speaker 0>Hello.

NOTE CONF {"raw":[100]}

00:11:44.210 --> 00:11:44.750
<v Speaker 0>Hello.

NOTE CONF {"raw":[100]}

00:11:45.050 --> 00:11:46.970
<v Speaker 0>This works Okay.

NOTE CONF {"raw":[100,100,100]}

00:11:46.970 --> 00:11:48.140
<v Speaker 0>Maybe you had to talk louder.

NOTE CONF {"raw":[100,92,100,100,100,100]}

00:11:48.380 --> 00:11:48.680
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:11:51.500 --> 00:11:53.660
<v Speaker 0>Yeah, I was going to say this this this exercise,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:53.660 --> 00:11:56.900
<v Speaker 0>because it's a larger percentage of your mark.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:11:57.380 --> 00:12:03.170
<v Speaker 0>Um, the rules, the usual rules on extensions.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:12:03.170 --> 00:12:06.770
<v Speaker 0>And, uh, what's it called?

NOTE CONF {"raw":[100,100,100,100,100]}

00:12:08.390 --> 00:12:14.060
<v Speaker 0>Time adjustments for students with disabilities apply.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:12:14.810 --> 00:12:19.340
<v Speaker 0>Okay, so, um, so some students will be able to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:19.340 --> 00:12:23.240
<v Speaker 0>submit it later than the deadline, but, you know, according

NOTE CONF {"raw":[100,100,100,97,100,100,100,100,100,100]}

00:12:23.270 --> 00:12:24.860
<v Speaker 0>to the rules on those things.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:12:24.860 --> 00:12:27.200
<v Speaker 0>So I don't know if you're familiar, familiar with those

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:27.200 --> 00:12:31.340
<v Speaker 0>rules, but, um, if you're not the, um, the, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,98,100,100]}

00:12:31.910 --> 00:12:34.100
<v Speaker 0>student advisors will be able to help you.

NOTE CONF {"raw":[100,54,100,100,100,100,100,100]}

00:12:34.100 --> 00:12:35.420
<v Speaker 0>Okay, but you've got three weeks.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:12:35.420 --> 00:12:36.350
<v Speaker 0>I think it should be enough.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:12:36.350 --> 00:12:38.630
<v Speaker 0>It took me a day or less than a day.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:39.260 --> 00:12:42.200
<v Speaker 0>And by the way, I'll say my my solution is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:42.200 --> 00:12:43.910
<v Speaker 0>about 100 lines of code.

NOTE CONF {"raw":[100,98,100,100,100]}

00:12:44.930 --> 00:12:46.170
<v Speaker 0>Okay, but why don't you try anyway?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:12:46.170 --> 00:12:46.740
<v Speaker 1>It's fun.

NOTE CONF {"raw":[100,100]}

00:12:48.270 --> 00:12:48.510
<v Speaker 1>Hey.

NOTE CONF {"raw":[70]}

00:12:48.510 --> 00:12:48.900
<v Speaker 1>Hi.

NOTE CONF {"raw":[100]}

00:12:48.900 --> 00:12:49.530
<v Speaker 1>Yes.

NOTE CONF {"raw":[100]}

00:12:49.560 --> 00:12:52.410
<v Speaker 5>Is this, like, uh, is this project kind of a

NOTE CONF {"raw":[100,100,100,79,95,100,100,100,100,100]}

00:12:52.410 --> 00:12:56.040
<v Speaker 5>tutorial ten or is there going to be also a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:56.040 --> 00:12:56.790
<v Speaker 5>tutorial ten.

NOTE CONF {"raw":[100,100]}

00:12:57.150 --> 00:12:59.910
<v Speaker 0>There is a tutorial ten there's a there's tutorials eight,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:59.910 --> 00:13:00.630
<v Speaker 0>nine and ten.

NOTE CONF {"raw":[100,100,100]}

00:13:00.630 --> 00:13:01.110
<v Speaker 0>Yeah.

NOTE CONF {"raw":[49]}

00:13:01.290 --> 00:13:03.780
<v Speaker 0>Oh so this is, this is in addition to that

NOTE CONF {"raw":[85,100,100,100,100,100,100,100,100,100]}

00:13:03.780 --> 00:13:07.470
<v Speaker 0>we've, we've reduced a little bit the, the load of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:07.470 --> 00:13:08.460
<v Speaker 0>the tutorials.

NOTE CONF {"raw":[100,100]}

00:13:08.460 --> 00:13:11.430
<v Speaker 0>Um eight nine and ten to give you a little

NOTE CONF {"raw":[96,100,100,100,100,100,100,100,100,100]}

00:13:11.430 --> 00:13:12.390
<v Speaker 0>bit more time.

NOTE CONF {"raw":[100,100,100]}

00:13:12.810 --> 00:13:13.500
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:13:14.070 --> 00:13:14.670
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:13:14.670 --> 00:13:17.430
<v Speaker 0>So as I was saying that my, my solution, including

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:17.430 --> 00:13:22.980
<v Speaker 0>the, um, including the, uh, um, what's it called?

NOTE CONF {"raw":[100,100,100,100,92,65,100,100,100]}

00:13:22.980 --> 00:13:25.020
<v Speaker 0>Challenge part is 100 lines of code.

NOTE CONF {"raw":[100,100,100,92,100,100,100]}

00:13:25.020 --> 00:13:27.840
<v Speaker 0>So it's not a huge it's not a huge thing

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:27.840 --> 00:13:28.890
<v Speaker 0>that you have to write.

NOTE CONF {"raw":[100,100,100,100,100]}

00:13:29.160 --> 00:13:29.910
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:13:30.360 --> 00:13:33.810
<v Speaker 0>Um, any other questions?

NOTE CONF {"raw":[100,100,100,100]}

00:13:37.440 --> 00:13:38.070
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:13:38.280 --> 00:13:40.920
<v Speaker 0>Um, you don't have to actually produce code.

NOTE CONF {"raw":[100,100,100,100,100,100,100,55]}

00:13:40.920 --> 00:13:45.090
<v Speaker 0>You just have to produce the list of assumptions.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:13:45.090 --> 00:13:47.700
<v Speaker 0>Sorry, you don't have to produce I said code.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:13:47.700 --> 00:13:50.940
<v Speaker 0>You don't have to produce proofs, okay?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:13:50.940 --> 00:13:56.040
<v Speaker 0>You just produce the assumptions, the list of assumptions that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:56.040 --> 00:13:57.480
<v Speaker 0>appear at the top of the proof.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:13:57.480 --> 00:13:57.720
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:13:57.720 --> 00:13:59.610
<v Speaker 0>Of course, in order to do that, you have to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:59.610 --> 00:14:00.450
<v Speaker 0>do the proof.

NOTE CONF {"raw":[100,100,100]}

00:14:00.450 --> 00:14:05.820
<v Speaker 0>But there is no representation of proofs in Haskell here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:05.820 --> 00:14:06.150
<v Speaker 0>Okay?

NOTE CONF {"raw":[100]}

00:14:06.150 --> 00:14:08.340
<v Speaker 0>There's only representations of um.

NOTE CONF {"raw":[100,100,100,100,98]}

00:14:11.310 --> 00:14:15.330
<v Speaker 0>Of, um, propositions in sequence.

NOTE CONF {"raw":[100,100,100,100,100]}

00:14:15.330 --> 00:14:17.400
<v Speaker 0>I mean, if you wish you could represent proofs, but

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:17.400 --> 00:14:20.430
<v Speaker 0>it's not part of the exercise that you need to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:20.640 --> 00:14:22.860
<v Speaker 0>you need to do anybody else.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:14:23.430 --> 00:14:24.960
<v Speaker 0>Oh, okay.

NOTE CONF {"raw":[100,99]}

00:14:25.680 --> 00:14:26.970
<v Speaker 0>I hope it'll be interesting.

NOTE CONF {"raw":[76,100,58,100,100]}

00:14:28.020 --> 00:14:32.310
<v Speaker 0>Um, deadline last Friday of the of the semester.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:14:32.310 --> 00:14:37.260
<v Speaker 0>So I will now move on to the lecture.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:14:42.000 --> 00:14:44.500
<v Speaker 0>Which is, a commentary algorithms.

NOTE CONF {"raw":[100,100,100,100,96]}

00:14:44.500 --> 00:14:47.620
<v Speaker 0>And I did the first half of this already.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:14:48.220 --> 00:14:49.330
<v Speaker 0>Um, oops.

NOTE CONF {"raw":[100,87]}

00:14:50.110 --> 00:14:51.340
<v Speaker 0>So I'll just carry on.

NOTE CONF {"raw":[100,100,100,100,100]}

00:14:51.340 --> 00:14:51.910
<v Speaker 0>Okay.

NOTE CONF {"raw":[94]}

00:14:51.940 --> 00:14:55.330
<v Speaker 0>A few more problems I wanted to, to cover, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,87,100,100,100]}

00:14:55.330 --> 00:14:56.500
<v Speaker 0>in this lecture.

NOTE CONF {"raw":[100,100,100]}

00:14:56.830 --> 00:14:58.360
<v Speaker 0>Um, what time is it?

NOTE CONF {"raw":[100,100,100,100,100]}

00:14:59.680 --> 00:15:01.330
<v Speaker 0>Okay, so I've.

NOTE CONF {"raw":[100,100,100]}

00:15:01.330 --> 00:15:01.720
<v Speaker 1>Been.

NOTE CONF {"raw":[100]}

00:15:01.720 --> 00:15:04.150
<v Speaker 0>Talking about a bunch of combinatorial problems.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:15:04.150 --> 00:15:08.680
<v Speaker 0>Things like generating all the sublists of lists, the permutations

NOTE CONF {"raw":[100,100,100,100,100,93,100,100,100,100]}

00:15:08.680 --> 00:15:09.400
<v Speaker 0>of a list.

NOTE CONF {"raw":[100,96,100]}

00:15:09.580 --> 00:15:11.140
<v Speaker 0>All these problems with lists.

NOTE CONF {"raw":[100,100,100,100,100]}

00:15:11.140 --> 00:15:14.890
<v Speaker 0>And, um, the last one of these on lists is

NOTE CONF {"raw":[99,54,100,100,100,100,100,100,100,100]}

00:15:14.890 --> 00:15:18.970
<v Speaker 0>the problem of choosing um, um, k elements of a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:18.970 --> 00:15:19.660
<v Speaker 0>list of length.

NOTE CONF {"raw":[100,100,100]}

00:15:20.200 --> 00:15:25.570
<v Speaker 0>And I started off, uh, I introduced this last time

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:25.570 --> 00:15:27.130
<v Speaker 0>very briefly.

NOTE CONF {"raw":[100,100]}

00:15:27.970 --> 00:15:30.940
<v Speaker 0>Um, so we know that there are two to the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:30.940 --> 00:15:33.190
<v Speaker 0>n sub lists of a list.

NOTE CONF {"raw":[100,84,84,100,100,100]}

00:15:34.330 --> 00:15:37.630
<v Speaker 0>If you've got a list of length n, okay.

NOTE CONF {"raw":[100,97,95,100,100,100,100,100,100]}

00:15:37.870 --> 00:15:43.000
<v Speaker 0>Um, and um, but choosing choosing k elements from a

NOTE CONF {"raw":[100,100,100,100,100,100,67,100,100,100]}

00:15:43.000 --> 00:15:45.580
<v Speaker 0>list of length, and this is like all of the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:45.580 --> 00:15:48.550
<v Speaker 0>sublists of length k of a list.

NOTE CONF {"raw":[70,100,100,100,100,100,100]}

00:15:50.290 --> 00:15:50.740
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:15:50.740 --> 00:15:51.640
<v Speaker 0>So um.

NOTE CONF {"raw":[100,100]}

00:15:53.800 --> 00:16:00.400
<v Speaker 0>Sub lists uh, of uh, okay.

NOTE CONF {"raw":[90,90,100,100,100,100]}

00:16:00.400 --> 00:16:02.110
<v Speaker 0>Of length of length.

NOTE CONF {"raw":[100,100,100,100]}

00:16:02.110 --> 00:16:05.890
<v Speaker 0>Uh n so two to the n um.

NOTE CONF {"raw":[98,93,100,100,100,100,100,100]}

00:16:08.260 --> 00:16:08.710
<v Speaker 0>Uh.

NOTE CONF {"raw":[100]}

00:16:12.010 --> 00:16:14.320
<v Speaker 0>So this the choosing k elements.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:16:14.320 --> 00:16:17.050
<v Speaker 0>Um, it's, uh, there's a notation and it's written like

NOTE CONF {"raw":[100,100,92,100,100,100,100,100,100,100]}

00:16:17.050 --> 00:16:17.590
<v Speaker 0>this.

NOTE CONF {"raw":[100]}

00:16:17.590 --> 00:16:20.020
<v Speaker 0>And you may have seen this in mathematics or in,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:20.170 --> 00:16:22.090
<v Speaker 0>you know, or somewhere else.

NOTE CONF {"raw":[100,100,100,100,100]}

00:16:22.330 --> 00:16:23.950
<v Speaker 0>Um, this is um.

NOTE CONF {"raw":[100,100,100,100]}

00:16:28.210 --> 00:16:32.200
<v Speaker 0>Uh, a notation for this calculation.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:16:32.200 --> 00:16:36.700
<v Speaker 0>And, um, this is, this is pronounced n, choose and

NOTE CONF {"raw":[100,100,100,100,100,100,67,100,100,100]}

00:16:36.700 --> 00:16:40.480
<v Speaker 0>choose k and it's known as the binomial coefficient.

NOTE CONF {"raw":[100,100,100,92,100,100,100,100,100]}

00:16:40.480 --> 00:16:42.830
<v Speaker 0>And the idea is that, for example, if you take

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:43.280 --> 00:16:45.830
<v Speaker 0>x plus one to the fourth.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:16:45.950 --> 00:16:47.480
<v Speaker 0>The answer is um.

NOTE CONF {"raw":[100,100,100,100]}

00:16:49.940 --> 00:16:50.780
<v Speaker 1>With this.

NOTE CONF {"raw":[63,100]}

00:16:57.500 --> 00:16:58.100
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:16:58.100 --> 00:17:00.080
<v Speaker 0>And this um, the coefficients here.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:17:00.080 --> 00:17:02.150
<v Speaker 0>So this is one times x to the fourth, four

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,87]}

00:17:02.150 --> 00:17:04.520
<v Speaker 0>times x to the third and so forth.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:17:04.520 --> 00:17:07.490
<v Speaker 0>And so the one here is um.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:17:09.589 --> 00:17:12.920
<v Speaker 0>Is four choose for the four.

NOTE CONF {"raw":[97,56,98,100,100,92]}

00:17:12.920 --> 00:17:13.819
<v Speaker 0>Here is four.

NOTE CONF {"raw":[100,100,75]}

00:17:13.819 --> 00:17:15.110
<v Speaker 0>Choose three.

NOTE CONF {"raw":[100,100]}

00:17:15.110 --> 00:17:18.079
<v Speaker 0>This is um for choose two.

NOTE CONF {"raw":[100,100,100,52,100,100]}

00:17:18.079 --> 00:17:22.189
<v Speaker 0>This is for choose one and this is for choose

NOTE CONF {"raw":[100,100,95,100,100,100,100,100,94,100]}

00:17:22.189 --> 00:17:23.060
<v Speaker 0>zero.

NOTE CONF {"raw":[100]}

00:17:23.630 --> 00:17:28.220
<v Speaker 0>So the coefficient of the of the k th degree.

NOTE CONF {"raw":[100,100,100,100,100,100,100,75,75,98]}

00:17:29.120 --> 00:17:33.650
<v Speaker 0>Uh uh what are they called term.

NOTE CONF {"raw":[71,100,100,64,100,100,100]}

00:17:33.650 --> 00:17:37.160
<v Speaker 0>The case degree term of the polynomial is is calculated

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:37.160 --> 00:17:37.550
<v Speaker 0>this way.

NOTE CONF {"raw":[100,100]}

00:17:37.550 --> 00:17:40.160
<v Speaker 0>And that works for any for any, you know, not

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:40.160 --> 00:17:43.010
<v Speaker 0>just for X plus one to the fourth, but for

NOTE CONF {"raw":[100,100,100,100,100,100,100,90,100,100]}

00:17:43.010 --> 00:17:46.640
<v Speaker 0>other, um, other products.

NOTE CONF {"raw":[100,100,100,100]}

00:17:46.850 --> 00:17:50.780
<v Speaker 0>Okay, so, um, what's the number of these things that

NOTE CONF {"raw":[100,100,100,99,100,100,100,100,100,100]}

00:17:50.780 --> 00:17:56.030
<v Speaker 0>there are and here's a program to do it.

NOTE CONF {"raw":[100,100,100,73,100,100,100,100,100]}

00:17:56.030 --> 00:17:58.850
<v Speaker 0>So as I said, one program would be you, you,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,98,100]}

00:17:58.850 --> 00:18:02.480
<v Speaker 0>um, you calculate all the sublists of, um, of, of

NOTE CONF {"raw":[100,100,100,100,100,62,100,100,100,100]}

00:18:02.480 --> 00:18:04.460
<v Speaker 0>a list and there are two to the N of

NOTE CONF {"raw":[54,100,100,100,100,100,100,100,75,100]}

00:18:04.460 --> 00:18:04.820
<v Speaker 0>them.

NOTE CONF {"raw":[100]}

00:18:04.820 --> 00:18:06.650
<v Speaker 0>And then you filter the ones that are of length

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:06.650 --> 00:18:08.060
<v Speaker 0>k and you're done.

NOTE CONF {"raw":[100,100,100,100]}

00:18:08.180 --> 00:18:08.870
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:18:08.870 --> 00:18:13.100
<v Speaker 0>But, um, there's an awful lot more sublists of a

NOTE CONF {"raw":[100,100,100,100,100,100,100,71,100,97]}

00:18:13.100 --> 00:18:15.950
<v Speaker 0>list than there are the ones of length k.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:18:15.950 --> 00:18:20.270
<v Speaker 0>So this is kind of like the same, um, the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:20.270 --> 00:18:24.500
<v Speaker 0>same, uh, problem with the way of doing it, as

NOTE CONF {"raw":[100,100,100,100,97,100,100,100,100,100]}

00:18:24.500 --> 00:18:29.030
<v Speaker 0>I've mentioned with calculating permutations, by taking all of the,

NOTE CONF {"raw":[97,100,100,100,100,100,100,100,100,100]}

00:18:29.030 --> 00:18:33.110
<v Speaker 0>um, what was it, uh, the Cartesian product of a

NOTE CONF {"raw":[100,100,100,100,82,100,100,100,100,100]}

00:18:33.110 --> 00:18:36.200
<v Speaker 0>list with itself k times n times, and then filtering

NOTE CONF {"raw":[100,100,100,65,45,100,100,100,100,100]}

00:18:36.200 --> 00:18:38.090
<v Speaker 0>out the ones that don't have repetitions Petitions.

NOTE CONF {"raw":[100,100,100,100,100,100,100,75]}

00:18:38.450 --> 00:18:41.090
<v Speaker 0>Um, so, um, yeah.

NOTE CONF {"raw":[100,100,100,100]}

00:18:41.090 --> 00:18:42.830
<v Speaker 0>So that doesn't work so well.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:18:42.830 --> 00:18:45.290
<v Speaker 0>It functions, but it takes a long time.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:18:45.290 --> 00:18:47.270
<v Speaker 0>So here is another way to do it.

NOTE CONF {"raw":[100,95,95,100,100,100,100,100]}

00:18:47.270 --> 00:18:49.880
<v Speaker 0>And it's, it's it's based on this.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:18:49.880 --> 00:18:53.270
<v Speaker 0>It's again based on this idea that I mentioned for

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:53.270 --> 00:18:59.240
<v Speaker 0>um, for Sublists, where you start with a list X1X2

NOTE CONF {"raw":[100,100,81,100,100,100,100,98,100,100]}

00:18:59.240 --> 00:19:02.960
<v Speaker 0>and so forth, and you decide, um, for each one,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:03.230 --> 00:19:06.800
<v Speaker 0>um, should, should it go in or out to, um,

NOTE CONF {"raw":[100,99,100,96,100,100,100,100,100,95]}

00:19:06.800 --> 00:19:09.950
<v Speaker 0>to produce your, your I can't see.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:19:09.950 --> 00:19:10.610
<v Speaker 0>Thank you.

NOTE CONF {"raw":[100,100]}

00:19:13.730 --> 00:19:14.120
<v Speaker 0>Problem.

NOTE CONF {"raw":[98]}

00:19:14.120 --> 00:19:19.760
<v Speaker 0>My multimedia, um, presentation have to keep pushing buttons.

NOTE CONF {"raw":[100,90,100,100,100,100,100,100,100]}

00:19:19.760 --> 00:19:20.810
<v Speaker 0>Um, yeah.

NOTE CONF {"raw":[100,100]}

00:19:20.810 --> 00:19:22.880
<v Speaker 0>So for each one of these, you're deciding whether it's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:23.060 --> 00:19:23.990
<v Speaker 0>in or out.

NOTE CONF {"raw":[100,100,100]}

00:19:24.440 --> 00:19:27.230
<v Speaker 0>Um, and, and so this was the reason why for

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:27.230 --> 00:19:29.540
<v Speaker 0>the sub list, we ended up with, uh, two to

NOTE CONF {"raw":[100,62,62,100,100,100,100,100,100,100]}

00:19:29.540 --> 00:19:30.650
<v Speaker 0>the n choices.

NOTE CONF {"raw":[100,72,100]}

00:19:31.100 --> 00:19:33.560
<v Speaker 0>Um, so here we've got the same sort of situation,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:33.560 --> 00:19:35.750
<v Speaker 0>except where we've got the limit of K, which makes

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:35.750 --> 00:19:38.040
<v Speaker 0>it a little more complicated And so you end up

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:38.040 --> 00:19:42.000
<v Speaker 0>with this with this code here okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:19:42.000 --> 00:19:44.460
<v Speaker 0>So choose K of a list.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:19:44.460 --> 00:19:46.290
<v Speaker 0>And the list is of length n.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:19:46.320 --> 00:19:48.840
<v Speaker 0>Here's the calculation of n being the length of that

NOTE CONF {"raw":[97,100,100,100,100,100,100,100,100,100]}

00:19:48.840 --> 00:19:50.190
<v Speaker 0>list okay.

NOTE CONF {"raw":[100,100]}

00:19:50.190 --> 00:19:51.900
<v Speaker 0>And you've got two base cases.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:19:51.900 --> 00:19:57.300
<v Speaker 0>If k is zero then there's only one way of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:57.300 --> 00:19:58.830
<v Speaker 0>of of of doing that.

NOTE CONF {"raw":[100,100,100,100,100]}

00:19:58.830 --> 00:20:00.150
<v Speaker 0>And that's the empty list.

NOTE CONF {"raw":[100,100,100,100,100]}

00:20:00.150 --> 00:20:02.460
<v Speaker 0>And if k is n there's only one way of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:02.460 --> 00:20:02.940
<v Speaker 0>doing that.

NOTE CONF {"raw":[100,100]}

00:20:02.940 --> 00:20:04.170
<v Speaker 0>And it's the whole list.

NOTE CONF {"raw":[100,100,100,100,100]}

00:20:06.150 --> 00:20:08.490
<v Speaker 0>And the interesting cases where k is in between those

NOTE CONF {"raw":[100,100,100,95,100,100,100,100,100,100]}

00:20:08.490 --> 00:20:09.480
<v Speaker 0>two extremes.

NOTE CONF {"raw":[100,100]}

00:20:09.810 --> 00:20:13.290
<v Speaker 0>And here you've got the, the idea of, you know,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:13.470 --> 00:20:15.300
<v Speaker 0>um, to include.

NOTE CONF {"raw":[100,58,100]}

00:20:16.170 --> 00:20:18.780
<v Speaker 0>So in this case you're talking about an element X

NOTE CONF {"raw":[100,100,100,100,55,100,100,100,98,100]}

00:20:18.780 --> 00:20:22.560
<v Speaker 0>here somewhere and you're deciding whether it's in or out.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:24.240 --> 00:20:24.450
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:20:24.450 --> 00:20:28.080
<v Speaker 0>This is the element which is um which is x

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:28.260 --> 00:20:29.010
<v Speaker 0>here.

NOTE CONF {"raw":[100]}

00:20:31.140 --> 00:20:31.650
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:20:31.650 --> 00:20:35.250
<v Speaker 0>So you can choose to, to leave it out.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:20:37.140 --> 00:20:39.780
<v Speaker 0>And then you're talking about all the ways of choosing

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:39.780 --> 00:20:42.240
<v Speaker 0>K from all the other elements in the list.

NOTE CONF {"raw":[96,100,100,100,100,100,100,100,100]}

00:20:42.480 --> 00:20:42.840
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:20:42.840 --> 00:20:45.690
<v Speaker 0>So that's that's this part.

NOTE CONF {"raw":[100,100,100,100,100]}

00:20:47.310 --> 00:20:49.140
<v Speaker 0>Or you can choose to put it in.

NOTE CONF {"raw":[100,100,88,100,100,100,100,100]}

00:20:50.100 --> 00:20:53.310
<v Speaker 0>And that's the other part here okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:20:53.310 --> 00:20:57.780
<v Speaker 0>But you can only put it in if the rest

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:58.260 --> 00:21:01.410
<v Speaker 0>of the of the lists that you're putting it into

NOTE CONF {"raw":[100,100,100,100,57,100,100,100,100,100]}

00:21:01.440 --> 00:21:03.870
<v Speaker 0>have k minus one elements.

NOTE CONF {"raw":[100,100,100,100,100]}

00:21:03.900 --> 00:21:04.320
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:21:04.320 --> 00:21:06.600
<v Speaker 0>So the recursive call here.

NOTE CONF {"raw":[100,100,100,100,100]}

00:21:06.600 --> 00:21:09.210
<v Speaker 0>So the first call there was with choose k.

NOTE CONF {"raw":[100,100,70,95,100,100,100,100,100]}

00:21:09.210 --> 00:21:10.830
<v Speaker 0>So k doesn't change.

NOTE CONF {"raw":[100,100,100,100]}

00:21:11.400 --> 00:21:14.130
<v Speaker 0>Uh x is of course is the tail.

NOTE CONF {"raw":[100,98,100,100,100,100,100,99]}

00:21:14.130 --> 00:21:15.810
<v Speaker 0>Uh here it changes.

NOTE CONF {"raw":[66,100,100,100]}

00:21:15.900 --> 00:21:17.190
<v Speaker 0>You need k minus one.

NOTE CONF {"raw":[100,100,100,100,100]}

00:21:17.190 --> 00:21:21.030
<v Speaker 0>So you're you're you're taking uh yeah.

NOTE CONF {"raw":[100,57,78,90,100,100,100]}

00:21:21.030 --> 00:21:25.890
<v Speaker 0>Choose for a smaller number of elements okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:21:26.250 --> 00:21:30.060
<v Speaker 0>So this is a little more complicated than the sublists

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,96]}

00:21:30.060 --> 00:21:33.150
<v Speaker 0>but um similar idea okay.

NOTE CONF {"raw":[100,90,100,100,100]}

00:21:33.150 --> 00:21:34.930
<v Speaker 0>And you can see, you can see that it works

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:34.930 --> 00:21:35.440
<v Speaker 0>here.

NOTE CONF {"raw":[100]}

00:21:35.500 --> 00:21:37.630
<v Speaker 0>Um, so I brought my laptop, but I forgot the

NOTE CONF {"raw":[77,100,100,100,100,100,100,100,100,100]}

00:21:37.630 --> 00:21:40.030
<v Speaker 0>adaptor, so I can't show you the programs running today.

NOTE CONF {"raw":[70,100,100,100,100,100,100,98,100,100]}

00:21:40.030 --> 00:21:41.500
<v Speaker 0>But they're there.

NOTE CONF {"raw":[100,64,83]}

00:21:41.530 --> 00:21:43.360
<v Speaker 0>They're just what it says on the slide here.

NOTE CONF {"raw":[66,100,100,100,100,100,85,100,100]}

00:21:43.360 --> 00:21:47.650
<v Speaker 0>Okay, so so for example, choosing choose three elements from

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:47.650 --> 00:21:51.460
<v Speaker 0>this list of of of of five letters, you get

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:51.460 --> 00:21:53.440
<v Speaker 0>these ten choices okay.

NOTE CONF {"raw":[100,100,100,100]}

00:21:53.440 --> 00:21:55.780
<v Speaker 0>Because why why ten.

NOTE CONF {"raw":[100,96,96,100]}

00:21:58.600 --> 00:22:03.340
<v Speaker 0>Um, because uh five choose three is equal to five

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:03.340 --> 00:22:09.910
<v Speaker 0>factorial over three factorial times two factorial, which is um.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:11.110 --> 00:22:13.150
<v Speaker 0>And let's see what's, what's.

NOTE CONF {"raw":[92,100,100,100,70]}

00:22:13.330 --> 00:22:19.150
<v Speaker 0>Yeah, it's, it's 120 divided by six times two okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:25.930 --> 00:22:29.770
<v Speaker 0>Okay I'm going to skip the slide.

NOTE CONF {"raw":[100,100,100,100,100,57,100]}

00:22:29.770 --> 00:22:32.740
<v Speaker 0>This is just all the properties that this thing satisfies.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:33.490 --> 00:22:33.910
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:22:34.630 --> 00:22:35.890
<v Speaker 0>And it works.

NOTE CONF {"raw":[100,100,100]}

00:22:38.260 --> 00:22:40.060
<v Speaker 0>And, um, let me see.

NOTE CONF {"raw":[100,100,100,100,100]}

00:22:40.060 --> 00:22:41.410
<v Speaker 0>How much time do I have?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:22:43.210 --> 00:22:44.770
<v Speaker 0>A bit worried about running out of time.

NOTE CONF {"raw":[51,83,100,100,100,100,100,100]}

00:22:44.800 --> 00:22:45.130
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:22:57.610 --> 00:22:58.180
<v Speaker 0>I'll just.

NOTE CONF {"raw":[91,100]}

00:22:58.180 --> 00:22:58.720
<v Speaker 0>I'll just.

NOTE CONF {"raw":[100,100]}

00:22:58.720 --> 00:23:00.580
<v Speaker 0>I think I'll just breeze through this.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:23:00.580 --> 00:23:01.270
<v Speaker 0>This one.

NOTE CONF {"raw":[100,100]}

00:23:01.270 --> 00:23:03.010
<v Speaker 0>So this is now a problem.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:23:03.010 --> 00:23:05.050
<v Speaker 0>That's about numbers rather than lists.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:23:05.050 --> 00:23:06.640
<v Speaker 0>Although it involves lists as well.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:23:06.640 --> 00:23:10.750
<v Speaker 0>But, um, I'll just say this is about, um, the,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:10.750 --> 00:23:14.920
<v Speaker 0>the problem of giving a number, given a number, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:14.920 --> 00:23:18.280
<v Speaker 0>all of the ways, uh, all of the lists of

NOTE CONF {"raw":[100,100,100,100,55,100,100,100,100,100]}

00:23:18.280 --> 00:23:20.470
<v Speaker 0>numbers that add up to that number.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:23:20.770 --> 00:23:21.490
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:23:21.490 --> 00:23:24.190
<v Speaker 0>So, um, for example, it's called partitions.

NOTE CONF {"raw":[100,86,100,100,100,100,100]}

00:23:24.190 --> 00:23:26.680
<v Speaker 0>So the partitions of five for example.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:23:26.830 --> 00:23:32.720
<v Speaker 0>Uh 111111 or sorry 1111 1 or one one, one

NOTE CONF {"raw":[90,100,100,100,100,100,100,100,100,100]}

00:23:32.720 --> 00:23:36.740
<v Speaker 0>two, or for example, two and 3 or 5 itself

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:36.740 --> 00:23:37.400
<v Speaker 0>and so forth.

NOTE CONF {"raw":[100,100,100]}

00:23:37.400 --> 00:23:37.700
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:23:37.700 --> 00:23:40.340
<v Speaker 0>So the um, there's a.

NOTE CONF {"raw":[100,100,98,100,100]}

00:23:44.840 --> 00:23:46.490
<v Speaker 0>I'm not going to I'm not going to go through

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:46.490 --> 00:23:48.650
<v Speaker 0>this in the interest of time because I want to

NOTE CONF {"raw":[100,100,100,95,100,100,100,100,100,100]}

00:23:48.650 --> 00:23:49.520
<v Speaker 0>get to the end.

NOTE CONF {"raw":[100,100,100,100]}

00:23:49.880 --> 00:23:52.700
<v Speaker 0>Um, uh, because the last problem is the only one

NOTE CONF {"raw":[100,97,100,100,100,100,100,100,100,100]}

00:23:52.700 --> 00:23:56.180
<v Speaker 0>that doesn't involve, um, lists of numbers and things, and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:56.180 --> 00:23:58.220
<v Speaker 0>I think it's worth getting that far.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:23:58.250 --> 00:23:58.670
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:23:58.670 --> 00:24:02.780
<v Speaker 0>But, um, so again, there's a fairly simple program that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:02.780 --> 00:24:03.650
<v Speaker 0>does this.

NOTE CONF {"raw":[100,100]}

00:24:03.650 --> 00:24:06.740
<v Speaker 0>All of these programs, they're, they're sort of combinations of

NOTE CONF {"raw":[100,100,100,100,95,100,100,100,100,100]}

00:24:06.740 --> 00:24:12.830
<v Speaker 0>um comprehension and um, and um, recursion.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:24:13.340 --> 00:24:13.610
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:24:13.610 --> 00:24:15.050
<v Speaker 0>Here's the recursive call.

NOTE CONF {"raw":[100,100,100,100]}

00:24:15.290 --> 00:24:19.130
<v Speaker 0>Um, that's a really powerful combination.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:24:19.610 --> 00:24:23.510
<v Speaker 0>Um, to, to use those two things together so you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:23.510 --> 00:24:26.180
<v Speaker 0>can write very short programs that do that do complicated

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:26.180 --> 00:24:26.840
<v Speaker 0>things.

NOTE CONF {"raw":[100]}

00:24:27.410 --> 00:24:27.890
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:24:27.890 --> 00:24:29.240
<v Speaker 0>So I'm not going to I'm not going to talk

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:29.240 --> 00:24:32.180
<v Speaker 0>about this, but, um, it's covered in the textbook.

NOTE CONF {"raw":[100,100,100,86,100,100,100,100,100]}

00:24:32.180 --> 00:24:36.110
<v Speaker 0>And you can you can read this, um, afterwards if

NOTE CONF {"raw":[100,100,100,100,100,100,100,89,100,100]}

00:24:36.110 --> 00:24:36.830
<v Speaker 0>you want.

NOTE CONF {"raw":[100,100]}

00:24:37.160 --> 00:24:37.910
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:24:38.300 --> 00:24:39.980
<v Speaker 0>Any questions so far?

NOTE CONF {"raw":[100,100,100,100]}

00:24:40.640 --> 00:24:41.510
<v Speaker 0>No.

NOTE CONF {"raw":[100]}

00:24:42.230 --> 00:24:43.100
<v Speaker 0>Right.

NOTE CONF {"raw":[98]}

00:24:43.940 --> 00:24:44.690
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:24:45.080 --> 00:24:45.950
<v Speaker 0>So the next.

NOTE CONF {"raw":[100,100,100]}

00:24:45.950 --> 00:24:46.490
<v Speaker 0>The next one.

NOTE CONF {"raw":[100,100,100]}

00:24:46.490 --> 00:24:49.490
<v Speaker 0>This is the last one that that, uh, well, it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,74]}

00:24:49.490 --> 00:24:50.960
<v Speaker 0>involves lists and things.

NOTE CONF {"raw":[100,100,100,100]}

00:24:51.350 --> 00:24:52.160
<v Speaker 0>Uh, or.

NOTE CONF {"raw":[100,100]}

00:24:52.160 --> 00:24:55.340
<v Speaker 0>Well, pretty much anyway.

NOTE CONF {"raw":[100,100,100,90]}

00:24:55.460 --> 00:24:58.070
<v Speaker 0>Um, so so this is a historical problem.

NOTE CONF {"raw":[98,100,100,100,100,100,100,100]}

00:24:58.370 --> 00:25:02.000
<v Speaker 0>Um, so, uh, a long time ago, you went into

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:02.000 --> 00:25:05.180
<v Speaker 0>a shop and you wanted to buy something, and and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:05.180 --> 00:25:07.910
<v Speaker 0>it had a price, and you gave them some money,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:07.910 --> 00:25:11.780
<v Speaker 0>and, um, and they had to give you change because

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:11.780 --> 00:25:13.610
<v Speaker 0>the money you gave them might be more than the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:13.610 --> 00:25:14.150
<v Speaker 0>price.

NOTE CONF {"raw":[100]}

00:25:14.150 --> 00:25:14.780
<v Speaker 0>Nowadays.

NOTE CONF {"raw":[100]}

00:25:14.780 --> 00:25:17.480
<v Speaker 0>You give them a credit, you just tap your credit

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:17.480 --> 00:25:18.260
<v Speaker 0>card and you're done.

NOTE CONF {"raw":[100,100,100,100]}

00:25:18.260 --> 00:25:18.620
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:25:18.620 --> 00:25:21.110
<v Speaker 0>But in the days, I mean, there are still people

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:21.110 --> 00:25:22.370
<v Speaker 0>who pay with cash.

NOTE CONF {"raw":[100,100,100,100]}

00:25:22.370 --> 00:25:23.600
<v Speaker 0>Maybe some of you.

NOTE CONF {"raw":[100,100,100,100]}

00:25:23.600 --> 00:25:26.030
<v Speaker 0>I don't pay any cash any more myself.

NOTE CONF {"raw":[100,100,100,100,100,58,58,100]}

00:25:26.030 --> 00:25:31.050
<v Speaker 0>But, um, so it's not usually necessary anymore to do

NOTE CONF {"raw":[100,100,100,100,100,100,100,85,100,100]}

00:25:31.050 --> 00:25:31.950
<v Speaker 0>this problem.

NOTE CONF {"raw":[100,100]}

00:25:31.950 --> 00:25:32.340
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:25:32.340 --> 00:25:36.720
<v Speaker 0>But the the problem is the problem here that that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:36.720 --> 00:25:41.730
<v Speaker 0>is handled by this algorithm is if you've got a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:41.730 --> 00:25:44.310
<v Speaker 0>sum of money that you have to give as change,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:44.310 --> 00:25:47.760
<v Speaker 0>okay, you pay, you pay £10 and you have to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:48.120 --> 00:25:51.870
<v Speaker 0>um, and the thing cost, uh, you know, £8, uh,

NOTE CONF {"raw":[81,100,100,100,100,97,100,100,100,97]}

00:25:51.870 --> 00:25:54.780
<v Speaker 0>97 and so you have to give £1 and three

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,76,100]}

00:25:54.780 --> 00:25:55.920
<v Speaker 0>as change.

NOTE CONF {"raw":[100,100]}

00:25:55.920 --> 00:25:58.770
<v Speaker 0>And so how do you, how do you give £1

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:58.770 --> 00:26:01.800
<v Speaker 0>and three and change if in your cash register you

NOTE CONF {"raw":[100,100,92,100,100,100,100,100,100,100]}

00:26:01.800 --> 00:26:06.180
<v Speaker 0>only have, um, you know, uh, three £0.20 pieces and

NOTE CONF {"raw":[100,100,100,100,100,64,100,51,100,100]}

00:26:06.180 --> 00:26:09.060
<v Speaker 0>a bunch of ten pieces and some £5 and some

NOTE CONF {"raw":[100,100,100,100,100,100,100,94,100,100]}

00:26:09.060 --> 00:26:10.200
<v Speaker 0>two P's and so forth.

NOTE CONF {"raw":[100,70,100,100,100]}

00:26:10.200 --> 00:26:10.620
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:26:10.620 --> 00:26:13.980
<v Speaker 0>So what are the possible choices of ways of combining

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:13.980 --> 00:26:16.620
<v Speaker 0>those coins to make a certain amount of money?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:26:16.770 --> 00:26:17.490
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:26:18.630 --> 00:26:20.580
<v Speaker 0>So that's what this is solving.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:26:27.750 --> 00:26:30.600
<v Speaker 0>Does anybody here carry cash anymore?

NOTE CONF {"raw":[100,100,100,100,100,79]}

00:26:30.600 --> 00:26:30.960
<v Speaker 0>Oh, yeah.

NOTE CONF {"raw":[100,100]}

00:26:30.960 --> 00:26:31.200
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:26:31.200 --> 00:26:31.620
<v Speaker 0>Lots of you.

NOTE CONF {"raw":[100,100,100]}

00:26:31.620 --> 00:26:35.370
<v Speaker 0>Okay, I don't I was in a holiday on a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:35.370 --> 00:26:38.220
<v Speaker 0>holiday in Sweden a couple of years ago for two

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:38.220 --> 00:26:40.560
<v Speaker 0>weeks, and I didn't have to use cash one single

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:40.560 --> 00:26:40.860
<v Speaker 0>time.

NOTE CONF {"raw":[100]}

00:26:40.860 --> 00:26:41.580
<v Speaker 0>They're going to.

NOTE CONF {"raw":[100,100,100]}

00:26:41.610 --> 00:26:44.400
<v Speaker 0>They're talking about abolishing cash in Sweden.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:26:44.940 --> 00:26:45.210
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:26:49.050 --> 00:26:53.280
<v Speaker 0>Okay, so so we've got to we've got an amount

NOTE CONF {"raw":[100,100,100,100,100,58,100,100,100,100]}

00:26:53.280 --> 00:26:54.900
<v Speaker 0>of money we want to find change for.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:26:54.900 --> 00:27:00.660
<v Speaker 0>I've to sort of make this a little bit understandable.

NOTE CONF {"raw":[99,100,100,100,100,100,100,100,100,100]}

00:27:00.660 --> 00:27:05.280
<v Speaker 0>So I've used uh type synonyms total and coin for

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,96,100]}

00:27:05.280 --> 00:27:05.700
<v Speaker 0>integer.

NOTE CONF {"raw":[81]}

00:27:05.700 --> 00:27:07.680
<v Speaker 0>So we've got a total amount of money that we

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:07.680 --> 00:27:09.360
<v Speaker 0>want to find change for.

NOTE CONF {"raw":[100,100,100,100,100]}

00:27:09.360 --> 00:27:11.340
<v Speaker 0>And we've got a list of coins.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:27:11.340 --> 00:27:12.930
<v Speaker 0>So these are the coins that are in the cash

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:12.930 --> 00:27:13.650
<v Speaker 0>register.

NOTE CONF {"raw":[100]}

00:27:13.950 --> 00:27:17.190
<v Speaker 0>And we want to uh we want to produce all

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:17.190 --> 00:27:21.570
<v Speaker 0>the ways of using those coins to make exactly, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,70]}

00:27:21.570 --> 00:27:23.700
<v Speaker 0>that amount of money.

NOTE CONF {"raw":[100,100,100,100]}

00:27:24.630 --> 00:27:25.110
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:27:25.110 --> 00:27:27.820
<v Speaker 0>An example is down here at the bottom here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:27:27.820 --> 00:27:30.520
<v Speaker 0>So if you want to make change for £0.30 and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,91,100]}

00:27:30.520 --> 00:27:32.740
<v Speaker 0>what you've got is this list of coins.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:27:34.810 --> 00:27:35.620
<v Speaker 0>Right here.

NOTE CONF {"raw":[100,100]}

00:27:35.650 --> 00:27:36.130
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:27:36.130 --> 00:27:39.580
<v Speaker 0>Then there are whoops three ways of doing that.

NOTE CONF {"raw":[100,100,100,58,100,100,100,100,100]}

00:27:40.030 --> 00:27:43.330
<v Speaker 0>For example two fives and two tens okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,89]}

00:27:45.070 --> 00:27:48.760
<v Speaker 0>Um and here's an algorithm for doing that.

NOTE CONF {"raw":[100,100,55,100,100,100,100,100]}

00:27:48.910 --> 00:27:51.790
<v Speaker 0>Um, so a little bit more complicated.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:27:54.100 --> 00:27:54.490
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:27:56.560 --> 00:27:59.410
<v Speaker 0>The first thing it does is sort the, the coins

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:59.410 --> 00:28:03.040
<v Speaker 0>into, into ascending order, okay.

NOTE CONF {"raw":[100,100,100,100,100]}

00:28:03.040 --> 00:28:07.900
<v Speaker 0>Because that's required by this, by this helper function.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:28:07.900 --> 00:28:08.350
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:28:08.350 --> 00:28:09.760
<v Speaker 0>So uh.

NOTE CONF {"raw":[100,100]}

00:28:13.420 --> 00:28:17.830
<v Speaker 0>And it has to do partly with um, well, let's

NOTE CONF {"raw":[83,100,100,100,100,100,100,100,100,100]}

00:28:17.830 --> 00:28:18.550
<v Speaker 0>just carry on here.

NOTE CONF {"raw":[100,100,100,100]}

00:28:18.550 --> 00:28:19.000
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:28:19.000 --> 00:28:22.360
<v Speaker 0>So, um, if we want to make change for zero,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:22.390 --> 00:28:24.040
<v Speaker 0>it doesn't matter what coins we have.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:28:24.040 --> 00:28:25.240
<v Speaker 0>There's only one way to do that.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:28:25.240 --> 00:28:26.890
<v Speaker 0>And it's the empty list of coins.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:28:26.920 --> 00:28:29.740
<v Speaker 0>If we want to make change for any other number.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:30.490 --> 00:28:32.110
<v Speaker 0>So it's greater than zero.

NOTE CONF {"raw":[100,100,100,100,100]}

00:28:32.140 --> 00:28:32.620
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:28:32.620 --> 00:28:33.490
<v Speaker 0>Then there's.

NOTE CONF {"raw":[100,100]}

00:28:33.580 --> 00:28:35.320
<v Speaker 0>Here's a here's a list of all the ways to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:35.320 --> 00:28:35.950
<v Speaker 0>do it.

NOTE CONF {"raw":[100,100]}

00:28:37.630 --> 00:28:41.350
<v Speaker 0>And it uses this function splits which I which I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:41.650 --> 00:28:42.820
<v Speaker 0>defined last time.

NOTE CONF {"raw":[100,100,100]}

00:28:42.820 --> 00:28:45.220
<v Speaker 0>So splits is given a list.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:28:45.220 --> 00:28:48.490
<v Speaker 0>It's all the ways of splitting it into one value

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:48.490 --> 00:28:51.340
<v Speaker 0>from the list and everything else in the list.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:28:51.340 --> 00:28:55.480
<v Speaker 0>So, you know, uh, here's the list, you know, so

NOTE CONF {"raw":[100,100,100,90,100,100,100,100,100,100]}

00:28:55.750 --> 00:28:59.140
<v Speaker 0>item three and everything else, or item seven and everything

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:59.140 --> 00:28:59.650
<v Speaker 0>else.

NOTE CONF {"raw":[100]}

00:28:59.650 --> 00:29:00.220
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:29:00.220 --> 00:29:02.860
<v Speaker 0>So that's what splits give you is a list of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:02.860 --> 00:29:04.450
<v Speaker 0>all those possibilities.

NOTE CONF {"raw":[100,100,100]}

00:29:05.140 --> 00:29:09.790
<v Speaker 0>And um, we need to ensure that they only occur

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:09.790 --> 00:29:12.070
<v Speaker 0>once each one of these only occurs once.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:29:12.070 --> 00:29:15.400
<v Speaker 0>And the reason for that is to, um, is to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:15.400 --> 00:29:18.520
<v Speaker 0>avoid getting, um, repetitions in here.

NOTE CONF {"raw":[100,100,63,100,100,100]}

00:29:18.820 --> 00:29:22.720
<v Speaker 0>Um, exactly the same thing, um, more than once.

NOTE CONF {"raw":[100,100,100,100,100,96,100,100,100]}

00:29:22.870 --> 00:29:26.920
<v Speaker 0>Um, corresponding to, um, you know, things like I make

NOTE CONF {"raw":[93,100,100,100,100,100,100,100,100,100]}

00:29:26.920 --> 00:29:28.120
<v Speaker 0>change for 30.

NOTE CONF {"raw":[100,100,100]}

00:29:28.450 --> 00:29:28.690
<v Speaker 0>Uh.

NOTE CONF {"raw":[100]}

00:29:29.710 --> 00:29:30.730
<v Speaker 0>Let's see.

NOTE CONF {"raw":[100,100]}

00:29:30.730 --> 00:29:31.210
<v Speaker 0>Oh, this.

NOTE CONF {"raw":[97,92]}

00:29:31.210 --> 00:29:31.510
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:29:31.510 --> 00:29:34.780
<v Speaker 0>So this last one, if I didn't have that, then

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:34.780 --> 00:29:37.270
<v Speaker 0>here I would have two copies of this.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:29:38.170 --> 00:29:39.010
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:29:39.010 --> 00:29:44.410
<v Speaker 0>Uh, corresponding to, um, the making change with this ten

NOTE CONF {"raw":[97,100,100,100,100,100,100,100,100,100]}

00:29:44.620 --> 00:29:48.070
<v Speaker 0>piece and the 20 piece or this ten piece and

NOTE CONF {"raw":[100,96,100,100,100,100,100,100,100,100]}

00:29:48.070 --> 00:29:48.940
<v Speaker 0>the 20 piece.

NOTE CONF {"raw":[100,100,100]}

00:29:48.940 --> 00:29:49.210
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:29:49.210 --> 00:29:53.440
<v Speaker 0>There's 210 pieces here in my in my cash register.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:53.440 --> 00:29:58.270
<v Speaker 0>And so it would separately, um, give you those two

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:58.270 --> 00:29:59.410
<v Speaker 0>ways of making changes.

NOTE CONF {"raw":[100,100,100,100]}

00:29:59.410 --> 00:30:02.920
<v Speaker 0>So that's why this number is in here okay.

NOTE CONF {"raw":[100,100,100,100,65,100,100,100,100]}

00:30:02.920 --> 00:30:05.650
<v Speaker 0>So we pick we pick a coin from our list

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:05.650 --> 00:30:06.580
<v Speaker 0>of coins.

NOTE CONF {"raw":[100,100]}

00:30:07.120 --> 00:30:09.010
<v Speaker 0>It has to be less than n, or else it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:09.010 --> 00:30:11.200
<v Speaker 0>wouldn't be useful for making change for n.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:30:14.680 --> 00:30:18.580
<v Speaker 0>And um, and then that coin is part of the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:18.580 --> 00:30:21.430
<v Speaker 0>part of the, the list of coins that we're making

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:21.430 --> 00:30:22.840
<v Speaker 0>that we're using to make change.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:30:22.840 --> 00:30:26.810
<v Speaker 0>And then we have the remaining the remaining coins, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:26.810 --> 00:30:29.810
<v Speaker 0>which is uh, uh, so we have the main amount,

NOTE CONF {"raw":[100,100,97,96,100,100,100,100,100,100]}

00:30:29.810 --> 00:30:31.190
<v Speaker 0>which is n minus y.

NOTE CONF {"raw":[100,100,100,100,100]}

00:30:31.190 --> 00:30:34.490
<v Speaker 0>So we then need to make change for that using,

NOTE CONF {"raw":[100,100,82,100,100,100,100,100,100,100]}

00:30:34.940 --> 00:30:37.010
<v Speaker 0>um, the remainder of the coins.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:30:37.010 --> 00:30:43.520
<v Speaker 0>But um, only the ones that are larger than, wait

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,97,100]}

00:30:43.520 --> 00:30:47.000
<v Speaker 0>a minute, uh, that are larger than y.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:30:49.640 --> 00:30:51.170
<v Speaker 0>Yes, that are larger than y.

NOTE CONF {"raw":[100,100,100,100,100,99]}

00:30:51.170 --> 00:30:52.640
<v Speaker 0>This is what the filter does.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:30:53.600 --> 00:30:54.080
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:30:54.080 --> 00:30:56.690
<v Speaker 0>So we're we're picking we're picking small coins and then

NOTE CONF {"raw":[100,62,100,100,100,100,100,100,100,100]}

00:30:56.690 --> 00:30:58.250
<v Speaker 0>working up to big coins.

NOTE CONF {"raw":[100,100,100,100,100]}

00:30:59.360 --> 00:30:59.750
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:30:59.750 --> 00:31:01.400
<v Speaker 0>So this is what this filter does.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:31:02.600 --> 00:31:03.350
<v Speaker 0>All right.

NOTE CONF {"raw":[100,100]}

00:31:04.070 --> 00:31:05.420
<v Speaker 0>And um.

NOTE CONF {"raw":[100,100]}

00:31:08.360 --> 00:31:10.310
<v Speaker 0>And all the ways of doing that.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:31:12.320 --> 00:31:16.040
<v Speaker 0>All the, all the ways of doing that are possible

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:16.040 --> 00:31:17.120
<v Speaker 0>solutions here.

NOTE CONF {"raw":[100,100]}

00:31:17.360 --> 00:31:17.900
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:31:17.900 --> 00:31:24.020
<v Speaker 0>So, um, this gives you this result, and it's interesting

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:24.050 --> 00:31:27.560
<v Speaker 0>to think of what happens if there are no ways

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:27.560 --> 00:31:29.810
<v Speaker 0>of of, you know, you pick a coin.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:31:30.650 --> 00:31:36.200
<v Speaker 0>Suppose you have, um, you have, uh, only two peas

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:36.200 --> 00:31:38.330
<v Speaker 0>in your cash register and you need to make change

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:38.330 --> 00:31:40.700
<v Speaker 0>for £0.05, so it's not possible.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:31:40.910 --> 00:31:41.570
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:31:41.570 --> 00:31:44.450
<v Speaker 0>So you take you you start here by taking a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:44.450 --> 00:31:47.210
<v Speaker 0>two peas, and then you need to make change for

NOTE CONF {"raw":[100,68,100,100,100,100,100,98,100,100]}

00:31:47.210 --> 00:31:50.540
<v Speaker 0>£0.03 from your list of £0.02 coins.

NOTE CONF {"raw":[100,100,100,100,100,92,100]}

00:31:50.540 --> 00:31:53.060
<v Speaker 0>And then you pick another £0.02 and then it's.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,71]}

00:31:53.060 --> 00:31:54.890
<v Speaker 0>And then you need to make change for one p

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:54.890 --> 00:31:56.660
<v Speaker 0>from your list of £0.02 coins.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:31:56.660 --> 00:32:00.230
<v Speaker 0>And then this step fails because there's no way of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:00.230 --> 00:32:03.530
<v Speaker 0>making change for one p from the list of, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:04.670 --> 00:32:05.630
<v Speaker 0>£0.02 coins.

NOTE CONF {"raw":[100,100]}

00:32:05.630 --> 00:32:10.790
<v Speaker 0>And so and so your kind of partial attempt fails.

NOTE CONF {"raw":[100,100,100,100,99,100,100,100,100,100]}

00:32:10.790 --> 00:32:12.050
<v Speaker 0>And so it's not included.

NOTE CONF {"raw":[100,100,100,100,100]}

00:32:12.050 --> 00:32:12.650
<v Speaker 0>It's not.

NOTE CONF {"raw":[100,100]}

00:32:12.650 --> 00:32:16.610
<v Speaker 0>It's not that you have to backtrack or do something

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:16.610 --> 00:32:18.380
<v Speaker 0>to have it fail.

NOTE CONF {"raw":[100,100,100,100]}

00:32:18.380 --> 00:32:23.130
<v Speaker 0>It just it the, um, it's just that this expression

NOTE CONF {"raw":[68,100,51,100,100,100,100,100,100,100]}

00:32:23.130 --> 00:32:27.090
<v Speaker 0>ends up delivering an empty list, and you can't take

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:27.720 --> 00:32:30.480
<v Speaker 0>any Zs from an empty list.

NOTE CONF {"raw":[100,56,100,100,100,100]}

00:32:30.930 --> 00:32:32.310
<v Speaker 0>Okay, there aren't any.

NOTE CONF {"raw":[100,100,100,100]}

00:32:36.030 --> 00:32:36.450
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:32:36.450 --> 00:32:40.800
<v Speaker 0>This is this is, um, a kind of a standard,

NOTE CONF {"raw":[100,100,100,100,95,100,100,100,100,100]}

00:32:40.800 --> 00:32:46.680
<v Speaker 0>um, sort of challenge problem in computer science for, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:46.710 --> 00:32:50.310
<v Speaker 0>you know, like, how can you express this in a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:50.310 --> 00:32:53.400
<v Speaker 0>program, a certain programming language, a certain bunch of features?

NOTE CONF {"raw":[100,100,100,100,100,81,100,100,100,100]}

00:32:53.400 --> 00:32:57.150
<v Speaker 0>You know, if the programming languages allows backtracking or exceptions

NOTE CONF {"raw":[100,100,100,100,100,51,100,100,100,100]}

00:32:57.150 --> 00:32:58.710
<v Speaker 0>or or something like that.

NOTE CONF {"raw":[99,99,100,100,100]}

00:32:58.710 --> 00:33:00.600
<v Speaker 0>So this is the Haskell solution to it, which I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:00.600 --> 00:33:02.400
<v Speaker 0>think is kind of nice.

NOTE CONF {"raw":[100,100,100,100,100]}

00:33:04.770 --> 00:33:07.680
<v Speaker 0>But not but not trivial to understand.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:33:09.000 --> 00:33:13.890
<v Speaker 0>Okay, let me get to my last problem, which is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:13.890 --> 00:33:18.180
<v Speaker 0>a little bit more fun because it's, um, it's involving

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:18.180 --> 00:33:18.870
<v Speaker 0>games.

NOTE CONF {"raw":[100]}

00:33:19.740 --> 00:33:23.130
<v Speaker 0>So this is the it's the eight queens problem, which

NOTE CONF {"raw":[100,100,100,100,100,100,100,85,100,100]}

00:33:23.130 --> 00:33:28.020
<v Speaker 0>is a, um, uh, it's a chess problem and it's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:28.020 --> 00:33:28.500
<v Speaker 0>a standard.

NOTE CONF {"raw":[100,100]}

00:33:28.500 --> 00:33:32.040
<v Speaker 0>Another one of these standard problems in computer science for

NOTE CONF {"raw":[100,100,100,54,100,100,100,100,100,100]}

00:33:32.280 --> 00:33:38.970
<v Speaker 0>how you how you solve this efficiently, um, using various

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:38.970 --> 00:33:41.640
<v Speaker 0>programming, uh, methods.

NOTE CONF {"raw":[100,100,100]}

00:33:41.640 --> 00:33:41.940
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:33:41.940 --> 00:33:47.310
<v Speaker 0>So, uh, I suppose that, um, I suppose that many

NOTE CONF {"raw":[100,91,100,100,100,100,100,100,100,100]}

00:33:47.310 --> 00:33:49.290
<v Speaker 0>of you play chess, but it doesn't matter.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:33:49.680 --> 00:33:52.410
<v Speaker 0>Um, because I'm going to explain everything you need to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:52.410 --> 00:33:52.890
<v Speaker 0>know.

NOTE CONF {"raw":[100]}

00:33:53.010 --> 00:33:55.770
<v Speaker 0>So this is about queens.

NOTE CONF {"raw":[100,100,100,100,100]}

00:33:55.770 --> 00:34:00.990
<v Speaker 0>So queens are, uh, here's a chess board and, uh,

NOTE CONF {"raw":[100,100,80,51,100,100,54,54,100,51]}

00:34:00.990 --> 00:34:04.440
<v Speaker 0>here's how a black queen is represented, usually.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:34:05.220 --> 00:34:05.880
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:34:05.880 --> 00:34:08.820
<v Speaker 0>And the queen is the most powerful, uh, piece in

NOTE CONF {"raw":[100,100,100,100,100,100,100,62,100,100]}

00:34:08.820 --> 00:34:09.480
<v Speaker 0>chess.

NOTE CONF {"raw":[100]}

00:34:09.929 --> 00:34:12.570
<v Speaker 0>Um, the king is the most important one, because if

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:12.570 --> 00:34:14.370
<v Speaker 0>you lose the king, you've lost the game.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:34:14.370 --> 00:34:16.470
<v Speaker 0>But the queen is the one that has the most

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:16.740 --> 00:34:18.360
<v Speaker 0>sort of freedom of movement.

NOTE CONF {"raw":[100,100,100,100,100]}

00:34:18.360 --> 00:34:22.090
<v Speaker 0>And so, um, what I was showing here is diagonal

NOTE CONF {"raw":[100,100,52,100,100,100,100,100,100,100]}

00:34:22.090 --> 00:34:22.480
<v Speaker 0>movement.

NOTE CONF {"raw":[95]}

00:34:22.480 --> 00:34:26.169
<v Speaker 0>So a queen can move diagonally in any direction as

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:26.169 --> 00:34:28.270
<v Speaker 0>far as far as it wants.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:34:28.600 --> 00:34:29.260
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:34:29.260 --> 00:34:33.070
<v Speaker 0>So, uh, so, you know, this this queen here could

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:33.070 --> 00:34:34.240
<v Speaker 0>move diagonally.

NOTE CONF {"raw":[100,100]}

00:34:34.360 --> 00:34:39.760
<v Speaker 0>Diagonally here or down there or over here or up

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:39.760 --> 00:34:40.240
<v Speaker 0>there.

NOTE CONF {"raw":[100]}

00:34:40.780 --> 00:34:41.320
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:34:41.320 --> 00:34:45.730
<v Speaker 0>So, um, and the queen can also move horizontally and

NOTE CONF {"raw":[100,100,100,93,100,100,100,100,100,100]}

00:34:45.730 --> 00:34:47.290
<v Speaker 0>vertically as far as at once.

NOTE CONF {"raw":[100,100,100,100,71,100]}

00:34:47.290 --> 00:34:50.409
<v Speaker 0>So this queen could move all the way across this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:50.409 --> 00:34:53.800
<v Speaker 0>row or all the way along this column.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:34:55.780 --> 00:34:56.350
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:34:56.350 --> 00:35:01.030
<v Speaker 0>And so, um, so this queen, if you look at

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:01.030 --> 00:35:03.520
<v Speaker 0>the number of squares that are being swept out here,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:03.520 --> 00:35:09.310
<v Speaker 0>it's, um, it's, uh, seven horizontally, seven vertically, uh, seven

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,91,100]}

00:35:09.310 --> 00:35:12.910
<v Speaker 0>on this diagonal and seven on this diagonal, plus the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:12.910 --> 00:35:13.810
<v Speaker 0>one that is occupying.

NOTE CONF {"raw":[100,100,100,100]}

00:35:13.810 --> 00:35:17.770
<v Speaker 0>So it's 29 spaces that a single queen is kind

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:17.770 --> 00:35:20.650
<v Speaker 0>of covering if you're talking about, you know, ability to

NOTE CONF {"raw":[100,100,100,100,100,100,97,97,100,100]}

00:35:20.650 --> 00:35:22.960
<v Speaker 0>move from a particular position.

NOTE CONF {"raw":[100,100,100,100,100]}

00:35:22.960 --> 00:35:28.660
<v Speaker 0>And, um, so that's that's a lot of squares.

NOTE CONF {"raw":[92,60,100,100,100,100,100,100,100]}

00:35:28.660 --> 00:35:30.700
<v Speaker 0>And these are, these are sort of, you know, if

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:30.700 --> 00:35:33.520
<v Speaker 0>there's another if there's another piece, this is a black

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:33.520 --> 00:35:33.850
<v Speaker 0>queen.

NOTE CONF {"raw":[100]}

00:35:33.850 --> 00:35:35.830
<v Speaker 0>So it's looking for white pieces to attack.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:35:35.830 --> 00:35:38.470
<v Speaker 0>I mean, there's no white pieces on this particular picture.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:38.470 --> 00:35:40.600
<v Speaker 0>If there's a white piece somewhere on this diagonal it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,56]}

00:35:40.600 --> 00:35:41.650
<v Speaker 0>can capture it.

NOTE CONF {"raw":[100,100,100]}

00:35:41.650 --> 00:35:44.740
<v Speaker 0>And and that's bad for the white side.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:35:44.920 --> 00:35:45.430
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:35:45.430 --> 00:35:47.860
<v Speaker 0>So and then the and then the eight queens.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,95]}

00:35:47.860 --> 00:35:51.940
<v Speaker 0>Problem is, is it possible to put eight queens on

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:51.940 --> 00:35:56.350
<v Speaker 0>a chessboard in such a way that none of them,

NOTE CONF {"raw":[100,83,100,100,100,100,100,100,100,100]}

00:35:56.860 --> 00:35:58.960
<v Speaker 0>uh, can attack any of the other ones?

NOTE CONF {"raw":[64,100,100,100,100,100,100,100]}

00:36:00.130 --> 00:36:00.790
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:36:00.790 --> 00:36:06.160
<v Speaker 0>And if you think that each one covers 29 squares

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:06.160 --> 00:36:09.310
<v Speaker 0>and there's 64 squares on the chessboard, you might think

NOTE CONF {"raw":[100,52,100,100,100,100,95,100,100,100]}

00:36:09.310 --> 00:36:12.340
<v Speaker 0>that this is a little bit difficult or possibly impossible,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:12.340 --> 00:36:14.170
<v Speaker 0>but it is actually possible.

NOTE CONF {"raw":[100,100,100,100,100]}

00:36:14.170 --> 00:36:15.100
<v Speaker 0>And here's a solution.

NOTE CONF {"raw":[100,100,100,100]}

00:36:15.100 --> 00:36:17.240
<v Speaker 0>For instance, if you look at if you look at

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:17.240 --> 00:36:17.810
<v Speaker 0>this.

NOTE CONF {"raw":[100]}

00:36:17.990 --> 00:36:21.620
<v Speaker 0>Okay, none of these, none of these pieces, you know,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:21.620 --> 00:36:23.030
<v Speaker 0>let's look at this one for a change.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:36:23.030 --> 00:36:26.000
<v Speaker 0>None of these, um, can attack any of the ones

NOTE CONF {"raw":[100,100,100,70,100,100,100,91,91,100]}

00:36:26.000 --> 00:36:26.240
<v Speaker 0>you know.

NOTE CONF {"raw":[100,100]}

00:36:26.240 --> 00:36:29.750
<v Speaker 0>So the the row is free, the column is free,

NOTE CONF {"raw":[100,100,100,98,100,100,100,100,100,100]}

00:36:29.840 --> 00:36:33.080
<v Speaker 0>this diagonal is free, and that diagonal is free.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:36:33.080 --> 00:36:34.790
<v Speaker 0>And that's the case for each one of these.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:36:35.990 --> 00:36:36.710
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:36:37.790 --> 00:36:40.580
<v Speaker 0>So, um, so there are solutions.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:36:42.620 --> 00:36:45.590
<v Speaker 0>Um, but you have to be careful how you generate

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:45.590 --> 00:36:46.130
<v Speaker 0>them.

NOTE CONF {"raw":[100]}

00:36:47.180 --> 00:36:47.900
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:36:47.900 --> 00:36:50.300
<v Speaker 0>Um, so I'm going to show you a generate and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:50.300 --> 00:36:51.500
<v Speaker 0>test algorithm.

NOTE CONF {"raw":[100,100]}

00:36:52.250 --> 00:36:52.670
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:36:52.670 --> 00:36:55.400
<v Speaker 0>Generate and test is what I told you at the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:55.400 --> 00:36:56.120
<v Speaker 0>beginning.

NOTE CONF {"raw":[100]}

00:36:56.120 --> 00:36:59.450
<v Speaker 0>It's an algorithm where you enumerate possible solutions, and then

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:59.450 --> 00:37:02.510
<v Speaker 0>you check each of the solutions to see each of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:02.510 --> 00:37:05.810
<v Speaker 0>the potential solutions to see if it's a real solution.

NOTE CONF {"raw":[100,100,100,52,100,100,100,100,100,100]}

00:37:06.320 --> 00:37:06.920
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:37:06.920 --> 00:37:07.940
<v Speaker 0>So I'm going to show you how to do that.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:07.940 --> 00:37:12.800
<v Speaker 0>But you have to be careful here because um, if

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:12.800 --> 00:37:13.400
<v Speaker 0>you.

NOTE CONF {"raw":[100]}

00:37:16.730 --> 00:37:17.300
<v Speaker 1>Wait a minute.

NOTE CONF {"raw":[100,100,100]}

00:37:23.720 --> 00:37:28.460
<v Speaker 0>Okay, so how many ways are there placing eight queens

NOTE CONF {"raw":[100,100,100,100,100,100,65,38,100,100]}

00:37:28.460 --> 00:37:32.330
<v Speaker 0>on a on a chessboard with 64 places?

NOTE CONF {"raw":[100,100,100,100,57,100,100,100]}

00:37:32.630 --> 00:37:33.830
<v Speaker 0>It's that many.

NOTE CONF {"raw":[100,100,100]}

00:37:36.020 --> 00:37:36.770
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:37:37.100 --> 00:37:42.770
<v Speaker 0>And, um, so, you know, the number of ways of

NOTE CONF {"raw":[100,99,100,100,100,100,100,100,100,100]}

00:37:42.770 --> 00:37:46.670
<v Speaker 0>choosing eight places out of 64, out of a list

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:46.670 --> 00:37:47.720
<v Speaker 0>of 64 places.

NOTE CONF {"raw":[100,100,100]}

00:37:47.720 --> 00:37:49.700
<v Speaker 0>These are the eight places where the where the queens

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:49.700 --> 00:37:50.030
<v Speaker 0>are.

NOTE CONF {"raw":[100]}

00:37:50.060 --> 00:37:51.950
<v Speaker 0>These are 64 places in the chess board.

NOTE CONF {"raw":[100,100,100,100,95,100,67,67]}

00:37:51.950 --> 00:37:54.650
<v Speaker 0>So that's how many possible ways there are of putting

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:54.650 --> 00:37:56.000
<v Speaker 0>the queens on the chess board.

NOTE CONF {"raw":[100,100,100,100,87,87]}

00:37:56.000 --> 00:37:59.630
<v Speaker 0>And this is, you know, 4.4.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:37:59.630 --> 00:38:00.980
<v Speaker 0>Well, I'll write down the number.

NOTE CONF {"raw":[100,100,100,100,100,97]}

00:38:02.210 --> 00:38:02.570
<v Speaker 0>Uh.

NOTE CONF {"raw":[100]}

00:38:06.110 --> 00:38:09.140
<v Speaker 0>It's that many, that many choices.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:38:09.470 --> 00:38:10.340
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:38:10.340 --> 00:38:14.780
<v Speaker 0>So if we if we enumerate all the possible ways

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:14.780 --> 00:38:16.340
<v Speaker 0>of putting the queen on the chessboard.

NOTE CONF {"raw":[100,100,100,100,100,100,63]}

00:38:16.580 --> 00:38:18.230
<v Speaker 0>That's how many we've got.

NOTE CONF {"raw":[100,100,100,100,100]}

00:38:18.230 --> 00:38:19.730
<v Speaker 0>And then we have to look at each one of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:19.730 --> 00:38:23.450
<v Speaker 0>these to see whether it's, um, it's going to be

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:23.450 --> 00:38:24.260
<v Speaker 0>a solution.

NOTE CONF {"raw":[100,100]}

00:38:24.290 --> 00:38:24.950
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:38:24.950 --> 00:38:26.240
<v Speaker 0>This would take a while.

NOTE CONF {"raw":[100,100,100,100,100]}

00:38:26.240 --> 00:38:29.510
<v Speaker 0>It's possible program would terminate, but it would take a

NOTE CONF {"raw":[55,100,99,100,100,100,100,100,100,100]}

00:38:29.510 --> 00:38:30.080
<v Speaker 0>while.

NOTE CONF {"raw":[100]}

00:38:31.160 --> 00:38:31.520
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:38:31.520 --> 00:38:35.570
<v Speaker 0>So, um, it helps to think a little bit before

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:35.570 --> 00:38:36.530
<v Speaker 0>doing this.

NOTE CONF {"raw":[100,100]}

00:38:38.630 --> 00:38:39.080
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:38:39.080 --> 00:38:40.970
<v Speaker 0>So let's, uh, let's look at this board.

NOTE CONF {"raw":[100,100,81,100,100,100,100,100]}

00:38:42.110 --> 00:38:42.380
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:38:42.380 --> 00:38:45.350
<v Speaker 0>So one thing that's obvious is that if you've got

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:45.350 --> 00:38:48.290
<v Speaker 0>any, uh, if you got two queens on the same

NOTE CONF {"raw":[100,100,100,79,100,100,100,100,100,100]}

00:38:48.290 --> 00:38:51.800
<v Speaker 0>row, then it's not going to be a solution because

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:51.800 --> 00:38:53.540
<v Speaker 0>they're going to be able to attack each other.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:38:53.630 --> 00:38:53.960
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:38:53.960 --> 00:38:55.850
<v Speaker 0>So each you know, if you look at solution here,

NOTE CONF {"raw":[100,100,62,62,100,100,100,86,100,100]}

00:38:55.850 --> 00:38:58.610
<v Speaker 0>each solution has one queen in each row.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:38:59.480 --> 00:38:59.930
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:38:59.930 --> 00:39:00.650
<v Speaker 0>Just one.

NOTE CONF {"raw":[100,100]}

00:39:00.650 --> 00:39:03.380
<v Speaker 0>There are eight rows, eight queens, one queen in each

NOTE CONF {"raw":[100,99,100,100,100,100,100,100,100,100]}

00:39:03.380 --> 00:39:03.860
<v Speaker 0>row.

NOTE CONF {"raw":[100]}

00:39:04.760 --> 00:39:05.330
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:39:05.330 --> 00:39:06.980
<v Speaker 0>So, um.

NOTE CONF {"raw":[100,100]}

00:39:09.050 --> 00:39:14.340
<v Speaker 0>If we take that into account, then, Um, the number

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:14.340 --> 00:39:15.390
<v Speaker 0>of solutions.

NOTE CONF {"raw":[100,100]}

00:39:16.410 --> 00:39:16.800
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:39:16.800 --> 00:39:19.170
<v Speaker 0>We've got we've got eight rows and eight queens.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,95]}

00:39:19.170 --> 00:39:23.880
<v Speaker 0>So the numbers of ways of placing eight queens, one

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:23.880 --> 00:39:28.590
<v Speaker 0>per row is this number, which is still 16 million.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:28.590 --> 00:39:29.610
<v Speaker 0>It's still a lot.

NOTE CONF {"raw":[100,100,100,100]}

00:39:30.330 --> 00:39:32.610
<v Speaker 0>Um, okay.

NOTE CONF {"raw":[88,100]}

00:39:32.610 --> 00:39:34.590
<v Speaker 0>But it's a lot smaller than that number.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:39:35.490 --> 00:39:37.710
<v Speaker 0>So this is, this is, um, okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:39:37.710 --> 00:39:41.580
<v Speaker 0>So, uh, number of placements.

NOTE CONF {"raw":[100,58,100,100,100]}

00:39:43.830 --> 00:39:44.250
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:39:44.250 --> 00:39:50.790
<v Speaker 0>This is, uh, one queen per row.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:39:53.730 --> 00:39:54.510
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:39:54.780 --> 00:39:59.100
<v Speaker 0>Um, but also kind of symmetrically, there's also only one

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:59.100 --> 00:40:00.090
<v Speaker 0>queen per column.

NOTE CONF {"raw":[100,100,100]}

00:40:00.090 --> 00:40:03.300
<v Speaker 0>So each of these columns has only one queen in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:03.300 --> 00:40:03.660
<v Speaker 0>it.

NOTE CONF {"raw":[100]}

00:40:04.020 --> 00:40:07.590
<v Speaker 0>Eight columns, eight queens, one queen in each column.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:40:07.590 --> 00:40:11.700
<v Speaker 0>So, um, so what we've got here, uh, is in

NOTE CONF {"raw":[100,100,100,100,100,100,100,86,100,100]}

00:40:11.730 --> 00:40:12.750
<v Speaker 0>fact, um.

NOTE CONF {"raw":[100,100]}

00:40:14.910 --> 00:40:20.400
<v Speaker 0>Eight factorial possibilities, which is, uh, only 40,000.

NOTE CONF {"raw":[86,100,100,100,100,100,100,100]}

00:40:21.060 --> 00:40:23.010
<v Speaker 0>Uh, sorry, 40,000 odd.

NOTE CONF {"raw":[100,100,100,98]}

00:40:23.880 --> 00:40:24.630
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:40:24.990 --> 00:40:25.380
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:40:29.700 --> 00:40:30.270
<v Speaker 0>Oh, sorry.

NOTE CONF {"raw":[54,100]}

00:40:30.270 --> 00:40:31.050
<v Speaker 0>Column.

NOTE CONF {"raw":[100]}

00:40:32.070 --> 00:40:32.490
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:40:32.490 --> 00:40:37.110
<v Speaker 0>So we're going to generate these and then we're going

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:37.110 --> 00:40:40.320
<v Speaker 0>to check each of them to see whether, um, it,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,75]}

00:40:40.320 --> 00:40:43.440
<v Speaker 0>it, it allows a queen to attack another queen.

NOTE CONF {"raw":[75,100,100,100,100,100,100,100,100]}

00:40:43.440 --> 00:40:44.850
<v Speaker 0>If so we throw it out.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:40:48.810 --> 00:40:52.950
<v Speaker 0>So so here's my solution.

NOTE CONF {"raw":[100,100,100,100,100]}

00:40:53.820 --> 00:40:54.600
<v Speaker 0>Uh.

NOTE CONF {"raw":[100]}

00:40:56.460 --> 00:40:57.000
<v Speaker 1>Uh.

NOTE CONF {"raw":[100]}

00:40:58.560 --> 00:40:59.100
<v Speaker 0>There we go.

NOTE CONF {"raw":[66,100,100]}

00:40:59.910 --> 00:41:00.870
<v Speaker 0>My notes.

NOTE CONF {"raw":[100,100]}

00:41:01.530 --> 00:41:01.860
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:41:04.830 --> 00:41:10.410
<v Speaker 0>Okay, so so I said here eight factorial because it

NOTE CONF {"raw":[100,100,100,100,100,100,98,100,100,100]}

00:41:10.410 --> 00:41:15.790
<v Speaker 0>corresponds to the number of permutations of, um, I mean,

NOTE CONF {"raw":[100,100,100,100,100,100,100,99,100,100]}

00:41:15.790 --> 00:41:17.140
<v Speaker 0>if we look at a solution.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:41:19.750 --> 00:41:21.130
<v Speaker 0>Okay, we're going to generate.

NOTE CONF {"raw":[100,100,100,100,100]}

00:41:23.380 --> 00:41:27.520
<v Speaker 0>Uh, a list of these, these these positions are going

NOTE CONF {"raw":[100,100,100,36,100,100,100,100,100,100]}

00:41:27.520 --> 00:41:31.300
<v Speaker 0>to be represented as, as, as lists of length eight.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:32.200 --> 00:41:36.010
<v Speaker 0>And the um and each list of length eight is

NOTE CONF {"raw":[100,100,58,100,100,100,100,100,100,100]}

00:41:36.310 --> 00:41:41.410
<v Speaker 0>um, uh, it'll contain numbers from 1 to 8 okay.

NOTE CONF {"raw":[100,100,93,100,100,100,100,100,100,100]}

00:41:41.410 --> 00:41:44.200
<v Speaker 0>So list of length eight contents or numbers of length

NOTE CONF {"raw":[100,100,100,100,100,100,58,100,100,100]}

00:41:44.200 --> 00:41:44.620
<v Speaker 0>eight.

NOTE CONF {"raw":[100]}

00:41:44.620 --> 00:41:47.290
<v Speaker 0>And what the first, what the head of the list

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:47.290 --> 00:41:52.090
<v Speaker 0>represent is the, the row that the, um, that the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:52.090 --> 00:41:54.790
<v Speaker 0>Queen and column one occupies.

NOTE CONF {"raw":[100,87,100,100,100]}

00:41:55.780 --> 00:41:56.290
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:41:56.290 --> 00:41:58.810
<v Speaker 0>And the second thing in the list is going to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:58.810 --> 00:42:02.050
<v Speaker 0>be the row that the Queen and column two occupy.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:02.050 --> 00:42:13.390
<v Speaker 0>So this this permutation will be represented by um, 63724.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:15.520 --> 00:42:17.500
<v Speaker 0>Okay, so that's a permutation of the numbers one through

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:17.500 --> 00:42:17.830
<v Speaker 0>eight.

NOTE CONF {"raw":[100]}

00:42:18.940 --> 00:42:19.300
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:42:19.300 --> 00:42:21.760
<v Speaker 0>It's length eight because we've got eight columns.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:42:23.140 --> 00:42:25.210
<v Speaker 0>All the numbers are of 1 to 8 because there's

NOTE CONF {"raw":[100,100,100,99,52,100,100,100,100,100]}

00:42:25.210 --> 00:42:26.230
<v Speaker 0>eight rows.

NOTE CONF {"raw":[100,100]}

00:42:26.770 --> 00:42:29.220
<v Speaker 0>And it's the permutation of those numbers from 1 to

NOTE CONF {"raw":[96,94,60,100,100,100,100,100,100,100]}

00:42:29.220 --> 00:42:29.380
<v Speaker 0>8.

NOTE CONF {"raw":[100]}

00:42:29.380 --> 00:42:31.390
<v Speaker 0>Because no queen can be.

NOTE CONF {"raw":[100,100,100,100,100]}

00:42:31.480 --> 00:42:33.370
<v Speaker 0>No two queens can be in the same row.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:42:35.710 --> 00:42:41.470
<v Speaker 0>Okay, so so here's my eight queens program.

NOTE CONF {"raw":[100,100,100,100,100,100,100,98]}

00:42:43.570 --> 00:42:44.080
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:42:44.080 --> 00:42:45.730
<v Speaker 0>And it's very simple.

NOTE CONF {"raw":[100,100,100,100]}

00:42:46.630 --> 00:42:48.580
<v Speaker 0>It generates the permutations.

NOTE CONF {"raw":[100,100,100,91]}

00:42:48.580 --> 00:42:49.930
<v Speaker 0>So the numbers from 1 to 8.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:42:52.300 --> 00:42:57.340
<v Speaker 0>And then it filters them and extract the ones that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:57.340 --> 00:42:59.590
<v Speaker 0>are okay in the sense that I'm going to explain

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:59.590 --> 00:42:59.860
<v Speaker 0>okay.

NOTE CONF {"raw":[100]}

00:42:59.860 --> 00:43:02.860
<v Speaker 0>Okay means that they are actually solutions.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:43:04.180 --> 00:43:04.840
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:43:04.840 --> 00:43:07.420
<v Speaker 0>So we know whoops.

NOTE CONF {"raw":[100,100,100,100]}

00:43:07.420 --> 00:43:09.050
<v Speaker 0>Because of the way that we've done this.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:43:09.230 --> 00:43:11.300
<v Speaker 0>Because we're talking about a permutations from 1 to 8.

NOTE CONF {"raw":[100,100,100,100,91,100,100,100,100,100]}

00:43:11.300 --> 00:43:13.250
<v Speaker 0>Going back to my diagram, okay.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:43:13.250 --> 00:43:15.050
<v Speaker 0>We know that there's not going to be any problems

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:15.050 --> 00:43:19.190
<v Speaker 0>with attacks horizontally and vertically okay.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:43:19.190 --> 00:43:22.130
<v Speaker 0>So we only have to worry about diagonal attacks.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:43:23.960 --> 00:43:28.040
<v Speaker 0>So the way that the okay check works okay a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:28.040 --> 00:43:29.570
<v Speaker 0>couple of helper functions here.

NOTE CONF {"raw":[100,100,100,100,100]}

00:43:30.380 --> 00:43:33.350
<v Speaker 0>So it picks.

NOTE CONF {"raw":[100,100,100]}

00:43:33.800 --> 00:43:37.460
<v Speaker 0>So given a given a permutation from this list.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:43:39.710 --> 00:43:42.530
<v Speaker 0>It chooses two queens.

NOTE CONF {"raw":[100,100,100,100]}

00:43:45.020 --> 00:43:48.320
<v Speaker 0>Well actually first it first it computes the coordinates of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:48.320 --> 00:43:51.890
<v Speaker 0>all of these queens okay.

NOTE CONF {"raw":[100,100,100,100,100]}

00:43:51.890 --> 00:43:53.090
<v Speaker 0>Which it does with the zip here.

NOTE CONF {"raw":[100,100,100,100,50,100,100]}

00:43:53.090 --> 00:43:54.560
<v Speaker 0>So what's what's going on here.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:43:54.560 --> 00:44:01.100
<v Speaker 0>So I said here that the permutation is 1586 etc..

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:01.100 --> 00:44:01.430
<v Speaker 0>Okay.

NOTE CONF {"raw":[99]}

00:44:01.430 --> 00:44:06.350
<v Speaker 0>It does a zip with 12345678, which means the coordinates

NOTE CONF {"raw":[82,100,100,100,100,100,100,100,100,100]}

00:44:06.350 --> 00:44:13.550
<v Speaker 0>you get our 1125384653 and so forth.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:44:13.550 --> 00:44:14.150
<v Speaker 0>Okay.

NOTE CONF {"raw":[93]}

00:44:15.500 --> 00:44:18.740
<v Speaker 0>So that's the result of this of the zip.

NOTE CONF {"raw":[100,100,100,100,100,100,100,86,100]}

00:44:19.550 --> 00:44:23.180
<v Speaker 0>Gives you the coordinates Cartesian coordinates okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:44:23.180 --> 00:44:26.570
<v Speaker 0>And then we choose two elements from this list of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:26.570 --> 00:44:27.560
<v Speaker 0>Cartesian coordinates.

NOTE CONF {"raw":[100,100]}

00:44:27.560 --> 00:44:29.360
<v Speaker 0>So this is the position of two queens.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:44:31.160 --> 00:44:35.690
<v Speaker 0>And we check to see whether, uh, those two queens

NOTE CONF {"raw":[100,100,96,100,100,100,82,100,100,100]}

00:44:35.690 --> 00:44:36.860
<v Speaker 0>can attack each other.

NOTE CONF {"raw":[100,100,100,100]}

00:44:38.240 --> 00:44:41.930
<v Speaker 0>And we require that for all choices of two queens

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:42.290 --> 00:44:46.340
<v Speaker 0>that, um, that they can't attack each other.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:44:46.340 --> 00:44:46.760
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:44:46.760 --> 00:44:49.970
<v Speaker 0>So not attack each other is what this not check

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:49.970 --> 00:44:50.180
<v Speaker 0>is.

NOTE CONF {"raw":[100]}

00:44:50.180 --> 00:44:55.190
<v Speaker 0>So check is, uh, chess terminology for, um, attack.

NOTE CONF {"raw":[100,100,100,96,100,100,100,100,100]}

00:44:57.050 --> 00:44:57.740
<v Speaker 0>Um, more or less.

NOTE CONF {"raw":[68,100,100,100]}

00:44:57.740 --> 00:44:59.810
<v Speaker 0>Okay, so they can't attack each other.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:44:59.810 --> 00:45:02.150
<v Speaker 0>And that has to be case for all for all

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:02.150 --> 00:45:07.500
<v Speaker 0>of the, um, all of the choices of two queens.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:07.920 --> 00:45:08.580
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:45:08.580 --> 00:45:13.110
<v Speaker 0>Which leads us to this last line here, um, computing

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:13.110 --> 00:45:16.560
<v Speaker 0>whether to, um, queens check each other or not.

NOTE CONF {"raw":[98,100,100,100,100,100,100,100,100]}

00:45:16.560 --> 00:45:18.960
<v Speaker 0>And this is a, this is a clever little, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:18.960 --> 00:45:20.700
<v Speaker 0>calculation that's done.

NOTE CONF {"raw":[100,100,100]}

00:45:21.240 --> 00:45:23.280
<v Speaker 0>So let me draw it as a picture.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:45:25.530 --> 00:45:27.840
<v Speaker 0>So we've got Queen number one.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:45:32.100 --> 00:45:32.790
<v Speaker 0>Here.

NOTE CONF {"raw":[100]}

00:45:33.210 --> 00:45:35.310
<v Speaker 0>And we've got Queen number two.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:45:35.370 --> 00:45:35.640
<v Speaker 1>Um.

NOTE CONF {"raw":[100]}

00:45:38.490 --> 00:45:38.970
<v Speaker 0>Here.

NOTE CONF {"raw":[100]}

00:45:39.600 --> 00:45:40.200
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:45:40.200 --> 00:45:42.810
<v Speaker 0>They're all they're all in this quadrant of the Cartesian

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:42.810 --> 00:45:43.410
<v Speaker 0>plane.

NOTE CONF {"raw":[100]}

00:45:43.950 --> 00:45:44.670
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:45:45.060 --> 00:45:47.490
<v Speaker 0>And we're interested in the slope of this line.

NOTE CONF {"raw":[100,100,100,100,98,100,100,100,100]}

00:45:52.050 --> 00:45:57.180
<v Speaker 0>If this slope is one, then they're on a diagonal

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:57.180 --> 00:45:58.620
<v Speaker 0>and they attack each other.

NOTE CONF {"raw":[100,100,100,100,100]}

00:45:59.310 --> 00:46:00.000
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:46:00.000 --> 00:46:03.810
<v Speaker 0>Same goes if, um, the picture is different and the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:03.810 --> 00:46:05.280
<v Speaker 0>slope is minus one.

NOTE CONF {"raw":[100,100,100,100]}

00:46:07.800 --> 00:46:08.520
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:46:08.730 --> 00:46:11.160
<v Speaker 0>Or in fact, if they're in the opposite direction on

NOTE CONF {"raw":[100,100,100,100,90,100,100,100,100,100]}

00:46:11.160 --> 00:46:12.630
<v Speaker 0>the opposite orientation.

NOTE CONF {"raw":[100,100,100]}

00:46:12.840 --> 00:46:16.380
<v Speaker 0>And the slope is one, but they're kind of reversed

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:16.380 --> 00:46:18.990
<v Speaker 0>or you know, so so this kind of for this,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:18.990 --> 00:46:22.890
<v Speaker 0>there's kind of four possibilities of the way these are

NOTE CONF {"raw":[100,100,100,97,100,100,100,100,100,100]}

00:46:22.920 --> 00:46:24.000
<v Speaker 0>in relation to each other.

NOTE CONF {"raw":[96,100,100,100,100]}

00:46:24.000 --> 00:46:26.310
<v Speaker 0>And then the question is always about is the slope

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:26.310 --> 00:46:28.110
<v Speaker 0>is a slope 1 or -1.

NOTE CONF {"raw":[100,60,100,100,100,100]}

00:46:28.260 --> 00:46:28.860
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:46:28.860 --> 00:46:30.690
<v Speaker 0>So how do you compute the slope.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:46:33.780 --> 00:46:34.170
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:46:34.170 --> 00:46:38.880
<v Speaker 0>So um this distance here is um y prime minus

NOTE CONF {"raw":[100,98,100,100,100,100,100,100,100,100]}

00:46:38.880 --> 00:46:39.630
<v Speaker 0>y.

NOTE CONF {"raw":[100]}

00:46:39.630 --> 00:46:43.080
<v Speaker 0>This distance here is x prime minus x.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:46:43.440 --> 00:46:51.030
<v Speaker 0>And so the slope is um, well uh okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,88]}

00:46:51.030 --> 00:46:54.180
<v Speaker 0>The slope is uh x prime minus.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:46:54.180 --> 00:46:54.570
<v Speaker 1>X.

NOTE CONF {"raw":[100]}

00:46:54.810 --> 00:46:57.300
<v Speaker 0>Over y prime minus y.

NOTE CONF {"raw":[100,100,100,100,100]}

00:46:57.300 --> 00:47:00.930
<v Speaker 0>And this is equal to one if and only if

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:00.930 --> 00:47:03.750
<v Speaker 0>these two numbers are equal.

NOTE CONF {"raw":[100,100,100,100,100]}

00:47:04.920 --> 00:47:07.680
<v Speaker 0>Okay, so this boils down to testing whether.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:47:07.860 --> 00:47:08.400
<v Speaker 1>Whoops.

NOTE CONF {"raw":[89]}

00:47:08.820 --> 00:47:11.070
<v Speaker 0>Whether uh.

NOTE CONF {"raw":[100,94]}

00:47:11.760 --> 00:47:13.170
<v Speaker 0>Oh well I did it the other way around.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:47:13.170 --> 00:47:13.590
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:47:13.590 --> 00:47:15.960
<v Speaker 0>Instead of x prime minus y I did I did

NOTE CONF {"raw":[100,100,100,94,100,100,100,100,100,100]}

00:47:15.960 --> 00:47:17.190
<v Speaker 0>x minus x prime.

NOTE CONF {"raw":[100,100,100,100]}

00:47:17.190 --> 00:47:19.200
<v Speaker 0>But um it doesn't matter.

NOTE CONF {"raw":[100,100,100,100,100]}

00:47:19.500 --> 00:47:23.940
<v Speaker 0>Um and y minus y prime doesn't matter because um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:24.240 --> 00:47:26.820
<v Speaker 0>so I basically I'm testing to see whether they're equal,

NOTE CONF {"raw":[100,100,100,100,100,60,100,100,72,100]}

00:47:26.820 --> 00:47:31.320
<v Speaker 0>but I'm testing whether the absolute values are equal because

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:31.320 --> 00:47:35.280
<v Speaker 0>that deals with, um, slope of one, slope of minus

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:35.280 --> 00:47:38.430
<v Speaker 0>one, and the situation where the points are oriented the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:38.430 --> 00:47:39.450
<v Speaker 0>other way around.

NOTE CONF {"raw":[100,100,100]}

00:47:40.380 --> 00:47:41.130
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:47:41.580 --> 00:47:44.730
<v Speaker 0>So this covers all of these different possibilities.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:47:44.730 --> 00:47:46.830
<v Speaker 0>And if and only if the absolute values of these

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:46.830 --> 00:47:50.550
<v Speaker 0>two differences are equal are the things I'm on a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,82]}

00:47:50.550 --> 00:47:51.330
<v Speaker 0>diagonal.

NOTE CONF {"raw":[100]}

00:47:52.170 --> 00:47:52.920
<v Speaker 0>So.

NOTE CONF {"raw":[100]}

00:47:54.990 --> 00:47:57.630
<v Speaker 0>And um, yeah, I can't run it on my laptop

NOTE CONF {"raw":[98,76,100,100,100,100,100,100,100,100]}

00:47:57.630 --> 00:47:58.890
<v Speaker 0>because I don't have my adaptor.

NOTE CONF {"raw":[100,100,100,100,100,70]}

00:47:58.890 --> 00:48:03.670
<v Speaker 0>But if you run this, it's, um, it's surprisingly fast.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:04.270 --> 00:48:06.430
<v Speaker 0>It takes, you know, a 10th of a second.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:48:06.430 --> 00:48:10.750
<v Speaker 0>And the the solution here is the one that I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:10.750 --> 00:48:12.430
<v Speaker 0>had a second ago in the picture.

NOTE CONF {"raw":[100,100,100,96,100,100,100]}

00:48:12.430 --> 00:48:17.050
<v Speaker 0>So one five, eight six, three seven, etc. um, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,94,80,68]}

00:48:17.050 --> 00:48:22.180
<v Speaker 0>158637, etc..

NOTE CONF {"raw":[100,100]}

00:48:22.180 --> 00:48:22.690
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:48:22.690 --> 00:48:25.150
<v Speaker 0>And um, and I can also check to see how

NOTE CONF {"raw":[100,96,100,100,100,100,100,100,100,100]}

00:48:25.150 --> 00:48:26.920
<v Speaker 0>many of solutions there are in there.

NOTE CONF {"raw":[100,100,100,100,100,100,58]}

00:48:26.920 --> 00:48:28.570
<v Speaker 0>92 solutions.

NOTE CONF {"raw":[100,100]}

00:48:28.960 --> 00:48:32.260
<v Speaker 0>Um, and that only takes, it only takes, you know,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:32.260 --> 00:48:34.450
<v Speaker 0>a bit more than a second to generate them all.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:34.720 --> 00:48:35.470
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:48:35.470 --> 00:48:42.670
<v Speaker 0>In fact, um, 92 solutions, but, um, there's not 92

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:42.670 --> 00:48:46.360
<v Speaker 0>kind of individual solutions because there's lots of symmetries here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:46.360 --> 00:48:50.020
<v Speaker 0>So, um, if you've got if you've got a solution,

NOTE CONF {"raw":[100,71,100,100,100,100,100,100,100,100]}

00:48:50.020 --> 00:48:53.770
<v Speaker 0>then if you, if you rotate along the vertical axis,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:53.770 --> 00:48:54.940
<v Speaker 0>that's also a solution.

NOTE CONF {"raw":[73,100,100,100]}

00:48:54.940 --> 00:48:58.360
<v Speaker 0>Or if you rotate along the horizontal axis is also

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,95,100]}

00:48:58.360 --> 00:48:59.110
<v Speaker 0>solution.

NOTE CONF {"raw":[100]}

00:48:59.110 --> 00:49:00.790
<v Speaker 0>Or if you do both of them, it's also a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:00.790 --> 00:49:01.450
<v Speaker 0>solution.

NOTE CONF {"raw":[100]}

00:49:01.450 --> 00:49:04.360
<v Speaker 0>Or if you rotate, it's also a solution.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:49:04.360 --> 00:49:08.500
<v Speaker 0>And so I don't know how many really completely different

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:08.500 --> 00:49:12.580
<v Speaker 0>solutions there are, but um, uh, anyway, 92 is uh,

NOTE CONF {"raw":[100,100,100,100,100,45,100,100,100,55]}

00:49:12.580 --> 00:49:15.340
<v Speaker 0>is the number of solutions represented this way.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:49:15.820 --> 00:49:20.290
<v Speaker 0>And that is my last slide and I'm just on

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:20.290 --> 00:49:20.710
<v Speaker 0>time.

NOTE CONF {"raw":[100]}

00:49:20.710 --> 00:49:22.030
<v Speaker 0>So thank you for your attention.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:49:22.030 --> 00:49:25.990
<v Speaker 0>And this is actually my last lecture of this course.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:26.380 --> 00:49:30.280
<v Speaker 0>Um, because next week, um, Phil Wadler is talking about

NOTE CONF {"raw":[100,100,100,100,92,100,100,100,100,100]}

00:49:30.280 --> 00:49:30.850
<v Speaker 0>monads.

NOTE CONF {"raw":[100]}

00:49:30.850 --> 00:49:35.680
<v Speaker 0>Monads are are things that many people who learn about

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,97,100]}

00:49:35.680 --> 00:49:38.230
<v Speaker 0>Last Haskell get very excited about.

NOTE CONF {"raw":[52,100,100,100,100,100]}

00:49:38.230 --> 00:49:40.780
<v Speaker 0>And you will find all sorts of tutorials on the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:40.780 --> 00:49:42.460
<v Speaker 0>internet explaining them to you.

NOTE CONF {"raw":[100,100,100,100,100]}

00:49:42.460 --> 00:49:43.030
<v Speaker 0>So.

NOTE CONF {"raw":[100]}

00:49:43.030 --> 00:49:44.380
<v Speaker 0>And Phil invented them.

NOTE CONF {"raw":[100,100,100,100]}

00:49:44.380 --> 00:49:46.570
<v Speaker 0>So, uh, you want to hear him talk about them.

NOTE CONF {"raw":[100,58,100,100,100,100,100,100,100,100]}

00:49:46.570 --> 00:49:50.500
<v Speaker 0>And then in the, in the week after next, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:50.500 --> 00:49:53.110
<v Speaker 0>no lecture on Monday unless Phil needs it to finish

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:53.110 --> 00:49:58.120
<v Speaker 0>monads and Tuesday is, um, prize giving for the competition.

NOTE CONF {"raw":[100,100,100,100,96,100,100,100,100,100]}

00:49:58.120 --> 00:50:03.260
<v Speaker 0>Plus Phil yet again, uh, doing a special lecture on

NOTE CONF {"raw":[100,100,100,100,96,100,100,100,100,100]}

00:50:03.260 --> 00:50:06.800
<v Speaker 0>combinations between logic and and functional programming.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:50:06.800 --> 00:50:08.930
<v Speaker 0>So, um, see you then.

NOTE CONF {"raw":[100,100,100,100,100]}

00:50:09.410 --> 00:50:12.620
<v Speaker 0>Uh, and, uh, make sure you come to those lectures.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:50:12.620 --> 00:50:15.830
<v Speaker 0>Phil is a scintillating lecturer, and especially the last one

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:50:15.830 --> 00:50:17.060
<v Speaker 0>is a special event.

NOTE CONF {"raw":[100,100,100,100]}

00:50:17.060 --> 00:50:17.720
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:50:17.720 --> 00:50:18.770
<v Speaker 0>So thank you.

NOTE CONF {"raw":[100,100,100]}

00:50:18.890 --> 00:50:19.670
<v Speaker 0>And, uh.

NOTE CONF {"raw":[100,95]}

00:50:19.670 --> 00:50:19.970
<v Speaker 0>Yeah.

NOTE CONF {"raw":[81]}

00:50:28.610 --> 00:50:29.870
<v Speaker 0>And I'll clap for you, too.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:50:29.870 --> 00:50:30.380
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

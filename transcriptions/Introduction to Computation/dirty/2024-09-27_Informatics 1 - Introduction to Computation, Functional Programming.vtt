WEBVTT

00:00:05.850 --> 00:00:06.120
<v Speaker 0>Hello.

NOTE CONF {"raw":[100]}

00:00:06.120 --> 00:00:06.570
<v Speaker 0>Hello, hello.

NOTE CONF {"raw":[100,100]}

00:00:09.090 --> 00:00:11.640
<v Speaker 0>Oh, hello.

NOTE CONF {"raw":[97,100]}

00:00:11.970 --> 00:00:12.750
<v Speaker 0>Oh, it is working.

NOTE CONF {"raw":[58,100,100,100]}

00:00:14.190 --> 00:00:15.960
<v Speaker 0>Okay, can you come in and sit down, please?

NOTE CONF {"raw":[100,88,96,100,100,100,100,100,100]}

00:00:16.110 --> 00:00:18.930
<v Speaker 0>Lecture's starting right now.

NOTE CONF {"raw":[81,100,100,100]}

00:00:31.650 --> 00:00:32.460
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:00:33.000 --> 00:00:36.210
<v Speaker 0>Uh, so please sit down and, uh, we're starting off

NOTE CONF {"raw":[100,100,100,100,100,100,65,100,100,100]}

00:00:36.210 --> 00:00:39.480
<v Speaker 0>with a, uh, with a couple of minutes on inf

NOTE CONF {"raw":[100,89,100,100,100,100,100,100,100,58]}

00:00:39.480 --> 00:00:42.300
<v Speaker 0>pals, um, from Paulina and Vicky.

NOTE CONF {"raw":[67,81,100,100,100,52]}

00:00:42.510 --> 00:00:44.100
<v Speaker 0>Okay, so go ahead.

NOTE CONF {"raw":[100,100,100,100]}

00:00:48.600 --> 00:00:48.780
<v Speaker 0>Yeah.

NOTE CONF {"raw":[98]}

00:00:49.890 --> 00:00:50.100
<v Speaker 1>Um.

NOTE CONF {"raw":[74]}

00:00:50.220 --> 00:00:51.270
<v Speaker 1>Hi, everyone.

NOTE CONF {"raw":[100,100]}

00:00:51.990 --> 00:00:54.870
<v Speaker 1>So we're here to quickly tell you about impulse.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:00:54.900 --> 00:00:58.890
<v Speaker 1>It's a peer support service run by super qualified undergraduate

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:00:58.890 --> 00:00:59.640
<v Speaker 1>students.

NOTE CONF {"raw":[100]}

00:00:59.700 --> 00:01:02.100
<v Speaker 1>and we help you out with info and a bunch

NOTE CONF {"raw":[100,100,100,100,100,100,75,98,100,100]}

00:01:02.100 --> 00:01:03.750
<v Speaker 1>of cool extracurricular skills.

NOTE CONF {"raw":[100,100,100,100]}

00:01:03.780 --> 00:01:06.630
<v Speaker 1>We run three days a week in Appleton Tower.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:01:06.660 --> 00:01:08.250
<v Speaker 1>You can come whenever you like.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:01:08.280 --> 00:01:10.920
<v Speaker 1>There's no signup required, so just scan the website to

NOTE CONF {"raw":[100,100,97,100,100,100,100,100,100,100]}

00:01:10.920 --> 00:01:13.050
<v Speaker 1>see in detail which sessions we'll be doing.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:01:14.580 --> 00:01:16.680
<v Speaker 1>And there's no signup required either.

NOTE CONF {"raw":[100,100,100,55,100,100]}

00:01:17.790 --> 00:01:21.420
<v Speaker 2>Um, we are offering support specifically for infant A this

NOTE CONF {"raw":[100,100,100,100,100,100,100,60,48,100]}

00:01:21.420 --> 00:01:22.260
<v Speaker 2>semester.

NOTE CONF {"raw":[100]}

00:01:22.560 --> 00:01:25.260
<v Speaker 2>Um, so come along to practice and gain more confidence.

NOTE CONF {"raw":[89,100,100,100,100,100,100,100,100,100]}

00:01:25.590 --> 00:01:27.420
<v Speaker 2>Um, and the things you've been learning in the previous

NOTE CONF {"raw":[100,72,100,100,100,100,100,100,100,100]}

00:01:27.420 --> 00:01:27.990
<v Speaker 2>week.

NOTE CONF {"raw":[100]}

00:01:27.990 --> 00:01:31.440
<v Speaker 2>And we also run, um, skill sessions each week.

NOTE CONF {"raw":[100,100,100,100,100,97,100,100,100]}

00:01:31.800 --> 00:01:35.400
<v Speaker 2>Uh, and more next semester, specifically on things that which

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,82,100]}

00:01:35.400 --> 00:01:39.360
<v Speaker 2>are really useful, um, for your university career, which we

NOTE CONF {"raw":[100,100,100,98,100,100,100,100,100,100]}

00:01:39.360 --> 00:01:40.740
<v Speaker 2>thought we weren't really taught.

NOTE CONF {"raw":[100,100,100,100,100]}

00:01:41.190 --> 00:01:43.710
<v Speaker 2>Um, so things like git for you to download your

NOTE CONF {"raw":[100,100,100,100,77,100,100,100,100,100]}

00:01:43.710 --> 00:01:46.770
<v Speaker 2>assignments later on, which isn't really explained or command line

NOTE CONF {"raw":[100,100,100,100,100,100,87,100,100,100]}

00:01:46.770 --> 00:01:50.040
<v Speaker 2>to do some of your assignments in, uh, LaTeX, which

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:50.040 --> 00:01:51.510
<v Speaker 2>you might be required to write up some of your

NOTE CONF {"raw":[96,100,100,100,100,100,100,100,100,100]}

00:01:51.510 --> 00:01:52.290
<v Speaker 2>assignments.

NOTE CONF {"raw":[100]}

00:01:52.860 --> 00:01:56.610
<v Speaker 2>Um, and we also running this year portfolio website course.

NOTE CONF {"raw":[100,100,100,100,100,100,58,100,100,100]}

00:01:56.610 --> 00:01:58.750
<v Speaker 2>So if you've ever wanted to build your own website

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:58.750 --> 00:02:00.970
<v Speaker 2>and showcase all your achievements and your projects.

NOTE CONF {"raw":[100,100,100,100,100,98,100,100]}

00:02:01.150 --> 00:02:02.890
<v Speaker 2>That's a really good thing to come along to.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:02:04.840 --> 00:02:05.830
<v Speaker 1>Yeah, that's about it.

NOTE CONF {"raw":[100,100,100,100]}

00:02:05.830 --> 00:02:06.970
<v Speaker 1>Thank you so much for listening.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:02:06.970 --> 00:02:08.740
<v Speaker 1>Please scan the QR code and come along.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:02:08.770 --> 00:02:12.010
<v Speaker 1>We're starting next week Monday, Tuesday, Wednesday.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:02:12.010 --> 00:02:13.090
<v Speaker 1>Come to any of them.

NOTE CONF {"raw":[100,100,100,100,100]}

00:02:13.090 --> 00:02:15.400
<v Speaker 1>There's free snacks and hope to see you there.

NOTE CONF {"raw":[76,100,100,100,100,100,100,100,100]}

00:02:15.550 --> 00:02:17.470
<v Speaker 0>Did you say what Paul stands for?

NOTE CONF {"raw":[100,100,100,100,65,96,100]}

00:02:17.470 --> 00:02:20.560
<v Speaker 1>Oh, and Paul stands for peer assisted learning support.

NOTE CONF {"raw":[95,96,71,100,100,100,100,100,100]}

00:02:20.560 --> 00:02:22.300
<v Speaker 1>We're run by USAA as well as the School of

NOTE CONF {"raw":[95,100,100,43,100,100,100,100,100,100]}

00:02:22.300 --> 00:02:25.090
<v Speaker 1>Informatics, so we're really well supported.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:02:25.090 --> 00:02:25.780
<v Speaker 1>Come along.

NOTE CONF {"raw":[100,100]}

00:02:25.990 --> 00:02:26.440
<v Speaker 3>Good.

NOTE CONF {"raw":[100]}

00:02:26.950 --> 00:02:27.520
<v Speaker 0>Thanks.

NOTE CONF {"raw":[97]}

00:02:28.960 --> 00:02:29.740
<v Speaker 0>Thank you so much.

NOTE CONF {"raw":[100,100,100,100]}

00:02:29.740 --> 00:02:30.100
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:02:30.460 --> 00:02:30.730
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:02:35.230 --> 00:02:36.160
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:02:36.910 --> 00:02:40.000
<v Speaker 0>So, uh.

NOTE CONF {"raw":[100,100]}

00:02:45.250 --> 00:02:50.320
<v Speaker 0>Starting off with, uh, ride of the Valkyries by Richard

NOTE CONF {"raw":[100,100,100,84,100,100,100,100,100,100]}

00:02:50.320 --> 00:02:50.860
<v Speaker 0>Wagner.

NOTE CONF {"raw":[100]}

00:02:52.600 --> 00:02:54.730
<v Speaker 0>And I wish this could be louder because it really

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:54.730 --> 00:02:56.830
<v Speaker 0>only works if it's deafening.

NOTE CONF {"raw":[100,100,100,100,100]}

00:04:12.590 --> 00:04:13.880
<v Speaker 0>Okay, I'll stop there.

NOTE CONF {"raw":[100,100,100,100]}

00:04:13.910 --> 00:04:14.720
<v Speaker 0>The, um.

NOTE CONF {"raw":[100,100]}

00:04:14.720 --> 00:04:16.430
<v Speaker 0>This is not really working very well.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:04:16.519 --> 00:04:16.910
<v Speaker 0>It's not.

NOTE CONF {"raw":[98,100]}

00:04:16.910 --> 00:04:18.079
<v Speaker 0>It's not loud enough.

NOTE CONF {"raw":[100,100,100,100]}

00:04:18.260 --> 00:04:20.810
<v Speaker 0>Um, I don't know how I can get that to

NOTE CONF {"raw":[100,77,100,100,100,100,100,100,100,100]}

00:04:20.810 --> 00:04:21.530
<v Speaker 0>be better.

NOTE CONF {"raw":[100,100]}

00:04:21.530 --> 00:04:24.440
<v Speaker 0>My previous lecture theatre, it was much better.

NOTE CONF {"raw":[100,100,100,80,100,100,100,100]}

00:04:24.440 --> 00:04:28.970
<v Speaker 0>Okay, so today I'm going to be talking about more

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:28.970 --> 00:04:31.340
<v Speaker 0>about lists and about recursion.

NOTE CONF {"raw":[100,100,100,100,100]}

00:04:32.960 --> 00:04:35.780
<v Speaker 0>Um, so this week you've got you've had a lecture

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:35.780 --> 00:04:38.570
<v Speaker 0>on Monday about a list comprehension.

NOTE CONF {"raw":[100,100,100,58,100,100]}

00:04:38.570 --> 00:04:40.550
<v Speaker 0>And I'm doing Friday as well.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:04:40.550 --> 00:04:43.190
<v Speaker 0>Today we're out of order because I was travelling this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,96,100]}

00:04:43.190 --> 00:04:43.430
<v Speaker 0>week.

NOTE CONF {"raw":[100]}

00:04:43.430 --> 00:04:46.730
<v Speaker 0>So um, so another way to do things with lists

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:46.730 --> 00:04:48.590
<v Speaker 0>is using recursion.

NOTE CONF {"raw":[100,100,100]}

00:04:48.980 --> 00:04:51.830
<v Speaker 0>Um, so I told you about this comprehension.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:04:51.830 --> 00:04:55.790
<v Speaker 0>I explained this is kind of woosh style programming Okay.

NOTE CONF {"raw":[100,85,100,100,100,100,85,100,100,100]}

00:04:55.790 --> 00:05:01.070
<v Speaker 0>And, um, recursion is the functional programming way of doing

NOTE CONF {"raw":[100,99,100,100,100,100,100,100,100,100]}

00:05:01.070 --> 00:05:03.170
<v Speaker 0>a kind of, um, element at a time.

NOTE CONF {"raw":[100,100,100,96,100,100,100,100]}

00:05:03.590 --> 00:05:07.880
<v Speaker 0>Um, programming, it's it is the closest thing you have

NOTE CONF {"raw":[100,100,91,100,100,100,100,100,100,100]}

00:05:07.880 --> 00:05:11.210
<v Speaker 0>to loops in conventional programming languages.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:05:11.210 --> 00:05:13.850
<v Speaker 0>If then else while loops and that sort of thing.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:14.120 --> 00:05:18.140
<v Speaker 0>Um, some things can't be written using comprehension.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:05:18.140 --> 00:05:20.870
<v Speaker 0>And we'll see an example of that later on in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:20.870 --> 00:05:21.650
<v Speaker 0>the lecture.

NOTE CONF {"raw":[100,100]}

00:05:21.650 --> 00:05:25.250
<v Speaker 0>But with recursion you can do anything.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:05:26.000 --> 00:05:26.660
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:05:26.660 --> 00:05:28.910
<v Speaker 0>And when I say you can do anything that's actually

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:28.910 --> 00:05:29.780
<v Speaker 0>a theorem.

NOTE CONF {"raw":[100,100]}

00:05:30.110 --> 00:05:33.050
<v Speaker 0>Um, uh, you can prove.

NOTE CONF {"raw":[100,100,100,100,100]}

00:05:33.050 --> 00:05:36.170
<v Speaker 0>So um, you might have heard of Turing machines.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:05:36.170 --> 00:05:39.650
<v Speaker 0>It's a kind of mathematical model of computation.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:05:39.980 --> 00:05:41.990
<v Speaker 0>Um, and the idea is that if you can compute

NOTE CONF {"raw":[98,100,100,100,100,100,100,100,100,100]}

00:05:41.990 --> 00:05:44.780
<v Speaker 0>something with a Turing machine, that's what it means for

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:44.780 --> 00:05:46.280
<v Speaker 0>something to be computable.

NOTE CONF {"raw":[100,100,100,100]}

00:05:46.280 --> 00:05:46.550
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:05:46.550 --> 00:05:49.100
<v Speaker 0>It's a very simple model of competition with little, little

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:49.100 --> 00:05:53.970
<v Speaker 0>tiny steps and, um, uh, but you can compute You

NOTE CONF {"raw":[100,100,100,100,54,100,100,100,100,100]}

00:05:53.970 --> 00:05:56.550
<v Speaker 0>can compute anything that you can compute with a with

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:56.550 --> 00:05:57.690
<v Speaker 0>a big computer, okay.

NOTE CONF {"raw":[100,100,100,100]}

00:05:57.690 --> 00:06:00.270
<v Speaker 0>It's the same, same same power.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:06:00.270 --> 00:06:04.920
<v Speaker 0>And there is a theorem which says that recursive defined

NOTE CONF {"raw":[100,91,91,100,100,100,100,100,100,72]}

00:06:04.920 --> 00:06:08.730
<v Speaker 0>ability is equivalent to Turing computability.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:06:08.730 --> 00:06:12.510
<v Speaker 0>So you can prove mathematically that anything you can compute

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:12.510 --> 00:06:15.630
<v Speaker 0>with the Turing machine, you can uh define with the

NOTE CONF {"raw":[100,55,100,100,100,100,100,100,100,69]}

00:06:15.630 --> 00:06:17.280
<v Speaker 0>recursive function and vice versa.

NOTE CONF {"raw":[100,100,100,100,100]}

00:06:17.280 --> 00:06:18.450
<v Speaker 0>So they're equivalent.

NOTE CONF {"raw":[100,95,100]}

00:06:18.660 --> 00:06:19.380
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:06:19.650 --> 00:06:21.600
<v Speaker 0>Um, okay.

NOTE CONF {"raw":[100,100]}

00:06:21.600 --> 00:06:22.740
<v Speaker 0>And this is uh, the church.

NOTE CONF {"raw":[100,100,100,78,100,100]}

00:06:23.220 --> 00:06:26.550
<v Speaker 0>Church Turing thesis is the name of this, um, of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,97,100]}

00:06:26.550 --> 00:06:27.420
<v Speaker 0>this theorem.

NOTE CONF {"raw":[100,100]}

00:06:27.540 --> 00:06:28.380
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:06:28.590 --> 00:06:30.840
<v Speaker 0>Uh, before I get to recursion, I need to say

NOTE CONF {"raw":[94,100,100,100,100,100,100,100,100,100]}

00:06:30.840 --> 00:06:34.470
<v Speaker 0>a little bit more about, um, what's going on here?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:35.460 --> 00:06:38.160
<v Speaker 0>Why did my screen go blank?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:06:41.040 --> 00:06:42.120
<v Speaker 0>That's interesting.

NOTE CONF {"raw":[100,100]}

00:06:44.760 --> 00:06:47.670
<v Speaker 0>Okay, where are the rest of my slides?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:06:49.860 --> 00:06:50.370
<v Speaker 0>Uh huh.

NOTE CONF {"raw":[100,100]}

00:06:52.500 --> 00:06:53.280
<v Speaker 0>Just a second.

NOTE CONF {"raw":[100,100,100]}

00:06:54.720 --> 00:06:55.440
<v Speaker 0>Oh, there they are.

NOTE CONF {"raw":[100,100,100,100]}

00:06:55.470 --> 00:06:56.010
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:06:56.400 --> 00:06:56.820
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:06:58.290 --> 00:06:59.280
<v Speaker 0>Interesting.

NOTE CONF {"raw":[100]}

00:07:06.600 --> 00:07:06.840
<v Speaker 0>Hmm.

NOTE CONF {"raw":[85]}

00:07:09.840 --> 00:07:10.620
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:07:11.010 --> 00:07:12.270
<v Speaker 0>That's a new.

NOTE CONF {"raw":[100,100,100]}

00:07:12.300 --> 00:07:15.600
<v Speaker 0>That's a new, um, bug that I haven't seen before.

NOTE CONF {"raw":[100,100,100,100,100,100,100,95,100,100]}

00:07:24.870 --> 00:07:25.650
<v Speaker 0>Oh, great.

NOTE CONF {"raw":[100,100]}

00:07:29.430 --> 00:07:30.150
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:07:30.450 --> 00:07:34.620
<v Speaker 0>Um, luckily, I have a laptop with me which has

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:34.620 --> 00:07:35.700
<v Speaker 0>the same stuff on it.

NOTE CONF {"raw":[100,100,100,100,100]}

00:07:36.450 --> 00:07:38.460
<v Speaker 0>Uh, give me a second and I will find it.

NOTE CONF {"raw":[97,100,100,100,100,100,100,100,100,100]}

00:07:39.150 --> 00:07:41.820
<v Speaker 0>You may have read there some sort of big computing

NOTE CONF {"raw":[100,100,100,100,58,100,100,100,100,100]}

00:07:41.820 --> 00:07:44.190
<v Speaker 0>outage this week or today.

NOTE CONF {"raw":[100,100,100,100,100]}

00:07:44.880 --> 00:07:48.780
<v Speaker 0>Um, and it looks like it's just started affecting the,

NOTE CONF {"raw":[95,100,96,100,100,100,100,100,100,100]}

00:07:48.780 --> 00:07:52.150
<v Speaker 0>uh, that machine.

NOTE CONF {"raw":[100,100,100]}

00:08:11.860 --> 00:08:12.460
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:08:13.060 --> 00:08:13.450
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:08:13.450 --> 00:08:14.260
<v Speaker 0>Carrying on.

NOTE CONF {"raw":[100,98]}

00:08:14.290 --> 00:08:16.180
<v Speaker 0>Okay, so before we get to recursion, I need to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:16.180 --> 00:08:17.770
<v Speaker 0>explain a little bit more about lists.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:08:17.770 --> 00:08:19.420
<v Speaker 0>You've heard about lists last time.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:08:19.690 --> 00:08:24.130
<v Speaker 0>Um, so I've explained already there's an operation called cons,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:24.430 --> 00:08:25.720
<v Speaker 0>uh, written with a colon.

NOTE CONF {"raw":[81,100,100,100,100]}

00:08:25.720 --> 00:08:28.210
<v Speaker 0>With this type, it takes an element and a list

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:28.210 --> 00:08:30.070
<v Speaker 0>puts an element onto the front of a list.

NOTE CONF {"raw":[100,100,100,100,100,100,100,97,100]}

00:08:30.070 --> 00:08:30.610
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:08:30.610 --> 00:08:32.500
<v Speaker 0>The element has to be the same type as the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:32.500 --> 00:08:33.400
<v Speaker 0>things in the list.

NOTE CONF {"raw":[100,100,100,100]}

00:08:33.400 --> 00:08:35.409
<v Speaker 0>Everything in the list has to be the same type.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:35.409 --> 00:08:39.130
<v Speaker 0>And so you use cons like in this example here

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:39.130 --> 00:08:40.990
<v Speaker 0>to put a one on the front of a list

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:40.990 --> 00:08:43.719
<v Speaker 0>containing two and three, you get a list containing all

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:43.719 --> 00:08:44.050
<v Speaker 0>three.

NOTE CONF {"raw":[100]}

00:08:44.080 --> 00:08:45.160
<v Speaker 0>Very exciting.

NOTE CONF {"raw":[100,100]}

00:08:45.430 --> 00:08:46.330
<v Speaker 0>Um, yes.

NOTE CONF {"raw":[100,100]}

00:08:46.330 --> 00:08:51.310
<v Speaker 0>Um, uh, so there's another operation that you will encounter

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:51.310 --> 00:08:52.750
<v Speaker 0>and it's pronounced append.

NOTE CONF {"raw":[100,97,100,100]}

00:08:52.750 --> 00:08:56.170
<v Speaker 0>And it's written with two pluses also as an as

NOTE CONF {"raw":[100,100,100,100,100,91,100,100,94,100]}

00:08:56.170 --> 00:08:57.700
<v Speaker 0>an infix operation okay.

NOTE CONF {"raw":[100,100,100,100]}

00:08:57.700 --> 00:08:59.740
<v Speaker 0>In between the two arguments okay.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:08:59.740 --> 00:09:02.410
<v Speaker 0>And that's for taking two lists of the same type

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:02.410 --> 00:09:05.110
<v Speaker 0>and putting them together end to end.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:09:05.110 --> 00:09:10.000
<v Speaker 0>So you've got list one here appended to list here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:10.150 --> 00:09:12.370
<v Speaker 0>And it just joins them in the middle.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:09:12.370 --> 00:09:12.910
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:09:14.680 --> 00:09:19.000
<v Speaker 0>Um, so I mentioned this at this point just because

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:19.540 --> 00:09:22.300
<v Speaker 0>uh, these are kind of similar but different okay.

NOTE CONF {"raw":[71,100,100,100,100,100,100,100,100]}

00:09:22.300 --> 00:09:23.530
<v Speaker 0>The types are different.

NOTE CONF {"raw":[100,100,100,100]}

00:09:24.040 --> 00:09:27.280
<v Speaker 0>So cons takes an element and a list and produces

NOTE CONF {"raw":[100,100,100,100,100,58,95,100,100,100]}

00:09:27.280 --> 00:09:27.940
<v Speaker 0>a list.

NOTE CONF {"raw":[100,100]}

00:09:28.060 --> 00:09:30.640
<v Speaker 0>Append takes two lists produces a list.

NOTE CONF {"raw":[87,100,100,100,100,100,100]}

00:09:30.640 --> 00:09:35.020
<v Speaker 0>They both put things together okay.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:09:35.020 --> 00:09:35.830
<v Speaker 0>End to end.

NOTE CONF {"raw":[100,100,100]}

00:09:36.580 --> 00:09:38.860
<v Speaker 0>Here's examples of the use of append.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:09:39.190 --> 00:09:40.390
<v Speaker 0>So there's there's cons.

NOTE CONF {"raw":[100,100,100,100]}

00:09:40.390 --> 00:09:41.110
<v Speaker 0>The first one.

NOTE CONF {"raw":[100,100,100]}

00:09:41.110 --> 00:09:43.000
<v Speaker 0>These are all uses of append.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:09:43.000 --> 00:09:45.280
<v Speaker 0>If you try to use them in the wrong way

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:45.280 --> 00:09:46.540
<v Speaker 0>you get a typeerror.

NOTE CONF {"raw":[100,100,100,61]}

00:09:46.540 --> 00:09:48.670
<v Speaker 0>If you try to use cons to put an element

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:48.670 --> 00:09:50.080
<v Speaker 0>on the wrong end of a list.

NOTE CONF {"raw":[100,100,100,100,100,96,100]}

00:09:50.110 --> 00:09:53.470
<v Speaker 0>It's type error if you use cons to put in

NOTE CONF {"raw":[98,100,100,100,100,100,100,100,100,86]}

00:09:53.650 --> 00:09:55.870
<v Speaker 0>to put a list on the front of another list,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:55.870 --> 00:09:56.950
<v Speaker 0>that's a type error.

NOTE CONF {"raw":[100,100,98,98]}

00:09:57.700 --> 00:10:00.460
<v Speaker 0>Um, if you use append to put an element, a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:00.460 --> 00:10:02.380
<v Speaker 0>single element which isn't a list on the front of

NOTE CONF {"raw":[100,100,100,100,97,100,100,100,100,100]}

00:10:02.380 --> 00:10:04.570
<v Speaker 0>a list, that's a type error, and so forth.

NOTE CONF {"raw":[95,100,100,100,100,100,100,100,100]}

00:10:04.570 --> 00:10:05.860
<v Speaker 0>These are all type errors.

NOTE CONF {"raw":[100,100,100,100,100]}

00:10:07.840 --> 00:10:08.530
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:10:08.890 --> 00:10:11.170
<v Speaker 0>So these functions are easy to confuse.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:10:11.170 --> 00:10:12.100
<v Speaker 0>They're different.

NOTE CONF {"raw":[100,100]}

00:10:12.760 --> 00:10:15.670
<v Speaker 0>Um, the the differences in the types okay.

NOTE CONF {"raw":[100,98,100,100,100,100,100,100]}

00:10:15.670 --> 00:10:16.720
<v Speaker 0>Types are important.

NOTE CONF {"raw":[100,100,100]}

00:10:17.080 --> 00:10:20.410
<v Speaker 0>So Haskell is kind of annoying.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:10:20.410 --> 00:10:23.170
<v Speaker 0>You might think you might have already encountered type errors.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:23.260 --> 00:10:23.980
<v Speaker 0>Probably have.

NOTE CONF {"raw":[100,100]}

00:10:23.980 --> 00:10:24.550
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:10:24.790 --> 00:10:27.910
<v Speaker 0>Um, you it insists on the types being correct.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:10:29.320 --> 00:10:32.020
<v Speaker 0>Um, if the types are not correct, it refuses to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:32.020 --> 00:10:32.800
<v Speaker 0>do anything.

NOTE CONF {"raw":[100,100]}

00:10:32.800 --> 00:10:34.390
<v Speaker 0>It just says types are wrong.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:10:34.390 --> 00:10:35.500
<v Speaker 0>Go away and fix them.

NOTE CONF {"raw":[100,100,100,100,100]}

00:10:35.830 --> 00:10:38.950
<v Speaker 0>Okay, now this is annoying, so why can't I just

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:38.950 --> 00:10:40.030
<v Speaker 0>say what I want?

NOTE CONF {"raw":[100,100,100,100]}

00:10:40.030 --> 00:10:41.590
<v Speaker 0>And Haskell is.

NOTE CONF {"raw":[100,100,100]}

00:10:41.590 --> 00:10:43.690
<v Speaker 0>Which should be so clever that it will figure out

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:43.690 --> 00:10:46.780
<v Speaker 0>what I mean and do the right thing.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:10:47.050 --> 00:10:50.090
<v Speaker 0>Okay, Well, um.

NOTE CONF {"raw":[100,100,100]}

00:10:51.890 --> 00:10:53.300
<v Speaker 0>That's possible.

NOTE CONF {"raw":[100,100]}

00:10:53.480 --> 00:10:54.260
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:10:54.470 --> 00:10:57.320
<v Speaker 0>Um, the problem is, you know, in these days of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:57.320 --> 00:11:00.680
<v Speaker 0>of of AI and ChatGPT and so forth, it's, uh,

NOTE CONF {"raw":[100,100,100,94,100,100,100,100,100,100]}

00:11:00.680 --> 00:11:02.060
<v Speaker 0>it's even easier than it used to be.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:11:02.060 --> 00:11:05.660
<v Speaker 0>But, um, anyway, the thing with this is that if

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:05.660 --> 00:11:11.930
<v Speaker 0>the if the computer guesses what I mean, okay, maybe

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:11.930 --> 00:11:15.050
<v Speaker 0>it'll get it right 90% of the time.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:11:15.170 --> 00:11:15.710
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:11:15.710 --> 00:11:17.750
<v Speaker 0>And that's, that's very helpful.

NOTE CONF {"raw":[100,100,100,100,100]}

00:11:17.750 --> 00:11:18.110
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:11:18.110 --> 00:11:21.290
<v Speaker 0>But the other 10% of the time, um, it's going

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:21.290 --> 00:11:26.720
<v Speaker 0>to be a real problem because, uh, uh, a mistake.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:27.410 --> 00:11:30.650
<v Speaker 0>That's a mistake in what the computer has guessed you.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:30.860 --> 00:11:32.360
<v Speaker 0>It thinks you mean.

NOTE CONF {"raw":[100,100,100,100]}

00:11:33.380 --> 00:11:35.690
<v Speaker 0>Imagine trying to track down a bug like that.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:11:35.690 --> 00:11:39.050
<v Speaker 0>So what you wrote, and then the computer guesses what

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:39.050 --> 00:11:41.510
<v Speaker 0>you meant, and then it doesn't work, and you have

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:41.510 --> 00:11:44.210
<v Speaker 0>to figure out what the computer was guessing and so

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:44.210 --> 00:11:44.570
<v Speaker 0>forth.

NOTE CONF {"raw":[100]}

00:11:44.570 --> 00:11:46.370
<v Speaker 0>It's really hard to track these kind of things down

NOTE CONF {"raw":[100,100,100,100,100,100,82,100,100,100]}

00:11:46.370 --> 00:11:46.820
<v Speaker 0>to get.

NOTE CONF {"raw":[73,75]}

00:11:46.820 --> 00:11:48.950
<v Speaker 0>It's better to just get it right.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:11:49.100 --> 00:11:49.700
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:11:49.700 --> 00:11:53.300
<v Speaker 0>And another reason, if you get it right, then what

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:53.300 --> 00:11:55.430
<v Speaker 0>you've written is what the computer is doing.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:11:55.430 --> 00:11:57.860
<v Speaker 0>If it's not right, you can see what you wrote.

NOTE CONF {"raw":[100,97,100,100,100,100,100,100,100,100]}

00:11:57.860 --> 00:12:00.740
<v Speaker 0>You can see, you can figure out what it's doing.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:00.740 --> 00:12:02.540
<v Speaker 0>You can figure out why it's wrong.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:12:02.540 --> 00:12:03.290
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:12:03.650 --> 00:12:08.630
<v Speaker 0>Um, but often also a type error is a sign

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:08.660 --> 00:12:10.580
<v Speaker 0>of a deeper mistake in your thinking.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:12:10.790 --> 00:12:11.570
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:12:11.720 --> 00:12:14.360
<v Speaker 0>Um, not just that you use the wrong operation here,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:14.360 --> 00:12:16.580
<v Speaker 0>but in some more complicated program, you get a type

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,74]}

00:12:16.580 --> 00:12:16.850
<v Speaker 0>error.

NOTE CONF {"raw":[74]}

00:12:16.850 --> 00:12:19.340
<v Speaker 0>Often it means you didn't quite understand what you were

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:19.340 --> 00:12:19.940
<v Speaker 0>doing.

NOTE CONF {"raw":[100]}

00:12:20.930 --> 00:12:23.270
<v Speaker 0>And when you get a type error, you realise, oh,

NOTE CONF {"raw":[100,100,100,100,90,100,100,100,96,100]}

00:12:23.390 --> 00:12:28.520
<v Speaker 0>I forgot some case that I didn't think of before.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:28.520 --> 00:12:32.810
<v Speaker 0>So, um, it's like a, not a not a typo,

NOTE CONF {"raw":[100,58,100,100,100,100,99,100,100,100]}

00:12:32.810 --> 00:12:33.410
<v Speaker 0>but a think.

NOTE CONF {"raw":[100,100,89]}

00:12:33.410 --> 00:12:34.550
<v Speaker 0>Oh, all right.

NOTE CONF {"raw":[89,100,100]}

00:12:34.550 --> 00:12:36.350
<v Speaker 0>It exposes your thing goes.

NOTE CONF {"raw":[100,100,100,77,90]}

00:12:36.350 --> 00:12:40.670
<v Speaker 0>And there's a, there's a kind of, um, claim in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:40.670 --> 00:12:44.930
<v Speaker 0>functional programming and, and these programming languages with these strong

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:44.930 --> 00:12:48.840
<v Speaker 0>type systems that if you get the types right, then

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:48.840 --> 00:12:50.970
<v Speaker 0>most of the time the program will be right.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:12:50.970 --> 00:12:55.320
<v Speaker 0>And that's not 100% true, but it's it's actually pretty,

NOTE CONF {"raw":[100,100,100,98,100,100,100,83,100,100]}

00:12:55.320 --> 00:12:57.090
<v Speaker 0>uh, pretty close.

NOTE CONF {"raw":[100,100,100]}

00:12:57.090 --> 00:13:00.300
<v Speaker 0>It's, um, it's pretty accurate that the types are a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:00.300 --> 00:13:01.470
<v Speaker 0>lot of the story.

NOTE CONF {"raw":[100,100,100,100]}

00:13:01.890 --> 00:13:02.730
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:13:03.000 --> 00:13:05.910
<v Speaker 0>Um, so get them right and your life will be,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:06.450 --> 00:13:07.500
<v Speaker 0>uh, much better.

NOTE CONF {"raw":[100,100,100]}

00:13:07.530 --> 00:13:08.070
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:13:08.070 --> 00:13:09.540
<v Speaker 0>Now lists.

NOTE CONF {"raw":[100,100]}

00:13:10.860 --> 00:13:13.740
<v Speaker 0>So cons is is special.

NOTE CONF {"raw":[100,100,100,100,100]}

00:13:14.700 --> 00:13:18.180
<v Speaker 0>And the reason it's special is, is because of is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,93]}

00:13:18.180 --> 00:13:19.260
<v Speaker 0>because of this property.

NOTE CONF {"raw":[100,100,100,100]}

00:13:19.260 --> 00:13:23.910
<v Speaker 0>So every list can be written using only this cons

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:23.910 --> 00:13:26.370
<v Speaker 0>operation and the empty list.

NOTE CONF {"raw":[100,100,100,100,100]}

00:13:26.370 --> 00:13:28.170
<v Speaker 0>The empty list is usually called not.

NOTE CONF {"raw":[100,100,100,100,100,100,68]}

00:13:28.290 --> 00:13:30.060
<v Speaker 0>It's called nil okay.

NOTE CONF {"raw":[97,100,100,100]}

00:13:30.060 --> 00:13:34.080
<v Speaker 0>This brackets square brackets with nothing inside the empty list.

NOTE CONF {"raw":[100,100,100,100,100,100,100,95,100,100]}

00:13:34.080 --> 00:13:35.190
<v Speaker 0>Nil okay.

NOTE CONF {"raw":[100,100]}

00:13:35.190 --> 00:13:39.090
<v Speaker 0>Every list can be written using only these two things.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:39.090 --> 00:13:40.380
<v Speaker 0>And here is an example.

NOTE CONF {"raw":[100,52,52,100,100]}

00:13:40.380 --> 00:13:41.070
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:13:41.310 --> 00:13:43.140
<v Speaker 0>Uh, this list can be written.

NOTE CONF {"raw":[95,100,100,100,100,100]}

00:13:43.470 --> 00:13:45.060
<v Speaker 0>Uh, of course you need the elements of the list,

NOTE CONF {"raw":[76,100,100,100,100,100,100,100,100,100]}

00:13:45.060 --> 00:13:49.110
<v Speaker 0>but then the operations are cons and nil and this,

NOTE CONF {"raw":[100,100,100,100,100,96,100,100,100,100]}

00:13:49.110 --> 00:13:52.800
<v Speaker 0>um, list of characters or string can be written um,

NOTE CONF {"raw":[49,100,100,100,100,100,100,100,100,98]}

00:13:53.070 --> 00:13:55.200
<v Speaker 0>again using cons and nil.

NOTE CONF {"raw":[100,100,100,100,100]}

00:13:55.200 --> 00:13:58.530
<v Speaker 0>It's kind of obvious if the pattern that you're using

NOTE CONF {"raw":[100,100,100,100,68,100,100,100,100,100]}

00:13:58.530 --> 00:13:59.880
<v Speaker 0>there is kind of obvious.

NOTE CONF {"raw":[100,100,100,100,100]}

00:14:00.270 --> 00:14:01.080
<v Speaker 0>Um, okay.

NOTE CONF {"raw":[100,100]}

00:14:01.080 --> 00:14:02.760
<v Speaker 0>Anyway, this is a, this is a property.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:14:02.760 --> 00:14:05.610
<v Speaker 0>And not only that, but it can be written.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:14:05.610 --> 00:14:08.820
<v Speaker 0>Every list can be written only one way using cons

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:08.820 --> 00:14:09.510
<v Speaker 0>and nil.

NOTE CONF {"raw":[100,100]}

00:14:11.160 --> 00:14:11.700
<v Speaker 0>All right.

NOTE CONF {"raw":[89,89]}

00:14:11.700 --> 00:14:14.070
<v Speaker 0>So there is no other way to write this list

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:14.070 --> 00:14:16.950
<v Speaker 0>one two, three using cons and nil other than what

NOTE CONF {"raw":[100,75,100,100,100,100,100,100,100,100]}

00:14:16.950 --> 00:14:18.960
<v Speaker 0>I've written down here okay.

NOTE CONF {"raw":[100,100,100,100,100]}

00:14:21.870 --> 00:14:22.230
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:14:22.230 --> 00:14:23.310
<v Speaker 0>And that's because.

NOTE CONF {"raw":[100,100,100]}

00:14:23.310 --> 00:14:25.320
<v Speaker 0>And so we can use that to define what a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:25.320 --> 00:14:26.280
<v Speaker 0>list is.

NOTE CONF {"raw":[100,100]}

00:14:26.700 --> 00:14:29.250
<v Speaker 0>So a list a list is a is a thing

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:29.250 --> 00:14:33.900
<v Speaker 0>that I can build using cons and nil okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:14:33.900 --> 00:14:36.870
<v Speaker 0>So uh there's the case where there's a there's a

NOTE CONF {"raw":[100,96,100,100,100,100,100,100,100,100]}

00:14:36.870 --> 00:14:39.390
<v Speaker 0>nil and no cons is that we call the empty

NOTE CONF {"raw":[100,100,100,100,60,57,100,100,100,100]}

00:14:39.390 --> 00:14:40.050
<v Speaker 0>list.

NOTE CONF {"raw":[100]}

00:14:40.470 --> 00:14:40.860
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:14:40.860 --> 00:14:42.840
<v Speaker 0>Written like that.

NOTE CONF {"raw":[100,100,100]}

00:14:42.850 --> 00:14:48.610
<v Speaker 0>nil, or what we can call a constructed list written

NOTE CONF {"raw":[75,100,100,100,100,100,100,100,100,100]}

00:14:48.610 --> 00:14:53.620
<v Speaker 0>using cons, where the head is an element, let's call

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:53.620 --> 00:14:57.700
<v Speaker 0>it x and the tail, let's call it x.

NOTE CONF {"raw":[100,100,100,100,98,100,100,100,43]}

00:14:57.700 --> 00:14:59.380
<v Speaker 0>Is is a list.

NOTE CONF {"raw":[37,100,100,100]}

00:15:00.700 --> 00:15:01.390
<v Speaker 0>Okay.

NOTE CONF {"raw":[94]}

00:15:02.500 --> 00:15:04.420
<v Speaker 0>Uh cons x xz.

NOTE CONF {"raw":[75,100,99,45]}

00:15:06.040 --> 00:15:06.850
<v Speaker 0>All right.

NOTE CONF {"raw":[98,98]}

00:15:08.230 --> 00:15:09.940
<v Speaker 0>I'll have something to say about this definition in a

NOTE CONF {"raw":[99,100,100,100,100,100,100,100,100,100]}

00:15:09.940 --> 00:15:10.180
<v Speaker 0>second.

NOTE CONF {"raw":[100]}

00:15:10.180 --> 00:15:14.620
<v Speaker 0>This is called a recursive definition because it, um, it

NOTE CONF {"raw":[91,91,100,100,100,100,100,100,100,100]}

00:15:14.620 --> 00:15:15.880
<v Speaker 0>defines a list.

NOTE CONF {"raw":[100,97,100]}

00:15:16.420 --> 00:15:19.210
<v Speaker 0>So this is the the property of being a list.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:20.170 --> 00:15:21.280
<v Speaker 0>So what is a list.

NOTE CONF {"raw":[100,100,100,68,100]}

00:15:21.280 --> 00:15:26.380
<v Speaker 0>It's defining that recursively meaning that it defines a list

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:26.380 --> 00:15:28.450
<v Speaker 0>in terms of lists.

NOTE CONF {"raw":[100,100,100,100]}

00:15:28.450 --> 00:15:31.720
<v Speaker 0>So it uses the thing it's defining in the definition.

NOTE CONF {"raw":[100,100,100,100,100,89,100,100,100,100]}

00:15:33.130 --> 00:15:34.780
<v Speaker 0>And I'll come back to that in a second okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:34.780 --> 00:15:37.900
<v Speaker 0>But for now let me just say the fact that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:37.900 --> 00:15:40.570
<v Speaker 0>every list can be written only one way using these

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:40.570 --> 00:15:42.940
<v Speaker 0>two operations means that we can use this, as.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:15:42.940 --> 00:15:46.330
<v Speaker 0>This is why we can use pattern matching to define

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:46.330 --> 00:15:47.050
<v Speaker 0>things.

NOTE CONF {"raw":[100]}

00:15:47.170 --> 00:15:51.250
<v Speaker 0>So every lists, every list matches exactly one of these

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:51.250 --> 00:15:52.060
<v Speaker 0>two patterns.

NOTE CONF {"raw":[100,100]}

00:15:52.060 --> 00:15:57.220
<v Speaker 0>It's either empty or it's it's a head x.

NOTE CONF {"raw":[100,100,100,100,99,100,100,100,100]}

00:15:57.760 --> 00:16:01.270
<v Speaker 0>Uh, cons uh, the tail XS.

NOTE CONF {"raw":[100,100,84,100,100,79]}

00:16:01.930 --> 00:16:05.830
<v Speaker 0>This will match only non-empty lists okay.

NOTE CONF {"raw":[100,100,100,100,98,100,100]}

00:16:05.830 --> 00:16:08.830
<v Speaker 0>And if we're presented with a non-empty list we know

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:08.830 --> 00:16:10.000
<v Speaker 0>what x is.

NOTE CONF {"raw":[100,100,100]}

00:16:10.000 --> 00:16:14.440
<v Speaker 0>And we know what x is, is because there's only

NOTE CONF {"raw":[100,100,100,100,75,68,100,100,100,100]}

00:16:14.440 --> 00:16:16.270
<v Speaker 0>one way of writing the list using cons.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:16:16.270 --> 00:16:18.700
<v Speaker 0>And so x is the thing before the cons and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:18.700 --> 00:16:21.790
<v Speaker 0>x is the thing x is is the thing after

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:21.790 --> 00:16:22.570
<v Speaker 0>the cons.

NOTE CONF {"raw":[100,100]}

00:16:23.350 --> 00:16:24.130
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:16:24.490 --> 00:16:28.960
<v Speaker 0>Um, so that's the this fact, the way that we

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:28.960 --> 00:16:30.070
<v Speaker 0>define lists.

NOTE CONF {"raw":[100,100]}

00:16:32.200 --> 00:16:36.400
<v Speaker 0>Uh, which leads to this, um, this property is where

NOTE CONF {"raw":[97,100,100,100,100,100,100,100,100,100]}

00:16:36.400 --> 00:16:41.030
<v Speaker 0>we get pattern matching from, of course, the names of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:41.030 --> 00:16:42.380
<v Speaker 0>the variables don't matter.

NOTE CONF {"raw":[100,100,100,100]}

00:16:43.310 --> 00:16:44.030
<v Speaker 0>Okay.

NOTE CONF {"raw":[73]}

00:16:47.150 --> 00:16:49.880
<v Speaker 0>And so, for example, um, you know, if I have

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:49.880 --> 00:16:54.290
<v Speaker 0>a function definition, last time I showed you, um, definition

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:54.290 --> 00:16:56.330
<v Speaker 0>of head and tail, I think.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:17:10.699 --> 00:17:11.300
<v Speaker 0>Right.

NOTE CONF {"raw":[93]}

00:17:11.510 --> 00:17:12.410
<v Speaker 0>Thank you.

NOTE CONF {"raw":[100,100]}

00:17:14.540 --> 00:17:15.260
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:17:15.530 --> 00:17:17.540
<v Speaker 0>Um, so that says head.

NOTE CONF {"raw":[100,100,100,100,100]}

00:17:18.800 --> 00:17:20.030
<v Speaker 0>And then there's a pattern.

NOTE CONF {"raw":[100,100,100,100,100]}

00:17:20.300 --> 00:17:20.900
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:17:20.900 --> 00:17:22.850
<v Speaker 0>So if I apply that to a list.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:17:25.040 --> 00:17:26.510
<v Speaker 0>Whatever it is, uh.

NOTE CONF {"raw":[100,100,100,100]}

00:17:29.750 --> 00:17:30.500
<v Speaker 0>Okay.

NOTE CONF {"raw":[97]}

00:17:32.450 --> 00:17:34.430
<v Speaker 0>That is just notation for.

NOTE CONF {"raw":[100,100,100,100,100]}

00:17:37.070 --> 00:17:41.720
<v Speaker 0>For this And then there's some other stuff here.

NOTE CONF {"raw":[100,100,100,100,52,100,100,100,100]}

00:17:42.470 --> 00:17:43.100
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:17:43.100 --> 00:17:44.090
<v Speaker 0>And, um.

NOTE CONF {"raw":[100,100]}

00:17:45.170 --> 00:17:47.360
<v Speaker 0>And we know that.

NOTE CONF {"raw":[100,100,100,100]}

00:17:47.510 --> 00:17:51.080
<v Speaker 0>So this this is in order to evaluate that, we

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:51.080 --> 00:17:55.760
<v Speaker 0>need to match this against the pattern x cons xs.

NOTE CONF {"raw":[100,100,100,100,100,100,100,97,98,38]}

00:17:55.760 --> 00:18:00.110
<v Speaker 0>And we know that x is one and x is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:00.140 --> 00:18:02.150
<v Speaker 0>is the rest okay.

NOTE CONF {"raw":[100,100,100,100]}

00:18:02.150 --> 00:18:05.240
<v Speaker 0>So all unambiguous straightforward.

NOTE CONF {"raw":[100,100,100,100]}

00:18:05.240 --> 00:18:06.050
<v Speaker 0>All right.

NOTE CONF {"raw":[100,100]}

00:18:06.380 --> 00:18:09.470
<v Speaker 0>Um, I take the trouble of explaining that in a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:09.470 --> 00:18:12.950
<v Speaker 0>little bit of detail because although now it's all well,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:12.950 --> 00:18:14.210
<v Speaker 0>I hope it looks easy.

NOTE CONF {"raw":[100,100,100,100,100]}

00:18:14.960 --> 00:18:18.950
<v Speaker 0>Um, later on things get a little bit more, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:19.850 --> 00:18:20.720
<v Speaker 0>complicated.

NOTE CONF {"raw":[100]}

00:18:21.620 --> 00:18:22.670
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:18:23.930 --> 00:18:27.020
<v Speaker 0>And so these are patterns, and I'll just, I'll just

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:27.020 --> 00:18:30.170
<v Speaker 0>say there's there's more notation for patterns.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:18:30.170 --> 00:18:33.170
<v Speaker 0>You can you can have things like, um, so here's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:33.170 --> 00:18:35.420
<v Speaker 0>suppose we have a list with five elements like that.

NOTE CONF {"raw":[100,52,100,100,100,100,100,100,100,100]}

00:18:35.420 --> 00:18:35.840
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:18:35.840 --> 00:18:38.780
<v Speaker 0>We've got, we've got uh, this pattern.

NOTE CONF {"raw":[100,100,100,100,68,100,100]}

00:18:39.380 --> 00:18:40.760
<v Speaker 0>Ex-cons XS.

NOTE CONF {"raw":[100,36]}

00:18:40.760 --> 00:18:42.710
<v Speaker 0>Oh, I'm not showing you anything.

NOTE CONF {"raw":[99,100,100,100,100,100]}

00:18:42.710 --> 00:18:43.550
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:18:43.940 --> 00:18:44.570
<v Speaker 0>Uh.

NOTE CONF {"raw":[100]}

00:18:44.570 --> 00:18:45.440
<v Speaker 0>Thank you.

NOTE CONF {"raw":[100,100]}

00:18:48.680 --> 00:18:52.040
<v Speaker 0>The problem is, the desktop is not working.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:18:52.430 --> 00:18:52.850
<v Speaker 0>Um.

NOTE CONF {"raw":[98]}

00:18:54.560 --> 00:18:55.220
<v Speaker 0>Sorry.

NOTE CONF {"raw":[99]}

00:18:55.220 --> 00:18:55.670
<v Speaker 0>Yeah.

NOTE CONF {"raw":[71]}

00:18:55.700 --> 00:18:56.540
<v Speaker 0>Thank you.

NOTE CONF {"raw":[100,100]}

00:18:56.870 --> 00:18:58.400
<v Speaker 0>Please shout if I do that again.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:18:58.580 --> 00:18:59.060
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:18:59.540 --> 00:19:03.920
<v Speaker 0>Um, so here's a list and we can, we can

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:04.370 --> 00:19:08.540
<v Speaker 0>define, uh, values of variables by matching against the list.

NOTE CONF {"raw":[100,94,100,100,100,100,100,100,100,100]}

00:19:08.540 --> 00:19:12.800
<v Speaker 0>So I can say in Haskell, ex-cons XS equals my

NOTE CONF {"raw":[100,100,100,100,100,100,80,65,100,100]}

00:19:12.800 --> 00:19:13.460
<v Speaker 0>list.

NOTE CONF {"raw":[100]}

00:19:13.610 --> 00:19:16.700
<v Speaker 0>And here here's an example down here okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,88]}

00:19:17.150 --> 00:19:20.180
<v Speaker 0>Um, so x will be zero because it's the first

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:20.180 --> 00:19:20.570
<v Speaker 0>thing.

NOTE CONF {"raw":[100]}

00:19:20.570 --> 00:19:23.540
<v Speaker 0>And x's will be the list containing everything else.

NOTE CONF {"raw":[100,56,100,100,100,100,100,100,100]}

00:19:24.920 --> 00:19:27.860
<v Speaker 0>I can also use patterns which are which have this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:27.860 --> 00:19:28.460
<v Speaker 0>kind of form.

NOTE CONF {"raw":[100,100,100]}

00:19:28.460 --> 00:19:30.710
<v Speaker 0>They look like lists but with variables in them.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:19:31.070 --> 00:19:31.580
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:19:31.580 --> 00:19:34.490
<v Speaker 0>This will match a list of length five as it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:34.490 --> 00:19:35.600
<v Speaker 0>does down here.

NOTE CONF {"raw":[100,100,100]}

00:19:36.350 --> 00:19:38.940
<v Speaker 0>Okay A is equal to zero, B is equal to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:38.940 --> 00:19:41.460
<v Speaker 0>one, c is equal to two, and so forth as

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:41.460 --> 00:19:42.180
<v Speaker 0>we see.

NOTE CONF {"raw":[100,97]}

00:19:42.780 --> 00:19:44.760
<v Speaker 0>Um, but if I try to match something of the

NOTE CONF {"raw":[96,100,100,100,100,100,100,100,100,100]}

00:19:44.760 --> 00:19:47.550
<v Speaker 0>wrong length, I'll get an error message.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:19:47.970 --> 00:19:48.330
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:19:48.330 --> 00:19:51.270
<v Speaker 0>And tells me that the it's an exception which says

NOTE CONF {"raw":[100,100,100,100,100,93,100,100,100,100]}

00:19:51.270 --> 00:19:53.850
<v Speaker 0>something about the lengths of the list being wrong.

NOTE CONF {"raw":[100,100,100,83,100,100,88,100,100]}

00:19:54.120 --> 00:19:54.840
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:19:55.560 --> 00:19:57.960
<v Speaker 0>Um, anyway, that's useful to know.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:19:58.560 --> 00:20:00.270
<v Speaker 0>Um, you're going to be using pattern matching a lot,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:00.270 --> 00:20:02.970
<v Speaker 0>but let me get back to lists and recursion.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:20:03.990 --> 00:20:04.290
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:20:04.290 --> 00:20:06.600
<v Speaker 0>This is the definition of lists that I gave you

NOTE CONF {"raw":[100,100,98,100,100,100,100,100,100,100]}

00:20:06.600 --> 00:20:07.500
<v Speaker 0>a minute ago.

NOTE CONF {"raw":[100,100,100]}

00:20:07.860 --> 00:20:08.640
<v Speaker 0>Okay.

NOTE CONF {"raw":[98]}

00:20:08.850 --> 00:20:13.410
<v Speaker 0>Um, so list is either empty or it's constructed with

NOTE CONF {"raw":[83,100,100,100,100,100,100,100,100,100]}

00:20:13.410 --> 00:20:15.840
<v Speaker 0>a head x and a tail x.

NOTE CONF {"raw":[100,100,100,100,100,100,57]}

00:20:15.840 --> 00:20:19.200
<v Speaker 0>So this definition as I said, it's recursive.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:20:19.200 --> 00:20:21.630
<v Speaker 0>It it defines lists.

NOTE CONF {"raw":[100,100,100,100]}

00:20:21.630 --> 00:20:24.480
<v Speaker 0>But I'm using lists in the definition okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:20:24.480 --> 00:20:28.020
<v Speaker 0>And so a first reaction to this might be you

NOTE CONF {"raw":[100,100,65,100,100,100,100,100,100,100]}

00:20:28.020 --> 00:20:29.730
<v Speaker 0>can't do that okay.

NOTE CONF {"raw":[100,100,100,100]}

00:20:29.730 --> 00:20:32.250
<v Speaker 0>If I'm trying to explain something it's no good for

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:32.250 --> 00:20:33.420
<v Speaker 0>me to explain it.

NOTE CONF {"raw":[100,100,100,100]}

00:20:33.420 --> 00:20:35.520
<v Speaker 0>Assuming that you already know what it is.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:20:36.720 --> 00:20:37.290
<v Speaker 0>right?

NOTE CONF {"raw":[96]}

00:20:38.910 --> 00:20:40.320
<v Speaker 0>So why is this okay?

NOTE CONF {"raw":[100,100,100,100,100]}

00:20:40.320 --> 00:20:41.850
<v Speaker 0>This is actually okay.

NOTE CONF {"raw":[100,100,100,100]}

00:20:42.600 --> 00:20:43.020
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:20:43.020 --> 00:20:45.450
<v Speaker 0>And it's okay because I've.

NOTE CONF {"raw":[92,100,100,100,100]}

00:20:45.450 --> 00:20:49.380
<v Speaker 0>I've done it carefully, uh, in the right way.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:20:49.380 --> 00:20:52.710
<v Speaker 0>It's a so-called well-founded definition.

NOTE CONF {"raw":[100,100,90,99,100]}

00:20:53.010 --> 00:20:53.460
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:20:53.460 --> 00:20:58.800
<v Speaker 0>And the reason it's okay is because I'm defining, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:58.920 --> 00:21:02.760
<v Speaker 0>complex lists that, um, well, okay, the first case is

NOTE CONF {"raw":[74,100,100,82,100,100,100,100,100,100]}

00:21:02.760 --> 00:21:03.390
<v Speaker 0>the first case.

NOTE CONF {"raw":[100,100,100]}

00:21:03.390 --> 00:21:05.820
<v Speaker 0>I don't think anybody has a problem with that empty

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:05.820 --> 00:21:06.180
<v Speaker 0>list.

NOTE CONF {"raw":[100]}

00:21:06.180 --> 00:21:06.660
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:21:06.660 --> 00:21:07.980
<v Speaker 0>It's the second case.

NOTE CONF {"raw":[100,100,100,100]}

00:21:08.490 --> 00:21:16.050
<v Speaker 0>So I'm I'm explaining a complicated list x cons xz

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:17.640 --> 00:21:22.020
<v Speaker 0>with reference to a simple list or simpler list XS

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,57]}

00:21:22.020 --> 00:21:22.440
<v Speaker 0>okay.

NOTE CONF {"raw":[100]}

00:21:22.440 --> 00:21:26.850
<v Speaker 0>So it's something that's smaller than x cons xs okay,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,94,100]}

00:21:26.850 --> 00:21:30.330
<v Speaker 0>so I'm explaining a more complicated thing in terms of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:30.330 --> 00:21:31.290
<v Speaker 0>a simpler thing okay.

NOTE CONF {"raw":[100,100,100,100]}

00:21:31.290 --> 00:21:33.840
<v Speaker 0>They're both they're both lists okay.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:21:33.840 --> 00:21:36.670
<v Speaker 0>But I'm explaining a complicated list in terms of simpler

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:36.670 --> 00:21:40.960
<v Speaker 0>list, and ultimately in terms of the simplest list of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:40.960 --> 00:21:42.490
<v Speaker 0>all, which is the empty list.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:21:42.940 --> 00:21:48.580
<v Speaker 0>Okay, so every list I can check it against.

NOTE CONF {"raw":[100,100,100,99,100,100,100,100,100]}

00:21:51.850 --> 00:21:52.840
<v Speaker 0>We just go back.

NOTE CONF {"raw":[78,100,100,100]}

00:21:52.990 --> 00:21:54.160
<v Speaker 0>I can check it.

NOTE CONF {"raw":[100,100,100,100]}

00:21:54.250 --> 00:21:56.110
<v Speaker 0>You know, something like this.

NOTE CONF {"raw":[100,100,100,100,100]}

00:21:56.860 --> 00:21:58.660
<v Speaker 0>I can check it against that definition.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:21:58.660 --> 00:21:59.980
<v Speaker 0>Here's the definition again.

NOTE CONF {"raw":[100,100,100,100]}

00:21:59.980 --> 00:22:00.820
<v Speaker 0>And I can check.

NOTE CONF {"raw":[100,100,100,100]}

00:22:00.820 --> 00:22:01.450
<v Speaker 0>Is that a list?

NOTE CONF {"raw":[100,100,100,100]}

00:22:01.450 --> 00:22:04.690
<v Speaker 0>And I can say, well, um, you know, according to

NOTE CONF {"raw":[100,100,76,100,100,100,100,100,100,100]}

00:22:04.690 --> 00:22:07.900
<v Speaker 0>the second clause of that, uh, it's a list provided

NOTE CONF {"raw":[100,100,100,100,100,92,100,98,100,100]}

00:22:07.900 --> 00:22:09.460
<v Speaker 0>that, you know, one is an element.

NOTE CONF {"raw":[100,97,97,100,100,100,100]}

00:22:09.460 --> 00:22:11.470
<v Speaker 0>And this thing here is a list.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:22:11.860 --> 00:22:12.280
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:22:12.280 --> 00:22:14.350
<v Speaker 0>Well, I can check whether this is a list because

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:14.350 --> 00:22:16.750
<v Speaker 0>this is an element and this thing is a list.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:17.110 --> 00:22:19.780
<v Speaker 0>And I can check whether that's a list by checking

NOTE CONF {"raw":[100,100,100,100,100,100,97,100,100,100]}

00:22:19.780 --> 00:22:20.890
<v Speaker 0>that that's an element.

NOTE CONF {"raw":[100,100,100,100]}

00:22:20.890 --> 00:22:23.380
<v Speaker 0>And this empty list is a list.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:22:23.380 --> 00:22:25.360
<v Speaker 0>And I know that that's a list because that's the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:25.360 --> 00:22:28.030
<v Speaker 0>first case again okay I did that quickly.

NOTE CONF {"raw":[100,100,100,100,81,100,100,99]}

00:22:28.090 --> 00:22:28.540
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:22:28.540 --> 00:22:34.780
<v Speaker 0>But reference with reference to the definition Using using each

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:34.780 --> 00:22:36.490
<v Speaker 0>of the, uh, the cases.

NOTE CONF {"raw":[100,100,60,100,100]}

00:22:36.850 --> 00:22:39.250
<v Speaker 0>Um, the second one repeatedly.

NOTE CONF {"raw":[100,100,100,100,100]}

00:22:39.250 --> 00:22:41.080
<v Speaker 0>Because lists might be long.

NOTE CONF {"raw":[100,100,100,100,100]}

00:22:41.140 --> 00:22:41.830
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:22:41.830 --> 00:22:45.070
<v Speaker 0>You can you can work out that any list is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:45.070 --> 00:22:47.650
<v Speaker 0>indeed a list with reference to that definition.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:22:49.420 --> 00:22:49.960
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:22:49.960 --> 00:22:54.280
<v Speaker 0>So, um, this is a typical example of recursive definition

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:54.280 --> 00:22:55.780
<v Speaker 0>of a of a type.

NOTE CONF {"raw":[100,91,100,100,100]}

00:22:57.070 --> 00:22:59.110
<v Speaker 0>We're going to see in a minute recursive definition of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:59.110 --> 00:23:00.640
<v Speaker 0>a function okay.

NOTE CONF {"raw":[100,100,100]}

00:23:00.640 --> 00:23:02.410
<v Speaker 0>But that's the idea you define.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:23:02.440 --> 00:23:08.470
<v Speaker 0>You define something uh, by explaining the more complicated case

NOTE CONF {"raw":[100,100,100,91,100,100,100,100,100,100]}

00:23:08.470 --> 00:23:10.030
<v Speaker 0>in terms of the simpler case.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:23:10.450 --> 00:23:15.220
<v Speaker 0>And then, you know, uh, it sort of just goes

NOTE CONF {"raw":[100,100,100,100,100,95,100,100,100,100]}

00:23:15.220 --> 00:23:18.700
<v Speaker 0>along complicated case in terms of simpler case in terms

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:18.700 --> 00:23:22.030
<v Speaker 0>of even simpler case, eventually down to the simplest case

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:22.030 --> 00:23:22.570
<v Speaker 0>of all.

NOTE CONF {"raw":[100,100]}

00:23:22.570 --> 00:23:23.800
<v Speaker 0>And the whole thing works.

NOTE CONF {"raw":[100,100,100,100,100]}

00:23:23.800 --> 00:23:26.500
<v Speaker 0>And I'll show you how that, how that computes.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:23:26.740 --> 00:23:27.250
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:23:27.250 --> 00:23:29.170
<v Speaker 0>This is this is, as I said, it's called a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:29.170 --> 00:23:33.920
<v Speaker 0>well-founded definition because it's defining a, uh.

NOTE CONF {"raw":[100,100,100,100,100,99,98]}

00:23:34.160 --> 00:23:37.100
<v Speaker 0>I mean, it's a it's a use of recursion where

NOTE CONF {"raw":[100,100,100,98,100,100,100,100,100,100]}

00:23:37.250 --> 00:23:39.530
<v Speaker 0>you're not just defining something in terms of itself, you're

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:39.530 --> 00:23:42.710
<v Speaker 0>defining something in terms of a simpler example, a simpler

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:42.710 --> 00:23:43.610
<v Speaker 0>version of itself.

NOTE CONF {"raw":[100,100,100]}

00:23:43.610 --> 00:23:45.050
<v Speaker 0>And this is in contrast.

NOTE CONF {"raw":[100,100,100,100,100]}

00:23:45.050 --> 00:23:47.900
<v Speaker 0>So we had this some we've, we've been having this

NOTE CONF {"raw":[100,100,90,100,96,100,100,100,100,100]}

00:23:47.900 --> 00:23:52.730
<v Speaker 0>um, Brexit kind of thing for, for many years in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:52.730 --> 00:23:56.030
<v Speaker 0>the U.K. it's kind of been a, a nightmare, um,

NOTE CONF {"raw":[100,66,100,100,100,100,67,100,100,100]}

00:23:56.030 --> 00:23:57.410
<v Speaker 0>politically and so forth.

NOTE CONF {"raw":[100,100,100,100]}

00:23:57.410 --> 00:24:01.010
<v Speaker 0>And, and the first prime minister after the Brexit referendum

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:01.010 --> 00:24:02.030
<v Speaker 0>was Theresa may.

NOTE CONF {"raw":[100,100,100]}

00:24:02.030 --> 00:24:05.210
<v Speaker 0>And people were trying to work out what is what

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:05.210 --> 00:24:07.340
<v Speaker 0>do we mean by this thing that we've just decided

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:07.340 --> 00:24:07.910
<v Speaker 0>to do?

NOTE CONF {"raw":[100,100]}

00:24:07.910 --> 00:24:11.750
<v Speaker 0>And her explanation was Brexit means Brexit.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:24:12.320 --> 00:24:15.830
<v Speaker 0>And this is an example of a non well-founded recursive

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:15.830 --> 00:24:17.360
<v Speaker 0>definition okay.

NOTE CONF {"raw":[100,100]}

00:24:17.360 --> 00:24:19.520
<v Speaker 0>Which means it doesn't actually mean anything.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:24:19.760 --> 00:24:20.600
<v Speaker 0>Um okay.

NOTE CONF {"raw":[100,100]}

00:24:20.600 --> 00:24:22.790
<v Speaker 0>So this is not what we're doing in Haskell.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:24:23.120 --> 00:24:26.930
<v Speaker 0>Um, uh, whatever you think of Brexit, this is not

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:26.930 --> 00:24:28.190
<v Speaker 0>an explanation of anything.

NOTE CONF {"raw":[100,100,100,100]}

00:24:28.190 --> 00:24:30.860
<v Speaker 0>I think what she meant is it's obvious I don't

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:30.860 --> 00:24:31.880
<v Speaker 0>have to explain it.

NOTE CONF {"raw":[100,100,100,100]}

00:24:32.450 --> 00:24:33.140
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:24:33.140 --> 00:24:34.730
<v Speaker 0>Was what she was trying to say.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:24:38.540 --> 00:24:39.440
<v Speaker 0>All right.

NOTE CONF {"raw":[100,100]}

00:24:39.590 --> 00:24:41.210
<v Speaker 0>Any questions so far?

NOTE CONF {"raw":[100,100,100,100]}

00:24:41.240 --> 00:24:44.120
<v Speaker 0>I haven't explained enough to have much.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:24:45.620 --> 00:24:47.210
<v Speaker 0>Does everybody understand recursion?

NOTE CONF {"raw":[100,100,100,100]}

00:24:47.240 --> 00:24:48.980
<v Speaker 0>Maybe I don't have to explain anymore.

NOTE CONF {"raw":[100,100,100,100,100,100,93]}

00:24:50.600 --> 00:24:50.960
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:24:51.470 --> 00:24:51.980
<v Speaker 0>No.

NOTE CONF {"raw":[96]}

00:24:52.490 --> 00:24:53.090
<v Speaker 0>Well.

NOTE CONF {"raw":[100]}

00:24:53.090 --> 00:24:53.690
<v Speaker 0>We'll see.

NOTE CONF {"raw":[100,100]}

00:24:54.260 --> 00:24:57.170
<v Speaker 0>Um, I think I'll skip this.

NOTE CONF {"raw":[98,100,100,100,100,100]}

00:24:57.200 --> 00:24:59.090
<v Speaker 0>This is a bunch of functions on numbers, so we've

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,93]}

00:24:59.090 --> 00:25:01.820
<v Speaker 0>already seen head and tail, and there's a function called

NOTE CONF {"raw":[100,100,100,82,82,100,100,100,100,100]}

00:25:01.820 --> 00:25:03.380
<v Speaker 0>null as well.

NOTE CONF {"raw":[100,100,100]}

00:25:03.380 --> 00:25:05.450
<v Speaker 0>Null is a is a test of a list to

NOTE CONF {"raw":[100,100,100,100,100,100,100,97,100,100]}

00:25:05.450 --> 00:25:07.040
<v Speaker 0>tell you if it's empty or not.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:25:07.160 --> 00:25:07.610
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:25:07.610 --> 00:25:11.540
<v Speaker 0>So null applied to that list will say false and

NOTE CONF {"raw":[100,100,100,100,100,100,91,100,100,100]}

00:25:11.540 --> 00:25:15.200
<v Speaker 0>null applied to um this list will say true.

NOTE CONF {"raw":[100,81,100,100,100,100,100,100,100]}

00:25:15.200 --> 00:25:15.500
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:25:15.500 --> 00:25:16.640
<v Speaker 0>Not very exciting.

NOTE CONF {"raw":[100,100,100]}

00:25:20.060 --> 00:25:23.180
<v Speaker 0>Now let's see our first example of a recursive function.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:27.620 --> 00:25:28.040
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:25:28.040 --> 00:25:30.090
<v Speaker 0>This is using recursion to define functions.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:25:30.090 --> 00:25:32.550
<v Speaker 0>And I'll start off by showing you a function you've

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:32.550 --> 00:25:33.480
<v Speaker 0>already seen.

NOTE CONF {"raw":[100,100]}

00:25:33.480 --> 00:25:36.150
<v Speaker 0>It's the the function that squares every element in the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,90]}

00:25:36.150 --> 00:25:36.630
<v Speaker 0>list.

NOTE CONF {"raw":[100]}

00:25:36.870 --> 00:25:38.430
<v Speaker 0>And you defined it.

NOTE CONF {"raw":[100,100,99,100]}

00:25:38.430 --> 00:25:42.120
<v Speaker 0>We defined it on Friday on Monday using our list

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,49,100]}

00:25:42.120 --> 00:25:42.870
<v Speaker 0>comprehension.

NOTE CONF {"raw":[100]}

00:25:42.870 --> 00:25:46.230
<v Speaker 0>So here was the definition up here okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:25:46.530 --> 00:25:48.990
<v Speaker 0>Um it's the squares of x's.

NOTE CONF {"raw":[99,100,100,100,100,41]}

00:25:48.990 --> 00:25:54.240
<v Speaker 0>Is the list consisting of x times x uh such

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,81,100]}

00:25:54.240 --> 00:25:58.440
<v Speaker 0>that x is drawn from x's okay.

NOTE CONF {"raw":[100,100,100,100,100,58,100]}

00:25:58.440 --> 00:26:02.310
<v Speaker 0>And so we take a list x x is we

NOTE CONF {"raw":[100,100,100,100,100,100,72,70,70,100]}

00:26:02.310 --> 00:26:03.570
<v Speaker 0>take every element of the list.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:26:03.570 --> 00:26:05.400
<v Speaker 0>We compute the square.

NOTE CONF {"raw":[100,100,100,100]}

00:26:05.400 --> 00:26:07.110
<v Speaker 0>We put them all together into a list.

NOTE CONF {"raw":[100,100,85,100,100,100,100,100]}

00:26:07.230 --> 00:26:08.010
<v Speaker 0>End of story.

NOTE CONF {"raw":[100,100,100]}

00:26:08.010 --> 00:26:12.960
<v Speaker 0>That's that's computing the squares of a list of of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:12.960 --> 00:26:14.490
<v Speaker 0>of integers okay.

NOTE CONF {"raw":[100,100,100]}

00:26:14.490 --> 00:26:16.830
<v Speaker 0>Type is uh list of int arrow.

NOTE CONF {"raw":[100,100,86,100,100,100,51]}

00:26:16.950 --> 00:26:17.580
<v Speaker 0>List of int.

NOTE CONF {"raw":[100,100,96]}

00:26:17.790 --> 00:26:18.450
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:26:19.110 --> 00:26:20.310
<v Speaker 0>Um, we can do the same thing.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:26:20.310 --> 00:26:21.570
<v Speaker 0>We're using recursion.

NOTE CONF {"raw":[49,100,100]}

00:26:22.590 --> 00:26:26.430
<v Speaker 0>And the the definition using recursion looks like this I'm

NOTE CONF {"raw":[100,100,100,100,82,100,100,100,100,100]}

00:26:26.430 --> 00:26:28.290
<v Speaker 0>going to call it squares rec.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:26:28.320 --> 00:26:32.490
<v Speaker 0>Not because I need to call recursive functions things ending

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:32.490 --> 00:26:35.880
<v Speaker 0>with the word rec, but because I'm defining two functions

NOTE CONF {"raw":[100,100,100,78,100,100,100,100,100,100]}

00:26:35.880 --> 00:26:37.500
<v Speaker 0>here and I can't use the same name.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:26:37.770 --> 00:26:42.060
<v Speaker 0>Okay, so uh, I'll use that name.

NOTE CONF {"raw":[100,100,80,100,100,100,100]}

00:26:42.450 --> 00:26:43.020
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:26:43.020 --> 00:26:44.460
<v Speaker 0>And this is a recursive definition.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:26:44.460 --> 00:26:48.540
<v Speaker 0>You can see because the function I'm defining squares rec

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,96,100]}

00:26:48.690 --> 00:26:51.480
<v Speaker 0>also occurs on the right hand side of the definition.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:52.680 --> 00:26:53.070
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:26:53.070 --> 00:26:54.570
<v Speaker 0>That's what recursion means.

NOTE CONF {"raw":[100,100,100,100]}

00:26:57.870 --> 00:27:04.110
<v Speaker 0>And um, as is usual with recursive definitions, there are

NOTE CONF {"raw":[100,100,100,83,100,100,100,100,100,100]}

00:27:04.110 --> 00:27:05.640
<v Speaker 0>there's more than one case.

NOTE CONF {"raw":[100,100,100,100,100]}

00:27:06.030 --> 00:27:09.360
<v Speaker 0>And um, there's more than one case because there are

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:09.360 --> 00:27:10.650
<v Speaker 0>two kinds of lists.

NOTE CONF {"raw":[100,100,100,100]}

00:27:10.650 --> 00:27:13.320
<v Speaker 0>So we need a case for each of the kinds

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:13.320 --> 00:27:14.280
<v Speaker 0>of lists there is.

NOTE CONF {"raw":[100,100,100,100]}

00:27:14.310 --> 00:27:14.640
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:27:14.640 --> 00:27:16.920
<v Speaker 0>There's the empty list and there's the non-empty list.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,97]}

00:27:16.920 --> 00:27:19.320
<v Speaker 0>So we have a case for the empty list.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:27:19.320 --> 00:27:21.930
<v Speaker 0>And we have a case for the non-empty list.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:27:23.430 --> 00:27:23.850
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:27:23.850 --> 00:27:25.710
<v Speaker 0>So the squares.

NOTE CONF {"raw":[100,100,94]}

00:27:26.830 --> 00:27:27.640
<v Speaker 4>Uh.

NOTE CONF {"raw":[100]}

00:27:27.640 --> 00:27:29.770
<v Speaker 0>The squares of a list containing nothing.

NOTE CONF {"raw":[100,100,100,98,100,100,100]}

00:27:29.770 --> 00:27:30.820
<v Speaker 0>That's easy.

NOTE CONF {"raw":[100,100]}

00:27:32.680 --> 00:27:34.090
<v Speaker 0>It's the empty list.

NOTE CONF {"raw":[100,100,100,100]}

00:27:34.210 --> 00:27:37.660
<v Speaker 0>Okay, so that that line I think should be obvious.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:37.780 --> 00:27:39.010
<v Speaker 0>This is this is in Haskell.

NOTE CONF {"raw":[100,100,100,94,90,100]}

00:27:39.010 --> 00:27:42.220
<v Speaker 0>You can write function definitions by writing a sequence of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:42.220 --> 00:27:43.000
<v Speaker 0>equations.

NOTE CONF {"raw":[100]}

00:27:43.000 --> 00:27:44.170
<v Speaker 0>I didn't say that.

NOTE CONF {"raw":[100,100,100,100]}

00:27:44.170 --> 00:27:44.920
<v Speaker 0>Okay.

NOTE CONF {"raw":[97]}

00:27:44.950 --> 00:27:46.630
<v Speaker 0>Everything we've seen up to now has just been one

NOTE CONF {"raw":[100,54,100,100,100,100,91,100,100,100]}

00:27:46.630 --> 00:27:47.380
<v Speaker 0>equation.

NOTE CONF {"raw":[100]}

00:27:47.380 --> 00:27:50.200
<v Speaker 0>You can also do it by having cases okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:27:50.200 --> 00:27:52.420
<v Speaker 0>So this is the empty case and this is the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:52.420 --> 00:27:53.590
<v Speaker 0>non-empty case.

NOTE CONF {"raw":[94,100]}

00:27:54.580 --> 00:27:59.170
<v Speaker 0>So in the non-empty case you've got a list containing

NOTE CONF {"raw":[100,100,100,91,100,100,100,100,100,100]}

00:27:59.170 --> 00:28:00.670
<v Speaker 0>x cons x's.

NOTE CONF {"raw":[88,88,44]}

00:28:01.180 --> 00:28:04.600
<v Speaker 0>And how do you get the square of all the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:04.600 --> 00:28:05.950
<v Speaker 0>elements in that list.

NOTE CONF {"raw":[100,100,100,100]}

00:28:06.520 --> 00:28:09.010
<v Speaker 0>Well you square the first element.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:28:09.610 --> 00:28:10.570
<v Speaker 0>There it is.

NOTE CONF {"raw":[100,100,100]}

00:28:11.650 --> 00:28:15.640
<v Speaker 0>And then you, uh, attach that to the front of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:15.640 --> 00:28:17.770
<v Speaker 0>the result of squaring all the other elements in the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:17.770 --> 00:28:18.340
<v Speaker 0>list.

NOTE CONF {"raw":[100]}

00:28:21.790 --> 00:28:22.510
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:28:27.790 --> 00:28:28.780
<v Speaker 0>So.

NOTE CONF {"raw":[100]}

00:28:32.320 --> 00:28:34.330
<v Speaker 0>If you haven't seen this before, you might again have

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:34.330 --> 00:28:37.240
<v Speaker 0>this problem and saying, wait a minute.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:28:37.720 --> 00:28:39.670
<v Speaker 0>Uh, that doesn't explain anything.

NOTE CONF {"raw":[92,100,100,100,100]}

00:28:40.450 --> 00:28:44.920
<v Speaker 0>Uh, I've just explained squares wreck in terms of itself.

NOTE CONF {"raw":[96,100,100,100,82,38,100,100,100,100]}

00:28:45.490 --> 00:28:47.470
<v Speaker 0>I'm kind of assuming on the right hand side that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:47.470 --> 00:28:51.880
<v Speaker 0>you know what this does in explaining what this thing

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:51.880 --> 00:28:53.110
<v Speaker 0>over here does.

NOTE CONF {"raw":[100,100,100]}

00:28:53.410 --> 00:28:53.830
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:28:53.830 --> 00:28:54.520
<v Speaker 0>Why is that?

NOTE CONF {"raw":[100,100,100]}

00:28:54.520 --> 00:28:55.840
<v Speaker 0>Why is that okay?

NOTE CONF {"raw":[100,100,100,100]}

00:28:55.870 --> 00:28:56.950
<v Speaker 0>You have a question.

NOTE CONF {"raw":[100,100,100,100]}

00:28:58.390 --> 00:28:59.260
<v Speaker 0>Shall I throw this?

NOTE CONF {"raw":[47,100,100,100]}

00:28:59.260 --> 00:29:00.700
<v Speaker 0>I hope this is turned on.

NOTE CONF {"raw":[100,100,100,82,100,100]}

00:29:01.000 --> 00:29:02.020
<v Speaker 0>Is this working?

NOTE CONF {"raw":[100,100,100]}

00:29:02.410 --> 00:29:02.890
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:29:03.400 --> 00:29:04.780
<v Speaker 0>Uh, it was up there.

NOTE CONF {"raw":[100,100,100,100,100]}

00:29:04.780 --> 00:29:04.960
<v Speaker 0>Yeah.

NOTE CONF {"raw":[80]}

00:29:10.990 --> 00:29:12.640
<v Speaker 5>Um, in front of squares.

NOTE CONF {"raw":[100,100,100,100,46]}

00:29:12.640 --> 00:29:15.370
<v Speaker 5>Rec ex-cons access.

NOTE CONF {"raw":[23,43,20]}

00:29:15.370 --> 00:29:21.220
<v Speaker 5>It's it splits the list into, um, current tiles.

NOTE CONF {"raw":[99,74,100,100,100,100,100,27,52]}

00:29:21.220 --> 00:29:23.230
<v Speaker 5>What does it does in the beginning?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:29:24.130 --> 00:29:25.330
<v Speaker 5>Um, There.

NOTE CONF {"raw":[100,96]}

00:29:25.930 --> 00:29:29.020
<v Speaker 0>So x and x is those are just, uh, variable

NOTE CONF {"raw":[100,100,94,100,100,100,100,100,69,100]}

00:29:29.020 --> 00:29:29.470
<v Speaker 0>names.

NOTE CONF {"raw":[100]}

00:29:29.470 --> 00:29:31.000
<v Speaker 0>So you could call them head and tail.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:29:31.000 --> 00:29:31.480
<v Speaker 0>Is that.

NOTE CONF {"raw":[100,100]}

00:29:31.480 --> 00:29:32.980
<v Speaker 0>Does that answer your question?

NOTE CONF {"raw":[98,100,100,100,100]}

00:29:32.980 --> 00:29:33.520
<v Speaker 0>Um, I.

NOTE CONF {"raw":[91,100]}

00:29:33.520 --> 00:29:36.010
<v Speaker 5>Guess I'm trying to say y is the syntax is

NOTE CONF {"raw":[100,100,100,100,100,57,100,100,100,100]}

00:29:36.010 --> 00:29:36.670
<v Speaker 5>like this.

NOTE CONF {"raw":[100,100]}

00:29:36.670 --> 00:29:39.490
<v Speaker 5>Why we writing it down like this?

NOTE CONF {"raw":[100,100,94,49,100,100,100]}

00:29:39.730 --> 00:29:43.840
<v Speaker 5>Um, every single time we're going to approach something similar

NOTE CONF {"raw":[100,100,100,100,99,98,98,100,100,100]}

00:29:43.840 --> 00:29:46.810
<v Speaker 5>in recursion, we're going to define lists.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:29:46.810 --> 00:29:51.490
<v Speaker 5>That's going to substitute for specific case in this format.

NOTE CONF {"raw":[89,100,100,100,100,100,100,100,100,100]}

00:29:51.820 --> 00:29:52.390
<v Speaker 5>Right.

NOTE CONF {"raw":[100]}

00:29:52.690 --> 00:29:53.230
<v Speaker 5>That's going to be.

NOTE CONF {"raw":[100,100,100,100]}

00:29:53.230 --> 00:29:55.030
<v Speaker 0>Always it's going to happen a lot.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:29:55.030 --> 00:29:56.320
<v Speaker 0>Yeah okay.

NOTE CONF {"raw":[100,100]}

00:29:56.320 --> 00:29:58.900
<v Speaker 0>And there's other there's other examples of recursion that you'll

NOTE CONF {"raw":[100,100,100,100,100,100,98,100,100,100]}

00:29:58.900 --> 00:30:00.430
<v Speaker 0>come across later okay.

NOTE CONF {"raw":[100,100,100,100]}

00:30:00.430 --> 00:30:01.060
<v Speaker 0>Does that help.

NOTE CONF {"raw":[100,100,100]}

00:30:01.540 --> 00:30:02.740
<v Speaker 0>Yeah okay.

NOTE CONF {"raw":[100,100]}

00:30:02.950 --> 00:30:04.150
<v Speaker 0>There's another student here.

NOTE CONF {"raw":[100,100,100,100]}

00:30:04.150 --> 00:30:05.290
<v Speaker 0>But uh yeah.

NOTE CONF {"raw":[100,95,100]}

00:30:08.620 --> 00:30:13.180
<v Speaker 6>Uh, I understand this case works because the two cases

NOTE CONF {"raw":[62,100,100,100,100,100,100,100,100,100]}

00:30:13.180 --> 00:30:14.170
<v Speaker 6>are disjoint.

NOTE CONF {"raw":[100,100]}

00:30:14.170 --> 00:30:14.500
<v Speaker 6>Yes.

NOTE CONF {"raw":[100]}

00:30:14.500 --> 00:30:16.960
<v Speaker 6>So, uh, Haskell recognises.

NOTE CONF {"raw":[100,85,100,99]}

00:30:16.960 --> 00:30:20.230
<v Speaker 6>Oh, it's either the case of an empty list or

NOTE CONF {"raw":[71,44,100,100,100,100,100,100,100,100]}

00:30:20.230 --> 00:30:21.910
<v Speaker 6>the case of a non-empty list.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:30:21.910 --> 00:30:22.240
<v Speaker 6>Yes.

NOTE CONF {"raw":[100]}

00:30:22.240 --> 00:30:27.770
<v Speaker 6>So, but what happens when the two cases are not

NOTE CONF {"raw":[100,100,100,98,100,100,100,100,100,100]}

00:30:27.770 --> 00:30:28.310
<v Speaker 6>disjoint?

NOTE CONF {"raw":[100]}

00:30:28.310 --> 00:30:29.480
<v Speaker 6>They share a case in common.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:30:29.510 --> 00:30:30.890
<v Speaker 6>How does Haskell know?

NOTE CONF {"raw":[100,100,100,100]}

00:30:30.950 --> 00:30:31.250
<v Speaker 6>Yeah.

NOTE CONF {"raw":[100]}

00:30:31.670 --> 00:30:31.970
<v Speaker 6>Uh.

NOTE CONF {"raw":[100]}

00:30:32.510 --> 00:30:33.440
<v Speaker 6>What do you mean?

NOTE CONF {"raw":[100,100,100,100]}

00:30:33.470 --> 00:30:34.160
<v Speaker 0>Good question.

NOTE CONF {"raw":[100,100]}

00:30:34.190 --> 00:30:36.020
<v Speaker 0>Okay, the answer is it does them one at a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:36.020 --> 00:30:36.350
<v Speaker 0>time.

NOTE CONF {"raw":[100]}

00:30:36.350 --> 00:30:39.410
<v Speaker 0>And the first one that matches it, it does.

NOTE CONF {"raw":[94,100,100,100,100,100,64,100,100]}

00:30:39.950 --> 00:30:40.640
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:30:40.640 --> 00:30:43.610
<v Speaker 0>So it's possible to write non-overlapping cases.

NOTE CONF {"raw":[100,98,100,100,100,100,100]}

00:30:43.640 --> 00:30:46.400
<v Speaker 0>Are there other questions right now.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:30:47.030 --> 00:30:47.420
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:30:47.420 --> 00:30:47.690
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:30:47.690 --> 00:30:50.210
<v Speaker 0>So you can have more than two cases.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:30:50.360 --> 00:30:53.210
<v Speaker 0>And it's possible that they won't uh sometimes they don't

NOTE CONF {"raw":[100,100,100,100,100,100,65,100,100,100]}

00:30:53.210 --> 00:30:53.540
<v Speaker 0>overlap.

NOTE CONF {"raw":[100]}

00:30:53.780 --> 00:30:55.400
<v Speaker 0>They are not disjoint.

NOTE CONF {"raw":[100,100,100,100]}

00:30:56.660 --> 00:30:57.110
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:30:57.110 --> 00:30:59.510
<v Speaker 0>It's good when they are disjoint because then everything is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:59.510 --> 00:31:00.710
<v Speaker 0>very clear okay.

NOTE CONF {"raw":[100,100,100]}

00:31:00.710 --> 00:31:04.460
<v Speaker 0>But in case they're not disjoint, Haskell, uh, goes one

NOTE CONF {"raw":[100,100,100,100,100,100,100,99,100,100]}

00:31:04.460 --> 00:31:05.120
<v Speaker 0>at a time.

NOTE CONF {"raw":[100,100,100]}

00:31:06.230 --> 00:31:06.920
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:31:07.790 --> 00:31:08.960
<v Speaker 0>So carry on here.

NOTE CONF {"raw":[100,100,100,100]}

00:31:09.020 --> 00:31:12.320
<v Speaker 0>Um, so let me see.

NOTE CONF {"raw":[94,100,100,100,100]}

00:31:12.410 --> 00:31:14.630
<v Speaker 0>Uh, yeah.

NOTE CONF {"raw":[100,100]}

00:31:14.630 --> 00:31:18.590
<v Speaker 0>I was just explaining, uh, you might complain about this.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:18.590 --> 00:31:20.600
<v Speaker 0>You might say I'm defining squares rec in terms of

NOTE CONF {"raw":[100,100,100,100,100,65,100,100,100,100]}

00:31:20.600 --> 00:31:21.410
<v Speaker 0>square rec.

NOTE CONF {"raw":[100,84]}

00:31:21.410 --> 00:31:21.800
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:31:21.800 --> 00:31:24.110
<v Speaker 0>But again, this is a well founded definition.

NOTE CONF {"raw":[100,100,100,100,100,60,60,100]}

00:31:24.110 --> 00:31:28.520
<v Speaker 0>I'm explaining squares rec of x convex in terms of

NOTE CONF {"raw":[100,100,99,100,100,100,97,100,100,100]}

00:31:28.520 --> 00:31:32.690
<v Speaker 0>squares rec of x and x is is simpler than

NOTE CONF {"raw":[100,97,100,96,100,96,96,100,100,100]}

00:31:32.690 --> 00:31:32.900
<v Speaker 0>x.

NOTE CONF {"raw":[100]}

00:31:32.900 --> 00:31:33.950
<v Speaker 0>Cons ends xs.

NOTE CONF {"raw":[100,100,88]}

00:31:33.950 --> 00:31:37.010
<v Speaker 0>It's simpler because it's like a sub a sub part

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,97,97]}

00:31:37.010 --> 00:31:41.360
<v Speaker 0>of it okay it's smaller okay.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:31:41.360 --> 00:31:44.390
<v Speaker 0>If x cons x has n elements, then x has

NOTE CONF {"raw":[100,65,100,90,100,100,100,97,100,100]}

00:31:44.390 --> 00:31:45.710
<v Speaker 0>n minus one elements.

NOTE CONF {"raw":[100,100,100,100]}

00:31:46.790 --> 00:31:50.870
<v Speaker 0>And eventually repeating this you get to zero elements and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:50.870 --> 00:31:51.620
<v Speaker 0>zero elements.

NOTE CONF {"raw":[100,100]}

00:31:51.620 --> 00:31:54.590
<v Speaker 0>Is the is the empty list okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:31:56.600 --> 00:31:59.120
<v Speaker 0>So, um.

NOTE CONF {"raw":[100,100]}

00:32:01.550 --> 00:32:03.890
<v Speaker 0>I'll just quickly say that if you have trouble with

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:04.010 --> 00:32:07.880
<v Speaker 0>pattern matching, uh, these two programs are equivalent.

NOTE CONF {"raw":[100,100,84,100,100,100,100,100]}

00:32:08.630 --> 00:32:09.380
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:32:09.560 --> 00:32:13.460
<v Speaker 0>Um, and the only difference is that this one, instead

NOTE CONF {"raw":[97,100,100,100,100,100,100,100,100,100]}

00:32:13.460 --> 00:32:16.880
<v Speaker 0>of using pattern matching, it does, um, it does case

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:16.880 --> 00:32:23.250
<v Speaker 0>analysis and deconstruction of values using head and tail instead

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:23.250 --> 00:32:24.930
<v Speaker 0>of using pattern matching.

NOTE CONF {"raw":[100,100,100,100]}

00:32:24.930 --> 00:32:28.260
<v Speaker 0>Okay, so if you have trouble with pattern matching this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:28.260 --> 00:32:29.100
<v Speaker 0>is equivalent.

NOTE CONF {"raw":[100,100]}

00:32:29.520 --> 00:32:33.390
<v Speaker 0>Um, I think this is a very nice, elegant, simple

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:33.390 --> 00:32:38.310
<v Speaker 0>way to write this rather verbose, complicated thing.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:32:38.430 --> 00:32:43.410
<v Speaker 0>Okay, this, however, might be more familiar to you, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:43.410 --> 00:32:46.320
<v Speaker 0>from other programming languages.

NOTE CONF {"raw":[100,100,100,100]}

00:32:46.320 --> 00:32:46.920
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:32:47.880 --> 00:32:48.390
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:32:48.900 --> 00:32:52.170
<v Speaker 0>Um, anyway, I just I'll just briefly say that and

NOTE CONF {"raw":[100,100,88,100,100,100,100,100,100,100]}

00:32:52.170 --> 00:32:53.820
<v Speaker 0>get on to recursion.

NOTE CONF {"raw":[100,100,100,100]}

00:32:54.000 --> 00:32:54.390
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:32:54.390 --> 00:32:55.830
<v Speaker 0>So, um.

NOTE CONF {"raw":[100,100]}

00:32:58.080 --> 00:32:59.400
<v Speaker 0>So how does this work?

NOTE CONF {"raw":[100,100,100,100,100]}

00:32:59.400 --> 00:32:59.730
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:32:59.730 --> 00:33:03.600
<v Speaker 0>And it's useful to look at an example and step

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:03.600 --> 00:33:05.340
<v Speaker 0>by step see what's going on.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:33:05.340 --> 00:33:05.640
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:33:05.640 --> 00:33:08.010
<v Speaker 0>And so I'm going to do a little computation of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:08.010 --> 00:33:08.430
<v Speaker 0>this.

NOTE CONF {"raw":[100]}

00:33:08.430 --> 00:33:12.060
<v Speaker 0>Some of this of this value of squares rec apply

NOTE CONF {"raw":[54,100,100,100,100,100,100,100,79,63]}

00:33:12.060 --> 00:33:13.890
<v Speaker 0>to list containing 1 to 3.

NOTE CONF {"raw":[100,89,100,83,83,83]}

00:33:13.890 --> 00:33:15.330
<v Speaker 0>We know what the answer is going to be.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:33:15.330 --> 00:33:18.210
<v Speaker 0>It's going to be list containing 149.

NOTE CONF {"raw":[100,100,100,100,100,100,83]}

00:33:18.360 --> 00:33:18.840
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:33:18.840 --> 00:33:21.330
<v Speaker 0>But how does this how does this come out of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:21.330 --> 00:33:22.500
<v Speaker 0>this definition?

NOTE CONF {"raw":[100,100]}

00:33:22.560 --> 00:33:22.920
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:33:22.920 --> 00:33:27.540
<v Speaker 0>So, um, uh, first of all, we can expand this

NOTE CONF {"raw":[100,100,97,100,100,100,100,100,100,100]}

00:33:27.540 --> 00:33:28.110
<v Speaker 0>notation.

NOTE CONF {"raw":[100]}

00:33:28.110 --> 00:33:31.920
<v Speaker 0>This is just this is just notation for this list

NOTE CONF {"raw":[100,100,100,100,95,100,100,100,100,100]}

00:33:31.920 --> 00:33:34.230
<v Speaker 0>built using cons and nil.

NOTE CONF {"raw":[100,100,100,100,100]}

00:33:36.630 --> 00:33:37.260
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:33:37.260 --> 00:33:39.360
<v Speaker 0>And then we can do pattern matching.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:33:39.360 --> 00:33:41.400
<v Speaker 0>So if we look sorry go back.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:33:41.400 --> 00:33:43.860
<v Speaker 0>We look at the two the two cases here we

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:43.860 --> 00:33:46.440
<v Speaker 0>try to figure out which one of these is going

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:46.440 --> 00:33:47.670
<v Speaker 0>to is going to match.

NOTE CONF {"raw":[100,100,100,100,100]}

00:33:47.670 --> 00:33:50.130
<v Speaker 0>Well it's not the first one because the list is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:50.130 --> 00:33:50.910
<v Speaker 0>not empty.

NOTE CONF {"raw":[100,100]}

00:33:51.120 --> 00:33:52.890
<v Speaker 0>So it's got to be the second one.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:33:53.610 --> 00:33:56.190
<v Speaker 0>And the pattern is x cons xz.

NOTE CONF {"raw":[100,100,100,100,92,100,42]}

00:33:56.190 --> 00:34:01.650
<v Speaker 0>So uh x is one and x is is everything

NOTE CONF {"raw":[95,55,100,100,100,100,100,100,100,100]}

00:34:01.650 --> 00:34:03.060
<v Speaker 0>after one.

NOTE CONF {"raw":[100,100]}

00:34:03.060 --> 00:34:07.500
<v Speaker 0>So it's this list containing two and three okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:34:07.500 --> 00:34:09.780
<v Speaker 0>So I've made a note of that here.

NOTE CONF {"raw":[100,72,100,100,100,100,100,100]}

00:34:11.610 --> 00:34:14.669
<v Speaker 0>And then I look at the right hand side of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:14.669 --> 00:34:15.960
<v Speaker 0>of that equation.

NOTE CONF {"raw":[100,100,100]}

00:34:15.960 --> 00:34:18.570
<v Speaker 0>So you know this thing is equal to that thing.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:18.570 --> 00:34:19.810
<v Speaker 0>So I have this thing.

NOTE CONF {"raw":[100,100,100,100,100]}

00:34:19.810 --> 00:34:20.740
<v Speaker 0>So what?

NOTE CONF {"raw":[100,100]}

00:34:20.740 --> 00:34:22.570
<v Speaker 0>What what is that thing?

NOTE CONF {"raw":[100,100,100,100,100]}

00:34:23.200 --> 00:34:26.590
<v Speaker 0>Given that x is one and x is, is this

NOTE CONF {"raw":[100,100,100,100,100,100,69,52,100,100]}

00:34:26.590 --> 00:34:28.090
<v Speaker 0>list containing two and three.

NOTE CONF {"raw":[100,100,100,100,100]}

00:34:28.090 --> 00:34:28.600
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:34:28.600 --> 00:34:31.240
<v Speaker 0>Well it's this it's this expression.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:34:31.690 --> 00:34:31.990
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:34:31.990 --> 00:34:34.629
<v Speaker 0>So all I've done is written out the right hand

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:34.629 --> 00:34:38.080
<v Speaker 0>side of that definition of the second line of that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:38.080 --> 00:34:44.530
<v Speaker 0>definition, substituting one for x and two cons three cons

NOTE CONF {"raw":[100,100,100,100,100,100,100,77,100,100]}

00:34:44.530 --> 00:34:46.750
<v Speaker 0>nil for xs okay.

NOTE CONF {"raw":[100,100,52,100]}

00:34:46.750 --> 00:34:47.590
<v Speaker 0>Is that clear?

NOTE CONF {"raw":[100,100,100]}

00:34:48.909 --> 00:34:52.210
<v Speaker 0>Important here is these are entirely mechanical steps.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:34:52.210 --> 00:34:53.830
<v Speaker 0>Computer is not being clever.

NOTE CONF {"raw":[80,80,100,100,100]}

00:34:53.830 --> 00:34:54.610
<v Speaker 0>It's just what.

NOTE CONF {"raw":[100,100,100]}

00:34:54.610 --> 00:34:56.530
<v Speaker 0>It's just doing what you told it okay.

NOTE CONF {"raw":[98,100,100,100,100,100,100,100]}

00:34:56.530 --> 00:34:59.740
<v Speaker 0>The next step okay.

NOTE CONF {"raw":[100,100,100,100]}

00:34:59.740 --> 00:35:02.020
<v Speaker 0>Again I should have maybe gone slower.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:35:02.020 --> 00:35:02.500
<v Speaker 0>But.

NOTE CONF {"raw":[100]}

00:35:02.500 --> 00:35:07.120
<v Speaker 0>But squares rec squares rec here I have to compute

NOTE CONF {"raw":[100,95,100,100,100,100,100,100,100,100]}

00:35:07.120 --> 00:35:08.260
<v Speaker 0>what that is.

NOTE CONF {"raw":[100,100,100]}

00:35:08.260 --> 00:35:11.320
<v Speaker 0>And again I can use a second the second equation

NOTE CONF {"raw":[100,100,100,100,100,63,100,100,100,100]}

00:35:11.320 --> 00:35:14.350
<v Speaker 0>here and expand it in just the same sort of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:14.350 --> 00:35:15.730
<v Speaker 0>way okay.

NOTE CONF {"raw":[100,100]}

00:35:15.730 --> 00:35:19.510
<v Speaker 0>So one times one is still there, but now I've

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:19.510 --> 00:35:24.220
<v Speaker 0>got a expanded version of what Square's rec of this

NOTE CONF {"raw":[100,62,100,100,100,94,68,71,100,100]}

00:35:24.220 --> 00:35:26.170
<v Speaker 0>some of this list means.

NOTE CONF {"raw":[100,100,100,100,100]}

00:35:26.200 --> 00:35:29.590
<v Speaker 0>Okay, X is now two, X is is now the

NOTE CONF {"raw":[100,100,100,100,100,83,58,100,100,100]}

00:35:29.590 --> 00:35:31.930
<v Speaker 0>list containing three and nothing else.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:35:31.930 --> 00:35:37.210
<v Speaker 0>And so this expands using the second equation to this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:37.210 --> 00:35:42.640
<v Speaker 0>expression okay two times two cons squares rec of x

NOTE CONF {"raw":[100,100,100,100,100,100,93,100,100,100]}

00:35:42.640 --> 00:35:47.170
<v Speaker 0>is x is three cons nil okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:35:48.760 --> 00:35:55.240
<v Speaker 0>And then one more step we get this okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:35:55.240 --> 00:35:58.270
<v Speaker 0>Now x is three x's is the empty list.

NOTE CONF {"raw":[100,100,100,100,71,100,100,100,100]}

00:36:00.280 --> 00:36:04.840
<v Speaker 0>And now finally we've got Square's Rec over the empty

NOTE CONF {"raw":[100,100,100,100,100,63,100,100,100,100]}

00:36:04.840 --> 00:36:05.740
<v Speaker 0>list here.

NOTE CONF {"raw":[100,100]}

00:36:06.190 --> 00:36:08.920
<v Speaker 0>And we can apply the first equation to say that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:08.920 --> 00:36:10.540
<v Speaker 0>that's equal to the empty list.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:36:12.280 --> 00:36:13.030
<v Speaker 0>All right.

NOTE CONF {"raw":[97,97]}

00:36:15.010 --> 00:36:17.810
<v Speaker 0>So this has been a sequence of steps that's turned

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:17.810 --> 00:36:19.310
<v Speaker 0>this function definition.

NOTE CONF {"raw":[100,100,58]}

00:36:19.400 --> 00:36:24.920
<v Speaker 0>Function application into this, uh, into this expression which contains

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:24.920 --> 00:36:27.500
<v Speaker 0>only multiplication and cons okay.

NOTE CONF {"raw":[100,100,100,100,100]}

00:36:27.500 --> 00:36:32.090
<v Speaker 0>So we can do the multiplications and and then use

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:32.090 --> 00:36:35.030
<v Speaker 0>the notation for lists to see that that's the list

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:35.030 --> 00:36:36.140
<v Speaker 0>that we thought it should be.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:36:36.140 --> 00:36:36.770
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:36:40.700 --> 00:36:41.180
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:36:41.180 --> 00:36:45.650
<v Speaker 0>So I went through that a little bit quickly.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:36:45.650 --> 00:36:46.970
<v Speaker 0>But step by step okay.

NOTE CONF {"raw":[100,100,100,100,100]}

00:36:46.970 --> 00:36:49.880
<v Speaker 0>So um you have to be able to I mean

NOTE CONF {"raw":[100,73,100,100,100,100,100,100,100,100]}

00:36:49.880 --> 00:36:52.190
<v Speaker 0>this is a way to understand this.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:36:52.190 --> 00:36:56.810
<v Speaker 0>If you find it difficult, do it yourself.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:36:57.440 --> 00:36:58.100
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:36:58.100 --> 00:36:58.670
<v Speaker 0>Slowly.

NOTE CONF {"raw":[100]}

00:36:58.670 --> 00:37:00.350
<v Speaker 0>Make sure you understand the steps.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:37:00.830 --> 00:37:01.520
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:37:04.040 --> 00:37:05.510
<v Speaker 0>This is what the computer is doing.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:37:05.510 --> 00:37:07.370
<v Speaker 0>It's all very it's actually very simple.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:37:07.370 --> 00:37:11.240
<v Speaker 0>This is, um, you know, step by step, replacing expressions

NOTE CONF {"raw":[100,100,96,100,100,100,100,100,100,100]}

00:37:11.240 --> 00:37:14.180
<v Speaker 0>with other expressions that you said are equal to them.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:14.390 --> 00:37:14.870
<v Speaker 0>Okay?

NOTE CONF {"raw":[100]}

00:37:15.080 --> 00:37:18.140
<v Speaker 0>Equal means you can replace it by the other one.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:18.140 --> 00:37:18.800
<v Speaker 0>Okay.

NOTE CONF {"raw":[94]}

00:37:19.040 --> 00:37:23.900
<v Speaker 0>Um, in in using equations for computing, we regard them

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:23.900 --> 00:37:27.740
<v Speaker 0>as left to right, uh, rewrite rules.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:37:27.920 --> 00:37:28.580
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:37:28.580 --> 00:37:30.500
<v Speaker 0>You can replace the thing on the left by the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:30.500 --> 00:37:34.490
<v Speaker 0>thing on the right, maintaining the values of the variables

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,99,100]}

00:37:34.490 --> 00:37:35.390
<v Speaker 0>and so forth.

NOTE CONF {"raw":[100,100,100]}

00:37:35.570 --> 00:37:36.080
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:37:36.080 --> 00:37:37.040
<v Speaker 0>As usual.

NOTE CONF {"raw":[100,100]}

00:37:38.270 --> 00:37:38.690
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:37:38.690 --> 00:37:42.050
<v Speaker 0>So this is this is a way to understand recursion.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:42.740 --> 00:37:46.220
<v Speaker 0>Um, I'm just looking to see what time it is.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:46.220 --> 00:37:47.150
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:37:47.150 --> 00:37:47.960
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:37:48.680 --> 00:37:53.870
<v Speaker 0>Um, now if you, um, this is an example of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:53.870 --> 00:37:55.250
<v Speaker 0>using QuickCheck again.

NOTE CONF {"raw":[100,61,100]}

00:37:55.550 --> 00:37:58.790
<v Speaker 0>Uh, you've, I've shown you before using QuickCheck, this is

NOTE CONF {"raw":[99,98,100,100,100,100,100,100,100,100]}

00:37:58.790 --> 00:38:02.060
<v Speaker 0>using QuickCheck to make sure that two versions of the

NOTE CONF {"raw":[100,96,100,100,100,100,100,100,100,100]}

00:38:02.060 --> 00:38:03.230
<v Speaker 0>same function are okay.

NOTE CONF {"raw":[100,100,100,100]}

00:38:03.230 --> 00:38:06.740
<v Speaker 0>So I've claimed that these two definitions give the same

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:06.740 --> 00:38:10.220
<v Speaker 0>result, and I can use QuickCheck to check that.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:38:10.220 --> 00:38:12.770
<v Speaker 0>So I can have a program or a little function

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,67,100]}

00:38:12.770 --> 00:38:17.060
<v Speaker 0>here, which takes a list of integers and checks that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:17.480 --> 00:38:19.880
<v Speaker 0>for that, for that, for a given list of integers

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:19.880 --> 00:38:20.450
<v Speaker 0>that.

NOTE CONF {"raw":[100]}

00:38:20.450 --> 00:38:25.400
<v Speaker 0>Applying squares to xz, which is this sum uh, version

NOTE CONF {"raw":[100,100,100,56,100,100,100,93,100,100]}

00:38:25.400 --> 00:38:28.910
<v Speaker 0>of squares using list comprehension that it produces the same

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:28.910 --> 00:38:31.970
<v Speaker 0>answer as this recursive definition.

NOTE CONF {"raw":[100,100,100,100,100]}

00:38:32.510 --> 00:38:33.290
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:38:33.770 --> 00:38:38.330
<v Speaker 0>Um, so prop squares is, is is what that, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,66]}

00:38:38.780 --> 00:38:39.650
<v Speaker 0>function called.

NOTE CONF {"raw":[100,100]}

00:38:39.650 --> 00:38:41.510
<v Speaker 0>It's, it's a, it's a test function.

NOTE CONF {"raw":[70,100,100,100,100,100,100]}

00:38:42.170 --> 00:38:42.680
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:38:42.680 --> 00:38:47.120
<v Speaker 0>And if I, if I, um, if I, um, run

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:47.120 --> 00:38:50.240
<v Speaker 0>Haskell and run QuickCheck, it'll tell me.

NOTE CONF {"raw":[100,100,100,93,100,100,100]}

00:38:50.240 --> 00:38:53.570
<v Speaker 0>Yes, it works for 100 tests.

NOTE CONF {"raw":[100,100,100,100,92,100]}

00:38:53.570 --> 00:38:57.170
<v Speaker 0>Let me, um, I think I have time to show

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:57.170 --> 00:38:58.100
<v Speaker 0>you this.

NOTE CONF {"raw":[100,100]}

00:38:58.310 --> 00:39:00.980
<v Speaker 0>Um, and what's interesting is what happens if it if

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,84,100]}

00:39:00.980 --> 00:39:01.790
<v Speaker 0>it's, um.

NOTE CONF {"raw":[100,97]}

00:39:05.960 --> 00:39:07.550
<v Speaker 0>If I made a mistake.

NOTE CONF {"raw":[100,62,100,100,100]}

00:39:11.960 --> 00:39:12.560
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:39:18.600 --> 00:39:18.960
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:39:18.960 --> 00:39:20.670
<v Speaker 0>Can you all read that?

NOTE CONF {"raw":[100,100,100,100,100]}

00:39:20.670 --> 00:39:21.750
<v Speaker 0>I hope you can.

NOTE CONF {"raw":[100,100,100,100]}

00:39:21.870 --> 00:39:24.450
<v Speaker 0>Um, so the program that I just had on the

NOTE CONF {"raw":[100,100,100,88,100,100,100,100,100,100]}

00:39:24.450 --> 00:39:27.750
<v Speaker 0>screen is, is in the top bit here.

NOTE CONF {"raw":[100,74,100,100,100,100,100,100]}

00:39:27.750 --> 00:39:31.080
<v Speaker 0>And I've also added squares cond, which is this version

NOTE CONF {"raw":[100,100,100,100,100,91,100,100,100,100]}

00:39:31.080 --> 00:39:35.790
<v Speaker 0>using um, conditional and and so forth to do the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:35.940 --> 00:39:37.380
<v Speaker 0>instead of pattern matching.

NOTE CONF {"raw":[100,100,100,100]}

00:39:37.620 --> 00:39:38.280
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:39:38.280 --> 00:39:42.270
<v Speaker 0>And my and my prop squares also checks to see

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:42.270 --> 00:39:43.920
<v Speaker 0>that that that is equivalent.

NOTE CONF {"raw":[100,100,100,100,100]}

00:39:43.920 --> 00:39:44.160
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:39:44.160 --> 00:39:47.790
<v Speaker 0>So I can I can now do a quick check

NOTE CONF {"raw":[100,100,100,100,100,100,100,85,100,100]}

00:39:48.180 --> 00:39:49.650
<v Speaker 0>in the bottom okay.

NOTE CONF {"raw":[100,100,100,100]}

00:39:49.650 --> 00:39:51.150
<v Speaker 0>The way I've got this set up, the top part

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:51.150 --> 00:39:51.750
<v Speaker 0>is the program.

NOTE CONF {"raw":[100,78,99]}

00:39:51.750 --> 00:39:54.180
<v Speaker 0>The bottom part is Haskell running.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:39:54.180 --> 00:39:56.580
<v Speaker 0>I've just compiled it and I can do a quick

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,83,100]}

00:39:56.580 --> 00:39:58.050
<v Speaker 0>check of prop squares.

NOTE CONF {"raw":[100,100,100,100]}

00:39:59.160 --> 00:40:02.970
<v Speaker 0>Um, and it'll say yes, it's right.

NOTE CONF {"raw":[100,100,87,100,100,100,100]}

00:40:02.970 --> 00:40:04.800
<v Speaker 0>Okay, so you believe me now?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:40:04.800 --> 00:40:06.240
<v Speaker 0>What if I made a mistake?

NOTE CONF {"raw":[100,100,89,100,100,100]}

00:40:07.950 --> 00:40:12.210
<v Speaker 0>So go back to my program, and I've Accidentally.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:40:12.360 --> 00:40:14.850
<v Speaker 0>Uh, in the in the second, in the second, uh,

NOTE CONF {"raw":[97,100,100,100,100,100,100,100,100,77]}

00:40:14.850 --> 00:40:18.210
<v Speaker 0>clause of uh, of the recursion I've put in x

NOTE CONF {"raw":[100,100,95,100,100,100,100,100,100,100]}

00:40:18.210 --> 00:40:20.820
<v Speaker 0>times x times x by mistake.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:40:20.820 --> 00:40:21.960
<v Speaker 0>So it's cubing.

NOTE CONF {"raw":[100,100,100]}

00:40:23.220 --> 00:40:26.580
<v Speaker 0>Okay, um, wait a minute.

NOTE CONF {"raw":[100,100,100,100,100]}

00:40:26.580 --> 00:40:29.610
<v Speaker 0>I've got a oh, come on.

NOTE CONF {"raw":[83,100,100,100,100,100]}

00:40:33.150 --> 00:40:40.290
<v Speaker 0>Okay, so, uh, squares rec apply to one, two, three

NOTE CONF {"raw":[100,100,100,99,96,68,100,100,97,100]}

00:40:40.290 --> 00:40:43.230
<v Speaker 0>will be, um, one eight and 27.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:40:43.230 --> 00:40:44.190
<v Speaker 0>That's wrong.

NOTE CONF {"raw":[100,100]}

00:40:44.190 --> 00:40:45.030
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:40:45.330 --> 00:40:50.160
<v Speaker 0>Um, and quick check will quickly discover that, um, it's

NOTE CONF {"raw":[100,100,68,68,88,100,100,100,100,100]}

00:40:50.160 --> 00:40:52.110
<v Speaker 0>called uh, what's it called again?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:40:52.950 --> 00:40:54.150
<v Speaker 0>Prop squares.

NOTE CONF {"raw":[87,100]}

00:40:57.660 --> 00:41:00.480
<v Speaker 0>Okay, I try, I try to, uh, to get it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:00.480 --> 00:41:03.360
<v Speaker 0>to check whether squares delivers the same result as squares

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:03.360 --> 00:41:06.030
<v Speaker 0>rec and whether squares deliver the same result as squares.

NOTE CONF {"raw":[100,100,100,100,91,100,100,100,99,100]}

00:41:06.030 --> 00:41:06.600
<v Speaker 0>Cons.

NOTE CONF {"raw":[77]}

00:41:06.750 --> 00:41:08.730
<v Speaker 0>And um, and it says no.

NOTE CONF {"raw":[100,63,100,100,100,100]}

00:41:08.730 --> 00:41:11.590
<v Speaker 0>And here's an example where, where it doesn't work.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:41:11.590 --> 00:41:14.980
<v Speaker 0>So for example, um, the list containing just two, which

NOTE CONF {"raw":[100,100,100,98,100,100,100,100,100,100]}

00:41:14.980 --> 00:41:19.090
<v Speaker 0>is obvious because, um, you know, squares, rec squares of

NOTE CONF {"raw":[100,100,100,100,100,100,100,89,100,100]}

00:41:19.090 --> 00:41:25.390
<v Speaker 0>that list is that n squares of squares rec of

NOTE CONF {"raw":[100,100,100,100,69,100,100,100,100,100]}

00:41:25.390 --> 00:41:27.310
<v Speaker 0>that list is eight.

NOTE CONF {"raw":[100,100,100,100]}

00:41:27.400 --> 00:41:28.120
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:41:28.120 --> 00:41:29.560
<v Speaker 0>So you make a mistake.

NOTE CONF {"raw":[100,100,100,100,100]}

00:41:30.850 --> 00:41:32.530
<v Speaker 0>Um, quick check.

NOTE CONF {"raw":[100,98,98]}

00:41:32.950 --> 00:41:37.810
<v Speaker 0>Uh, will, uh, be helpful sometimes in finding out, uh,

NOTE CONF {"raw":[88,100,100,100,100,100,100,100,100,76]}

00:41:37.810 --> 00:41:38.950
<v Speaker 0>that it was a mistake.

NOTE CONF {"raw":[100,100,100,100,100]}

00:41:39.220 --> 00:41:39.940
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:41:41.080 --> 00:41:44.080
<v Speaker 0>For that reason, we're kind of, uh, encouraging you to,

NOTE CONF {"raw":[100,100,100,100,100,100,69,100,100,100]}

00:41:44.080 --> 00:41:48.970
<v Speaker 0>um, to use it and to pay attention to the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:49.180 --> 00:41:50.410
<v Speaker 0>results that it gives.

NOTE CONF {"raw":[100,100,100,100]}

00:41:50.410 --> 00:41:52.150
<v Speaker 0>Just putting that back the way it is.

NOTE CONF {"raw":[100,100,84,100,100,100,100,100]}

00:41:52.150 --> 00:41:53.860
<v Speaker 0>So I'll be able to use it in the future.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:53.860 --> 00:41:54.880
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:42:02.020 --> 00:42:02.650
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:42:02.980 --> 00:42:04.900
<v Speaker 0>So back to my slides.

NOTE CONF {"raw":[100,100,100,100,100]}

00:42:05.530 --> 00:42:07.390
<v Speaker 0>Um, everybody okay.

NOTE CONF {"raw":[100,100,100]}

00:42:07.390 --> 00:42:08.080
<v Speaker 0>So far?

NOTE CONF {"raw":[100,100]}

00:42:12.280 --> 00:42:13.030
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:42:17.590 --> 00:42:18.280
<v Speaker 0>Right.

NOTE CONF {"raw":[97]}

00:42:19.510 --> 00:42:21.220
<v Speaker 0>Okay, here's another example.

NOTE CONF {"raw":[100,100,100,100]}

00:42:21.820 --> 00:42:23.020
<v Speaker 0>A little bit different.

NOTE CONF {"raw":[100,100,100,100]}

00:42:27.640 --> 00:42:28.060
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:42:28.060 --> 00:42:30.880
<v Speaker 0>This is uh, uh, selecting the odd elements.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:42:30.880 --> 00:42:32.470
<v Speaker 0>Well, this this is an example that I had in

NOTE CONF {"raw":[51,89,100,98,100,100,100,100,100,100]}

00:42:32.470 --> 00:42:34.570
<v Speaker 0>my other lecture, my previous lecture.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:42:34.570 --> 00:42:37.330
<v Speaker 0>And here was the example that I had in the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:37.330 --> 00:42:37.990
<v Speaker 0>previous lecture.

NOTE CONF {"raw":[100,100]}

00:42:37.990 --> 00:42:42.940
<v Speaker 0>This is uh, a function definition using using a guard

NOTE CONF {"raw":[100,100,86,100,100,100,100,100,100,100]}

00:42:43.510 --> 00:42:45.700
<v Speaker 0>comprehension list comprehension with a guard.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:42:45.700 --> 00:42:48.880
<v Speaker 0>So if you recall, this was, uh, taking a list

NOTE CONF {"raw":[100,100,100,100,100,100,84,100,100,100]}

00:42:48.880 --> 00:42:52.780
<v Speaker 0>of numbers and filtering out all of the odd numbers

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:52.780 --> 00:42:53.380
<v Speaker 0>from the list.

NOTE CONF {"raw":[100,100,100]}

00:42:53.380 --> 00:42:53.860
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:42:53.860 --> 00:42:56.680
<v Speaker 0>So we take a list like one, two, three, we

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:56.680 --> 00:42:59.140
<v Speaker 0>apply this and we get one and three because two

NOTE CONF {"raw":[100,100,100,100,100,100,91,100,100,100]}

00:42:59.170 --> 00:43:00.970
<v Speaker 0>is not odd okay.

NOTE CONF {"raw":[100,100,100,100]}

00:43:00.970 --> 00:43:04.390
<v Speaker 0>And here is a recursive definition of the same function.

NOTE CONF {"raw":[100,100,100,97,100,100,100,100,100,100]}

00:43:06.490 --> 00:43:07.300
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:43:07.420 --> 00:43:09.260
<v Speaker 0>Um same type.

NOTE CONF {"raw":[100,100,100]}

00:43:09.260 --> 00:43:12.980
<v Speaker 0>I'm calling it ODS req to distinguish it from ODS.

NOTE CONF {"raw":[100,100,100,99,52,100,100,100,100,100]}

00:43:13.190 --> 00:43:18.170
<v Speaker 0>Okay, same first line of the definition.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:43:18.380 --> 00:43:23.120
<v Speaker 0>Almost always the first line of a recursive function definition

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:23.120 --> 00:43:27.470
<v Speaker 0>on on on lists will be of that form, but

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:27.470 --> 00:43:28.520
<v Speaker 0>not always.

NOTE CONF {"raw":[100,100]}

00:43:28.820 --> 00:43:29.630
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:43:30.320 --> 00:43:33.200
<v Speaker 0>Uh, it'll always be, you know, function applied to empty

NOTE CONF {"raw":[100,61,100,100,100,100,100,81,100,100]}

00:43:33.200 --> 00:43:34.460
<v Speaker 0>list equals something.

NOTE CONF {"raw":[100,98,100]}

00:43:34.460 --> 00:43:36.260
<v Speaker 0>Usually there's something is going to be the empty list,

NOTE CONF {"raw":[100,52,100,100,100,100,100,96,100,100]}

00:43:36.260 --> 00:43:36.980
<v Speaker 0>but not always.

NOTE CONF {"raw":[100,100,100]}

00:43:36.980 --> 00:43:42.350
<v Speaker 0>So, uh, um, so, um, okay, but what if it's

NOTE CONF {"raw":[100,100,91,100,100,100,100,100,100,100]}

00:43:42.350 --> 00:43:43.370
<v Speaker 0>not empty?

NOTE CONF {"raw":[100,100]}

00:43:44.120 --> 00:43:45.440
<v Speaker 0>What if the list is not empty?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:43:45.440 --> 00:43:48.290
<v Speaker 0>So the list is contains a head x and a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:48.290 --> 00:43:49.700
<v Speaker 0>tail XS.

NOTE CONF {"raw":[100,83]}

00:43:50.000 --> 00:43:50.330
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:43:50.330 --> 00:43:51.920
<v Speaker 0>Well then there's two cases.

NOTE CONF {"raw":[100,100,100,100,100]}

00:43:51.920 --> 00:43:54.050
<v Speaker 0>And this is how you do a case analysis in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:54.050 --> 00:43:54.740
<v Speaker 0>Haskell.

NOTE CONF {"raw":[100]}

00:43:56.750 --> 00:43:57.410
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:43:57.410 --> 00:44:03.470
<v Speaker 0>So odds rec of x cons x is such that

NOTE CONF {"raw":[100,99,69,100,100,100,78,60,100,100]}

00:44:04.250 --> 00:44:07.550
<v Speaker 0>uh ord of x is true Okay.

NOTE CONF {"raw":[100,82,100,100,100,100,100]}

00:44:07.550 --> 00:44:09.050
<v Speaker 0>So it's like it's like what we did here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:44:09.050 --> 00:44:11.750
<v Speaker 0>We have this guard out of X's out of X.

NOTE CONF {"raw":[100,100,100,100,100,100,47,100,100,100]}

00:44:12.170 --> 00:44:13.310
<v Speaker 0>And here it is.

NOTE CONF {"raw":[100,100,100,100]}

00:44:13.310 --> 00:44:17.150
<v Speaker 0>It's a it's a guard on the on this definition

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:17.150 --> 00:44:20.090
<v Speaker 0>on this on this equation okay.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:44:20.630 --> 00:44:24.650
<v Speaker 0>If x is odd then the result is we include

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:24.650 --> 00:44:25.130
<v Speaker 0>x.

NOTE CONF {"raw":[100]}

00:44:25.850 --> 00:44:30.530
<v Speaker 0>And we do consider the result of applying odds req

NOTE CONF {"raw":[100,100,100,44,100,100,100,100,87,46]}

00:44:30.530 --> 00:44:31.760
<v Speaker 0>to the rest of x.

NOTE CONF {"raw":[100,100,100,100,100]}

00:44:32.150 --> 00:44:35.810
<v Speaker 0>The rest of the list, which is x is okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,86,80,100]}

00:44:35.810 --> 00:44:39.650
<v Speaker 0>So odds rec apply to this list.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:44:40.640 --> 00:44:46.070
<v Speaker 0>If x is odd, it's x cons odds rec apply

NOTE CONF {"raw":[100,100,100,100,76,56,99,99,96,88]}

00:44:46.070 --> 00:44:47.150
<v Speaker 0>to the rest of the list.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:44:47.450 --> 00:44:51.950
<v Speaker 0>Okay, otherwise we don't include x, so we throw x

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:51.950 --> 00:44:55.190
<v Speaker 0>away and we just include the rest of the odd

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:55.190 --> 00:44:58.880
<v Speaker 0>numbers and x's okay.

NOTE CONF {"raw":[100,97,90,100]}

00:45:01.490 --> 00:45:03.680
<v Speaker 0>So that's how you write a kind of case analysis

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:03.680 --> 00:45:04.550
<v Speaker 0>in Haskell.

NOTE CONF {"raw":[98,100]}

00:45:04.640 --> 00:45:10.230
<v Speaker 0>And the formatting is not required, but it makes it

NOTE CONF {"raw":[100,100,100,100,100,100,100,98,100,100]}

00:45:10.230 --> 00:45:10.980
<v Speaker 0>easy to read.

NOTE CONF {"raw":[100,100,100]}

00:45:11.010 --> 00:45:13.590
<v Speaker 0>I strongly encourage you to use this style of formatting

NOTE CONF {"raw":[100,100,100,100,100,100,88,100,100,100]}

00:45:13.590 --> 00:45:18.330
<v Speaker 0>where you've got like vertically aligned cases and vertically aligned

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:18.630 --> 00:45:20.850
<v Speaker 0>are equal signs.

NOTE CONF {"raw":[75,100,100]}

00:45:21.450 --> 00:45:26.700
<v Speaker 0>And in fact, Haskell has some rules about, um, alignment.

NOTE CONF {"raw":[100,100,100,92,100,100,100,100,100,100]}

00:45:27.750 --> 00:45:30.360
<v Speaker 0>Um, and they're kind of complicated to explain.

NOTE CONF {"raw":[94,100,100,100,100,100,100,100]}

00:45:30.360 --> 00:45:32.670
<v Speaker 0>But if you format things the way that I do

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:32.670 --> 00:45:35.880
<v Speaker 0>in my lectures, everything will be okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:45:35.880 --> 00:45:38.490
<v Speaker 0>And if you don't, you might end up with a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:38.490 --> 00:45:39.660
<v Speaker 0>confusing error message.

NOTE CONF {"raw":[100,100,100]}

00:45:39.660 --> 00:45:40.260
<v Speaker 0>So here.

NOTE CONF {"raw":[100,100]}

00:45:41.580 --> 00:45:44.610
<v Speaker 7>Are there any performance advantages to using.

NOTE CONF {"raw":[100,64,99,100,100,100,100]}

00:45:46.740 --> 00:45:47.820
<v Speaker 7>To comprehension.

NOTE CONF {"raw":[99,100]}

00:45:48.030 --> 00:45:49.530
<v Speaker 0>Sorry, that was about performance.

NOTE CONF {"raw":[100,100,100,100,100]}

00:45:49.530 --> 00:45:50.670
<v Speaker 0>I didn't quite get it all.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:45:50.760 --> 00:45:52.560
<v Speaker 0>You said is there a difference in performance?

NOTE CONF {"raw":[65,100,100,100,100,100,100,100]}

00:45:52.740 --> 00:45:53.400
<v Speaker 0>Okay.

NOTE CONF {"raw":[73]}

00:45:53.490 --> 00:45:56.940
<v Speaker 0>Um, there is no no difference in performance.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:45:56.940 --> 00:45:59.490
<v Speaker 0>Or at least none that you will notice.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:45:59.700 --> 00:46:00.990
<v Speaker 0>Um, everything.

NOTE CONF {"raw":[100,100]}

00:46:00.990 --> 00:46:03.690
<v Speaker 0>So in this course, I'm kind of encouraging you not

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:03.690 --> 00:46:05.730
<v Speaker 0>to worry too much about efficiency.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:46:06.120 --> 00:46:10.080
<v Speaker 0>Okay, one one reason is that, um, the important thing

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:10.080 --> 00:46:11.190
<v Speaker 0>is getting it right.

NOTE CONF {"raw":[100,100,100,100]}

00:46:11.970 --> 00:46:14.910
<v Speaker 0>And whether, you know, computing the wrong answer really fast

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:14.910 --> 00:46:16.260
<v Speaker 0>is not very helpful.

NOTE CONF {"raw":[100,100,100,100]}

00:46:16.530 --> 00:46:17.280
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:46:17.400 --> 00:46:20.280
<v Speaker 0>Uh, better to to to get the right answer more

NOTE CONF {"raw":[89,100,100,100,100,100,100,100,100,100]}

00:46:20.280 --> 00:46:20.880
<v Speaker 0>slowly.

NOTE CONF {"raw":[100]}

00:46:20.880 --> 00:46:21.570
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:46:21.660 --> 00:46:28.230
<v Speaker 0>Um, Haskell, the Haskell has an incredible amount of kind

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:28.230 --> 00:46:34.140
<v Speaker 0>of clever technology in the compiler that, um, recognises, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,91,100]}

00:46:34.140 --> 00:46:39.120
<v Speaker 0>common situations and produces, uh, code that runs fast.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:46:39.120 --> 00:46:43.830
<v Speaker 0>Okay, so these two, these two cases will probably, in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:43.830 --> 00:46:48.510
<v Speaker 0>Haskell, produce exactly the same, uh, uh, you know, down

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:48.510 --> 00:46:51.480
<v Speaker 0>underneath the way that things are computed will probably produce

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:51.480 --> 00:46:54.510
<v Speaker 0>the same sequence of computation steps in the end.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:46:54.510 --> 00:46:55.200
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:46:55.200 --> 00:46:57.090
<v Speaker 0>So Haskell is clever that way.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:46:57.870 --> 00:46:58.740
<v Speaker 0>All right.

NOTE CONF {"raw":[100,100]}

00:46:59.580 --> 00:47:00.060
<v Speaker 0>Anything else?

NOTE CONF {"raw":[100,100]}

00:47:00.060 --> 00:47:03.120
<v Speaker 0>I'm kind of coming close to my, uh, the end

NOTE CONF {"raw":[100,100,100,100,100,100,100,70,100,100]}

00:47:03.120 --> 00:47:04.230
<v Speaker 0>of my lecture here.

NOTE CONF {"raw":[100,100,100,100]}

00:47:04.500 --> 00:47:06.870
<v Speaker 0>Um, I'll just say you can do you can do

NOTE CONF {"raw":[96,100,100,100,100,100,100,100,100,100]}

00:47:06.870 --> 00:47:08.520
<v Speaker 0>it again, a step by step.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:47:09.210 --> 00:47:13.530
<v Speaker 0>Uh, uh, run through this to see that it's does

NOTE CONF {"raw":[90,100,100,100,100,100,100,100,73,100]}

00:47:13.530 --> 00:47:14.670
<v Speaker 0>what you expect.

NOTE CONF {"raw":[100,52,100]}

00:47:18.090 --> 00:47:18.480
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:47:18.480 --> 00:47:20.880
<v Speaker 0>You can check it with quick check that it gets

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:20.880 --> 00:47:21.870
<v Speaker 0>the right answer.

NOTE CONF {"raw":[100,100,100]}

00:47:22.620 --> 00:47:23.370
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:47:23.370 --> 00:47:25.230
<v Speaker 0>I mean, maybe I should go back a second to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:25.230 --> 00:47:26.310
<v Speaker 0>this definition.

NOTE CONF {"raw":[100,100]}

00:47:26.610 --> 00:47:29.730
<v Speaker 0>Um, I said, I mean, is it clear what the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:29.730 --> 00:47:30.810
<v Speaker 0>format of this is?

NOTE CONF {"raw":[100,100,100,100]}

00:47:30.810 --> 00:47:31.470
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:47:31.470 --> 00:47:33.480
<v Speaker 0>You can have more than you can have more than

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:33.480 --> 00:47:34.470
<v Speaker 0>two cases.

NOTE CONF {"raw":[100,100]}

00:47:34.470 --> 00:47:36.450
<v Speaker 0>Oh, I forgot to say otherwise.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:47:36.450 --> 00:47:42.450
<v Speaker 0>What otherwise was okay, otherwise is just, uh, an abbreviation

NOTE CONF {"raw":[100,100,100,100,100,56,100,94,100,100]}

00:47:42.450 --> 00:47:44.670
<v Speaker 0>for, um, the value.

NOTE CONF {"raw":[100,92,100,100]}

00:47:44.670 --> 00:47:45.480
<v Speaker 0>True.

NOTE CONF {"raw":[100]}

00:47:45.570 --> 00:47:46.170
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:47:46.170 --> 00:47:50.820
<v Speaker 0>The thing after the vertical bar has to be, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:51.030 --> 00:47:54.180
<v Speaker 0>an expression which evaluates to true or false.

NOTE CONF {"raw":[100,100,100,100,85,100,100,100]}

00:47:54.720 --> 00:47:55.440
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:47:55.440 --> 00:47:58.230
<v Speaker 0>If it evaluates to true, then that's the case that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:58.230 --> 00:47:59.040
<v Speaker 0>we take.

NOTE CONF {"raw":[100,100]}

00:48:00.120 --> 00:48:02.340
<v Speaker 0>If it evaluates to false, then we go on to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:02.340 --> 00:48:03.310
<v Speaker 0>the next case.

NOTE CONF {"raw":[100,100,100]}

00:48:03.550 --> 00:48:07.300
<v Speaker 0>Always one after the other, okay?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:48:07.300 --> 00:48:11.950
<v Speaker 0>And otherwise will always be like the final case.

NOTE CONF {"raw":[100,100,91,100,100,100,100,100,100]}

00:48:11.950 --> 00:48:14.680
<v Speaker 0>And it just means true.

NOTE CONF {"raw":[100,100,100,100,100]}

00:48:14.890 --> 00:48:15.490
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:48:15.490 --> 00:48:17.920
<v Speaker 0>It will catch all of the cases that aren't caught

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:17.920 --> 00:48:18.910
<v Speaker 0>by the earlier ones.

NOTE CONF {"raw":[100,100,100,100]}

00:48:18.910 --> 00:48:19.510
<v Speaker 0>Okay?

NOTE CONF {"raw":[100]}

00:48:20.230 --> 00:48:20.740
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:48:20.740 --> 00:48:22.660
<v Speaker 0>Otherwise sounds better than true.

NOTE CONF {"raw":[100,100,100,100,100]}

00:48:23.140 --> 00:48:25.090
<v Speaker 0>Uh, for a case set of cases.

NOTE CONF {"raw":[74,100,100,100,100,100,100]}

00:48:25.090 --> 00:48:25.570
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:48:25.570 --> 00:48:28.300
<v Speaker 0>So it's the one that will be true if none

NOTE CONF {"raw":[100,97,100,100,100,100,100,100,100,100]}

00:48:28.300 --> 00:48:29.410
<v Speaker 0>of the other ones are true.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:48:29.650 --> 00:48:30.550
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:48:30.790 --> 00:48:36.970
<v Speaker 0>Um, in my lecture, the slides, I'll just quickly show

NOTE CONF {"raw":[100,100,100,100,100,100,97,100,100,100]}

00:48:36.970 --> 00:48:40.150
<v Speaker 0>you this here is a definition which can't be.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:48:40.150 --> 00:48:43.330
<v Speaker 0>This is a function which can't be defined using comprehension.

NOTE CONF {"raw":[100,100,100,100,100,58,100,100,100,100]}

00:48:43.600 --> 00:48:46.870
<v Speaker 0>The sum of a list of integers.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:48:46.900 --> 00:48:50.050
<v Speaker 0>Does anybody know why it can't be defined using comprehension?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:53.080 --> 00:48:53.500
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:48:53.830 --> 00:48:54.430
<v Speaker 8>Comprehension.

NOTE CONF {"raw":[100]}

00:48:55.600 --> 00:48:56.140
<v Speaker 0>Right?

NOTE CONF {"raw":[100]}

00:48:56.140 --> 00:48:56.770
<v Speaker 0>Exactly.

NOTE CONF {"raw":[100]}

00:48:56.770 --> 00:48:59.530
<v Speaker 0>Comprehension can only produce lists say takes a list and

NOTE CONF {"raw":[100,100,100,100,100,44,100,100,100,99]}

00:48:59.530 --> 00:49:00.430
<v Speaker 0>produces a list.

NOTE CONF {"raw":[100,100,100]}

00:49:00.430 --> 00:49:02.170
<v Speaker 0>This one produces an integer.

NOTE CONF {"raw":[100,100,100,100,100]}

00:49:02.470 --> 00:49:04.930
<v Speaker 0>Okay, so just because of the types it can't be

NOTE CONF {"raw":[100,100,100,100,100,100,100,91,100,100]}

00:49:04.930 --> 00:49:06.040
<v Speaker 0>done using comprehension.

NOTE CONF {"raw":[100,100,100]}

00:49:06.040 --> 00:49:08.830
<v Speaker 0>But it can be done using using recursion.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:49:09.100 --> 00:49:11.590
<v Speaker 0>And you know the sum of an empty list is

NOTE CONF {"raw":[100,100,100,100,99,100,100,100,100,100]}

00:49:11.590 --> 00:49:12.340
<v Speaker 0>zero.

NOTE CONF {"raw":[100]}

00:49:12.490 --> 00:49:16.060
<v Speaker 0>And the sum of x cons x is the first

NOTE CONF {"raw":[100,100,100,100,100,100,56,100,100,100]}

00:49:16.060 --> 00:49:19.180
<v Speaker 0>value in the list x plus the sum of the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:19.180 --> 00:49:20.830
<v Speaker 0>rest of the values in the list.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:49:22.510 --> 00:49:23.170
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:49:24.430 --> 00:49:28.180
<v Speaker 0>And here's a computation for some applied to the list.

NOTE CONF {"raw":[100,98,89,100,100,100,77,100,100,100]}

00:49:28.420 --> 00:49:30.010
<v Speaker 0>Uh, 123.

NOTE CONF {"raw":[69,100]}

00:49:30.250 --> 00:49:31.630
<v Speaker 0>The answer is six.

NOTE CONF {"raw":[100,100,98,100]}

00:49:31.990 --> 00:49:32.680
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:49:32.680 --> 00:49:34.180
<v Speaker 0>And product.

NOTE CONF {"raw":[100,100]}

00:49:34.690 --> 00:49:38.950
<v Speaker 0>Uh, similarly, uh, it happens that the product of the

NOTE CONF {"raw":[100,100,87,100,100,100,100,100,100,100]}

00:49:38.950 --> 00:49:40.810
<v Speaker 0>list one, two, three is also six.

NOTE CONF {"raw":[100,100,94,100,100,100,100]}

00:49:40.960 --> 00:49:41.710
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:49:41.860 --> 00:49:46.120
<v Speaker 0>Um, interestingly here the so product it does multiplication instead

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:46.120 --> 00:49:46.930
<v Speaker 0>of addition.

NOTE CONF {"raw":[100,100]}

00:49:46.930 --> 00:49:50.770
<v Speaker 0>Interestingly the um, uh, this is the base case here,

NOTE CONF {"raw":[100,100,75,48,100,100,100,100,100,100]}

00:49:50.770 --> 00:49:51.670
<v Speaker 0>so-called base case.

NOTE CONF {"raw":[52,100,100]}

00:49:51.670 --> 00:49:54.010
<v Speaker 0>I always I forgot to use this terminology.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:49:54.010 --> 00:49:56.680
<v Speaker 0>Base case is like the empty list case.

NOTE CONF {"raw":[100,82,82,100,100,100,100,100]}

00:49:56.680 --> 00:50:02.120
<v Speaker 0>The the result is one because one is the identity

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:50:02.120 --> 00:50:04.610
<v Speaker 0>value for for multiplication.

NOTE CONF {"raw":[100,100,100,100]}

00:50:04.700 --> 00:50:05.420
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:50:05.420 --> 00:50:07.160
<v Speaker 0>And I won't finish this.

NOTE CONF {"raw":[100,100,100,100,100]}

00:50:07.160 --> 00:50:10.310
<v Speaker 0>But basically this is just showing how to put it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:50:10.310 --> 00:50:10.820
<v Speaker 0>all together.

NOTE CONF {"raw":[100,100]}

00:50:10.820 --> 00:50:14.390
<v Speaker 0>We had before the the comprehension version of the sum

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:50:14.390 --> 00:50:16.670
<v Speaker 0>of the squares of the odd numbers in the list.

NOTE CONF {"raw":[100,100,100,100,100,100,100,52,94,100]}

00:50:16.670 --> 00:50:18.380
<v Speaker 0>And here is the recursion version.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:50:18.380 --> 00:50:20.990
<v Speaker 0>It's basically putting together everything that I had in the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:50:20.990 --> 00:50:24.800
<v Speaker 0>previous three definitions into one into one definition.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:50:24.800 --> 00:50:25.220
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:50:25.220 --> 00:50:27.290
<v Speaker 0>And you can you can look this up in the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:50:27.290 --> 00:50:31.910
<v Speaker 0>slides which are in the on the course learn page.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:50:32.270 --> 00:50:33.050
<v Speaker 0>Thank you.

NOTE CONF {"raw":[100,100]}

00:50:33.050 --> 00:50:34.220
<v Speaker 0>I'm out of time.

NOTE CONF {"raw":[100,100,100,100]}

00:50:34.580 --> 00:50:36.230
<v Speaker 0>Uh, thanks for your attention.

NOTE CONF {"raw":[98,100,100,100,100]}

00:50:37.190 --> 00:50:37.550
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:50:52.760 --> 00:50:55.760
<v Speaker 9>So we came a bit later about that, but I

NOTE CONF {"raw":[100,100,100,100,98,100,72,96,100,100]}

00:50:55.760 --> 00:50:57.200
<v Speaker 9>was just wondering, what's, uh.

NOTE CONF {"raw":[100,100,100,41,62]}

00:50:57.200 --> 00:51:01.040
<v Speaker 9>Why do we use recursion is just a first.

NOTE CONF {"raw":[100,100,100,100,100,74,100,69,92]}

00:51:02.150 --> 00:51:02.930
<v Speaker 0>Instead of what?

NOTE CONF {"raw":[100,100,98]}

00:51:03.050 --> 00:51:03.410
<v Speaker 9>What?

NOTE CONF {"raw":[90]}

00:51:03.410 --> 00:51:04.430
<v Speaker 9>Instead of the.

NOTE CONF {"raw":[100,100,100]}

00:51:06.020 --> 00:51:06.620
<v Speaker 0>Comprehension?

NOTE CONF {"raw":[100]}

00:51:06.620 --> 00:51:09.320
<v Speaker 0>Because sometimes you can't write functions using recursion.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:51:09.950 --> 00:51:10.730
<v Speaker 0>That's the reason.

NOTE CONF {"raw":[100,100,100]}

00:51:10.730 --> 00:51:11.780
<v Speaker 0>That's one reason, yeah.

NOTE CONF {"raw":[100,100,100,97]}

00:51:12.440 --> 00:51:13.730
<v Speaker 0>Yeah, I can't make.

NOTE CONF {"raw":[100,100,84,100]}

00:51:13.730 --> 00:51:15.710
<v S11>My 9 a.m. tutorial because the classes are.

NOTE CONF {"raw":[100,100,100,100,100,100,99,69]}

00:51:16.190 --> 00:51:19.610
<v S11>Yeah, but I'm going to do 1031 and Fergus emailed

NOTE CONF {"raw":[99,100,93,97,99,94,99,51,98,100]}

00:51:19.610 --> 00:51:20.540
<v S11>you to tell you that.

NOTE CONF {"raw":[100,100,100,100,100]}

00:51:20.660 --> 00:51:23.150
<v S11>So, um, I requested them to change it, but they

NOTE CONF {"raw":[100,75,100,100,100,100,100,78,100,100]}

00:51:23.150 --> 00:51:24.110
<v S11>haven't changed it yet.

NOTE CONF {"raw":[100,100,100,100]}

00:51:24.140 --> 00:51:24.440
<v S11>Okay.

NOTE CONF {"raw":[100]}

00:51:24.500 --> 00:51:26.210
<v S11>I'm going to be going to 1031.

NOTE CONF {"raw":[95,92,96,100,100,99,100]}

00:51:26.420 --> 00:51:26.780
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:51:26.780 --> 00:51:27.170
<v Speaker 0>Go.

NOTE CONF {"raw":[85]}

00:51:27.200 --> 00:51:30.050
<v Speaker 0>I mean, as long as the tutors know what you're

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:51:30.050 --> 00:51:32.600
<v Speaker 0>doing and as long as you've requested it.

NOTE CONF {"raw":[100,100,100,100,100,89,100,100]}

00:51:33.680 --> 00:51:34.190
<v S11>I don't know.

NOTE CONF {"raw":[100,100,100]}

00:51:34.880 --> 00:51:35.360
<v Speaker 0>It's on.

NOTE CONF {"raw":[100,100]}

00:51:35.360 --> 00:51:36.740
<v Speaker 0>It's on Piazza.

NOTE CONF {"raw":[100,100,100]}

00:51:36.770 --> 00:51:37.070
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:51:37.190 --> 00:51:39.560
<v Speaker 0>Uh, there's this list of all the tutorials.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:51:39.560 --> 00:51:40.070
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:51:40.190 --> 00:51:43.160
<v Speaker 0>Okay, so they have to know, and you need to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:51:43.160 --> 00:51:44.930
<v Speaker 0>apply using that form to switch.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:51:44.930 --> 00:51:47.150
<v Speaker 0>And I actually don't need to know because I can't

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:51:47.150 --> 00:51:48.140
<v Speaker 0>do anything about it.

NOTE CONF {"raw":[100,100,100,100]}

00:51:48.740 --> 00:51:49.250
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:51:49.520 --> 00:51:49.730
<v Speaker 0>Huh.

NOTE CONF {"raw":[60]}

00:51:50.480 --> 00:51:54.110
<v Speaker 7>Why can't you do patterns with more than more than

NOTE CONF {"raw":[100,100,100,100,100,100,100,78,100,100]}

00:51:54.110 --> 00:51:55.430
<v Speaker 7>like XS and XS?

NOTE CONF {"raw":[100,71,100,71]}

00:51:55.430 --> 00:51:59.220
<v Speaker 7>Why can't you do, for example, X y cons exist.

NOTE CONF {"raw":[100,100,100,100,100,100,88,98,37,31]}

00:51:59.220 --> 00:51:59.850
<v Speaker 0>You can.

NOTE CONF {"raw":[100,100]}

00:52:00.120 --> 00:52:00.570
<v Speaker 7>You can.

NOTE CONF {"raw":[100,92]}

00:52:00.570 --> 00:52:01.440
<v Speaker 0>Yes you can.

NOTE CONF {"raw":[100,100,100]}

00:52:02.040 --> 00:52:02.610
<v Speaker 0>Yeah.

NOTE CONF {"raw":[64]}

00:52:02.970 --> 00:52:05.460
<v Speaker 0>So for example, if you wanted to write a program

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:52:05.460 --> 00:52:10.170
<v Speaker 0>that would, um, uh, throw away every second element of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:52:10.170 --> 00:52:10.860
<v Speaker 0>a list.

NOTE CONF {"raw":[100,100]}

00:52:11.790 --> 00:52:12.210
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:52:12.210 --> 00:52:15.240
<v Speaker 0>So keeping only the first element, the third element, the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:52:15.240 --> 00:52:15.780
<v Speaker 0>fifth element.

NOTE CONF {"raw":[100,100]}

00:52:15.780 --> 00:52:18.000
<v Speaker 0>And so far that would be naturally written with a

NOTE CONF {"raw":[100,100,54,100,100,100,100,100,100,100]}

00:52:18.000 --> 00:52:19.440
<v Speaker 0>pattern like what you just said.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:52:20.790 --> 00:52:21.810
<v Speaker 7>And then the function again.

NOTE CONF {"raw":[81,82,82,100,90]}

00:52:21.810 --> 00:52:22.290
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:52:23.520 --> 00:52:23.970
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:52:24.450 --> 00:52:28.740
<v Speaker 0>Um, would be like um, f of empty list is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:52:28.740 --> 00:52:30.180
<v Speaker 0>equal to the empty list.

NOTE CONF {"raw":[100,100,100,100,100]}

00:52:30.180 --> 00:52:35.160
<v Speaker 0>F of the list containing just one thing would be,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:52:35.160 --> 00:52:37.740
<v Speaker 0>uh, I guess the list containing that one thing and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:52:37.740 --> 00:52:43.140
<v Speaker 0>list with a cons b cons, uh, something else I

NOTE CONF {"raw":[83,100,100,100,90,100,100,100,100,100]}

00:52:43.140 --> 00:52:43.740
<v Speaker 0>don't know.

NOTE CONF {"raw":[87,100]}

00:52:43.740 --> 00:52:47.700
<v Speaker 0>Uh, l is equal to a cons f of l.

NOTE CONF {"raw":[54,99,100,100,100,100,100,100,100,100]}

00:52:49.590 --> 00:52:50.130
<v Speaker 0>All right.

NOTE CONF {"raw":[100,100]}

00:52:50.130 --> 00:52:50.490
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:52:50.490 --> 00:52:50.940
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:52:54.630 --> 00:52:57.660
<v S12>Something related to the tutorial, like questions.

NOTE CONF {"raw":[100,100,100,100,100,49,78]}

00:52:58.110 --> 00:53:00.420
<v Speaker 0>To tutorial two or tutorial one.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:53:01.830 --> 00:53:04.980
<v Speaker 0>Okay, um, quick questions or.

NOTE CONF {"raw":[98,98,100,100,100]}

00:53:05.370 --> 00:53:05.940
<v Speaker 0>Okay.

NOTE CONF {"raw":[86]}

00:53:08.400 --> 00:53:08.700
<v S12>Yeah.

NOTE CONF {"raw":[97]}

00:53:08.730 --> 00:53:11.820
<v S12>Are we supposed to return the values according to the

NOTE CONF {"raw":[97,96,100,100,100,100,100,100,100,100]}

00:53:11.820 --> 00:53:14.820
<v S12>index number or according to the values in the list?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:53:16.590 --> 00:53:18.900
<v S12>Is it necessary that they are going the values?

NOTE CONF {"raw":[100,100,100,100,100,100,77,100,100]}

00:53:18.900 --> 00:53:20.550
<v Speaker 0>The values, not the indices.

NOTE CONF {"raw":[100,100,100,100,100]}

00:53:21.390 --> 00:53:21.750
<v S12>Okay.

NOTE CONF {"raw":[100]}

00:53:22.170 --> 00:53:24.540
<v S12>So this will be in like a certain order and.

NOTE CONF {"raw":[100,100,100,96,96,100,100,100,100,100]}

00:53:24.870 --> 00:53:26.160
<v Speaker 0>Within the range given by the.

NOTE CONF {"raw":[100,100,100,92,100,100]}

00:53:26.460 --> 00:53:28.890
<v Speaker 0>Yeah I sorry I mean I mean the values.

NOTE CONF {"raw":[97,81,100,100,100,100,100,100,100]}

00:53:28.890 --> 00:53:33.390
<v Speaker 0>So between you know between 5 and 10, uh, it's.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,92]}

00:53:33.390 --> 00:53:36.510
<v S12>Always going to be in ascending order or descending order

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:53:36.510 --> 00:53:36.900
<v S12>or something.

NOTE CONF {"raw":[90,100]}

00:53:36.900 --> 00:53:37.140
<v Speaker 0>Like that.

NOTE CONF {"raw":[100,94]}

00:53:37.170 --> 00:53:38.490
<v Speaker 0>No, no, no.

NOTE CONF {"raw":[100,100,100]}

00:53:38.490 --> 00:53:42.150
<v Speaker 0>Um, this is, uh, so what I mean, you know,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:53:42.150 --> 00:53:45.570
<v Speaker 0>like, it's so this happens to be in ascending order,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:53:45.570 --> 00:53:47.250
<v Speaker 0>but it doesn't have to be, obviously.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:53:47.250 --> 00:53:49.350
<v Speaker 0>And I don't mean according to the indices, I mean

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:53:49.350 --> 00:53:50.370
<v Speaker 0>according to the values.

NOTE CONF {"raw":[100,100,100,100]}

00:53:50.370 --> 00:53:54.150
<v Speaker 0>So if you have a bunch of numbers, then all

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:53:54.150 --> 00:53:56.560
<v Speaker 0>of the ones that are between 5 and 10 as

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:53:56.560 --> 00:53:58.840
<v Speaker 0>values should be in the result.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:53:58.990 --> 00:53:59.530
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:53:59.530 --> 00:53:59.890
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:53:59.920 --> 00:54:00.280
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:54:00.280 --> 00:54:01.600
<v Speaker 0>Yeah, yeah.

NOTE CONF {"raw":[91,95]}

00:54:01.930 --> 00:54:03.160
<v S13>How do you avoid like.

NOTE CONF {"raw":[100,100,100,100,99]}

00:54:04.420 --> 00:54:04.720
<v Speaker 0>How do.

NOTE CONF {"raw":[100,100]}

00:54:04.720 --> 00:54:04.870
<v S13>You.

NOTE CONF {"raw":[100]}

00:54:04.870 --> 00:54:05.260
<v S13>Sorry.

NOTE CONF {"raw":[100]}

00:54:05.260 --> 00:54:06.370
<v S13>My name collision.

NOTE CONF {"raw":[93,100,92]}

00:54:06.370 --> 00:54:09.340
<v S13>Like um for example you can define a function f.

NOTE CONF {"raw":[100,99,100,100,100,100,100,100,100,100]}

00:54:09.340 --> 00:54:09.580
<v S13>Yeah.

NOTE CONF {"raw":[65]}

00:54:09.580 --> 00:54:11.710
<v S13>You take two parameters heads and tails.

NOTE CONF {"raw":[100,100,100,100,81,100,81]}

00:54:11.710 --> 00:54:12.010
<v S13>Yeah.

NOTE CONF {"raw":[93]}

00:54:12.010 --> 00:54:14.470
<v S13>Then inside that function you can use the head and

NOTE CONF {"raw":[100,100,100,100,93,78,100,100,100,100]}

00:54:14.470 --> 00:54:17.110
<v S13>tail function is, uh, like.

NOTE CONF {"raw":[100,95,93,96,100]}

00:54:17.110 --> 00:54:17.650
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:54:18.670 --> 00:54:21.310
<v Speaker 0>You, um, okay.

NOTE CONF {"raw":[100,100,100]}

00:54:21.310 --> 00:54:23.290
<v S14>So, uh.

NOTE CONF {"raw":[100,100]}

00:54:24.250 --> 00:54:26.500
<v Speaker 0>One, one thing is you can, you can just avoid

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:54:26.500 --> 00:54:28.300
<v Speaker 0>that by being careful, okay?

NOTE CONF {"raw":[100,100,100,100,100]}

00:54:28.300 --> 00:54:32.080
<v Speaker 0>But if you do it, you know.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:54:34.240 --> 00:54:34.480
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:54:34.480 --> 00:54:38.500
<v Speaker 0>As you say, as you say, you can't use you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:54:38.500 --> 00:54:43.030
<v Speaker 0>head, head, head within this, uh, this expression here means

NOTE CONF {"raw":[95,91,95,100,100,76,100,100,100,100]}

00:54:43.210 --> 00:54:44.050
<v Speaker 0>that.

NOTE CONF {"raw":[100]}

00:54:44.050 --> 00:54:45.730
<v Speaker 0>And tail means that.

NOTE CONF {"raw":[98,98,100,100]}

00:54:45.730 --> 00:54:47.890
<v Speaker 0>And you can't use them as functions.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:54:47.890 --> 00:54:48.460
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:54:50.290 --> 00:54:50.590
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:54:50.590 --> 00:54:51.400
<v Speaker 0>It creates a new.

NOTE CONF {"raw":[100,100,100,100]}

00:54:51.640 --> 00:54:52.240
<v Speaker 0>Exactly.

NOTE CONF {"raw":[100]}

00:54:52.240 --> 00:54:53.530
<v Speaker 0>It's called a scope.

NOTE CONF {"raw":[100,100,100,100]}

00:54:53.890 --> 00:54:54.940
<v Speaker 0>This is called the scope.

NOTE CONF {"raw":[100,100,100,100,100]}

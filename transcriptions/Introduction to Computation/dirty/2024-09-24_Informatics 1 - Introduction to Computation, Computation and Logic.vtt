WEBVTT

00:00:06.570 --> 00:00:06.870
<v Speaker 0>All right.

NOTE CONF {"raw":[100,100]}

00:00:06.870 --> 00:00:08.130
<v Speaker 0>Good afternoon everyone.

NOTE CONF {"raw":[100,100,100]}

00:00:10.830 --> 00:00:15.570
<v Speaker 0>Before we start, Don has asked me to remind you

NOTE CONF {"raw":[100,100,100,84,100,100,100,100,100,100]}

00:00:15.570 --> 00:00:19.230
<v Speaker 0>that if you want to change your tutorial group, do

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:00:19.230 --> 00:00:20.490
<v Speaker 0>not email him.

NOTE CONF {"raw":[100,100,100]}

00:00:20.520 --> 00:00:21.960
<v Speaker 0>Don't email me either.

NOTE CONF {"raw":[100,100,100,100]}

00:00:21.990 --> 00:00:23.250
<v Speaker 0>Do not email Kendall.

NOTE CONF {"raw":[100,100,100,99]}

00:00:23.280 --> 00:00:24.690
<v Speaker 0>Do not email Vito.

NOTE CONF {"raw":[100,100,100,68]}

00:00:24.720 --> 00:00:26.310
<v Speaker 0>None of us can do anything about it.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:00:26.310 --> 00:00:28.200
<v Speaker 0>The only thing you can do is fill in the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:00:28.200 --> 00:00:32.730
<v Speaker 0>tutorial change group request form, which is linked to from

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:00:32.730 --> 00:00:33.990
<v Speaker 0>somewhere on the page.

NOTE CONF {"raw":[100,100,100,100]}

00:00:35.850 --> 00:00:40.470
<v Speaker 0>Um, tutorial allocation seems to be well, it seems to

NOTE CONF {"raw":[98,100,63,100,100,100,100,100,100,100]}

00:00:40.470 --> 00:00:41.010
<v Speaker 0>have happened.

NOTE CONF {"raw":[100,100]}

00:00:41.010 --> 00:00:43.620
<v Speaker 0>Whether it's happened correctly, I don't know or most of

NOTE CONF {"raw":[100,75,100,100,100,100,100,100,100,100]}

00:00:43.620 --> 00:00:46.110
<v Speaker 0>you in tutorials according to your timetables.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:00:46.110 --> 00:00:51.930
<v Speaker 0>Now how many knows, right?

NOTE CONF {"raw":[100,100,100,90,99]}

00:00:53.580 --> 00:00:56.220
<v Speaker 0>Somebody will try to mark your work and hopefully you'll

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:00:56.220 --> 00:00:58.170
<v Speaker 0>be in a tutorial by the time they happen.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:00:58.470 --> 00:01:00.850
<v Speaker 0>If you if it comes to first day and you

NOTE CONF {"raw":[100,100,100,100,100,100,87,83,100,100]}

00:01:00.850 --> 00:01:03.310
<v Speaker 0>haven't been assigned to a tutorial, just turn up to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:03.310 --> 00:01:05.080
<v Speaker 0>a random one and tell the tutor.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:01:11.680 --> 00:01:15.310
<v Speaker 0>If you're wondering why an informatics department can't assign you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:15.310 --> 00:01:18.160
<v Speaker 0>to tutorials, it's because it's not us doing it.

NOTE CONF {"raw":[98,100,100,100,100,100,100,100,100]}

00:01:18.520 --> 00:01:19.570
<v Speaker 0>It's a new system.

NOTE CONF {"raw":[98,98,100,100]}

00:01:19.570 --> 00:01:22.540
<v Speaker 0>We have a wonderful new time timetabling system which does

NOTE CONF {"raw":[100,100,100,100,100,97,100,100,100,100]}

00:01:22.540 --> 00:01:25.540
<v Speaker 0>not connect properly to all the other systems we use.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:26.530 --> 00:01:29.290
<v Speaker 0>Every week I have to download a manual list of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:29.290 --> 00:01:32.440
<v Speaker 0>where you are in order to assign your coursework.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,99]}

00:01:34.600 --> 00:01:36.100
<v Speaker 0>Um, all right.

NOTE CONF {"raw":[91,68,100]}

00:01:36.100 --> 00:01:41.050
<v Speaker 0>So last time, or rather last week, we talked about

NOTE CONF {"raw":[100,100,100,100,85,100,100,100,100,100]}

00:01:42.160 --> 00:01:46.450
<v Speaker 0>bits and binary encodings, and we talked about propositional logic.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:46.930 --> 00:01:49.240
<v Speaker 0>And right at the end I talked a little bit

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:49.240 --> 00:01:50.680
<v Speaker 0>about predicate logic.

NOTE CONF {"raw":[100,100,100]}

00:01:50.680 --> 00:01:52.330
<v Speaker 0>And I said predicate logic.

NOTE CONF {"raw":[100,100,100,100,100]}

00:01:52.330 --> 00:01:54.310
<v Speaker 0>First order logic is way too difficult.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:01:54.310 --> 00:01:55.510
<v Speaker 0>So we're not going to do that.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:01:55.510 --> 00:01:57.580
<v Speaker 0>And we're going to do something easier.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:01:58.540 --> 00:02:00.670
<v Speaker 0>So that will be what we're doing for the next

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:00.670 --> 00:02:01.840
<v Speaker 0>2 or 3 weeks.

NOTE CONF {"raw":[100,100,100,100]}

00:02:02.440 --> 00:02:05.740
<v Speaker 0>Before I start on that, are there any questions hanging

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:05.740 --> 00:02:06.970
<v Speaker 0>over from the last week?

NOTE CONF {"raw":[100,100,100,100,100]}

00:02:06.970 --> 00:02:09.610
<v Speaker 0>Anybody come across something that they wanted to ask?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:02:16.510 --> 00:02:17.020
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:02:17.020 --> 00:02:21.160
<v Speaker 0>So we are now going to skip back quite a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:21.160 --> 00:02:21.940
<v Speaker 0>long way.

NOTE CONF {"raw":[100,100]}

00:02:23.050 --> 00:02:25.000
<v Speaker 0>2500 years or so.

NOTE CONF {"raw":[100,100,100,100]}

00:02:25.120 --> 00:02:26.680
<v Speaker 0>2250 years.

NOTE CONF {"raw":[100,100]}

00:02:28.120 --> 00:02:31.450
<v Speaker 0>And look at some good old philosophical logic.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:02:32.470 --> 00:02:35.740
<v Speaker 0>I will show you later that if we were going

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:35.740 --> 00:02:38.770
<v Speaker 0>to look at good old philosophical logic in the way

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:38.770 --> 00:02:43.030
<v Speaker 0>that Aristotle did and the way that people did for

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:43.030 --> 00:02:46.570
<v Speaker 0>the next 1800 years, it would be quite painful.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:02:46.570 --> 00:02:48.850
<v Speaker 0>So we're going to look at it from a modern

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:48.850 --> 00:02:52.930
<v Speaker 0>point of view, with modern notation and modern ideas, which

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:52.930 --> 00:02:57.530
<v Speaker 0>makes it much more attractive than it used to be.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:59.870 --> 00:03:02.120
<v Speaker 0>There's an optional lecture in the middle of the course,

NOTE CONF {"raw":[97,100,100,100,100,100,100,100,100,100]}

00:03:02.120 --> 00:03:05.810
<v Speaker 0>if you really want to know the horrors that your

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:05.810 --> 00:03:08.660
<v Speaker 0>predecessors in 1400 had to go through.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:03:10.970 --> 00:03:13.670
<v Speaker 0>So I want to work with examples.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:03:14.510 --> 00:03:17.150
<v Speaker 0>And in order to work with examples, I want something

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:17.150 --> 00:03:21.230
<v Speaker 0>nice and simple with some easy properties.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:03:21.320 --> 00:03:24.290
<v Speaker 0>So we're going to work with this universe.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:03:24.290 --> 00:03:27.890
<v Speaker 0>So remember from last week universe is a technical term.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:28.160 --> 00:03:30.590
<v Speaker 0>It just means a set of things that we're going

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:30.590 --> 00:03:31.580
<v Speaker 0>to talk about.

NOTE CONF {"raw":[100,100,100]}

00:03:32.210 --> 00:03:37.550
<v Speaker 0>And I'm going to talk about some shapes.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:03:37.760 --> 00:03:40.760
<v Speaker 0>And these shapes have various properties.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:03:40.760 --> 00:03:42.650
<v Speaker 0>So if you look at what I've put up in

NOTE CONF {"raw":[100,100,100,100,100,100,97,100,100,100]}

00:03:42.650 --> 00:03:46.760
<v Speaker 0>front of you, you can see that there are shapes.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:48.020 --> 00:03:50.030
<v Speaker 0>There are three different node, two different shapes at the

NOTE CONF {"raw":[100,76,100,100,91,100,100,100,100,100]}

00:03:50.030 --> 00:03:53.990
<v Speaker 0>moment disks and triangles or circles and triangles.

NOTE CONF {"raw":[100,71,100,100,100,100,100,100]}

00:03:55.020 --> 00:03:59.160
<v Speaker 0>You can see that there are at least two different

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:59.160 --> 00:04:02.070
<v Speaker 0>sizes of things, because there are big things and small

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,85,100]}

00:04:02.070 --> 00:04:06.510
<v Speaker 0>things, and you can see that there are different colours.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,78]}

00:04:07.560 --> 00:04:10.230
<v Speaker 0>I believe that I have chosen the colours so that

NOTE CONF {"raw":[100,100,100,100,100,100,100,86,100,100]}

00:04:10.230 --> 00:04:13.560
<v Speaker 0>everything is distinct, even for full colour blindness.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:04:13.560 --> 00:04:16.200
<v Speaker 0>If you happen to suffer from colour blindness and you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:16.200 --> 00:04:19.230
<v Speaker 0>don't find these distinct, please get in touch with me

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:19.230 --> 00:04:20.850
<v Speaker 0>so I can address that.

NOTE CONF {"raw":[100,100,100,100,100]}

00:04:23.100 --> 00:04:28.350
<v Speaker 0>Um, are there any other properties that you think might

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:28.350 --> 00:04:29.490
<v Speaker 0>be relevant?

NOTE CONF {"raw":[100,100]}

00:04:30.270 --> 00:04:32.100
<v Speaker 0>So I haven't told you what I'm going to use,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:32.100 --> 00:04:33.480
<v Speaker 0>but staring at this diagram.

NOTE CONF {"raw":[100,100,100,100,100]}

00:04:33.480 --> 00:04:35.250
<v Speaker 0>Ah, there are other properties I might be going to

NOTE CONF {"raw":[33,99,97,100,100,100,100,100,100,100]}

00:04:35.250 --> 00:04:35.820
<v Speaker 0>use.

NOTE CONF {"raw":[100]}

00:04:37.620 --> 00:04:40.710
<v Speaker 0>So I mentioned size.

NOTE CONF {"raw":[78,100,100,100]}

00:04:40.710 --> 00:04:42.660
<v Speaker 0>So big things in small things here.

NOTE CONF {"raw":[100,100,100,56,100,100,98]}

00:04:44.250 --> 00:04:46.050
<v Speaker 0>Orientation, rotation.

NOTE CONF {"raw":[100,100]}

00:04:46.680 --> 00:04:49.020
<v Speaker 0>Um, I've got some more or less upright things.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:04:49.020 --> 00:04:51.210
<v Speaker 0>I've got some more or less sideways things.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:04:51.720 --> 00:04:53.790
<v Speaker 0>Um, it's a bit difficult to tell the difference between

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:53.790 --> 00:04:58.020
<v Speaker 0>an upright circle and a rotated circle, so probably I'm

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:58.020 --> 00:04:59.040
<v Speaker 0>not going to use that.

NOTE CONF {"raw":[100,100,100,100,100]}

00:04:59.850 --> 00:05:01.410
<v Speaker 0>Um, no, there is nothing else.

NOTE CONF {"raw":[97,100,100,100,100,100]}

00:05:01.410 --> 00:05:06.120
<v Speaker 0>So it's just size, colour and shape.

NOTE CONF {"raw":[100,100,100,100,86,100,100]}

00:05:07.260 --> 00:05:10.440
<v Speaker 0>So this is a universe that is small enough to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:10.440 --> 00:05:13.500
<v Speaker 0>talk about, but big enough to be interesting.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:05:14.250 --> 00:05:18.660
<v Speaker 0>Here are a bunch of statements about this universe expressed

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:18.660 --> 00:05:19.650
<v Speaker 0>in English.

NOTE CONF {"raw":[100,100]}

00:05:21.990 --> 00:05:26.580
<v Speaker 0>Um, I hope that you can all look at each

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:26.580 --> 00:05:29.580
<v Speaker 0>of these statements and look at the universe next to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:29.580 --> 00:05:33.810
<v Speaker 0>it, and decide whether each statement is true or false.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:35.640 --> 00:05:40.320
<v Speaker 0>For example, every red triangle is small is.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:05:45.840 --> 00:05:49.440
<v Speaker 0>True, every small triangle is red.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:05:49.440 --> 00:05:52.330
<v Speaker 0>On the other hand, It's false.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:05:53.200 --> 00:05:54.940
<v Speaker 0>Okay, that was quite easy, wasn't it?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:05:56.320 --> 00:05:58.450
<v Speaker 0>Um, we'll leave those for the moment.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:05:58.750 --> 00:06:02.200
<v Speaker 0>What did you do when I asked you these two

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:02.200 --> 00:06:03.100
<v Speaker 0>questions?

NOTE CONF {"raw":[100]}

00:06:03.130 --> 00:06:05.650
<v Speaker 0>How did you go about determining whether they were true

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:05.650 --> 00:06:06.550
<v Speaker 0>or false?

NOTE CONF {"raw":[100,100]}

00:06:08.590 --> 00:06:10.990
<v Speaker 0>Um, somebody said observation.

NOTE CONF {"raw":[100,100,100,100]}

00:06:11.590 --> 00:06:12.910
<v Speaker 0>A bit more detail.

NOTE CONF {"raw":[100,100,100,100]}

00:06:12.940 --> 00:06:13.300
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:06:15.310 --> 00:06:19.090
<v Speaker 0>So they're searching for something that contradicts them.

NOTE CONF {"raw":[57,36,100,100,100,100,100,100]}

00:06:19.090 --> 00:06:23.080
<v Speaker 0>So looking for a counterexample we say in mathematics, for

NOTE CONF {"raw":[100,100,100,100,99,100,100,100,100,100]}

00:06:23.080 --> 00:06:26.260
<v Speaker 0>example, in this one every small triangle is red.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,98]}

00:06:26.560 --> 00:06:29.410
<v Speaker 0>You see a small triangle here that is green.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:06:29.410 --> 00:06:31.120
<v Speaker 0>And that's enough to tell you for that.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:06:32.560 --> 00:06:34.030
<v Speaker 0>Every red triangle is small.

NOTE CONF {"raw":[100,100,100,100,100]}

00:06:34.060 --> 00:06:37.540
<v Speaker 0>How did you convince yourself that that was true?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:06:38.530 --> 00:06:41.140
<v Speaker 0>Again, you maybe looked for a red triangle that was

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:41.140 --> 00:06:45.190
<v Speaker 0>not small, or maybe you just stared at it and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:45.190 --> 00:06:46.450
<v Speaker 0>said, yes, that's right.

NOTE CONF {"raw":[100,100,100,100]}

00:06:48.130 --> 00:06:51.430
<v Speaker 0>Um, one of the interesting things about human reasoning is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:51.430 --> 00:06:56.320
<v Speaker 0>that we have a fast, intuitive, and imprecise way of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:56.320 --> 00:06:58.360
<v Speaker 0>reasoning about small things.

NOTE CONF {"raw":[100,100,100,100]}

00:06:58.660 --> 00:07:02.050
<v Speaker 0>So this universe is maybe a little bit too big

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:02.050 --> 00:07:05.560
<v Speaker 0>for that to come into play, but for things up

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:05.560 --> 00:07:08.200
<v Speaker 0>to around five or so, maybe a bit bigger, depending

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:08.200 --> 00:07:12.220
<v Speaker 0>on who you are, we look at something and decide

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:12.220 --> 00:07:14.770
<v Speaker 0>immediately whether things are true or not.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:07:15.820 --> 00:07:19.900
<v Speaker 0>Whereas if I gave you 20 objects, then you would

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:20.590 --> 00:07:24.370
<v Speaker 0>have to probably count them and make notes.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:07:24.520 --> 00:07:26.980
<v Speaker 0>If I gave you 200 objects, you would.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:07:26.980 --> 00:07:27.700
<v Speaker 0>Or do you do?

NOTE CONF {"raw":[100,100,100,100]}

00:07:27.700 --> 00:07:30.220
<v Speaker 0>If I gave a universe with 200 objects and asked

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:30.220 --> 00:07:31.690
<v Speaker 0>you to check one of these things?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:07:33.250 --> 00:07:34.180
<v Speaker 0>Write a program.

NOTE CONF {"raw":[97,100,99]}

00:07:34.180 --> 00:07:34.720
<v Speaker 0>Yes.

NOTE CONF {"raw":[99]}

00:07:35.170 --> 00:07:37.030
<v Speaker 0>The best for correct computer science.

NOTE CONF {"raw":[90,100,100,100,100,100]}

00:07:37.030 --> 00:07:40.990
<v Speaker 0>Answer to almost all questions, but not all questions.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:07:40.990 --> 00:07:43.420
<v Speaker 0>Because sometimes it takes longer to write the program than

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:43.420 --> 00:07:44.500
<v Speaker 0>to do it yourself.

NOTE CONF {"raw":[100,100,100,100]}

00:07:46.420 --> 00:07:48.920
<v Speaker 0>So what we're going to do now is think a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:48.920 --> 00:07:51.410
<v Speaker 0>bit about trying to formalise.

NOTE CONF {"raw":[100,100,100,100,97]}

00:07:52.550 --> 00:07:54.080
<v Speaker 0>We'll make it a little bit more precise.

NOTE CONF {"raw":[46,100,69,100,100,100,100,100]}

00:07:54.080 --> 00:07:58.250
<v Speaker 0>The thought process we went through in order to determine

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:58.250 --> 00:08:00.860
<v Speaker 0>whether these statements were true or false.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:08:03.860 --> 00:08:08.690
<v Speaker 0>But first, let me talk about these statements and why

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:08.690 --> 00:08:10.910
<v Speaker 0>I've chosen these particular statements.

NOTE CONF {"raw":[100,100,100,100,100]}

00:08:12.020 --> 00:08:14.390
<v Speaker 0>So if you look at the format there, you see

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:14.600 --> 00:08:16.370
<v Speaker 0>they all have this form.

NOTE CONF {"raw":[100,100,100,100,100]}

00:08:16.370 --> 00:08:20.090
<v Speaker 0>They start with what in linguistics we call a quanta

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,88]}

00:08:20.090 --> 00:08:25.160
<v Speaker 0>or maths we call a quantifier every some or no.

NOTE CONF {"raw":[100,100,100,100,100,100,100,75,100,100]}

00:08:25.670 --> 00:08:28.940
<v Speaker 0>And then there's a noun or noun phrase rather red

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:28.940 --> 00:08:32.210
<v Speaker 0>triangle, small triangle, red thing.

NOTE CONF {"raw":[100,100,100,100,100]}

00:08:32.870 --> 00:08:37.669
<v Speaker 0>Then there's a verb is which in many languages would

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:37.669 --> 00:08:38.659
<v Speaker 0>be unnecessary.

NOTE CONF {"raw":[100,100]}

00:08:39.770 --> 00:08:41.060
<v Speaker 0>There might be a negation.

NOTE CONF {"raw":[100,100,100,100,100]}

00:08:41.060 --> 00:08:43.190
<v Speaker 0>I don't have an example there, but there could be

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:43.190 --> 00:08:43.820
<v Speaker 0>a knot.

NOTE CONF {"raw":[100,52]}

00:08:43.820 --> 00:08:47.640
<v Speaker 0>And then there's an adjective, a predicate, as we called

NOTE CONF {"raw":[100,100,100,100,100,95,100,100,100,100]}

00:08:47.640 --> 00:08:48.900
<v Speaker 0>it last time.

NOTE CONF {"raw":[100,100,100]}

00:08:50.460 --> 00:08:54.300
<v Speaker 0>So statements that have this form every.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:08:54.300 --> 00:08:58.440
<v Speaker 0>Some know A is or is not B are what

NOTE CONF {"raw":[97,95,100,100,100,100,100,65,85,100]}

00:08:58.440 --> 00:09:00.780
<v Speaker 0>we're going to call categorical propositions.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:09:00.780 --> 00:09:02.220
<v Speaker 0>So this is a definition.

NOTE CONF {"raw":[100,100,100,100,100]}

00:09:03.990 --> 00:09:08.250
<v Speaker 0>It's the modern term for a Greek phrase which I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:08.250 --> 00:09:14.370
<v Speaker 0>forget introduced by Aristotle 2300 and something odd years ago.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:16.140 --> 00:09:18.780
<v Speaker 0>And this is the kind of statement that we're going

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:18.780 --> 00:09:19.980
<v Speaker 0>to be working with.

NOTE CONF {"raw":[100,100,100,100]}

00:09:21.090 --> 00:09:22.260
<v Speaker 0>Is it a simple.

NOTE CONF {"raw":[100,100,100,100]}

00:09:22.290 --> 00:09:26.280
<v Speaker 0>Are these things simple propositional statements as we had last

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:26.280 --> 00:09:26.880
<v Speaker 0>time?

NOTE CONF {"raw":[100]}

00:09:29.430 --> 00:09:31.680
<v Speaker 0>Are they what I call simple propositions?

NOTE CONF {"raw":[100,100,100,100,50,100,100]}

00:09:38.010 --> 00:09:40.530
<v Speaker 0>So they're propositions because they're true or false.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:09:40.530 --> 00:09:41.820
<v Speaker 0>But are they simple?

NOTE CONF {"raw":[100,100,100,100]}

00:09:44.730 --> 00:09:47.790
<v Speaker 0>So last time, I defined a simple proposition as being

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:47.790 --> 00:09:51.720
<v Speaker 0>either one of these simple binary propositions that is true

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:51.720 --> 00:09:54.600
<v Speaker 0>or false, or a predicate applied to an object.

NOTE CONF {"raw":[100,100,100,100,100,93,100,100,100]}

00:09:54.780 --> 00:09:59.790
<v Speaker 0>So this thing is green is a simple proposition.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:09:59.820 --> 00:10:02.340
<v Speaker 0>These are not simple because they talk about lots of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:02.340 --> 00:10:02.790
<v Speaker 0>objects.

NOTE CONF {"raw":[100]}

00:10:02.790 --> 00:10:07.260
<v Speaker 0>They say every red triangle is small, or some big

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:07.260 --> 00:10:08.550
<v Speaker 0>triangle is green.

NOTE CONF {"raw":[100,100,100]}

00:10:08.550 --> 00:10:11.340
<v Speaker 0>So they're talking about more than one thing, which makes

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:11.340 --> 00:10:12.570
<v Speaker 0>them not simple.

NOTE CONF {"raw":[100,100,100]}

00:10:14.220 --> 00:10:18.840
<v Speaker 0>Um, these words every some do they remind you of

NOTE CONF {"raw":[70,100,100,100,83,100,100,100,100,100]}

00:10:18.840 --> 00:10:21.450
<v Speaker 0>anything I did right at the end of last lecture?

NOTE CONF {"raw":[100,100,100,61,100,100,100,100,100,100]}

00:10:24.600 --> 00:10:25.230
<v Speaker 0>For all.

NOTE CONF {"raw":[100,100]}

00:10:25.230 --> 00:10:28.290
<v Speaker 0>And there exists so every is English for for all

NOTE CONF {"raw":[100,100,99,100,100,100,100,100,100,100]}

00:10:28.290 --> 00:10:31.260
<v Speaker 0>and some is English for there exists.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:10:32.100 --> 00:10:35.100
<v Speaker 0>So this is looking as if it's one of as

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:35.100 --> 00:10:36.660
<v Speaker 0>if it's first order logic.

NOTE CONF {"raw":[100,100,100,100,100]}

00:10:37.620 --> 00:10:40.740
<v Speaker 0>But it's a very restricted form of first order logic.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:40.740 --> 00:10:42.450
<v Speaker 0>So at the end of last time I put up

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:42.450 --> 00:10:44.050
<v Speaker 0>some horrible long formula.

NOTE CONF {"raw":[100,100,100,100]}

00:10:44.350 --> 00:10:47.920
<v Speaker 0>That was the definition of a function being everywhere continuous.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:48.370 --> 00:10:50.230
<v Speaker 0>And that's the kind of thing we don't want to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:50.230 --> 00:10:51.010
<v Speaker 0>deal with.

NOTE CONF {"raw":[100,100]}

00:10:51.010 --> 00:10:54.280
<v Speaker 0>So we're going to work with a particular simple form

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:54.280 --> 00:10:57.640
<v Speaker 0>of statements that does allow us to use some level

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:57.640 --> 00:11:00.850
<v Speaker 0>of for all in there exists, but only in this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:00.850 --> 00:11:02.500
<v Speaker 0>very restricted way.

NOTE CONF {"raw":[100,100,100]}

00:11:04.240 --> 00:11:06.070
<v Speaker 0>Any questions?

NOTE CONF {"raw":[100,100]}

00:11:10.000 --> 00:11:10.870
<v Speaker 0>Okay.

NOTE CONF {"raw":[99]}

00:11:12.670 --> 00:11:12.910
<v Speaker 0>Um.

NOTE CONF {"raw":[98]}

00:11:15.160 --> 00:11:17.770
<v Speaker 0>So every red triangle is small.

NOTE CONF {"raw":[100,100,56,100,100,100]}

00:11:17.920 --> 00:11:22.270
<v Speaker 0>Let me give you what I claim is a formalisation

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:22.270 --> 00:11:23.290
<v Speaker 0>of the process.

NOTE CONF {"raw":[100,100,100]}

00:11:23.410 --> 00:11:26.200
<v Speaker 0>You might have gone through in order to check that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:27.610 --> 00:11:30.250
<v Speaker 0>you might have looked for red things, and you might

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:30.250 --> 00:11:34.330
<v Speaker 0>have looked for triangular things, and you might have looked

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:34.630 --> 00:11:38.410
<v Speaker 0>for things that are in both regions that are red

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:38.410 --> 00:11:39.640
<v Speaker 0>and triangular.

NOTE CONF {"raw":[100,100]}

00:11:40.660 --> 00:11:44.360
<v Speaker 0>And you might have observed that there is nothing in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:44.360 --> 00:11:48.560
<v Speaker 0>this tiny region here, which is the area of red

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:48.590 --> 00:11:52.190
<v Speaker 0>triangular things that are not small because they're outside the

NOTE CONF {"raw":[100,100,100,100,100,100,100,76,100,100]}

00:11:52.190 --> 00:11:54.530
<v Speaker 0>small thing, small area.

NOTE CONF {"raw":[100,100,100,100]}

00:11:55.850 --> 00:11:59.330
<v Speaker 0>You probably didn't do anything as conscious as that, but

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:59.330 --> 00:12:01.100
<v Speaker 0>if you had to write a program to do it,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:01.100 --> 00:12:02.930
<v Speaker 0>that's the kind of thing you would be doing.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:12:05.390 --> 00:12:06.650
<v Speaker 0>Some plausible.

NOTE CONF {"raw":[100,100]}

00:12:09.950 --> 00:12:11.330
<v Speaker 0>So some people are nodding.

NOTE CONF {"raw":[100,100,100,100,100]}

00:12:11.360 --> 00:12:13.010
<v Speaker 0>You're very welcome to say no.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:12:13.010 --> 00:12:14.150
<v Speaker 0>It's completely implausible.

NOTE CONF {"raw":[100,100,100]}

00:12:14.150 --> 00:12:15.530
<v Speaker 0>I didn't do anything of the sort.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:12:15.530 --> 00:12:16.910
<v Speaker 0>Anybody want to say that?

NOTE CONF {"raw":[100,96,100,100,100]}

00:12:20.030 --> 00:12:20.480
<v Speaker 0>No.

NOTE CONF {"raw":[100]}

00:12:22.640 --> 00:12:23.360
<v Speaker 0>I don't think I did.

NOTE CONF {"raw":[100,100,100,100,100]}

00:12:23.360 --> 00:12:25.970
<v Speaker 0>I just looked at it because I drew this diagram.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:25.970 --> 00:12:27.560
<v Speaker 0>So I know it took me a lot of conscious

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:27.560 --> 00:12:28.520
<v Speaker 0>effort to do this.

NOTE CONF {"raw":[100,100,100,100]}

00:12:30.710 --> 00:12:33.230
<v Speaker 0>Um, every small triangle is red.

NOTE CONF {"raw":[90,100,100,100,100,100]}

00:12:33.410 --> 00:12:35.210
<v Speaker 0>Well, that was the one where we could look for

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:35.210 --> 00:12:36.470
<v Speaker 0>a counterexample.

NOTE CONF {"raw":[100,100]}

00:12:36.590 --> 00:12:40.010
<v Speaker 0>So again, we look at small things which I've circled

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:40.010 --> 00:12:40.910
<v Speaker 0>in grey.

NOTE CONF {"raw":[100,60]}

00:12:41.390 --> 00:12:43.940
<v Speaker 0>We look at triangles, which I've circled in blue.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:12:43.940 --> 00:12:45.680
<v Speaker 0>So that gives us these things.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:12:46.190 --> 00:12:50.300
<v Speaker 0>And we look for something that is outside the red

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:50.300 --> 00:12:50.840
<v Speaker 0>region.

NOTE CONF {"raw":[100]}

00:12:50.840 --> 00:12:53.000
<v Speaker 0>And we find one could be that one, or it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:53.000 --> 00:12:54.080
<v Speaker 0>could have been that one.

NOTE CONF {"raw":[100,100,100,100,100]}

00:12:54.110 --> 00:12:59.210
<v Speaker 0>One counterexample is enough to disprove a universal statement.

NOTE CONF {"raw":[100,92,100,100,100,100,100,100,100]}

00:13:01.310 --> 00:13:02.810
<v Speaker 0>We can keep doing this.

NOTE CONF {"raw":[100,100,100,100,100]}

00:13:03.170 --> 00:13:05.330
<v Speaker 0>Some big triangle is green.

NOTE CONF {"raw":[100,100,100,100,100]}

00:13:06.320 --> 00:13:08.600
<v Speaker 0>Um, well, what am I going to do?

NOTE CONF {"raw":[92,100,100,100,100,100,100,100]}

00:13:09.500 --> 00:13:11.030
<v Speaker 0>What am I looking for here?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:13:18.590 --> 00:13:20.930
<v Speaker 0>So I'm looking for a big triangle that is green.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:20.930 --> 00:13:24.170
<v Speaker 0>But how do I program my search strategy?

NOTE CONF {"raw":[100,100,100,100,72,100,100,100]}

00:13:27.770 --> 00:13:28.910
<v Speaker 0>For a small region.

NOTE CONF {"raw":[54,92,98,100]}

00:13:29.420 --> 00:13:31.400
<v Speaker 0>So I'm looking for big triangles.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:13:31.400 --> 00:13:33.440
<v Speaker 0>So that's outside of small.

NOTE CONF {"raw":[100,100,100,100,100]}

00:13:34.010 --> 00:13:37.880
<v Speaker 0>And I'm looking for things that are in the triangle

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:37.890 --> 00:13:38.580
<v Speaker 0>region.

NOTE CONF {"raw":[100]}

00:13:38.760 --> 00:13:41.190
<v Speaker 0>And then I'm looking for something that is green.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:13:41.190 --> 00:13:42.660
<v Speaker 0>So in the green region.

NOTE CONF {"raw":[100,100,100,100,100]}

00:13:43.860 --> 00:13:45.420
<v Speaker 0>And I find an example.

NOTE CONF {"raw":[100,100,100,100,100]}

00:13:45.420 --> 00:13:48.060
<v Speaker 0>So this is a this is an example not a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,83]}

00:13:48.060 --> 00:13:49.590
<v Speaker 0>not a counterexample.

NOTE CONF {"raw":[100,100,100]}

00:13:49.590 --> 00:13:50.640
<v Speaker 0>This is a statement.

NOTE CONF {"raw":[100,100,100,100]}

00:13:50.640 --> 00:13:51.690
<v Speaker 0>Something exists.

NOTE CONF {"raw":[100,100]}

00:13:51.690 --> 00:13:54.180
<v Speaker 0>There is some big triangle that is green.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:13:54.180 --> 00:13:57.030
<v Speaker 0>And so I'm trying to exhibit one.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:13:59.040 --> 00:14:02.670
<v Speaker 0>Um we would do the same with some small disc

NOTE CONF {"raw":[100,78,90,100,100,100,100,100,100,54]}

00:14:02.670 --> 00:14:03.300
<v Speaker 0>is red.

NOTE CONF {"raw":[95,86]}

00:14:04.020 --> 00:14:07.050
<v Speaker 0>This was getting a bit fiddly to draw, but I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:07.050 --> 00:14:07.800
<v Speaker 0>managed it.

NOTE CONF {"raw":[100,100]}

00:14:08.430 --> 00:14:11.820
<v Speaker 0>Um, some small disc is red again.

NOTE CONF {"raw":[100,100,100,92,100,98,100]}

00:14:11.820 --> 00:14:13.590
<v Speaker 0>Small disc.

NOTE CONF {"raw":[100,93]}

00:14:14.820 --> 00:14:17.130
<v Speaker 0>Um, I have a small discs.

NOTE CONF {"raw":[100,58,100,100,100,98]}

00:14:17.370 --> 00:14:18.750
<v Speaker 0>Small things are here.

NOTE CONF {"raw":[100,100,100,100]}

00:14:18.750 --> 00:14:19.590
<v Speaker 0>Discs are here.

NOTE CONF {"raw":[95,100,100]}

00:14:19.590 --> 00:14:22.860
<v Speaker 0>These are the only small discs, and I'm looking for

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:22.860 --> 00:14:25.500
<v Speaker 0>an example of one that is inside the red region.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:25.710 --> 00:14:27.870
<v Speaker 0>And I don't find it because it would have to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:27.870 --> 00:14:29.340
<v Speaker 0>be in there and there isn't one.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:14:30.480 --> 00:14:36.780
<v Speaker 0>So there I'm disproving a statement that something exists by

NOTE CONF {"raw":[100,92,97,100,100,100,100,100,100,100]}

00:14:36.780 --> 00:14:39.690
<v Speaker 0>looking at the region that has to contain it and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:39.690 --> 00:14:41.550
<v Speaker 0>saying there's nothing in it.

NOTE CONF {"raw":[100,100,100,100,100]}

00:14:42.990 --> 00:14:45.690
<v Speaker 0>Um, no red thing is blue.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:14:45.690 --> 00:14:47.520
<v Speaker 0>So this is a negative statement.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:14:49.440 --> 00:14:53.100
<v Speaker 0>If I look at red things and I look at

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:53.100 --> 00:14:55.380
<v Speaker 0>blue things, there's nothing in between.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:14:57.390 --> 00:14:58.950
<v Speaker 0>And that's what we expect.

NOTE CONF {"raw":[100,100,100,100,100]}

00:15:01.020 --> 00:15:03.000
<v Speaker 0>So no red thing is blue.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:15:03.030 --> 00:15:06.000
<v Speaker 0>Seems a bit on the obvious side, right?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:15:09.480 --> 00:15:11.550
<v Speaker 0>Um, can you think of a situation in which it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:11.550 --> 00:15:14.670
<v Speaker 0>might not be obvious?

NOTE CONF {"raw":[100,100,100,100]}

00:15:16.470 --> 00:15:16.860
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:15:17.820 --> 00:15:20.820
<v Speaker 1>But why are we using things that there's this thing

NOTE CONF {"raw":[50,100,100,98,100,100,88,99,97,97]}

00:15:20.820 --> 00:15:23.880
<v Speaker 1>that that does anything.

NOTE CONF {"raw":[98,52,100,86]}

00:15:27.390 --> 00:15:30.000
<v Speaker 0>So we're using things in such a way that we

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:30.000 --> 00:15:33.090
<v Speaker 0>have a red thing, and we have another thing that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:33.090 --> 00:15:34.200
<v Speaker 0>is blue.

NOTE CONF {"raw":[100,100]}

00:15:34.200 --> 00:15:35.980
<v Speaker 0>So if we were using thing differently.

NOTE CONF {"raw":[100,100,100,100,100,92,100]}

00:15:35.980 --> 00:15:41.380
<v Speaker 0>I mean, yes, and that's a good point.

NOTE CONF {"raw":[80,100,100,100,100,100,100,94]}

00:15:41.560 --> 00:15:45.250
<v Speaker 0>It's related to the point I'm leading up to.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:15:47.290 --> 00:15:50.140
<v Speaker 0>Does this statement have to be true in all universes?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:50.140 --> 00:15:51.640
<v Speaker 0>No red thing is blue.

NOTE CONF {"raw":[100,100,100,100,100]}

00:15:53.200 --> 00:15:53.650
<v Speaker 0>No.

NOTE CONF {"raw":[100]}

00:15:53.650 --> 00:15:54.430
<v Speaker 0>Why not?

NOTE CONF {"raw":[100,100]}

00:15:56.980 --> 00:16:00.310
<v Speaker 1>Or if they talk about different things.

NOTE CONF {"raw":[50,89,74,100,100,100,100]}

00:16:03.490 --> 00:16:06.100
<v Speaker 0>So it might be possible for something to be red

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:06.100 --> 00:16:07.990
<v Speaker 0>and blue at the same time.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:16:08.800 --> 00:16:14.170
<v Speaker 0>Um, in English that doesn't work, but in English, purple

NOTE CONF {"raw":[100,91,100,100,100,100,100,100,100,100]}

00:16:14.170 --> 00:16:16.090
<v Speaker 0>is what we call a primary colour.

NOTE CONF {"raw":[100,100,100,100,100,100,65]}

00:16:16.630 --> 00:16:20.110
<v Speaker 0>In languages with not many colour terms, the purple thing

NOTE CONF {"raw":[100,100,100,100,100,75,100,82,100,100]}

00:16:20.110 --> 00:16:22.330
<v Speaker 0>is red, reddish blue, red, blue.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:16:22.960 --> 00:16:25.120
<v Speaker 0>So maybe it's red and blue at the same time.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:25.120 --> 00:16:29.110
<v Speaker 0>But more importantly, remember that a universe is an abstract

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:29.110 --> 00:16:29.800
<v Speaker 0>thing.

NOTE CONF {"raw":[100]}

00:16:29.800 --> 00:16:33.440
<v Speaker 0>So just because in this universe, red means red and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:33.440 --> 00:16:34.400
<v Speaker 0>blue means blue.

NOTE CONF {"raw":[100,100,100]}

00:16:34.400 --> 00:16:37.070
<v Speaker 0>And it's a fact about human colour perception that things

NOTE CONF {"raw":[100,85,100,100,100,100,80,100,100,100]}

00:16:37.070 --> 00:16:39.290
<v Speaker 0>are not generally red and blue at the same time.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:40.070 --> 00:16:43.640
<v Speaker 0>We could be in another universe where that's not true.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:43.670 --> 00:16:47.120
<v Speaker 0>Red might not mean red, and blue might not mean

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:47.120 --> 00:16:47.750
<v Speaker 0>blue.

NOTE CONF {"raw":[100]}

00:16:47.990 --> 00:16:51.050
<v Speaker 0>So in this particular universe, the words mean what we

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:51.050 --> 00:16:52.040
<v Speaker 0>think they mean.

NOTE CONF {"raw":[100,100,100]}

00:16:52.040 --> 00:16:55.250
<v Speaker 0>But universes are entirely abstract things.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:16:55.250 --> 00:17:00.200
<v Speaker 0>There's no meaning assigned in advance to English words.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:17:00.920 --> 00:17:02.990
<v Speaker 0>We have to state what they mean as part of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:02.990 --> 00:17:03.860
<v Speaker 0>the universe.

NOTE CONF {"raw":[100,100]}

00:17:04.310 --> 00:17:07.069
<v Speaker 0>And in this case, I've defined the universe so that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:07.069 --> 00:17:10.339
<v Speaker 0>these things are blue and I've coloured them to make

NOTE CONF {"raw":[100,100,100,100,100,100,88,100,100,100]}

00:17:10.339 --> 00:17:13.550
<v Speaker 0>them look like they are indeed blue.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:17:17.810 --> 00:17:18.740
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:17:19.610 --> 00:17:22.160
<v Speaker 0>Um, because I've lost one of my display connectors, I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:22.160 --> 00:17:24.230
<v Speaker 0>don't have my normal laptop and set up, so I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:24.230 --> 00:17:25.730
<v Speaker 0>can't remember what the next slide is.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:17:25.730 --> 00:17:26.180
<v Speaker 0>Okay.

NOTE CONF {"raw":[78]}

00:17:26.780 --> 00:17:33.260
<v Speaker 0>Um, any questions about this Semi-Formal way of searching for

NOTE CONF {"raw":[100,100,100,100,100,55,100,100,100,100]}

00:17:33.260 --> 00:17:35.330
<v Speaker 0>proofs or counterexamples.

NOTE CONF {"raw":[100,100,100]}

00:17:42.770 --> 00:17:45.470
<v Speaker 0>Okay, so what we're going to be leading up to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:45.470 --> 00:17:48.710
<v Speaker 0>probably not today, but maybe today, depending on how things

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:48.710 --> 00:17:52.760
<v Speaker 0>go, is formalising this a little bit more so that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:52.760 --> 00:17:56.690
<v Speaker 0>it works with abstract objects instead of specific universes?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:17:58.400 --> 00:18:01.880
<v Speaker 0>So a few minutes ago, I said that these categorical

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:01.880 --> 00:18:09.440
<v Speaker 0>propositions are in some sense predicate logic, and they are

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:09.440 --> 00:18:11.870
<v Speaker 0>a very restricted form of predicate logic.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:18:11.870 --> 00:18:16.370
<v Speaker 0>So using standard predicate logic notation, this is what the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:16.370 --> 00:18:18.350
<v Speaker 0>categorical statements look like.

NOTE CONF {"raw":[100,100,100,100]}

00:18:19.160 --> 00:18:23.540
<v Speaker 0>So every red thing is small in traditional modern logical

NOTE CONF {"raw":[100,100,84,100,100,100,100,100,100,100]}

00:18:23.540 --> 00:18:28.280
<v Speaker 0>notation we would write that as for all x where

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,52]}

00:18:28.280 --> 00:18:28.970
<v Speaker 0>is x.

NOTE CONF {"raw":[100,100]}

00:18:29.150 --> 00:18:33.030
<v Speaker 0>Sorry x is red implies x is small.

NOTE CONF {"raw":[50,100,100,76,100,100,100,100]}

00:18:35.160 --> 00:18:37.830
<v Speaker 0>We're going to be working with this kind of notation.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:39.060 --> 00:18:43.710
<v Speaker 0>In the programming we do so it's necessary to understand

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:43.710 --> 00:18:43.860
<v Speaker 0>it.

NOTE CONF {"raw":[100]}

00:18:43.860 --> 00:18:45.870
<v Speaker 0>So this is the point where we can start talking

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:45.870 --> 00:18:50.610
<v Speaker 0>about what these symbols for all and there exists mean.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,98]}

00:18:52.980 --> 00:18:59.610
<v Speaker 0>So given that for all means for all, every every

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:59.610 --> 00:19:03.630
<v Speaker 0>x, if I look at every any x then if

NOTE CONF {"raw":[100,100,100,100,100,97,94,100,100,100]}

00:19:03.630 --> 00:19:05.760
<v Speaker 0>it's red it is small.

NOTE CONF {"raw":[100,100,100,100,100]}

00:19:07.500 --> 00:19:12.690
<v Speaker 0>Is that consistent and happy with what we've done so

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:12.690 --> 00:19:13.470
<v Speaker 0>far?

NOTE CONF {"raw":[100]}

00:19:15.090 --> 00:19:18.360
<v Speaker 0>Anybody have any worries about what that notation is meaning?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:19.050 --> 00:19:19.590
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:19:22.350 --> 00:19:25.200
<v Speaker 0>Why is there a dot simply to separate the x

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:25.200 --> 00:19:26.010
<v Speaker 0>from the ears?

NOTE CONF {"raw":[100,100,58]}

00:19:27.750 --> 00:19:27.990
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:19:28.180 --> 00:19:31.690
<v Speaker 0>there are a bazillion different notations for this.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:19:32.440 --> 00:19:35.710
<v Speaker 0>I am extremely lazy, so I always choose the notation

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:35.710 --> 00:19:37.540
<v Speaker 0>which has the fewest symbols in it.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:19:37.750 --> 00:19:39.550
<v Speaker 0>Some people will write.

NOTE CONF {"raw":[100,100,100,100]}

00:19:46.510 --> 00:19:47.710
<v Speaker 0>With square brackets.

NOTE CONF {"raw":[100,100,100]}

00:19:48.670 --> 00:19:50.950
<v Speaker 0>I like dots because I can read the dot as

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,98,100]}

00:19:50.950 --> 00:19:56.260
<v Speaker 0>such that particularly in the existential case, there exists an

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:56.260 --> 00:19:57.670
<v Speaker 0>x such that.

NOTE CONF {"raw":[100,100,100]}

00:19:58.150 --> 00:19:59.440
<v Speaker 0>But it's just notation.

NOTE CONF {"raw":[100,100,100,100]}

00:20:00.700 --> 00:20:01.840
<v Speaker 0>Punctuation, really.

NOTE CONF {"raw":[100,100]}

00:20:07.600 --> 00:20:08.650
<v Speaker 0>Anything else?

NOTE CONF {"raw":[100,100]}

00:20:10.120 --> 00:20:12.970
<v Speaker 0>Okay, so here's a slightly more complex example.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:20:13.420 --> 00:20:15.820
<v Speaker 0>Every small triangle is red.

NOTE CONF {"raw":[100,100,100,100,81]}

00:20:17.380 --> 00:20:20.440
<v Speaker 0>How do we talk about something being.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:20:23.530 --> 00:20:25.180
<v Speaker 0>A small triangle.

NOTE CONF {"raw":[100,100,100]}

00:20:25.360 --> 00:20:28.630
<v Speaker 0>Well, if it's a small triangle in English, that means

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:28.630 --> 00:20:32.680
<v Speaker 0>that in logic it's small and it's a triangle.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:20:35.740 --> 00:20:40.630
<v Speaker 0>So the logical formula that we would write here is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:40.960 --> 00:20:46.420
<v Speaker 0>for every x, if x is small and x is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:46.420 --> 00:20:50.530
<v Speaker 0>a triangle, then x is red.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:20:55.180 --> 00:20:56.380
<v Speaker 0>Does that make sense?

NOTE CONF {"raw":[100,100,96,100]}

00:20:57.460 --> 00:21:01.180
<v Speaker 0>Using the boolean combinations that we talked about last time,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:02.080 --> 00:21:05.440
<v Speaker 0>something a little curious, we seem to have privileged the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,99,100]}

00:21:05.440 --> 00:21:09.160
<v Speaker 0>word triangle here, because triangle is a noun and small

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:09.160 --> 00:21:10.330
<v Speaker 0>is an adjective.

NOTE CONF {"raw":[100,100,100]}

00:21:11.470 --> 00:21:14.800
<v Speaker 0>But in our universe there is no hierarchy.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:21:15.040 --> 00:21:18.280
<v Speaker 0>It's not the case that shape is more important than

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:18.280 --> 00:21:19.480
<v Speaker 0>size or colour.

NOTE CONF {"raw":[100,100,95]}

00:21:20.290 --> 00:21:23.380
<v Speaker 0>How might we rephrase this to make it match the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:23.380 --> 00:21:26.480
<v Speaker 0>logic a little more accurately but keep it in English.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:31.640 --> 00:21:33.770
<v Speaker 0>Every small triangular shape or thing.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:21:33.770 --> 00:21:36.350
<v Speaker 0>So thing is the word I'm using in in this

NOTE CONF {"raw":[100,100,100,100,100,100,100,99,100,100]}

00:21:36.350 --> 00:21:36.890
<v Speaker 0>universe.

NOTE CONF {"raw":[100]}

00:21:36.920 --> 00:21:37.250
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:21:38.510 --> 00:21:40.760
<v Speaker 0>So this is just one of those small little quirks

NOTE CONF {"raw":[99,98,98,100,100,100,100,100,100,100]}

00:21:40.760 --> 00:21:42.620
<v Speaker 0>that you always, you have to think about when you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:42.620 --> 00:21:46.280
<v Speaker 0>turn natural language into formulae, which bits of natural language

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:46.280 --> 00:21:49.160
<v Speaker 0>are supposed to be important and which are just because

NOTE CONF {"raw":[100,100,100,100,100,94,100,100,100,100]}

00:21:49.160 --> 00:21:50.480
<v Speaker 0>we're talking in English.

NOTE CONF {"raw":[100,100,100,100]}

00:21:52.040 --> 00:21:56.090
<v Speaker 0>So similarly here some small disc is read.

NOTE CONF {"raw":[100,100,100,100,100,67,100,81]}

00:21:56.090 --> 00:21:59.720
<v Speaker 0>This is an existential statement where asserting the existence of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:59.720 --> 00:22:00.410
<v Speaker 0>something.

NOTE CONF {"raw":[100]}

00:22:00.860 --> 00:22:06.980
<v Speaker 0>So this says there is some x such that x

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:06.980 --> 00:22:11.870
<v Speaker 0>is small and x is a disc and x is

NOTE CONF {"raw":[100,100,100,100,100,100,84,100,100,100]}

00:22:11.870 --> 00:22:12.440
<v Speaker 0>read.

NOTE CONF {"raw":[50]}

00:22:13.880 --> 00:22:16.850
<v Speaker 0>So the structure here looks rather different.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:22:17.330 --> 00:22:21.080
<v Speaker 0>When we talked about a universal property, the stuff that

NOTE CONF {"raw":[100,98,100,100,100,100,100,100,100,100]}

00:22:21.080 --> 00:22:23.510
<v Speaker 0>came before the ears was on the left side of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:23.510 --> 00:22:26.840
<v Speaker 0>an arrow, and what came after the is was on

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:26.840 --> 00:22:30.740
<v Speaker 0>the right side of an arrow in the existential statement.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:30.740 --> 00:22:32.840
<v Speaker 0>Then we're just using and.

NOTE CONF {"raw":[100,100,100,100,100]}

00:22:35.000 --> 00:22:36.770
<v Speaker 0>If I'm using an.

NOTE CONF {"raw":[100,100,100,100]}

00:22:36.770 --> 00:22:40.910
<v Speaker 0>So I've got small desk and red all joined by

NOTE CONF {"raw":[100,100,100,100,39,100,62,100,100,100]}

00:22:40.910 --> 00:22:43.610
<v Speaker 0>ans but I've got brackets here because that's the way

NOTE CONF {"raw":[64,100,100,100,100,100,100,100,100,100]}

00:22:43.610 --> 00:22:44.750
<v Speaker 0>the sentences do.

NOTE CONF {"raw":[100,94,100]}

00:22:44.750 --> 00:22:45.920
<v Speaker 0>The brackets matter.

NOTE CONF {"raw":[100,100,100]}

00:22:50.660 --> 00:22:55.760
<v Speaker 0>They don't matter for an because and is associative.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:22:55.760 --> 00:22:57.680
<v Speaker 0>You can put the brackets anywhere you want.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:22:57.680 --> 00:23:00.500
<v Speaker 0>What does that tell us about other two statements that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:00.500 --> 00:23:02.090
<v Speaker 0>are basically the same as this.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:23:05.450 --> 00:23:10.070
<v Speaker 0>Is for some small read things are disks some.

NOTE CONF {"raw":[29,39,100,100,54,100,56,54,100]}

00:23:10.070 --> 00:23:10.430
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:23:10.430 --> 00:23:14.000
<v Speaker 0>So any permutation of small disk and read is basically

NOTE CONF {"raw":[100,100,100,100,100,56,100,100,100,100]}

00:23:14.000 --> 00:23:16.340
<v Speaker 0>the same statement in logical form if you take the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:16.340 --> 00:23:17.300
<v Speaker 0>brackets away.

NOTE CONF {"raw":[100,100]}

00:23:19.490 --> 00:23:19.760
<v Speaker 0>Um.

NOTE CONF {"raw":[98]}

00:23:23.640 --> 00:23:27.000
<v Speaker 0>So don't do this now, but think about it later.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:28.170 --> 00:23:32.700
<v Speaker 0>Going back and looking at the definition of a categorical

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,54,100]}

00:23:32.700 --> 00:23:34.920
<v Speaker 0>statement that I had back here.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:23:35.130 --> 00:23:38.220
<v Speaker 0>So this is all the possible categorical statements that we're

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:38.220 --> 00:23:39.360
<v Speaker 0>going to talk about.

NOTE CONF {"raw":[100,100,100,100]}

00:23:43.290 --> 00:23:50.700
<v Speaker 0>Try to write down the general logical forms in this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:51.060 --> 00:23:56.070
<v Speaker 0>predicate logic notation that categorical propositions can take.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:23:57.960 --> 00:24:01.350
<v Speaker 0>Um, you'll find this useful because you're going to be

NOTE CONF {"raw":[50,100,100,100,100,100,100,100,100,100]}

00:24:01.350 --> 00:24:02.820
<v Speaker 0>programming these things.

NOTE CONF {"raw":[100,100,100]}

00:24:03.660 --> 00:24:06.480
<v Speaker 0>Programming stuff is a very good way of making sure

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:06.480 --> 00:24:07.380
<v Speaker 0>that you understand it.

NOTE CONF {"raw":[100,100,100,100]}

00:24:07.380 --> 00:24:08.070
<v Speaker 0>Precisely.

NOTE CONF {"raw":[100]}

00:24:08.070 --> 00:24:08.250
<v Speaker 0>And.

NOTE CONF {"raw":[70]}

00:24:11.070 --> 00:24:15.660
<v Speaker 0>Okay, so before I talk about programming, any final questions

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:15.660 --> 00:24:20.170
<v Speaker 0>about these definitions and notions that we've just introduced.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:24:24.820 --> 00:24:29.350
<v Speaker 0>Okay, so I'm supposed to be teaching you computation and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:29.350 --> 00:24:29.710
<v Speaker 0>logic.

NOTE CONF {"raw":[100]}

00:24:29.710 --> 00:24:31.690
<v Speaker 0>I'm not supposed to be teaching you Haskell.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:24:31.690 --> 00:24:34.000
<v Speaker 0>And since I'm no expert in Haskell, it's a good

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:34.000 --> 00:24:37.120
<v Speaker 0>thing that I'm not supposed to be teaching you Haskell.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:37.300 --> 00:24:41.290
<v Speaker 0>But nonetheless, we're going to keep these two threads of

NOTE CONF {"raw":[100,100,97,100,100,100,100,100,100,100]}

00:24:41.290 --> 00:24:43.210
<v Speaker 0>the course woven together.

NOTE CONF {"raw":[100,100,100,100]}

00:24:43.390 --> 00:24:46.750
<v Speaker 0>And one of the things we're going to do is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:46.750 --> 00:24:50.410
<v Speaker 0>use Haskell to implement logic.

NOTE CONF {"raw":[100,100,100,100,100]}

00:24:51.310 --> 00:24:54.370
<v Speaker 0>After all, a programming language isn't just a useless thing

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:54.370 --> 00:24:55.150
<v Speaker 0>you have to learn.

NOTE CONF {"raw":[100,100,100,100]}

00:24:55.150 --> 00:24:57.280
<v Speaker 0>It's supposed to be useful for something.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:24:57.580 --> 00:25:00.550
<v Speaker 0>And Haskell is a language that is very well designed

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:00.550 --> 00:25:04.150
<v Speaker 0>for implementing things about logic.

NOTE CONF {"raw":[100,100,100,100,100]}

00:25:04.600 --> 00:25:07.780
<v Speaker 0>Um, in Don's first real lecture, did he give you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:07.780 --> 00:25:10.120
<v Speaker 0>any pep talks about all the wonderful things you can

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:10.120 --> 00:25:10.990
<v Speaker 0>do with Haskell?

NOTE CONF {"raw":[100,100,100]}

00:25:14.500 --> 00:25:15.010
<v Speaker 0>Kind of.

NOTE CONF {"raw":[100,100]}

00:25:15.010 --> 00:25:17.170
<v Speaker 0>Did he tell you that Facebook uses Haskell?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:25:18.010 --> 00:25:19.960
<v Speaker 0>Yeah, of course he would.

NOTE CONF {"raw":[100,100,100,100,100]}

00:25:21.070 --> 00:25:24.760
<v Speaker 0>Um, I have no idea why Facebook uses Haskell.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:25:25.120 --> 00:25:25.330
<v Speaker 0>Um.

NOTE CONF {"raw":[94]}

00:25:25.330 --> 00:25:28.570
<v Speaker 0>It's remarkable things you would never expect to be well

NOTE CONF {"raw":[95,100,100,100,100,100,100,100,100,87]}

00:25:28.570 --> 00:25:31.510
<v Speaker 0>suited to a language like Haskell turn out to be.

NOTE CONF {"raw":[87,100,100,100,100,100,98,100,100,100]}

00:25:31.900 --> 00:25:34.660
<v Speaker 0>But Haskell is really, really good at doing the kind

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:34.660 --> 00:25:41.890
<v Speaker 0>of logical and mathematical manipulation that we want for things

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:41.890 --> 00:25:45.490
<v Speaker 0>like proving that programs do what they're supposed to do.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:46.360 --> 00:25:51.610
<v Speaker 0>So there's a whole enormous industry of verification, software verification,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:52.060 --> 00:25:57.580
<v Speaker 0>which is essentially about making sure that when your plane

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:57.580 --> 00:26:00.490
<v Speaker 0>is being flown by the autopilot, it does what it's

NOTE CONF {"raw":[100,100,100,100,100,96,100,100,100,100]}

00:26:00.490 --> 00:26:01.450
<v Speaker 0>supposed to do.

NOTE CONF {"raw":[100,100,100]}

00:26:01.660 --> 00:26:04.720
<v Speaker 0>And if you follow the news during your lifetime, as

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,52,52]}

00:26:04.720 --> 00:26:07.540
<v Speaker 0>you've seen a number of instances where that has failed.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:08.140 --> 00:26:11.230
<v Speaker 0>Um, what we would like to do is ensure that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:11.230 --> 00:26:15.490
<v Speaker 0>there are no failures, because every control system that might

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:15.490 --> 00:26:19.700
<v Speaker 0>kill people if it goes wrong, is proved to work.

NOTE CONF {"raw":[100,100,100,100,100,100,100,98,100,100]}

00:26:20.450 --> 00:26:22.010
<v Speaker 0>Haskell is one of the languages.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:26:22.010 --> 00:26:25.040
<v Speaker 0>Not that people do this directly in Haskell, but Haskell

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:25.040 --> 00:26:27.920
<v Speaker 0>is used to write tools in which people do more

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:27.920 --> 00:26:29.810
<v Speaker 0>complex verification things.

NOTE CONF {"raw":[100,100,100]}

00:26:31.400 --> 00:26:34.010
<v Speaker 0>But you're not going to meet that until fourth year.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:34.010 --> 00:26:38.000
<v Speaker 0>So here we're just going to do relatively simple computations

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:38.000 --> 00:26:38.720
<v Speaker 0>with logic.

NOTE CONF {"raw":[100,100]}

00:26:38.960 --> 00:26:43.010
<v Speaker 0>But they will show you that Haskell can be useful

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:43.010 --> 00:26:44.600
<v Speaker 0>for logical computations.

NOTE CONF {"raw":[100,100,100]}

00:26:44.720 --> 00:26:47.660
<v Speaker 0>It was even useful for me because later on in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:47.660 --> 00:26:50.570
<v Speaker 0>the course, there are lots of slides that were that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:50.570 --> 00:26:54.380
<v Speaker 0>were very time consuming to produce by hand.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:26:54.380 --> 00:26:56.180
<v Speaker 0>And eventually I got fed up and I wrote the

NOTE CONF {"raw":[100,100,100,100,100,100,93,100,100,100]}

00:26:56.180 --> 00:27:00.260
<v Speaker 0>Haskell program to write the slides for me, which saved

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:00.260 --> 00:27:02.210
<v Speaker 0>me a lot of time and also ensured that they

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:02.210 --> 00:27:05.030
<v Speaker 0>were correct, which hadn't been the case before.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:27:05.060 --> 00:27:06.770
<v Speaker 0>I'll mention that when we get to that bit of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:06.770 --> 00:27:07.430
<v Speaker 0>the course.

NOTE CONF {"raw":[100,100]}

00:27:08.960 --> 00:27:09.980
<v Speaker 0>So.

NOTE CONF {"raw":[100]}

00:27:12.530 --> 00:27:14.930
<v Speaker 0>Here's let me just go back there.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:27:15.210 --> 00:27:18.960
<v Speaker 0>Here is some Haskell speak, which I believe you should

NOTE CONF {"raw":[100,100,100,93,100,100,100,100,100,100]}

00:27:18.960 --> 00:27:20.040
<v Speaker 0>now understand.

NOTE CONF {"raw":[100,100]}

00:27:20.040 --> 00:27:20.490
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:27:20.490 --> 00:27:22.680
<v Speaker 0>This is all Haskell notation that you've seen.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:27:25.290 --> 00:27:29.040
<v Speaker 0>You've seen the introduction of a data type called thing,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:29.040 --> 00:27:33.270
<v Speaker 0>which just has things called rest through to Z.

NOTE CONF {"raw":[100,100,100,100,100,61,100,100,65]}

00:27:35.310 --> 00:27:38.310
<v Speaker 0>Um, has this bit of magic been mentioned yet?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:27:41.550 --> 00:27:42.240
<v Speaker 0>No.

NOTE CONF {"raw":[89]}

00:27:42.600 --> 00:27:45.030
<v Speaker 0>Um, for the moment, it's just a piece of magic.

NOTE CONF {"raw":[67,100,100,100,100,100,100,100,100,100]}

00:27:45.030 --> 00:27:47.430
<v Speaker 0>It will be explained to you later.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:27:48.300 --> 00:27:51.750
<v Speaker 0>What it actually does is just tell Haskell that these

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:51.750 --> 00:27:54.090
<v Speaker 0>things are supposed to behave the way you expect, so

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:54.090 --> 00:27:57.300
<v Speaker 0>that Z is equal to Z, and it tells Haskell

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:57.300 --> 00:27:59.340
<v Speaker 0>to do the obvious thing and print them when we

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:59.340 --> 00:28:00.270
<v Speaker 0>want to print them.

NOTE CONF {"raw":[100,100,100,100]}

00:28:01.410 --> 00:28:03.600
<v Speaker 0>But at this stage, it's just magic.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:28:05.550 --> 00:28:10.680
<v Speaker 0>And this is defining a Haskell variable called things, which

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:10.680 --> 00:28:13.800
<v Speaker 0>is a list of all the things in the universe.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:13.800 --> 00:28:15.360
<v Speaker 0>So this is the universe.

NOTE CONF {"raw":[100,100,100,100,100]}

00:28:15.360 --> 00:28:17.280
<v Speaker 0>The things are true to Z.

NOTE CONF {"raw":[100,100,100,73,100,96]}

00:28:19.740 --> 00:28:21.540
<v Speaker 0>Now the question is, how are we going to talk

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:21.540 --> 00:28:23.250
<v Speaker 0>about the different properties of the things?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:28:23.250 --> 00:28:25.560
<v Speaker 0>So the universe is over here for reference on all

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:25.560 --> 00:28:26.400
<v Speaker 0>these slides.

NOTE CONF {"raw":[100,100]}

00:28:27.480 --> 00:28:29.550
<v Speaker 0>How in Haskell am I going to code up the

NOTE CONF {"raw":[100,100,96,100,100,100,100,100,100,100]}

00:28:29.550 --> 00:28:32.790
<v Speaker 0>idea of things being triangular, red or whatever?

NOTE CONF {"raw":[100,100,100,100,100,78,100,100]}

00:28:34.860 --> 00:28:38.550
<v Speaker 0>So if you were to think about this without being

NOTE CONF {"raw":[100,100,100,68,81,100,100,100,100,100]}

00:28:38.550 --> 00:28:41.940
<v Speaker 0>told how to do it, this is maybe one way

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:41.940 --> 00:28:44.010
<v Speaker 0>that you might think about doing it.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:28:44.280 --> 00:28:47.130
<v Speaker 0>You might say, well, clearly we have a property called

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:47.130 --> 00:28:47.760
<v Speaker 0>colour.

NOTE CONF {"raw":[95]}

00:28:48.990 --> 00:28:51.990
<v Speaker 0>So I'm going to define a data type called colour,

NOTE CONF {"raw":[100,100,100,100,100,100,73,73,100,100]}

00:28:51.990 --> 00:28:55.320
<v Speaker 0>which can be the various colours.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:28:55.320 --> 00:28:58.860
<v Speaker 0>We have red blue, green and we have a data

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,90]}

00:28:58.860 --> 00:29:01.710
<v Speaker 0>type called shape which can be disk or triangle and

NOTE CONF {"raw":[90,100,100,100,100,100,61,100,100,100]}

00:29:01.710 --> 00:29:04.470
<v Speaker 0>a data type called size which can be big or

NOTE CONF {"raw":[100,87,87,100,100,100,100,100,100,100]}

00:29:04.470 --> 00:29:05.190
<v Speaker 0>small.

NOTE CONF {"raw":[100]}

00:29:06.990 --> 00:29:09.600
<v Speaker 0>And then you might go off and define a function

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:09.600 --> 00:29:13.360
<v Speaker 0>called colour in lowercase, which takes a thing such as

NOTE CONF {"raw":[100,100,100,84,100,100,100,96,100,100]}

00:29:13.360 --> 00:29:18.880
<v Speaker 0>r, and gives you back a colour such as green.

NOTE CONF {"raw":[100,100,100,100,100,100,78,100,100,100]}

00:29:20.440 --> 00:29:22.300
<v Speaker 0>So these are all declarations.

NOTE CONF {"raw":[100,100,80,100,100]}

00:29:22.300 --> 00:29:25.060
<v Speaker 0>How do you define these functions?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:29:25.060 --> 00:29:26.980
<v Speaker 0>You write them down case by case.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:29:26.980 --> 00:29:30.790
<v Speaker 0>So this is the declaration of the function colour with

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,98]}

00:29:30.790 --> 00:29:31.570
<v Speaker 0>its type.

NOTE CONF {"raw":[97,100]}

00:29:31.660 --> 00:29:33.580
<v Speaker 0>And this is the start of the definition.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:29:33.580 --> 00:29:36.640
<v Speaker 0>The colour of r is green because it is and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:36.640 --> 00:29:39.100
<v Speaker 0>the colour of s is green and the colour of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:39.100 --> 00:29:40.180
<v Speaker 0>t is blue.

NOTE CONF {"raw":[100,100,100]}

00:29:41.020 --> 00:29:45.220
<v Speaker 0>So I believe that you can define functions in Haskell

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:45.220 --> 00:29:45.520
<v Speaker 0>now.

NOTE CONF {"raw":[100]}

00:29:45.520 --> 00:29:47.740
<v Speaker 0>So this is familiar to you right.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:29:49.660 --> 00:29:50.290
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:29:53.170 --> 00:29:56.170
<v Speaker 0>Um you could do it like this.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:29:56.170 --> 00:29:58.360
<v Speaker 0>But if you did it like this, you would soon

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:58.360 --> 00:30:00.490
<v Speaker 0>find yourself in a state of having to do way

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:00.490 --> 00:30:01.300
<v Speaker 0>too much work.

NOTE CONF {"raw":[100,100,100]}

00:30:01.300 --> 00:30:01.840
<v Speaker 0>Any time.

NOTE CONF {"raw":[52,52]}

00:30:01.840 --> 00:30:03.640
<v Speaker 0>We talked about a different universe.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:30:03.970 --> 00:30:08.560
<v Speaker 0>So there's a cleaner way that we can think about

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:08.560 --> 00:30:08.950
<v Speaker 0>it.

NOTE CONF {"raw":[100]}

00:30:09.580 --> 00:30:17.290
<v Speaker 0>And this is an instance of a general principle of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:17.290 --> 00:30:21.400
<v Speaker 0>programming problems solving programming problems.

NOTE CONF {"raw":[100,100,100,100,100]}

00:30:22.600 --> 00:30:26.260
<v Speaker 0>Roughly, you should try to be as general as possible.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:27.040 --> 00:30:29.200
<v Speaker 0>In the first code you write.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:30:29.710 --> 00:30:32.440
<v Speaker 0>Because if you write something very specific and then you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:32.440 --> 00:30:35.080
<v Speaker 0>have to make it more general, that's more work.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:30:35.260 --> 00:30:39.310
<v Speaker 0>So if you want to be as general as possible

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:39.310 --> 00:30:41.680
<v Speaker 0>at the beginning, so that you can apply your code

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:41.680 --> 00:30:44.680
<v Speaker 0>to other circumstances and other situations.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:30:48.340 --> 00:30:51.370
<v Speaker 0>So here's another way of approaching it.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:30:52.810 --> 00:30:55.420
<v Speaker 0>Instead of defining a bunch of types, I'm actually going

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:55.420 --> 00:30:56.620
<v Speaker 0>to take the logic seriously.

NOTE CONF {"raw":[100,100,100,100,100]}

00:30:56.620 --> 00:30:58.960
<v Speaker 0>And the logic we said we have predicates.

NOTE CONF {"raw":[58,100,100,100,100,100,100,100]}

00:30:58.960 --> 00:31:01.030
<v Speaker 0>So is green is a predicate.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:31:01.030 --> 00:31:03.550
<v Speaker 0>It takes a thing and gives you back whether it's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:03.550 --> 00:31:04.540
<v Speaker 0>green or not.

NOTE CONF {"raw":[100,100,100]}

00:31:04.690 --> 00:31:07.240
<v Speaker 0>So we're no longer messing around with colours.

NOTE CONF {"raw":[100,100,100,100,100,100,100,96]}

00:31:07.240 --> 00:31:10.160
<v Speaker 0>We're just dealing with predicates, which is logic, which is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:10.160 --> 00:31:10.640
<v Speaker 0>good.

NOTE CONF {"raw":[100]}

00:31:12.320 --> 00:31:16.730
<v Speaker 0>So we might say I could define a predicate.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:31:16.730 --> 00:31:18.050
<v Speaker 0>What is the type of predicates?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:31:18.050 --> 00:31:20.390
<v Speaker 0>Well, a predicate is a function that takes a thing

NOTE CONF {"raw":[96,100,100,100,100,100,100,100,100,100]}

00:31:20.390 --> 00:31:22.370
<v Speaker 0>and gives you back a true or false.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:31:23.030 --> 00:31:28.490
<v Speaker 0>In Haskell, that means a predicate about things is something

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:28.490 --> 00:31:32.390
<v Speaker 0>that takes a thing, gives you a boolean, so is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:32.390 --> 00:31:36.200
<v Speaker 0>green would have the type of thing predicate predicates about

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:36.200 --> 00:31:36.980
<v Speaker 0>things.

NOTE CONF {"raw":[100]}

00:31:39.260 --> 00:31:40.850
<v Speaker 0>Happy with that so far.

NOTE CONF {"raw":[100,100,100,100,100]}

00:31:43.490 --> 00:31:50.990
<v Speaker 0>Now this is where Haskell becomes excitingly polymorphic and depending

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:50.990 --> 00:31:52.790
<v Speaker 0>on where we are, I'm not sure that might have

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:52.790 --> 00:31:53.810
<v Speaker 0>been in today's lecture.

NOTE CONF {"raw":[100,100,100,100]}

00:31:53.840 --> 00:31:56.420
<v Speaker 0>Has this idea been introduced yet?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:31:58.820 --> 00:31:59.540
<v Speaker 0>Yes.

NOTE CONF {"raw":[100]}

00:31:59.540 --> 00:32:02.690
<v Speaker 0>Okay, so this is a great thing about Haskell.

NOTE CONF {"raw":[100,100,100,100,94,100,100,100,100]}

00:32:02.690 --> 00:32:07.500
<v Speaker 0>You can write functions that are quite general.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:32:07.500 --> 00:32:12.420
<v Speaker 0>So this is a function that called rather sorry.

NOTE CONF {"raw":[100,100,100,100,100,100,100,66,84]}

00:32:12.420 --> 00:32:15.900
<v Speaker 0>It's a data type called predicate with a parameter called

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:15.900 --> 00:32:16.380
<v Speaker 0>u.

NOTE CONF {"raw":[89]}

00:32:16.380 --> 00:32:17.730
<v Speaker 0>So this is a type.

NOTE CONF {"raw":[100,100,100,100,100]}

00:32:18.630 --> 00:32:23.250
<v Speaker 0>This means that we can type declare predicates about things.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:23.250 --> 00:32:27.360
<v Speaker 0>We can declare predicates about numbers or integers or whatever.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:27.600 --> 00:32:31.710
<v Speaker 0>So here we're defining the predicate type constructor as it's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:31.710 --> 00:32:34.890
<v Speaker 0>called, to be a thing that takes some type and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:34.890 --> 00:32:37.650
<v Speaker 0>gives you back the type from think whatever it is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:37.650 --> 00:32:38.670
<v Speaker 0>to boolean.

NOTE CONF {"raw":[100,100]}

00:32:38.670 --> 00:32:42.750
<v Speaker 0>So here green is a predicate on things.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:32:42.750 --> 00:32:44.880
<v Speaker 0>And that's just written like that.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:32:44.880 --> 00:32:48.510
<v Speaker 0>So technically inside Haskell this is a type constructor that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:48.510 --> 00:32:51.570
<v Speaker 0>takes the type of thing and gives you back predicates

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:51.570 --> 00:32:54.240
<v Speaker 0>about things the same as that, in fact.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:32:54.540 --> 00:32:59.550
<v Speaker 0>But it happens to look conveniently like the mathematical English

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:59.550 --> 00:33:01.860
<v Speaker 0>way of saying it's a predicate about things.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:33:03.480 --> 00:33:06.030
<v Speaker 0>And that means that we can now write functions that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:06.030 --> 00:33:09.690
<v Speaker 0>work generally on predicates about any universe, without having to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:09.690 --> 00:33:13.230
<v Speaker 0>worry about what universe we're actually talking about.

NOTE CONF {"raw":[100,100,100,100,87,100,100,100]}

00:33:14.190 --> 00:33:18.300
<v Speaker 0>Whereas if we did this thing, then we would be

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:18.300 --> 00:33:21.510
<v Speaker 0>binding our idea of predicate to the specific universe in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:21.510 --> 00:33:22.230
<v Speaker 0>question.

NOTE CONF {"raw":[100]}

00:33:22.710 --> 00:33:25.080
<v Speaker 0>So this is a case of being general.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:33:25.080 --> 00:33:28.200
<v Speaker 0>Define your notion of predicate to be independent of whatever

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:28.200 --> 00:33:30.180
<v Speaker 0>universe we're currently talking about.

NOTE CONF {"raw":[100,95,100,100,100]}

00:33:32.970 --> 00:33:35.370
<v Speaker 0>Um, so if I do that, how do I write

NOTE CONF {"raw":[60,100,100,100,100,100,100,100,100,100]}

00:33:35.370 --> 00:33:38.640
<v Speaker 0>the definitions for a particular universe?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:33:38.790 --> 00:33:40.860
<v Speaker 0>So this is one way you might do it.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:33:40.890 --> 00:33:46.110
<v Speaker 0>You might write out all the definitions are is green.

NOTE CONF {"raw":[100,100,100,100,100,100,100,82,100,100]}

00:33:46.110 --> 00:33:48.690
<v Speaker 0>So I say is green of R is true, S

NOTE CONF {"raw":[100,100,100,100,100,100,94,100,100,100]}

00:33:48.690 --> 00:33:49.560
<v Speaker 0>is green.

NOTE CONF {"raw":[100,100]}

00:33:49.560 --> 00:33:53.070
<v Speaker 0>So I say is green of S is true, T

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:53.070 --> 00:33:54.060
<v Speaker 0>is not green.

NOTE CONF {"raw":[100,100,100]}

00:33:54.060 --> 00:33:57.480
<v Speaker 0>So I write, is green of t is false, and

NOTE CONF {"raw":[100,100,100,100,100,100,100,99,88,100]}

00:33:57.480 --> 00:33:58.620
<v Speaker 0>so on and so on.

NOTE CONF {"raw":[100,100,100,100,100]}

00:33:59.730 --> 00:34:02.520
<v Speaker 0>This is basically writing out a long table of all

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:02.520 --> 00:34:05.680
<v Speaker 0>the properties of all the things in the universe, which

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:05.680 --> 00:34:07.930
<v Speaker 0>is ultimately what you have to do in general, because

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:07.930 --> 00:34:10.720
<v Speaker 0>a universe is an arbitrary thing, and it just comes

NOTE CONF {"raw":[75,100,100,100,100,100,100,100,100,100]}

00:34:10.720 --> 00:34:12.730
<v Speaker 0>along with its property definitions.

NOTE CONF {"raw":[100,100,100,100,100]}

00:34:14.200 --> 00:34:19.090
<v Speaker 0>Of course, in any particular universe, there might be ways

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:19.090 --> 00:34:21.250
<v Speaker 0>in which we can save a bit of time.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:34:22.750 --> 00:34:28.690
<v Speaker 0>So in this universe, if I make this definition is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:28.690 --> 00:34:30.490
<v Speaker 0>Queen of X is true.

NOTE CONF {"raw":[96,100,100,100,100]}

00:34:30.790 --> 00:34:34.330
<v Speaker 0>If x is an element of the list r s,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,69,99]}

00:34:34.330 --> 00:34:41.169
<v Speaker 0>y is red of x is the same as is

NOTE CONF {"raw":[100,79,33,100,100,100,100,100,100,100]}

00:34:41.169 --> 00:34:43.929
<v Speaker 0>x an element of the list uv.

NOTE CONF {"raw":[100,68,100,100,100,100,96]}

00:34:44.379 --> 00:34:47.530
<v Speaker 0>So again, I believe you have seen all this Haskell

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:47.530 --> 00:34:48.100
<v Speaker 0>notation.

NOTE CONF {"raw":[100]}

00:34:48.100 --> 00:34:52.750
<v Speaker 0>Is anybody want a reminder of what all this stuff

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:52.750 --> 00:34:53.440
<v Speaker 0>means?

NOTE CONF {"raw":[100]}

00:35:00.550 --> 00:35:02.300
<v Speaker 0>So as I said in the first lecture.

NOTE CONF {"raw":[95,100,100,100,100,100,100,100]}

00:35:02.300 --> 00:35:04.820
<v Speaker 0>It's really important to keep up, so never feel shy

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:04.820 --> 00:35:08.600
<v Speaker 0>about asking if you have moment, even momentarily forgotten what

NOTE CONF {"raw":[100,100,100,100,100,95,100,100,100,100]}

00:35:08.600 --> 00:35:09.530
<v Speaker 0>something means.

NOTE CONF {"raw":[100,100]}

00:35:10.580 --> 00:35:15.170
<v Speaker 0>Um, just as a side issue, I've been talking in

NOTE CONF {"raw":[94,100,100,100,100,100,100,100,100,100]}

00:35:15.170 --> 00:35:18.200
<v Speaker 0>logic about universes, which are sets of objects.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:35:19.520 --> 00:35:21.530
<v Speaker 0>Here I'm showing you Haskell.

NOTE CONF {"raw":[100,100,100,100,100]}

00:35:22.160 --> 00:35:23.630
<v Speaker 0>Is this thing a set?

NOTE CONF {"raw":[100,100,100,100,100]}

00:35:29.240 --> 00:35:30.110
<v Speaker 0>No.

NOTE CONF {"raw":[100]}

00:35:30.110 --> 00:35:31.430
<v Speaker 0>Why isn't it a set?

NOTE CONF {"raw":[100,100,100,100,100]}

00:35:32.690 --> 00:35:33.800
<v Speaker 0>Because it's a list.

NOTE CONF {"raw":[100,100,100,100]}

00:35:34.730 --> 00:35:37.640
<v Speaker 0>Um, what's the difference between lists and sets?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:35:38.570 --> 00:35:43.070
<v Speaker 0>Order matters and duplicates matter I can have are twice

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,66,100]}

00:35:43.070 --> 00:35:43.700
<v Speaker 0>in a list.

NOTE CONF {"raw":[100,100,100]}

00:35:45.380 --> 00:35:48.170
<v Speaker 0>Um, so this sounds like a bad idea, right?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:35:48.170 --> 00:35:50.750
<v Speaker 0>Because I'm supposed to be implementing a logic that is

NOTE CONF {"raw":[100,100,100,100,100,100,95,100,100,100]}

00:35:50.750 --> 00:35:53.990
<v Speaker 0>talking about sets, and I'm showing you lots of stuff

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:53.990 --> 00:35:55.610
<v Speaker 0>that is working with lists.

NOTE CONF {"raw":[100,100,100,100,100]}

00:35:57.530 --> 00:35:59.840
<v Speaker 0>Um, why might I be white?

NOTE CONF {"raw":[100,100,100,100,43,70]}

00:35:59.900 --> 00:36:00.680
<v Speaker 0>My.

NOTE CONF {"raw":[80]}

00:36:01.220 --> 00:36:03.080
<v Speaker 0>Why might I be doing that?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:36:07.070 --> 00:36:09.170
<v Speaker 0>One of the key words is on the slide.

NOTE CONF {"raw":[100,100,100,90,90,100,100,100,100]}

00:36:12.470 --> 00:36:13.520
<v Speaker 0>Laziness.

NOTE CONF {"raw":[100]}

00:36:13.730 --> 00:36:15.740
<v Speaker 0>Okay, I'm lazy.

NOTE CONF {"raw":[100,100,100]}

00:36:15.740 --> 00:36:16.250
<v Speaker 0>Dawns.

NOTE CONF {"raw":[48]}

00:36:16.250 --> 00:36:16.670
<v Speaker 0>Lazy.

NOTE CONF {"raw":[100]}

00:36:16.670 --> 00:36:17.450
<v Speaker 0>We're lazy.

NOTE CONF {"raw":[99,100]}

00:36:17.480 --> 00:36:18.320
<v Speaker 0>You're lazy.

NOTE CONF {"raw":[100,100]}

00:36:19.280 --> 00:36:21.530
<v Speaker 0>This is not the proper way to do it.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:36:21.710 --> 00:36:25.370
<v Speaker 0>The proper way to do it is to define a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:25.370 --> 00:36:28.520
<v Speaker 0>notion of set in Haskell that works like a set

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:28.730 --> 00:36:29.600
<v Speaker 0>does.

NOTE CONF {"raw":[100]}

00:36:29.600 --> 00:36:32.210
<v Speaker 0>In fact, you don't need to do that because Haskell

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:32.210 --> 00:36:34.700
<v Speaker 0>has a module that implements sets, so it's just a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:34.700 --> 00:36:36.950
<v Speaker 0>matter of importing the predefined module.

NOTE CONF {"raw":[100,100,100,100,97,100]}

00:36:37.580 --> 00:36:41.030
<v Speaker 0>The reason we don't do that is just because it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:41.030 --> 00:36:45.320
<v Speaker 0>would reduce introduce additional complication at this point right at

NOTE CONF {"raw":[100,50,100,100,100,100,100,100,100,100]}

00:36:45.320 --> 00:36:47.150
<v Speaker 0>the start of your Haskell careers.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:36:47.330 --> 00:36:52.250
<v Speaker 0>So we're being lazy and programming badly because we want

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:52.250 --> 00:36:54.320
<v Speaker 0>to keep the actual code in front of you very,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:54.320 --> 00:36:55.340
<v Speaker 0>very simple.

NOTE CONF {"raw":[100,100]}

00:36:55.340 --> 00:36:57.200
<v Speaker 0>But do bear this in mind.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:37:02.100 --> 00:37:03.360
<v Speaker 0>Is this too lazy?

NOTE CONF {"raw":[100,100,100,100]}

00:37:03.540 --> 00:37:06.180
<v Speaker 0>So whenever you do something in a lazy way, it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:06.180 --> 00:37:07.680
<v Speaker 0>might come back and bite you.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:37:09.210 --> 00:37:14.040
<v Speaker 0>For example, suppose I were to add another object to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:14.040 --> 00:37:15.870
<v Speaker 0>the universe, so I have to go back and change

NOTE CONF {"raw":[100,100,91,100,100,100,100,100,100,100]}

00:37:15.870 --> 00:37:16.860
<v Speaker 0>this definition.

NOTE CONF {"raw":[97,100]}

00:37:17.250 --> 00:37:19.890
<v Speaker 0>And going back to something I said next time.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:37:19.890 --> 00:37:21.900
<v Speaker 0>This is an even lazier way of doing it.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:37:21.900 --> 00:37:25.650
<v Speaker 0>So I've defined green and I've defined red and I

NOTE CONF {"raw":[100,100,98,100,100,100,97,100,100,100]}

00:37:25.650 --> 00:37:29.040
<v Speaker 0>might say, okay, I know there are three colours.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,81]}

00:37:29.040 --> 00:37:32.400
<v Speaker 0>Anything that is not green or red must be blue.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:32.520 --> 00:37:34.560
<v Speaker 0>So I define thing to be blue.

NOTE CONF {"raw":[100,100,100,96,100,100,100]}

00:37:34.560 --> 00:37:39.930
<v Speaker 0>If it is not green or red, how bad is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:39.930 --> 00:37:41.220
<v Speaker 0>this as a way of doing it?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:37:43.530 --> 00:37:46.680
<v Speaker 0>Very bad because it's true of this universe.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:37:46.680 --> 00:37:50.760
<v Speaker 0>But if I introduce a new colour like yellow, then

NOTE CONF {"raw":[100,100,100,100,100,100,86,100,100,100]}

00:37:50.760 --> 00:37:52.890
<v Speaker 0>it will no longer be a good definition.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:37:53.130 --> 00:37:54.990
<v Speaker 0>I will have to go back and find it, and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:54.990 --> 00:37:57.750
<v Speaker 0>probably I won't do that until I find something wrong

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:57.750 --> 00:37:58.740
<v Speaker 0>much later.

NOTE CONF {"raw":[100,100]}

00:38:00.240 --> 00:38:00.480
<v Speaker 0>Um.

NOTE CONF {"raw":[92]}

00:38:03.660 --> 00:38:08.550
<v Speaker 0>So let me mention this little footnote.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:38:09.840 --> 00:38:13.110
<v Speaker 0>I'm guessing that none of you know who Larry Wall

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:13.110 --> 00:38:13.500
<v Speaker 0>is.

NOTE CONF {"raw":[100]}

00:38:13.980 --> 00:38:16.020
<v Speaker 0>Anybody know who Larry Wall is?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:38:16.800 --> 00:38:17.160
<v Speaker 1>Thank you.

NOTE CONF {"raw":[93,93]}

00:38:19.590 --> 00:38:27.390
<v Speaker 0>Uh, for, you know, at least I don't think so.

NOTE CONF {"raw":[82,85,74,74,100,100,100,100,100,100]}

00:38:28.230 --> 00:38:30.360
<v Speaker 0>Um, he wrote lots of things.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:38:31.110 --> 00:38:31.800
<v Speaker 0>So.

NOTE CONF {"raw":[100]}

00:38:34.290 --> 00:38:38.520
<v Speaker 0>In particular, there's a programming language called Perl, which is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:38.520 --> 00:38:39.660
<v Speaker 0>my favourite language.

NOTE CONF {"raw":[100,94,100]}

00:38:39.660 --> 00:38:42.510
<v Speaker 0>It's basically what people use before Python.

NOTE CONF {"raw":[100,100,100,100,52,100,100]}

00:38:43.260 --> 00:38:46.260
<v Speaker 0>So those of you who are using Python 20 years

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:46.260 --> 00:38:50.070
<v Speaker 0>ago or 30, whenever it was, you might have used

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:50.070 --> 00:38:50.730
<v Speaker 0>Perl.

NOTE CONF {"raw":[100]}

00:38:51.750 --> 00:38:55.360
<v Speaker 0>Larry Wall also wrote a lot of other things that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:55.720 --> 00:38:57.520
<v Speaker 0>are no longer maybe.

NOTE CONF {"raw":[100,100,100,100]}

00:38:58.660 --> 00:39:00.850
<v Speaker 0>Yes, he wrote, other things are still very much in

NOTE CONF {"raw":[100,100,100,100,100,97,100,100,100,100]}

00:39:00.850 --> 00:39:01.390
<v Speaker 0>use.

NOTE CONF {"raw":[100]}

00:39:01.540 --> 00:39:05.710
<v Speaker 0>For example, if you are writing a big software project,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:05.710 --> 00:39:08.590
<v Speaker 0>you want to know whether things change and if somebody

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:08.590 --> 00:39:11.140
<v Speaker 0>else changes something, you want them to be able to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:11.140 --> 00:39:14.200
<v Speaker 0>send you the change in a form that is short.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:14.200 --> 00:39:18.190
<v Speaker 0>So if somebody changes a 10,000 line program by modifying

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:18.220 --> 00:39:21.610
<v Speaker 0>two lines of it, ideally you want them to be

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:21.610 --> 00:39:24.310
<v Speaker 0>able to send you just the changes and you want

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:24.310 --> 00:39:26.830
<v Speaker 0>to apply that to your version of the program to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:26.830 --> 00:39:29.050
<v Speaker 0>get yours up to date with that.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:39:29.800 --> 00:39:33.100
<v Speaker 0>It's a very simple task, but it's not so simple

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:33.100 --> 00:39:35.110
<v Speaker 0>to get it completely right and clean.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:39:35.110 --> 00:39:39.010
<v Speaker 0>And there are standard utilities called diff for working out

NOTE CONF {"raw":[100,100,100,100,100,100,93,100,100,100]}

00:39:39.010 --> 00:39:44.620
<v Speaker 0>the smallest difference between two files, and patch for taking

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:44.620 --> 00:39:47.320
<v Speaker 0>a difference and applying it to your old file to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:47.320 --> 00:39:48.430
<v Speaker 0>get the new file.

NOTE CONF {"raw":[100,100,100,100]}

00:39:48.580 --> 00:39:49.990
<v Speaker 0>Larry wrote those.

NOTE CONF {"raw":[100,100,100]}

00:39:50.920 --> 00:39:54.860
<v Speaker 0>He wrote large chunks of Usenet, which is still exists,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:54.860 --> 00:39:57.020
<v Speaker 0>but most of you have probably not heard of.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:39:57.020 --> 00:39:58.610
<v Speaker 0>Anybody heard of Usenet?

NOTE CONF {"raw":[100,100,100,100]}

00:39:59.600 --> 00:40:00.860
<v Speaker 0>Very small number.

NOTE CONF {"raw":[100,100,100]}

00:40:01.400 --> 00:40:03.230
<v Speaker 0>Um, it's what we had before.

NOTE CONF {"raw":[98,100,100,100,100,100]}

00:40:03.230 --> 00:40:07.130
<v Speaker 0>Web forums and social media and all that crap.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:40:07.730 --> 00:40:11.570
<v Speaker 0>It was an efficient way of having conversations, unlike the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:11.570 --> 00:40:12.440
<v Speaker 0>modern systems.

NOTE CONF {"raw":[100,100]}

00:40:14.000 --> 00:40:17.960
<v Speaker 0>So Larry is definitely one of my favourite people in

NOTE CONF {"raw":[100,100,100,100,100,100,100,96,100,100]}

00:40:17.960 --> 00:40:21.470
<v Speaker 0>the computing, historical historical world.

NOTE CONF {"raw":[100,100,95,100,100]}

00:40:22.430 --> 00:40:27.260
<v Speaker 0>The three chief virtues of a programmer are laziness, impatience,

NOTE CONF {"raw":[100,100,100,100,100,100,100,95,100,100]}

00:40:27.260 --> 00:40:28.430
<v Speaker 0>and hubris.

NOTE CONF {"raw":[100,100]}

00:40:29.030 --> 00:40:32.030
<v Speaker 0>None of these are things that would be agreed with

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:32.030 --> 00:40:33.860
<v Speaker 0>by software engineers.

NOTE CONF {"raw":[100,100,100]}

00:40:33.860 --> 00:40:38.030
<v Speaker 0>So he's definitely talking about programmers rather than software engineers.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:39.440 --> 00:40:40.370
<v Speaker 0>Laziness.

NOTE CONF {"raw":[100]}

00:40:41.270 --> 00:40:43.280
<v Speaker 0>Why do we want to be lazy in general?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:40:43.310 --> 00:40:45.470
<v Speaker 0>Because the short of the code, the easier it is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:45.470 --> 00:40:46.670
<v Speaker 0>to understand.

NOTE CONF {"raw":[100,100]}

00:40:46.820 --> 00:40:50.450
<v Speaker 0>And another reason is that your time is very expensive

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:50.450 --> 00:40:54.680
<v Speaker 0>and computer time is very cheap, so it is not

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:54.680 --> 00:40:59.060
<v Speaker 0>efficient to write some complicated code in order to shave

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:59.060 --> 00:41:02.180
<v Speaker 0>1% off the running time of your program.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:41:02.210 --> 00:41:05.780
<v Speaker 0>Unless it's really, really important that your program is fast.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:05.810 --> 00:41:09.680
<v Speaker 0>In almost all circumstances, your time is much more important.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:11.570 --> 00:41:13.940
<v Speaker 0>Um, it really goes along with impatience.

NOTE CONF {"raw":[100,58,100,100,100,100,100]}

00:41:13.940 --> 00:41:18.860
<v Speaker 0>You can't be bothered to do things perfectly.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:41:18.860 --> 00:41:21.380
<v Speaker 0>You do them good enough and come back and bite

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:21.380 --> 00:41:21.800
<v Speaker 0>you.

NOTE CONF {"raw":[100]}

00:41:22.100 --> 00:41:24.770
<v Speaker 0>So this seems a bit contradictory, because not long ago

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:24.770 --> 00:41:27.770
<v Speaker 0>I said that we should be doing things correctly, and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:27.770 --> 00:41:30.860
<v Speaker 0>impatience is largely about not doing things correctly.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:41:31.580 --> 00:41:35.990
<v Speaker 0>Unfortunately, in the real world you don't have time to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:35.990 --> 00:41:37.160
<v Speaker 0>do things perfectly.

NOTE CONF {"raw":[100,100,100]}

00:41:37.220 --> 00:41:40.910
<v Speaker 0>Our ideal curiosity how many of you are expecting, or

NOTE CONF {"raw":[76,76,100,100,100,100,100,100,100,100]}

00:41:40.910 --> 00:41:43.190
<v Speaker 0>at least thinking about, ending up in a career where

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:43.190 --> 00:41:45.470
<v Speaker 0>you're going to do significant amounts of programming?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:41:48.260 --> 00:41:48.920
<v Speaker 0>Okay.

NOTE CONF {"raw":[79]}

00:41:49.370 --> 00:41:51.330
<v Speaker 0>And the others of you might end up doing it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:51.330 --> 00:41:55.230
<v Speaker 0>because your boss notices you have a computer science degree

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:55.230 --> 00:41:56.670
<v Speaker 0>and can presumably program.

NOTE CONF {"raw":[100,100,100,100]}

00:41:58.080 --> 00:42:01.770
<v Speaker 0>The real world has nasty things like managers and deadlines

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:01.770 --> 00:42:02.520
<v Speaker 0>and so on.

NOTE CONF {"raw":[100,100,100]}

00:42:02.730 --> 00:42:05.460
<v Speaker 0>So patience is a virtue.

NOTE CONF {"raw":[100,100,100,100,100]}

00:42:07.440 --> 00:42:08.400
<v Speaker 0>Hubris.

NOTE CONF {"raw":[100]}

00:42:09.030 --> 00:42:11.430
<v Speaker 0>Okay, who knows what hubris means?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:42:14.820 --> 00:42:15.120
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:42:15.120 --> 00:42:17.760
<v Speaker 0>Why haven't you asked me yet what hubris means?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:42:19.080 --> 00:42:19.380
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:42:22.020 --> 00:42:26.220
<v Speaker 0>Appropriately, hubris is a Greek word very familiar to Aristotle.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:26.940 --> 00:42:27.240
<v Speaker 0>Um.

NOTE CONF {"raw":[87]}

00:42:27.240 --> 00:42:29.430
<v Speaker 0>Hubris is about pride.

NOTE CONF {"raw":[100,100,100,100]}

00:42:30.150 --> 00:42:35.400
<v Speaker 0>And in Greek mythology, hubris is particularly applied to the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:35.400 --> 00:42:39.750
<v Speaker 0>kind of pride that makes people stand up and say

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:39.750 --> 00:42:40.170
<v Speaker 0>things.

NOTE CONF {"raw":[100]}

00:42:40.170 --> 00:42:42.750
<v Speaker 0>I bet Zeus couldn't hit me with a thunderbolt from

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:42.750 --> 00:42:48.330
<v Speaker 0>here, which is swiftly followed by nemesis when Zeus hears

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:48.330 --> 00:42:50.980
<v Speaker 0>them and strikes them down with his lightning bolt.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:42:52.060 --> 00:42:55.570
<v Speaker 0>So in English, hubris is a word used to describe

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:55.570 --> 00:43:00.850
<v Speaker 0>the kind of pride that and overconfidence in your abilities

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:00.850 --> 00:43:03.640
<v Speaker 0>that leads you to do things that you otherwise wouldn't

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:03.640 --> 00:43:07.900
<v Speaker 0>sensibly do, which is actually quite useful in a programmer,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,72]}

00:43:07.900 --> 00:43:10.090
<v Speaker 0>because you end up taking on some task that is

NOTE CONF {"raw":[100,100,100,100,100,100,100,72,100,100]}

00:43:10.090 --> 00:43:12.580
<v Speaker 0>too big for you, and then you have to do

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:12.580 --> 00:43:15.190
<v Speaker 0>it anyway, because you can't face explaining to your boss

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:15.190 --> 00:43:16.240
<v Speaker 0>why you couldn't do it.

NOTE CONF {"raw":[100,100,100,100,100]}

00:43:16.240 --> 00:43:17.980
<v Speaker 0>And you learn a lot of stuff and then you've

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:17.980 --> 00:43:18.880
<v Speaker 0>done the task.

NOTE CONF {"raw":[100,100,100]}

00:43:18.880 --> 00:43:24.040
<v Speaker 0>So hubris is a benefit sometimes, but if it's a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:24.040 --> 00:43:27.190
<v Speaker 0>project where failure gets you sacked, then maybe that's not

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:27.190 --> 00:43:28.240
<v Speaker 0>the best thing to do.

NOTE CONF {"raw":[100,100,100,100,100]}

00:43:30.850 --> 00:43:31.270
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:43:31.270 --> 00:43:33.310
<v Speaker 0>Any questions about this slide.

NOTE CONF {"raw":[100,100,100,100,100]}

00:43:38.920 --> 00:43:39.400
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:43:41.560 --> 00:43:44.200
<v Speaker 0>So this is where we get on to the bit

NOTE CONF {"raw":[100,100,100,100,100,100,60,60,96,100]}

00:43:44.200 --> 00:43:48.790
<v Speaker 0>of Haskell that always struck me as a remarkably complicated

NOTE CONF {"raw":[100,97,100,100,100,100,100,100,100,100]}

00:43:48.790 --> 00:43:49.240
<v Speaker 0>thing.

NOTE CONF {"raw":[100]}

00:43:49.270 --> 00:43:51.370
<v Speaker 0>Have you done list comprehension yet?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:43:52.000 --> 00:43:52.690
<v Speaker 0>Yes.

NOTE CONF {"raw":[100]}

00:43:52.690 --> 00:43:53.410
<v Speaker 0>Excellent.

NOTE CONF {"raw":[100]}

00:43:53.890 --> 00:43:55.780
<v Speaker 0>I have to ask this every year because we keep

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:55.780 --> 00:43:58.030
<v Speaker 0>swapping the lectures around because of Don's travel, and I

NOTE CONF {"raw":[100,100,100,100,100,100,48,100,100,100]}

00:43:58.030 --> 00:43:59.800
<v Speaker 0>can never remember what's been done when.

NOTE CONF {"raw":[100,100,100,100,98,100,100]}

00:43:59.800 --> 00:44:03.490
<v Speaker 0>So Haskell's list comprehension statement is an amazing thing.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:44:03.490 --> 00:44:06.220
<v Speaker 0>It didn't exist in any of the languages I used

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,78]}

00:44:06.220 --> 00:44:07.630
<v Speaker 0>when I was starting out.

NOTE CONF {"raw":[100,100,100,100,100]}

00:44:08.860 --> 00:44:12.070
<v Speaker 0>So this is basically the list version of the statement.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:12.070 --> 00:44:14.140
<v Speaker 0>The set of x such that x is a member

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:14.140 --> 00:44:19.150
<v Speaker 0>of things and x is blue, or x is big

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:19.150 --> 00:44:20.770
<v Speaker 0>and x is a disc.

NOTE CONF {"raw":[100,100,100,100,66]}

00:44:22.900 --> 00:44:24.850
<v Speaker 0>Um, we don't want to do things like this because

NOTE CONF {"raw":[54,100,100,100,100,100,100,100,100,100]}

00:44:24.850 --> 00:44:28.120
<v Speaker 0>it isn't a categorical statement, but you can do things

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:28.120 --> 00:44:28.930
<v Speaker 0>like that.

NOTE CONF {"raw":[100,100]}

00:44:31.330 --> 00:44:33.340
<v Speaker 0>And you will be doing a lot of this.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:44:35.470 --> 00:44:43.060
<v Speaker 0>So given list comprehension and given some Boolean operators on

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:43.060 --> 00:44:46.220
<v Speaker 0>lists which I'll talk about if you haven't done them,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:46.220 --> 00:44:48.800
<v Speaker 0>we can talk about categorical statements.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:44:48.800 --> 00:44:51.050
<v Speaker 0>So I'm going to show you some Haskell for some

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:51.050 --> 00:44:52.790
<v Speaker 0>of the categorical statements.

NOTE CONF {"raw":[100,100,100,100]}

00:44:54.320 --> 00:44:56.360
<v Speaker 0>Every small triangle is red.

NOTE CONF {"raw":[100,100,100,100,100]}

00:44:56.870 --> 00:45:01.430
<v Speaker 0>So I claim that this is a Haskell statement.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:45:03.170 --> 00:45:03.980
<v Speaker 0>What does it mean?

NOTE CONF {"raw":[100,100,100,100]}

00:45:03.980 --> 00:45:07.280
<v Speaker 0>It says give me the list of x is such

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:07.280 --> 00:45:11.450
<v Speaker 0>that x is in things, x is a triangle and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:11.450 --> 00:45:12.920
<v Speaker 0>x is small.

NOTE CONF {"raw":[100,100,100]}

00:45:13.820 --> 00:45:14.270
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:45:14.270 --> 00:45:16.280
<v Speaker 0>So that gives me the set of things that are

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:16.280 --> 00:45:17.750
<v Speaker 0>small triangles.

NOTE CONF {"raw":[100,100]}

00:45:19.550 --> 00:45:21.380
<v Speaker 0>And then I'm going to do a bit of magic.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:22.880 --> 00:45:26.240
<v Speaker 0>I'm going to say instead of giving me the list

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:26.240 --> 00:45:30.200
<v Speaker 0>of things that are small triangles, give me the list

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:30.200 --> 00:45:33.950
<v Speaker 0>of truth values of red about things that are small

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:33.950 --> 00:45:34.910
<v Speaker 0>triangles.

NOTE CONF {"raw":[100]}

00:45:34.910 --> 00:45:38.000
<v Speaker 0>So this is basically taking this list and applying the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:38.000 --> 00:45:40.610
<v Speaker 0>red predicate to every element of it.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:45:40.910 --> 00:45:43.400
<v Speaker 0>So I get back false true false.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:45:43.430 --> 00:45:46.040
<v Speaker 0>because S is not red, V is red and X

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:46.040 --> 00:45:46.820
<v Speaker 0>is not red.

NOTE CONF {"raw":[100,100,100]}

00:45:48.680 --> 00:45:51.380
<v Speaker 0>Have you done list comprehensions like this with a predicate

NOTE CONF {"raw":[100,100,100,81,100,100,100,100,100,100]}

00:45:51.380 --> 00:45:52.040
<v Speaker 0>in there?

NOTE CONF {"raw":[100,100]}

00:45:55.340 --> 00:45:58.250
<v Speaker 0>Some people think they have, so probably you have.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:45:58.730 --> 00:46:03.410
<v Speaker 0>Um, we'll do a lot of this, but remember, I

NOTE CONF {"raw":[71,100,100,100,100,100,100,100,100,100]}

00:46:03.410 --> 00:46:05.060
<v Speaker 0>mean, the way I like to think of it is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:05.570 --> 00:46:07.130
<v Speaker 0>forget about the predicate.

NOTE CONF {"raw":[100,100,100,100]}

00:46:07.130 --> 00:46:09.200
<v Speaker 0>Just go back to give me the set of X's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,80]}

00:46:09.200 --> 00:46:14.060
<v Speaker 0>that satisfy this property and then apply red to all

NOTE CONF {"raw":[100,100,100,100,100,100,100,97,100,100]}

00:46:14.060 --> 00:46:15.140
<v Speaker 0>those things.

NOTE CONF {"raw":[100,100]}

00:46:15.290 --> 00:46:17.900
<v Speaker 0>If you haven't already, you will come across a function

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:17.900 --> 00:46:24.770
<v Speaker 0>called map, which applies a predicate to a list of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:24.770 --> 00:46:26.990
<v Speaker 0>things and gives you back the list of values.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:46:27.020 --> 00:46:30.620
<v Speaker 0>So really, we're just applying red to everything that came

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:30.620 --> 00:46:31.490
<v Speaker 0>out of there.

NOTE CONF {"raw":[100,100,100]}

00:46:33.440 --> 00:46:38.360
<v Speaker 0>And then the next bit of wonderful Haskell magic is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:38.360 --> 00:46:41.120
<v Speaker 0>that Haskell has a Boolean operator.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:46:42.810 --> 00:46:45.150
<v Speaker 0>Something that returns true or false.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:46:45.270 --> 00:46:47.970
<v Speaker 0>And what it does is to go down a list

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:47.970 --> 00:46:50.370
<v Speaker 0>and just and everything together.

NOTE CONF {"raw":[100,100,100,100,100]}

00:46:50.460 --> 00:46:54.210
<v Speaker 0>So if I apply and to this list, it gives

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:54.210 --> 00:46:59.220
<v Speaker 0>me false and true and false, which is false.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:47:00.960 --> 00:47:08.970
<v Speaker 0>So I claim that this Haskell statement here is a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:08.970 --> 00:47:13.020
<v Speaker 0>Haskell implementation of every small triangle is read.

NOTE CONF {"raw":[100,100,100,100,100,100,100,65]}

00:47:15.120 --> 00:47:17.580
<v Speaker 0>On the basis of the explanation so far.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:47:17.610 --> 00:47:19.140
<v Speaker 0>How many of you buy that?

NOTE CONF {"raw":[100,100,100,100,89,100]}

00:47:22.680 --> 00:47:23.910
<v Speaker 0>Very few people buy it.

NOTE CONF {"raw":[100,100,100,100,100]}

00:47:23.910 --> 00:47:26.100
<v Speaker 0>So those of you who don't buy it, at which

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:26.100 --> 00:47:28.260
<v Speaker 0>point do you get worried?

NOTE CONF {"raw":[100,100,100,100,100]}

00:47:29.970 --> 00:47:31.440
<v Speaker 0>Are you happy with this line?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:47:35.280 --> 00:47:40.350
<v Speaker 0>Set of X's that are triangular and small.

NOTE CONF {"raw":[100,100,61,100,100,100,100,100]}

00:47:41.650 --> 00:47:42.910
<v Speaker 0>who is positively happy.

NOTE CONF {"raw":[100,100,100,100]}

00:47:42.910 --> 00:47:44.320
<v Speaker 0>They understand this line.

NOTE CONF {"raw":[100,100,100,100]}

00:47:46.780 --> 00:47:47.260
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:47:47.260 --> 00:47:49.270
<v Speaker 0>Somebody who isn't positively happy.

NOTE CONF {"raw":[100,100,100,100,100]}

00:47:49.630 --> 00:47:54.040
<v Speaker 0>Can you say more about where you're worried?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:48:01.900 --> 00:48:03.580
<v Speaker 0>And if you don't like to say here, then you

NOTE CONF {"raw":[100,100,100,100,100,100,81,100,100,100]}

00:48:03.580 --> 00:48:05.470
<v Speaker 0>can post anonymously on Piazza.

NOTE CONF {"raw":[100,100,100,100,100]}

00:48:07.270 --> 00:48:11.290
<v Speaker 0>So go back, review the Haskell lecture about the list

NOTE CONF {"raw":[100,100,100,100,100,60,100,100,100,100]}

00:48:11.290 --> 00:48:13.900
<v Speaker 0>comprehension and use the textbook.

NOTE CONF {"raw":[100,100,100,100,100]}

00:48:13.900 --> 00:48:17.410
<v Speaker 0>And use this example to think about how list comprehension

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:17.410 --> 00:48:20.890
<v Speaker 0>is working, because we're going to use these examples for

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:20.890 --> 00:48:23.230
<v Speaker 0>the next 2 or 3 weeks.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:48:25.000 --> 00:48:27.220
<v Speaker 0>So this is a list of things.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:48:27.460 --> 00:48:31.360
<v Speaker 0>And this is just applying a particular function.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:48:31.360 --> 00:48:33.580
<v Speaker 0>In this case it's a predicate to all of the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:33.580 --> 00:48:35.200
<v Speaker 0>things that come back from here.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:48:35.440 --> 00:48:37.930
<v Speaker 0>Here I got the list of x and now I'm

NOTE CONF {"raw":[100,100,100,100,100,72,66,93,100,100]}

00:48:37.930 --> 00:48:40.750
<v Speaker 0>just getting is read of, S is read of V

NOTE CONF {"raw":[100,100,100,93,100,100,100,94,98,66]}

00:48:40.840 --> 00:48:44.590
<v Speaker 0>is read of X in Haskell is doing the computation.

NOTE CONF {"raw":[100,93,100,99,47,76,100,100,100,100]}

00:48:46.090 --> 00:48:47.890
<v Speaker 0>And this is the thing that you may not yet

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:47.890 --> 00:48:51.310
<v Speaker 0>have covered in the Haskell courses, but this is an

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:51.310 --> 00:48:57.670
<v Speaker 0>operator on the lists that goes along the list and

NOTE CONF {"raw":[100,100,100,96,100,100,100,100,100,100]}

00:48:57.670 --> 00:49:01.930
<v Speaker 0>does, and each time so forth, and true and false.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:03.580 --> 00:49:06.580
<v Speaker 0>So what I would like you to do is to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:06.580 --> 00:49:07.960
<v Speaker 0>study this slide.

NOTE CONF {"raw":[100,97,100]}

00:49:08.620 --> 00:49:14.440
<v Speaker 0>Go back to the Haskell Lectures about comprehension, um, and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,89,100]}

00:49:14.530 --> 00:49:16.450
<v Speaker 0>the various forms there.

NOTE CONF {"raw":[100,100,100,89]}

00:49:17.320 --> 00:49:19.570
<v Speaker 0>Try to ensure that you've got it in your head

NOTE CONF {"raw":[100,100,98,100,100,100,100,100,100,84]}

00:49:19.750 --> 00:49:24.010
<v Speaker 0>by Thursday, which is my next lecture.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:49:24.100 --> 00:49:26.290
<v Speaker 0>And then at the start of Thursday, we'll go through

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:26.290 --> 00:49:28.420
<v Speaker 0>this slide again before I go on to the rest

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:28.420 --> 00:49:29.320
<v Speaker 0>of the content.

NOTE CONF {"raw":[100,100,100]}

00:49:29.320 --> 00:49:31.180
<v Speaker 0>So see you on Thursday.

NOTE CONF {"raw":[100,100,100,100,100]}

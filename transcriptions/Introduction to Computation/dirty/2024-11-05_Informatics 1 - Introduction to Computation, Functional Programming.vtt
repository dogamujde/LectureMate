WEBVTT

00:00:00.450 --> 00:00:01.230
<v Speaker 0>Uh, you can try.

NOTE CONF {"raw":[90,100,100,100]}

00:00:01.230 --> 00:00:02.610
<v Speaker 0>I mean, I think it's.

NOTE CONF {"raw":[100,100,100,100,100]}

00:00:02.610 --> 00:00:04.530
<v Speaker 0>Yeah, it should be.

NOTE CONF {"raw":[99,100,100,100]}

00:00:04.530 --> 00:00:05.100
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:00:05.640 --> 00:00:08.790
<v Speaker 0>Um, it's to do with the way that the, um,

NOTE CONF {"raw":[75,100,100,100,100,100,100,100,100,100]}

00:00:10.050 --> 00:00:11.430
<v Speaker 0>examples are displayed.

NOTE CONF {"raw":[100,100,100]}

00:00:11.430 --> 00:00:13.830
<v Speaker 0>I mean, I think things should be fine.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:00:18.480 --> 00:00:20.670
<v Speaker 0>Okay, uh, let me start.

NOTE CONF {"raw":[98,97,100,100,100]}

00:00:20.880 --> 00:00:25.290
<v Speaker 0>Um, so today's today's music is, uh, is a is

NOTE CONF {"raw":[100,100,100,100,100,100,88,100,100,100]}

00:00:25.290 --> 00:00:29.910
<v Speaker 0>a song called program in C, and, um, so C

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:00:29.910 --> 00:00:31.680
<v Speaker 0>if you don't know, it is a, or if you've

NOTE CONF {"raw":[100,100,100,100,100,100,96,100,100,100]}

00:00:31.680 --> 00:00:33.240
<v Speaker 0>never heard of it, it's a programming language.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:00:33.240 --> 00:00:35.220
<v Speaker 0>It's kind of the opposite of Haskell in the sense

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:00:35.220 --> 00:00:37.320
<v Speaker 0>of being extremely low level.

NOTE CONF {"raw":[100,100,100,100,100]}

00:00:37.320 --> 00:00:39.990
<v Speaker 0>It's as low level as you can get without, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:00:40.020 --> 00:00:43.050
<v Speaker 0>you know, it's actually pretty much at the hardware level.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:00:43.200 --> 00:00:43.680
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:00:43.680 --> 00:00:46.740
<v Speaker 0>So, um, that's kind of the alternative.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:00:46.740 --> 00:00:49.110
<v Speaker 0>Uh, if you don't want, um, Haskell.

NOTE CONF {"raw":[74,100,100,100,100,86,100]}

00:00:49.590 --> 00:00:50.490
<v Speaker 1>Listen to me.

NOTE CONF {"raw":[100,100,100]}

00:00:51.090 --> 00:00:53.070
<v Speaker 1>All languages, it's a mess.

NOTE CONF {"raw":[42,100,100,99,49]}

00:00:53.580 --> 00:00:56.430
<v Speaker 1>Programming in C is better than anything they got over

NOTE CONF {"raw":[100,58,100,100,100,100,100,98,100,100]}

00:00:56.430 --> 00:00:56.760
<v Speaker 1>there.

NOTE CONF {"raw":[100]}

00:00:58.620 --> 00:01:00.540
<v Speaker 1>The syntax is so much sweeter.

NOTE CONF {"raw":[97,100,55,81,100,100]}

00:01:00.870 --> 00:01:02.730
<v Speaker 1>Where objects and subtypes play.

NOTE CONF {"raw":[97,68,58,37,40]}

00:01:03.210 --> 00:01:07.590
<v Speaker 1>But feels like inheritance will only get in the way.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:08.070 --> 00:01:12.510
<v Speaker 1>Admires this simple landscape efficiently dangerous.

NOTE CONF {"raw":[98,45,100,100,100,100]}

00:01:12.840 --> 00:01:16.740
<v Speaker 1>No templates or fancy pitfalls like Java and C plus

NOTE CONF {"raw":[96,100,99,100,100,100,100,100,100,100]}

00:01:16.740 --> 00:01:23.340
<v Speaker 1>plus programming C programming C pointers.

NOTE CONF {"raw":[100,99,100,97,85,100]}

00:01:23.340 --> 00:01:24.000
<v Speaker 1>Assembly.

NOTE CONF {"raw":[94]}

00:01:24.000 --> 00:01:26.460
<v Speaker 1>Manage your memory with Malik and three.

NOTE CONF {"raw":[100,100,100,100,37,99,43]}

00:01:27.240 --> 00:01:29.700
<v Speaker 1>Don't sync your app with runtime bloat.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:01:29.700 --> 00:01:32.040
<v Speaker 1>Software and C will stay afloat.

NOTE CONF {"raw":[100,74,100,99,100,100]}

00:01:32.130 --> 00:01:35.280
<v Speaker 1>Do what you want very close to the hardware program

NOTE CONF {"raw":[100,100,100,100,87,100,100,100,100,55]}

00:01:35.280 --> 00:01:35.940
<v Speaker 1>in C.

NOTE CONF {"raw":[51,97]}

00:01:41.250 --> 00:01:42.930
<v Speaker 0>Okay, that's.

NOTE CONF {"raw":[100,100]}

00:01:43.080 --> 00:01:45.780
<v Speaker 0>You may not have noticed, but it's the last thing.

NOTE CONF {"raw":[100,100,100,100,100,100,84,100,100,100]}

00:01:46.500 --> 00:01:52.560
<v Speaker 0>So, uh, it it ended abruptly with a segmentation fault.

NOTE CONF {"raw":[100,99,79,100,100,100,100,95,100,100]}

00:01:52.560 --> 00:01:54.630
<v Speaker 0>This is a this is an error you get when

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:54.630 --> 00:01:57.150
<v Speaker 0>you program in C and you make a mistake with

NOTE CONF {"raw":[100,100,80,100,100,100,100,100,100,100]}

00:01:57.150 --> 00:02:01.210
<v Speaker 0>pointer arithmetic and that you try to, uh, you try

NOTE CONF {"raw":[100,100,100,79,100,100,100,100,100,100]}

00:02:01.210 --> 00:02:03.010
<v Speaker 0>to address into areas of the memory you're not allowed

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:03.010 --> 00:02:05.710
<v Speaker 0>to use and you get segmentation fault standard crash and

NOTE CONF {"raw":[100,100,100,100,100,100,87,100,100,86]}

00:02:05.710 --> 00:02:05.950
<v Speaker 0>see.

NOTE CONF {"raw":[81]}

00:02:05.950 --> 00:02:09.429
<v Speaker 0>So that song crashed with a segmentation fault.

NOTE CONF {"raw":[100,100,100,100,100,77,100,100]}

00:02:09.759 --> 00:02:10.090
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:02:10.810 --> 00:02:11.770
<v Speaker 0>Uh, yeah.

NOTE CONF {"raw":[100,100]}

00:02:14.650 --> 00:02:15.370
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:02:15.370 --> 00:02:17.320
<v Speaker 0>But, uh, what I want to talk about today is

NOTE CONF {"raw":[100,83,100,100,91,100,100,100,100,100]}

00:02:17.320 --> 00:02:18.520
<v Speaker 0>search and trees.

NOTE CONF {"raw":[97,49,100]}

00:02:20.320 --> 00:02:24.280
<v Speaker 0>Uh, and this is not a lecture about Haskell and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:24.280 --> 00:02:25.570
<v Speaker 0>new features and so forth.

NOTE CONF {"raw":[100,100,100,100,100]}

00:02:25.570 --> 00:02:29.170
<v Speaker 0>It's about I'm using Haskell as a vehicle to talk

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:29.170 --> 00:02:32.680
<v Speaker 0>about, um, uh, the problem of tree search, which is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:32.680 --> 00:02:36.430
<v Speaker 0>a kind of a basic thing in, in computer science

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:36.430 --> 00:02:37.840
<v Speaker 0>and also in artificial intelligence.

NOTE CONF {"raw":[100,100,100,100,100]}

00:02:37.840 --> 00:02:41.800
<v Speaker 0>So searching through, uh, tree, um, and my trees are

NOTE CONF {"raw":[100,100,100,82,100,100,100,100,100,100]}

00:02:41.800 --> 00:02:44.290
<v Speaker 0>going to represent search spaces, so you can think of

NOTE CONF {"raw":[100,100,100,100,100,100,100,87,100,100]}

00:02:44.290 --> 00:02:46.810
<v Speaker 0>them as something like the search space of a chess

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:46.810 --> 00:02:48.310
<v Speaker 0>game or something like that.

NOTE CONF {"raw":[100,100,100,100,100]}

00:02:49.570 --> 00:02:54.940
<v Speaker 0>Uh, where, um, where you've got, um, branching, representing the

NOTE CONF {"raw":[91,100,100,100,100,100,91,100,100,100]}

00:02:54.940 --> 00:02:57.550
<v Speaker 0>different moves you have from a particular position in chess,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:57.550 --> 00:02:59.740
<v Speaker 0>let's say, or some other game.

NOTE CONF {"raw":[95,100,100,100,100,100]}

00:02:59.830 --> 00:03:00.430
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:03:00.430 --> 00:03:02.980
<v Speaker 0>So we're going to be we're going to be looking

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:02.980 --> 00:03:05.650
<v Speaker 0>at trees and they're going to be binary trees, but

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:05.650 --> 00:03:07.930
<v Speaker 0>they're not going to be the binary trees.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:03:08.290 --> 00:03:11.470
<v Speaker 0>I mean, they're going to look the representation will be

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:11.740 --> 00:03:16.900
<v Speaker 0>uh, again using nodes and empty trees and so forth

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:16.900 --> 00:03:18.070
<v Speaker 0>as you're familiar with.

NOTE CONF {"raw":[100,100,100,100]}

00:03:18.070 --> 00:03:21.790
<v Speaker 0>But these trees are not going to obey the invariant

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:21.790 --> 00:03:25.960
<v Speaker 0>that I, that I talked about before about the, the,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:25.960 --> 00:03:30.190
<v Speaker 0>the labels being ordered, uh, according to, you know, um,

NOTE CONF {"raw":[100,100,100,100,75,100,100,100,100,100]}

00:03:30.580 --> 00:03:31.120
<v Speaker 0>yeah.

NOTE CONF {"raw":[100]}

00:03:31.330 --> 00:03:34.450
<v Speaker 0>You know, we always had node, node label and then

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:34.450 --> 00:03:37.630
<v Speaker 0>everything on the, uh, on the left.

NOTE CONF {"raw":[100,100,100,64,100,100,100]}

00:03:37.630 --> 00:03:38.020
<v Speaker 0>Sorry.

NOTE CONF {"raw":[100]}

00:03:38.020 --> 00:03:38.800
<v Speaker 0>On the right.

NOTE CONF {"raw":[100,100,100]}

00:03:38.800 --> 00:03:39.610
<v Speaker 0>Wait a minute.

NOTE CONF {"raw":[100,100,100]}

00:03:39.790 --> 00:03:43.810
<v Speaker 0>From your point of view, uh, everything on the left

NOTE CONF {"raw":[100,100,100,100,100,98,100,100,100,100]}

00:03:43.810 --> 00:03:46.570
<v Speaker 0>being smaller than the node level and everything on the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:46.570 --> 00:03:48.400
<v Speaker 0>right being larger than node label.

NOTE CONF {"raw":[100,100,100,100,89,100]}

00:03:48.400 --> 00:03:52.300
<v Speaker 0>So forget that it's going to be, uh, labelled binary

NOTE CONF {"raw":[100,100,100,100,100,100,100,89,100,100]}

00:03:52.300 --> 00:03:54.670
<v Speaker 0>trees with integer labels.

NOTE CONF {"raw":[100,100,100,100]}

00:03:54.670 --> 00:03:57.200
<v Speaker 0>But, um, forget about that invariant.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:03:57.200 --> 00:04:00.230
<v Speaker 0>I'm just using this to represent, um using this represent

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,84,46]}

00:04:00.230 --> 00:04:01.370
<v Speaker 0>search spaces.

NOTE CONF {"raw":[100,100]}

00:04:01.880 --> 00:04:05.630
<v Speaker 0>Um, so arbitrary labelled binary trees.

NOTE CONF {"raw":[100,100,100,97,100,100]}

00:04:07.070 --> 00:04:08.510
<v Speaker 0>And here's an example.

NOTE CONF {"raw":[100,100,100,100]}

00:04:08.510 --> 00:04:08.780
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:04:08.780 --> 00:04:12.380
<v Speaker 0>So this, this uh, declaration you've seen before.

NOTE CONF {"raw":[100,100,100,69,100,100,100,100]}

00:04:12.710 --> 00:04:13.460
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:04:13.460 --> 00:04:17.299
<v Speaker 0>This is, this is, uh, how you represent binary trees

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:17.299 --> 00:04:21.950
<v Speaker 0>in Haskell and, um, you know, with, uh, two kinds,

NOTE CONF {"raw":[82,100,100,100,100,100,100,100,100,100]}

00:04:21.950 --> 00:04:25.250
<v Speaker 0>two constructors, nil for the empty tree and node for

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:25.250 --> 00:04:29.420
<v Speaker 0>a tree that has a label, uh, and two subtrees.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,96,100]}

00:04:30.710 --> 00:04:31.220
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:04:31.220 --> 00:04:34.250
<v Speaker 0>And, um, here is an example of such a tree.

NOTE CONF {"raw":[100,99,98,98,100,100,100,100,100,100]}

00:04:34.250 --> 00:04:37.250
<v Speaker 0>And in this, in this some in this form here,

NOTE CONF {"raw":[100,100,100,100,100,57,100,100,100,100]}

00:04:37.250 --> 00:04:38.900
<v Speaker 0>this is how you'd write it in Haskell.

NOTE CONF {"raw":[100,100,100,68,100,100,100,100]}

00:04:39.170 --> 00:04:41.930
<v Speaker 0>Um, it's kind of hard to read.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:04:41.930 --> 00:04:45.680
<v Speaker 0>Here is the here is a picture of, of of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:45.680 --> 00:04:47.900
<v Speaker 0>what I've, uh, defined here.

NOTE CONF {"raw":[100,100,72,100,100]}

00:04:47.900 --> 00:04:48.290
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:04:48.290 --> 00:04:52.370
<v Speaker 0>So it's a node, uh, which has a label one.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:52.490 --> 00:04:53.630
<v Speaker 0>There it is.

NOTE CONF {"raw":[100,100,100]}

00:04:53.630 --> 00:04:55.700
<v Speaker 0>And then two subtrees.

NOTE CONF {"raw":[100,100,100,100]}

00:04:56.720 --> 00:04:57.890
<v Speaker 0>The left one.

NOTE CONF {"raw":[100,100,100]}

00:04:58.670 --> 00:05:01.370
<v Speaker 0>Uh, two at the top, four and five underneath.

NOTE CONF {"raw":[90,100,100,100,100,100,100,100,100]}

00:05:01.670 --> 00:05:05.030
<v Speaker 0>And the other one with uh, three at the top

NOTE CONF {"raw":[100,100,100,100,100,98,100,100,100,100]}

00:05:05.030 --> 00:05:06.650
<v Speaker 0>and left subtree.

NOTE CONF {"raw":[100,100,100]}

00:05:06.680 --> 00:05:07.040
<v Speaker 0>Six.

NOTE CONF {"raw":[100]}

00:05:07.040 --> 00:05:07.280
<v Speaker 0>Eight.

NOTE CONF {"raw":[100]}

00:05:07.280 --> 00:05:07.700
<v Speaker 0>Nine.

NOTE CONF {"raw":[100]}

00:05:07.700 --> 00:05:08.480
<v Speaker 0>That's here.

NOTE CONF {"raw":[100,100]}

00:05:08.480 --> 00:05:10.820
<v Speaker 0>And right subtree has just a seven.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:05:11.450 --> 00:05:12.200
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:05:15.680 --> 00:05:20.420
<v Speaker 0>So I'm going to be using these trees, as I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:20.420 --> 00:05:21.860
<v Speaker 0>said to represent a search space.

NOTE CONF {"raw":[100,100,100,80,100,100]}

00:05:21.860 --> 00:05:30.470
<v Speaker 0>And um, so think of the problem of uh, finding

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:30.470 --> 00:05:32.690
<v Speaker 0>a good move in a chess game or in a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:32.690 --> 00:05:38.300
<v Speaker 0>go game or, um, imagine that you want to find,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:38.300 --> 00:05:43.250
<v Speaker 0>uh, flight connections from here to somewhere far away, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,80]}

00:05:43.250 --> 00:05:44.540
<v Speaker 0>where there's no direct flight.

NOTE CONF {"raw":[100,100,100,100,100]}

00:05:44.540 --> 00:05:47.120
<v Speaker 0>And so you need to find, uh, a sequence of

NOTE CONF {"raw":[100,100,100,100,100,100,96,100,100,100]}

00:05:47.120 --> 00:05:48.530
<v Speaker 0>flights that will get you there.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:05:49.040 --> 00:05:52.370
<v Speaker 0>Okay, so the the the nodes in the in the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:52.370 --> 00:05:58.530
<v Speaker 0>tree Represent positions in chess or position in go or

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:58.530 --> 00:06:03.210
<v Speaker 0>airports in the, in this sort of aeroplane network search

NOTE CONF {"raw":[100,100,100,100,98,100,100,100,100,100]}

00:06:03.210 --> 00:06:03.930
<v Speaker 0>space.

NOTE CONF {"raw":[100]}

00:06:04.170 --> 00:06:04.890
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:06:05.250 --> 00:06:10.440
<v Speaker 0>Um, and the the, the game you're playing is getting

NOTE CONF {"raw":[100,100,100,97,98,100,100,100,100,100]}

00:06:10.440 --> 00:06:12.930
<v Speaker 0>from the root.

NOTE CONF {"raw":[100,100,79]}

00:06:13.470 --> 00:06:16.320
<v Speaker 0>So this, this this, this thing at the top of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:16.320 --> 00:06:16.590
<v Speaker 0>the tree.

NOTE CONF {"raw":[100,100]}

00:06:16.590 --> 00:06:21.030
<v Speaker 0>Remember, trees in computer science grow downwards instead of upwards.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:21.060 --> 00:06:21.570
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:06:21.570 --> 00:06:25.560
<v Speaker 0>So getting from the root via some sequence of of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:25.560 --> 00:06:30.270
<v Speaker 0>of moves or branches to a node.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:06:30.270 --> 00:06:32.220
<v Speaker 0>That's one that you're looking for.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:06:32.640 --> 00:06:33.030
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:06:33.030 --> 00:06:35.820
<v Speaker 0>So the problem is searching for a node that has

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:35.820 --> 00:06:36.900
<v Speaker 0>some property.

NOTE CONF {"raw":[100,100]}

00:06:36.990 --> 00:06:37.350
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:06:37.350 --> 00:06:40.710
<v Speaker 0>And I've simplified the problem as much as I can.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:40.710 --> 00:06:42.450
<v Speaker 0>We've got binary trees.

NOTE CONF {"raw":[100,100,100,100]}

00:06:42.900 --> 00:06:45.360
<v Speaker 0>Um meaning that from every node there's only two possible

NOTE CONF {"raw":[83,100,100,100,100,100,100,100,100,100]}

00:06:45.360 --> 00:06:46.050
<v Speaker 0>moves.

NOTE CONF {"raw":[100]}

00:06:47.100 --> 00:06:47.370
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:06:47.370 --> 00:06:51.060
<v Speaker 0>That's like an airport that only has two possible flights

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:51.240 --> 00:06:53.700
<v Speaker 0>or a chess game that only has two possible moves

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:53.700 --> 00:06:54.360
<v Speaker 0>from each position.

NOTE CONF {"raw":[100,100,100]}

00:06:54.360 --> 00:06:57.180
<v Speaker 0>Of course, that's not the way it is, but it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:57.180 --> 00:07:00.540
<v Speaker 0>keeps things simple to just consider that case, okay?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:07:00.540 --> 00:07:03.240
<v Speaker 0>And at the at the at the labels, instead of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:03.240 --> 00:07:07.260
<v Speaker 0>having complicated things like names of airports or chess positions,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:07.260 --> 00:07:10.530
<v Speaker 0>I'm just using integers because that's going to be good

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:10.530 --> 00:07:12.120
<v Speaker 0>enough for the examples I'm going to do.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:07:12.120 --> 00:07:15.870
<v Speaker 0>Okay, but you could imagine these trees being, you know,

NOTE CONF {"raw":[100,100,100,80,100,100,100,100,100,100]}

00:07:15.870 --> 00:07:20.250
<v Speaker 0>more than binary and um, and with more information at

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,98]}

00:07:20.250 --> 00:07:20.940
<v Speaker 0>the nodes.

NOTE CONF {"raw":[100,100]}

00:07:22.470 --> 00:07:22.800
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:07:22.800 --> 00:07:24.780
<v Speaker 0>So you've got the sort of situation that I'm, that

NOTE CONF {"raw":[100,100,100,99,100,100,100,100,100,100]}

00:07:24.780 --> 00:07:26.250
<v Speaker 0>I'm talking about here, right.

NOTE CONF {"raw":[100,100,100,100,100]}

00:07:30.240 --> 00:07:30.630
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:07:30.630 --> 00:07:33.300
<v Speaker 0>And we're, and we're looking, we're looking for a node

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:33.300 --> 00:07:35.190
<v Speaker 0>that has a particular property.

NOTE CONF {"raw":[100,100,100,100,100]}

00:07:36.360 --> 00:07:38.550
<v Speaker 0>And so this is a, this is a, this is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:38.550 --> 00:07:40.020
<v Speaker 0>a tree, an example of a tree.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:07:40.410 --> 00:07:42.720
<v Speaker 0>And we can also have infinite trees.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:07:43.590 --> 00:07:46.260
<v Speaker 0>And here is an example of an infinite tree.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:07:46.260 --> 00:07:48.750
<v Speaker 0>You can define it like this in Haskell.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:07:48.750 --> 00:07:52.210
<v Speaker 0>And um the, the numbers in this tree.

NOTE CONF {"raw":[100,75,100,100,100,100,100,100]}

00:07:52.540 --> 00:07:56.530
<v Speaker 0>I've defined them this way, because that happens to be

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:56.530 --> 00:07:58.810
<v Speaker 0>useful for examples that I'm going to be showing you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:58.810 --> 00:07:59.440
<v Speaker 0>later.

NOTE CONF {"raw":[100]}

00:07:59.440 --> 00:07:59.920
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:07:59.920 --> 00:08:02.470
<v Speaker 0>But of course you can define trees with other numbers

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:02.470 --> 00:08:03.280
<v Speaker 0>in them okay.

NOTE CONF {"raw":[100,100,97]}

00:08:03.580 --> 00:08:05.860
<v Speaker 0>The code here is not particularly interesting.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:08:05.860 --> 00:08:08.650
<v Speaker 0>So I'm going to be kind of skipping through it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:08.650 --> 00:08:09.550
<v Speaker 0>pretty quickly.

NOTE CONF {"raw":[100,100]}

00:08:09.550 --> 00:08:09.820
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:08:09.820 --> 00:08:12.790
<v Speaker 0>But here is the picture that you'd get from from

NOTE CONF {"raw":[100,75,75,100,100,100,76,100,100,100]}

00:08:12.790 --> 00:08:14.260
<v Speaker 0>this definition okay.

NOTE CONF {"raw":[100,100,100]}

00:08:14.260 --> 00:08:16.840
<v Speaker 0>So it's a it's a binary tree with numbers at

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:16.840 --> 00:08:17.410
<v Speaker 0>the nodes.

NOTE CONF {"raw":[100,100]}

00:08:17.410 --> 00:08:20.110
<v Speaker 0>And if you go down if you go down here

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:20.110 --> 00:08:21.100
<v Speaker 0>you get negative numbers.

NOTE CONF {"raw":[95,100,100,100]}

00:08:21.100 --> 00:08:22.720
<v Speaker 0>If you go down here you get positive numbers.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:08:22.720 --> 00:08:26.110
<v Speaker 0>And there's mixtures in between here okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:08:26.320 --> 00:08:26.860
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:08:26.860 --> 00:08:29.920
<v Speaker 0>So finite trees and infinite trees.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:08:33.010 --> 00:08:33.610
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:08:33.610 --> 00:08:36.310
<v Speaker 0>So I have a tree and I want to find

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:36.310 --> 00:08:40.270
<v Speaker 0>a node that satisfies a given property okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:08:40.270 --> 00:08:42.430
<v Speaker 0>And the property I'm going to express as a as

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:42.430 --> 00:08:42.940
<v Speaker 0>a predicate.

NOTE CONF {"raw":[100,100]}

00:08:42.940 --> 00:08:47.350
<v Speaker 0>So it's a function from node labels to boolean okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:47.350 --> 00:08:50.230
<v Speaker 0>If a if I find a node label that satisfies

NOTE CONF {"raw":[100,100,100,100,97,100,100,100,100,100]}

00:08:50.230 --> 00:08:50.650
<v Speaker 0>the property.

NOTE CONF {"raw":[100,100]}

00:08:50.650 --> 00:08:54.820
<v Speaker 0>It means that, um, that applying that predicate to the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:54.820 --> 00:08:57.880
<v Speaker 0>node label gives me true, otherwise it gives me false.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:58.750 --> 00:09:00.340
<v Speaker 0>So this is the problem I've got I've got a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:00.340 --> 00:09:01.960
<v Speaker 0>tree and I've got a property.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:09:01.960 --> 00:09:04.360
<v Speaker 0>And I want to find a node, label a node,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:04.360 --> 00:09:06.580
<v Speaker 0>a node that satisfies that, that property.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:09:06.580 --> 00:09:08.350
<v Speaker 0>So um.

NOTE CONF {"raw":[100,100]}

00:09:12.100 --> 00:09:14.410
<v Speaker 0>Here is an example of doing a search.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:09:14.440 --> 00:09:16.030
<v Speaker 0>Uh this is called breadth first search.

NOTE CONF {"raw":[51,100,100,100,100,100,100]}

00:09:16.030 --> 00:09:18.490
<v Speaker 0>I'll explain why, but let's look at the type.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:09:18.820 --> 00:09:19.540
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:09:19.900 --> 00:09:20.800
<v Speaker 0>Um, okay.

NOTE CONF {"raw":[100,100]}

00:09:20.800 --> 00:09:24.100
<v Speaker 0>Well it requires equality because I happen to be using

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:24.100 --> 00:09:24.820
<v Speaker 0>equality here.

NOTE CONF {"raw":[100,100]}

00:09:24.820 --> 00:09:26.830
<v Speaker 0>I could have written it without equality, but then it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:26.830 --> 00:09:27.760
<v Speaker 0>would be a bit longer.

NOTE CONF {"raw":[100,100,100,100,100]}

00:09:27.760 --> 00:09:30.730
<v Speaker 0>So, um, the important part of the type is, is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,82,100]}

00:09:30.730 --> 00:09:31.390
<v Speaker 0>this bit.

NOTE CONF {"raw":[100,100]}

00:09:31.840 --> 00:09:34.450
<v Speaker 0>Okay, I supply a predicate.

NOTE CONF {"raw":[100,100,100,100,100]}

00:09:34.450 --> 00:09:37.510
<v Speaker 0>So this is the thing which is, um, uh, telling

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:37.510 --> 00:09:39.100
<v Speaker 0>what is I'm looking for.

NOTE CONF {"raw":[100,100,100,100,100]}

00:09:39.100 --> 00:09:39.460
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:09:39.460 --> 00:09:43.900
<v Speaker 0>The property that I'm looking for, uh, the second argument

NOTE CONF {"raw":[100,100,100,100,100,100,98,100,100,100]}

00:09:43.900 --> 00:09:46.210
<v Speaker 0>is the tree that I'm looking forward in.

NOTE CONF {"raw":[100,100,100,100,100,100,56,100]}

00:09:47.740 --> 00:09:49.090
<v Speaker 0>And then the result.

NOTE CONF {"raw":[100,100,100,100]}

00:09:51.250 --> 00:09:51.970
<v Speaker 0>Remember this type?

NOTE CONF {"raw":[100,100,100]}

00:09:51.970 --> 00:09:52.720
<v Speaker 0>Maybe.

NOTE CONF {"raw":[100]}

00:09:53.200 --> 00:09:53.590
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:09:53.590 --> 00:09:55.390
<v Speaker 0>This was the the type.

NOTE CONF {"raw":[100,100,100,100,100]}

00:09:55.390 --> 00:09:57.970
<v Speaker 0>It's a it's a algebraic data type built into Haskell

NOTE CONF {"raw":[100,100,100,79,100,100,100,100,99,100]}

00:09:57.970 --> 00:10:03.190
<v Speaker 0>used to represent, um, uh, values that may or may

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:03.190 --> 00:10:04.360
<v Speaker 0>not be present.

NOTE CONF {"raw":[100,100,100]}

00:10:04.420 --> 00:10:05.140
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:10:05.140 --> 00:10:09.100
<v Speaker 0>I used it for, um, optional arguments of functions and

NOTE CONF {"raw":[100,98,100,100,84,100,100,100,100,100]}

00:10:09.100 --> 00:10:11.410
<v Speaker 0>optional results of functions or.

NOTE CONF {"raw":[100,100,100,100,72]}

00:10:11.590 --> 00:10:11.920
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:10:11.920 --> 00:10:12.160
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:10:12.160 --> 00:10:15.880
<v Speaker 0>And so the idea is that, um, this, this search,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:15.880 --> 00:10:18.790
<v Speaker 0>it might be that there is no label that, that,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:18.790 --> 00:10:21.190
<v Speaker 0>that has that property, okay.

NOTE CONF {"raw":[100,100,100,100,100]}

00:10:21.190 --> 00:10:25.240
<v Speaker 0>In which case we can't return one.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:10:25.660 --> 00:10:28.090
<v Speaker 0>And so we return the result.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:10:28.330 --> 00:10:29.080
<v Speaker 0>Um, nothing.

NOTE CONF {"raw":[100,100]}

00:10:29.080 --> 00:10:32.860
<v Speaker 0>Here's the, here's the, the the result if you get

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:32.860 --> 00:10:34.900
<v Speaker 0>if you if you search fails.

NOTE CONF {"raw":[100,100,100,76,100,100]}

00:10:34.900 --> 00:10:35.500
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:10:36.190 --> 00:10:40.660
<v Speaker 0>Um, if you find one then you return it.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:10:41.230 --> 00:10:44.440
<v Speaker 0>But you have to wrap it up with a constructor

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:44.440 --> 00:10:45.670
<v Speaker 0>called just.

NOTE CONF {"raw":[100,100]}

00:10:45.670 --> 00:10:46.060
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:10:46.060 --> 00:10:50.570
<v Speaker 0>So here is, uh, kind of returning a successful, uh,

NOTE CONF {"raw":[100,100,100,98,100,100,100,100,100,92]}

00:10:50.570 --> 00:10:52.370
<v Speaker 0>result of a successful search.

NOTE CONF {"raw":[100,100,100,100,100]}

00:10:52.400 --> 00:10:55.790
<v Speaker 0>Okay, so, um, just in case you've forgotten, that's what

NOTE CONF {"raw":[94,99,61,100,100,100,65,100,100,100]}

00:10:55.790 --> 00:10:57.200
<v Speaker 0>this type here is for.

NOTE CONF {"raw":[100,100,100,100,100]}

00:10:57.200 --> 00:11:00.380
<v Speaker 0>For optional in this case, optional results.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:11:00.380 --> 00:11:00.710
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:11:00.710 --> 00:11:02.810
<v Speaker 0>Results that may or may not.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:11:02.810 --> 00:11:04.700
<v Speaker 0>You may or may not have a result.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:11:06.050 --> 00:11:06.590
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:11:07.610 --> 00:11:08.000
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:11:12.500 --> 00:11:14.630
<v Speaker 0>Okay, so this is code which, uh, which does a

NOTE CONF {"raw":[100,100,100,100,100,100,84,100,100,100]}

00:11:14.630 --> 00:11:15.320
<v Speaker 0>search.

NOTE CONF {"raw":[100]}

00:11:15.620 --> 00:11:17.750
<v Speaker 0>Um, it looks at a node.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:11:18.410 --> 00:11:18.770
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:11:18.770 --> 00:11:23.420
<v Speaker 0>If, if there's nothing in the tree, um, then, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,66]}

00:11:23.420 --> 00:11:25.700
<v Speaker 0>then I return nothing because there is nothing that I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:25.700 --> 00:11:26.570
<v Speaker 0>can return.

NOTE CONF {"raw":[100,100]}

00:11:26.840 --> 00:11:27.470
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:11:27.470 --> 00:11:29.540
<v Speaker 0>And if I've got a node, I look to see

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:29.540 --> 00:11:33.620
<v Speaker 0>whether that property that I'm looking for is, uh, satisfied

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,63,100]}

00:11:33.620 --> 00:11:34.490
<v Speaker 0>for this node.

NOTE CONF {"raw":[100,100,100]}

00:11:34.850 --> 00:11:38.150
<v Speaker 0>If it is, then I return it as the answer.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:39.830 --> 00:11:44.240
<v Speaker 0>Otherwise I looked in the left subtree.

NOTE CONF {"raw":[100,100,80,100,100,100,100]}

00:11:46.040 --> 00:11:48.350
<v Speaker 0>If it's not, if I don't find anything there.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:11:48.350 --> 00:11:50.570
<v Speaker 0>This is the failure of the of the search.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:11:50.570 --> 00:11:53.000
<v Speaker 0>Then I look in the right subtree.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:11:53.960 --> 00:11:58.160
<v Speaker 0>Um, if, however, the result of looking in the left

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:58.160 --> 00:12:00.890
<v Speaker 0>subtree gives me a result, then I return it.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:12:00.890 --> 00:12:04.790
<v Speaker 0>Okay, so, um, uh, that's this is just a repetition

NOTE CONF {"raw":[100,100,100,97,100,100,100,100,100,100]}

00:12:04.790 --> 00:12:05.720
<v Speaker 0>of of this.

NOTE CONF {"raw":[100,100,100]}

00:12:05.720 --> 00:12:06.410
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:12:07.280 --> 00:12:09.920
<v Speaker 0>Um, so the code is not that important here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:12:09.980 --> 00:12:15.440
<v Speaker 0>Um, what's important is, uh, the search, the kind of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:15.440 --> 00:12:16.370
<v Speaker 0>search that I'm doing.

NOTE CONF {"raw":[100,100,100,100]}

00:12:16.370 --> 00:12:17.690
<v Speaker 0>This is called depth.

NOTE CONF {"raw":[100,100,100,100]}

00:12:17.690 --> 00:12:21.200
<v Speaker 0>First search and let me draw some pictures.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:12:24.290 --> 00:12:28.730
<v Speaker 0>It's called depth first search, because the order in which

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:28.730 --> 00:12:33.440
<v Speaker 0>it looks through the tree to find, um, to find.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:35.690 --> 00:12:40.250
<v Speaker 0>Uh, a label, uh, that it's that is looking for.

NOTE CONF {"raw":[100,100,100,96,100,100,100,100,100,100]}

00:12:40.250 --> 00:12:43.490
<v Speaker 0>So let me go back to my tree.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:12:46.080 --> 00:12:47.220
<v Speaker 0>And draw a picture.

NOTE CONF {"raw":[100,100,92,100]}

00:12:50.010 --> 00:12:53.010
<v Speaker 0>Okay, so you you you may or may not remember

NOTE CONF {"raw":[100,100,99,94,100,100,100,100,100,100]}

00:12:53.010 --> 00:12:54.780
<v Speaker 0>my tree, but it looked like this.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:12:56.040 --> 00:12:56.370
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:13:06.630 --> 00:13:07.950
<v Speaker 0>You see that in the back, I hope.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:13:08.100 --> 00:13:08.460
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:13:18.960 --> 00:13:20.850
<v Speaker 0>By the way, I just.

NOTE CONF {"raw":[100,100,100,100,100]}

00:13:20.850 --> 00:13:22.920
<v Speaker 0>I'll just go back to the definition of that tree.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:23.580 --> 00:13:24.720
<v Speaker 0>That was this one.

NOTE CONF {"raw":[100,100,100,100]}

00:13:25.110 --> 00:13:25.890
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:13:26.040 --> 00:13:26.430
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:13:28.530 --> 00:13:32.520
<v Speaker 0>Actually, um, if I look at a node like this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:32.520 --> 00:13:36.120
<v Speaker 0>one, I'm drawing it like this, but really, it looks

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:36.120 --> 00:13:36.990
<v Speaker 0>like this.

NOTE CONF {"raw":[100,100]}

00:13:40.140 --> 00:13:42.870
<v Speaker 0>Okay, all of these, all of these kind of end

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:44.130 --> 00:13:44.790
<v Speaker 0>Nodes.

NOTE CONF {"raw":[100]}

00:13:44.790 --> 00:13:45.180
<v Speaker 0>Really?

NOTE CONF {"raw":[100]}

00:13:45.180 --> 00:13:51.270
<v Speaker 0>I should draw in the empty, uh, the empty nodes

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:51.270 --> 00:13:52.170
<v Speaker 0>underneath them.

NOTE CONF {"raw":[100,100]}

00:13:52.950 --> 00:13:54.750
<v Speaker 0>Uh, okay.

NOTE CONF {"raw":[100,100]}

00:13:54.750 --> 00:13:56.460
<v Speaker 0>They don't, but they don't play any role in what

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:56.460 --> 00:13:57.300
<v Speaker 0>I'm going to say.

NOTE CONF {"raw":[100,100,100,100]}

00:13:57.960 --> 00:13:58.560
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:13:59.730 --> 00:14:00.630
<v Speaker 0>So.

NOTE CONF {"raw":[100]}

00:14:02.880 --> 00:14:04.200
<v Speaker 0>Depth first search.

NOTE CONF {"raw":[100,100,100]}

00:14:08.910 --> 00:14:12.240
<v Speaker 0>What this means, what depth first search means is that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:12.240 --> 00:14:16.410
<v Speaker 0>when we're looking for, um, uh, a node satisfying a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,95]}

00:14:16.410 --> 00:14:18.840
<v Speaker 0>property, we're starting at the top.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:14:19.590 --> 00:14:20.280
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:14:21.180 --> 00:14:22.800
<v Speaker 0>So we're looking at that node.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:14:23.340 --> 00:14:25.380
<v Speaker 0>Does it satisfy the property?

NOTE CONF {"raw":[100,100,100,100,100]}

00:14:25.800 --> 00:14:28.410
<v Speaker 0>Um, so if the answer is no, then with depth

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:28.410 --> 00:14:32.820
<v Speaker 0>first search we always go down and to the left

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:33.840 --> 00:14:36.600
<v Speaker 0>to um to, to to look for the next thing

NOTE CONF {"raw":[100,82,100,100,100,100,100,100,100,100]}

00:14:36.600 --> 00:14:37.890
<v Speaker 0>that we're going to be examining.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:14:37.890 --> 00:14:38.160
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:14:38.160 --> 00:14:39.360
<v Speaker 0>So we go this way.

NOTE CONF {"raw":[100,100,100,100,100]}

00:14:42.090 --> 00:14:44.080
<v Speaker 0>Um, and then we look at that one.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:14:44.560 --> 00:14:48.190
<v Speaker 0>And then if that one doesn't satisfy the property, then

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:48.190 --> 00:14:49.810
<v Speaker 0>we go down into the left.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:14:52.090 --> 00:14:52.900
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:14:53.290 --> 00:14:54.610
<v Speaker 0>And so forth.

NOTE CONF {"raw":[100,100,100]}

00:14:54.970 --> 00:14:55.600
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:14:55.600 --> 00:14:57.370
<v Speaker 0>So here we've come to the end.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:14:57.940 --> 00:15:00.220
<v Speaker 0>We can't go down into the left anymore.

NOTE CONF {"raw":[100,100,100,100,100,100,100,89]}

00:15:00.220 --> 00:15:02.110
<v Speaker 0>So depth first search.

NOTE CONF {"raw":[100,100,100,100]}

00:15:02.110 --> 00:15:05.950
<v Speaker 0>When we're in that situation we we backtrack and go

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:05.950 --> 00:15:06.790
<v Speaker 0>to the right.

NOTE CONF {"raw":[100,100,100]}

00:15:09.340 --> 00:15:09.670
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:15:09.670 --> 00:15:10.990
<v Speaker 0>Look at this one next.

NOTE CONF {"raw":[100,100,100,100,100]}

00:15:13.330 --> 00:15:16.960
<v Speaker 0>If that doesn't satisfy the property then we backtrack.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:15:17.230 --> 00:15:19.690
<v Speaker 0>In this case we have to backtrack two levels and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:19.690 --> 00:15:22.450
<v Speaker 0>go to the right and look at that one.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:15:23.770 --> 00:15:24.550
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:15:24.550 --> 00:15:27.010
<v Speaker 0>And if that doesn't satisfy the property we go down

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:27.010 --> 00:15:30.370
<v Speaker 0>into the left down into the left and so forth.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:30.370 --> 00:15:30.640
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:15:30.640 --> 00:15:33.670
<v Speaker 0>So the general rule is we're going down to the

NOTE CONF {"raw":[100,100,100,100,100,87,100,100,100,100]}

00:15:33.670 --> 00:15:36.040
<v Speaker 0>left unless it's not possible to do anything else.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:15:36.040 --> 00:15:37.060
<v Speaker 0>You've got a question.

NOTE CONF {"raw":[100,100,100,100]}

00:15:37.990 --> 00:15:39.490
<v Speaker 0>That's the order of the cards.

NOTE CONF {"raw":[32,83,83,84,83,29]}

00:15:41.590 --> 00:15:42.220
<v Speaker 0>Does the order.

NOTE CONF {"raw":[100,64,100]}

00:15:42.310 --> 00:15:45.520
<v Speaker 0>Okay, I'll just repeat that rather than, um, uh, throwing

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:45.520 --> 00:15:46.240
<v Speaker 0>you the cube.

NOTE CONF {"raw":[100,100,100]}

00:15:46.270 --> 00:15:47.860
<v Speaker 0>The order of the guards.

NOTE CONF {"raw":[100,100,100,100,100]}

00:15:48.040 --> 00:15:49.390
<v Speaker 0>Um, does it affect that?

NOTE CONF {"raw":[92,93,93,100,100]}

00:15:49.390 --> 00:15:51.340
<v Speaker 0>Well, this is the test to see whether the place

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:51.340 --> 00:15:53.560
<v Speaker 0>I'm at is the is the right place.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:15:53.560 --> 00:15:58.660
<v Speaker 0>The, um, the fact that I'm doing depth first search

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:58.660 --> 00:16:01.000
<v Speaker 0>or I'm, I'm pointing at the screen here, you can't

NOTE CONF {"raw":[36,62,100,100,100,100,100,100,100,71]}

00:16:01.000 --> 00:16:03.850
<v Speaker 0>see that the fact that I'm doing, um, depth.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:16:03.850 --> 00:16:08.020
<v Speaker 0>First search p of t one here, it's the t

NOTE CONF {"raw":[100,100,100,100,88,88,100,100,100,85]}

00:16:08.020 --> 00:16:11.800
<v Speaker 0>the fact that it's t one that is, is saying

NOTE CONF {"raw":[100,100,100,100,92,92,99,73,100,100]}

00:16:11.800 --> 00:16:13.030
<v Speaker 0>down into the left.

NOTE CONF {"raw":[100,100,100,100]}

00:16:13.570 --> 00:16:14.200
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:16:15.190 --> 00:16:17.560
<v Speaker 0>Because t one is the left subtree.

NOTE CONF {"raw":[100,97,97,100,100,100,100]}

00:16:17.950 --> 00:16:20.020
<v Speaker 0>And we're looking at we're going to be looking at

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:20.020 --> 00:16:22.150
<v Speaker 0>the top node of the left subtree.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:16:23.140 --> 00:16:29.080
<v Speaker 0>And the backtracking part is is is here okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:16:29.080 --> 00:16:31.840
<v Speaker 0>If I, if I have if I go down into

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:31.840 --> 00:16:34.270
<v Speaker 0>the left and I don't find a solution, then I

NOTE CONF {"raw":[100,100,90,100,100,100,100,100,100,100]}

00:16:34.270 --> 00:16:36.880
<v Speaker 0>go, um, then I look, only then do I look

NOTE CONF {"raw":[100,95,100,100,100,100,100,100,100,100]}

00:16:36.880 --> 00:16:37.600
<v Speaker 0>on the right.

NOTE CONF {"raw":[100,100,100]}

00:16:38.410 --> 00:16:38.800
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:16:38.800 --> 00:16:42.080
<v Speaker 0>And so that's, that's effectively the backtracking happening there.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:16:42.080 --> 00:16:43.700
<v Speaker 0>I'm going to show you a different version of this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:43.700 --> 00:16:47.240
<v Speaker 0>in a minute, which might possibly be clearer.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:16:47.240 --> 00:16:48.050
<v Speaker 0>I'm not sure.

NOTE CONF {"raw":[100,100,100]}

00:16:48.260 --> 00:16:48.860
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:16:48.860 --> 00:16:51.800
<v Speaker 0>But the point of depth research is, is the order

NOTE CONF {"raw":[100,100,100,100,100,67,100,100,100,100]}

00:16:51.800 --> 00:16:53.330
<v Speaker 0>in which it visits the nodes.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:16:53.330 --> 00:16:53.990
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:16:54.920 --> 00:16:56.180
<v Speaker 0>So, um.

NOTE CONF {"raw":[100,100]}

00:17:02.150 --> 00:17:05.689
<v Speaker 0>Uh, so suppose that I'm looking for, um, here's here's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:05.689 --> 00:17:06.500
<v Speaker 0>some pictures.

NOTE CONF {"raw":[100,100]}

00:17:06.500 --> 00:17:09.319
<v Speaker 0>Suppose that I'm looking for something that's greater than four.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,97]}

00:17:09.829 --> 00:17:10.610
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:17:10.610 --> 00:17:14.870
<v Speaker 0>Uh, going back to my diagram, it's shown here as

NOTE CONF {"raw":[91,100,100,100,100,100,100,100,100,100]}

00:17:14.870 --> 00:17:16.550
<v Speaker 0>well on the screen up there.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:17:16.550 --> 00:17:18.680
<v Speaker 0>But going back to my diagram, looking for something that's

NOTE CONF {"raw":[100,100,100,100,100,71,100,100,100,67]}

00:17:18.680 --> 00:17:19.760
<v Speaker 0>greater than four okay.

NOTE CONF {"raw":[100,100,98,100]}

00:17:19.760 --> 00:17:21.350
<v Speaker 0>One is is one greater than four.

NOTE CONF {"raw":[100,81,100,100,100,100,100]}

00:17:21.350 --> 00:17:22.010
<v Speaker 0>No.

NOTE CONF {"raw":[100]}

00:17:22.400 --> 00:17:24.470
<v Speaker 0>Go down here is two greater than four.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:17:24.470 --> 00:17:25.250
<v Speaker 0>No.

NOTE CONF {"raw":[100]}

00:17:25.640 --> 00:17:27.829
<v Speaker 0>Go down here is four greater than four.

NOTE CONF {"raw":[100,100,100,100,96,100,100,100]}

00:17:28.339 --> 00:17:33.020
<v Speaker 0>No it's equal to four okay I okay then I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:33.020 --> 00:17:36.110
<v Speaker 0>would actually go down here but there's nothing there okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:36.380 --> 00:17:38.990
<v Speaker 0>Uh, which is what, which is what causes the failure.

NOTE CONF {"raw":[56,100,100,100,100,100,100,100,100,100]}

00:17:38.990 --> 00:17:39.320
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:17:39.320 --> 00:17:40.400
<v Speaker 0>And then I go up here.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:17:40.400 --> 00:17:42.020
<v Speaker 0>Is five greater than four.

NOTE CONF {"raw":[100,100,100,100,99]}

00:17:42.320 --> 00:17:43.790
<v Speaker 0>Actually, first I would go there.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:17:43.790 --> 00:17:44.510
<v Speaker 0>Sorry.

NOTE CONF {"raw":[100]}

00:17:48.590 --> 00:17:51.890
<v Speaker 0>Those didn't produce any interesting results, which is why I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:51.890 --> 00:17:53.720
<v Speaker 0>sort of admit them in the previous picture.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:17:53.720 --> 00:17:54.230
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:17:54.230 --> 00:17:54.800
<v Speaker 0>After.

NOTE CONF {"raw":[100]}

00:17:54.830 --> 00:17:55.790
<v Speaker 0>After here.

NOTE CONF {"raw":[100,100]}

00:17:56.000 --> 00:17:57.770
<v Speaker 0>Um, so is five greater than four?

NOTE CONF {"raw":[56,100,100,100,100,100,100]}

00:17:57.770 --> 00:17:58.250
<v Speaker 0>Yes it is.

NOTE CONF {"raw":[100,100,100]}

00:17:58.250 --> 00:17:59.270
<v Speaker 0>That's the answer.

NOTE CONF {"raw":[100,100,100]}

00:18:00.200 --> 00:18:00.830
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:18:02.510 --> 00:18:04.760
<v Speaker 0>Um, if I was looking for something that was equal

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:04.760 --> 00:18:07.310
<v Speaker 0>to six, then I would go here and there and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:07.310 --> 00:18:08.810
<v Speaker 0>there and there and then find it here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:18:09.800 --> 00:18:10.430
<v Speaker 0>All right.

NOTE CONF {"raw":[100,100]}

00:18:11.930 --> 00:18:13.310
<v Speaker 0>So, um.

NOTE CONF {"raw":[100,100]}

00:18:18.830 --> 00:18:19.670
<v Speaker 0>So that's depth.

NOTE CONF {"raw":[100,100,100]}

00:18:19.670 --> 00:18:23.780
<v Speaker 0>First search, um, and you can express it in a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:23.780 --> 00:18:24.620
<v Speaker 0>different way.

NOTE CONF {"raw":[100,100]}

00:18:24.800 --> 00:18:29.120
<v Speaker 0>So the, the what I was doing here, I previously

NOTE CONF {"raw":[100,98,100,100,100,100,100,100,100,100]}

00:18:29.120 --> 00:18:32.600
<v Speaker 0>spoken about traversals and how you can traverse a tree,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:32.600 --> 00:18:34.790
<v Speaker 0>meaning you're visiting all the nodes in the tree.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:18:34.910 --> 00:18:37.700
<v Speaker 0>And there are different kinds of traversals.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:18:37.700 --> 00:18:40.130
<v Speaker 0>And what distinguishes them is the order in which you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:40.130 --> 00:18:40.970
<v Speaker 0>visit the nodes.

NOTE CONF {"raw":[100,100,100]}

00:18:40.970 --> 00:18:43.640
<v Speaker 0>So this is a depth first traversal that I'm doing

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:43.940 --> 00:18:44.690
<v Speaker 0>okay.

NOTE CONF {"raw":[85]}

00:18:45.950 --> 00:18:46.220
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:18:46.220 --> 00:18:48.980
<v Speaker 0>This order and so forth.

NOTE CONF {"raw":[100,100,100,100,100]}

00:18:49.880 --> 00:18:53.420
<v Speaker 0>And I can actually express this depth first search in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:53.420 --> 00:18:55.880
<v Speaker 0>terms of a depth first traversal.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:18:55.880 --> 00:18:59.240
<v Speaker 0>So that's the code that I have at the bottom

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:59.240 --> 00:18:59.810
<v Speaker 0>here.

NOTE CONF {"raw":[100]}

00:19:00.350 --> 00:19:01.070
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:19:01.580 --> 00:19:04.010
<v Speaker 0>So it's exactly the same result.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:19:04.010 --> 00:19:07.340
<v Speaker 0>But I'm doing it this way because the other searches

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:07.340 --> 00:19:09.980
<v Speaker 0>I'm going to be showing you, I'll express them.

NOTE CONF {"raw":[100,100,100,100,100,100,97,100,100]}

00:19:09.980 --> 00:19:12.710
<v Speaker 0>I mean the key is going to be the traversal

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:12.710 --> 00:19:15.110
<v Speaker 0>and the order in which the traversal does its work.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:15.110 --> 00:19:19.400
<v Speaker 0>And the and the actual search algorithm is then the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:19.400 --> 00:19:22.070
<v Speaker 0>only difference is going to be, uh, what kind of

NOTE CONF {"raw":[100,100,100,100,100,100,58,100,100,100]}

00:19:22.070 --> 00:19:23.150
<v Speaker 0>traversal it uses.

NOTE CONF {"raw":[100,100,100]}

00:19:23.150 --> 00:19:26.450
<v Speaker 0>So this is using a depth first traversal okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:19:26.450 --> 00:19:27.980
<v Speaker 0>And depth first traversal.

NOTE CONF {"raw":[100,100,100,100]}

00:19:29.030 --> 00:19:33.980
<v Speaker 0>It says, um, you know, uh, at every node I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:33.980 --> 00:19:35.810
<v Speaker 0>look at the node label and then I look at

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:35.810 --> 00:19:39.360
<v Speaker 0>the left subtree And then I look at the right

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:39.390 --> 00:19:40.170
<v Speaker 0>subtree.

NOTE CONF {"raw":[100]}

00:19:40.170 --> 00:19:42.390
<v Speaker 0>And of course looking at the left subtree means I'm

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:42.390 --> 00:19:45.750
<v Speaker 0>looking at everything in the left subtree starting from the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:45.750 --> 00:19:47.400
<v Speaker 0>node at the top of the left subtree, and then

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:47.400 --> 00:19:52.320
<v Speaker 0>its left sub subtree, and then its right sub subtree,

NOTE CONF {"raw":[97,100,91,100,100,100,100,100,100,100]}

00:19:52.320 --> 00:19:52.920
<v Speaker 0>and so forth.

NOTE CONF {"raw":[100,100,100]}

00:19:52.920 --> 00:19:56.040
<v Speaker 0>Okay, so this this gives me the I think I

NOTE CONF {"raw":[99,100,100,100,100,100,100,100,100,100]}

00:19:56.040 --> 00:19:56.580
<v Speaker 0>have a.

NOTE CONF {"raw":[100,100]}

00:19:59.430 --> 00:19:59.880
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:19:59.880 --> 00:20:04.860
<v Speaker 0>The traversal there traversal of this tree gives me the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:04.860 --> 00:20:09.450
<v Speaker 0>nodes in the order of 124536897.

NOTE CONF {"raw":[100,100,100,100,54,100]}

00:20:12.120 --> 00:20:14.010
<v Speaker 0>Which is what you get if you, if you work

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:14.010 --> 00:20:15.450
<v Speaker 0>this all out okay.

NOTE CONF {"raw":[100,100,100,100]}

00:20:18.930 --> 00:20:21.690
<v Speaker 0>And then, and then doing the and then doing the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:21.690 --> 00:20:22.320
<v Speaker 0>search.

NOTE CONF {"raw":[100]}

00:20:22.320 --> 00:20:24.810
<v Speaker 0>This is the depth first search in terms of this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:24.810 --> 00:20:25.710
<v Speaker 0>traversal.

NOTE CONF {"raw":[100]}

00:20:26.040 --> 00:20:28.770
<v Speaker 0>So what it does it's it's very simple.

NOTE CONF {"raw":[100,100,100,100,80,100,100,100]}

00:20:28.770 --> 00:20:36.390
<v Speaker 0>It it has a comprehension here which Which takes the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:36.390 --> 00:20:41.250
<v Speaker 0>depth first traversal for every x drawn from that from

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:41.250 --> 00:20:42.060
<v Speaker 0>that list.

NOTE CONF {"raw":[100,100]}

00:20:42.510 --> 00:20:46.140
<v Speaker 0>It checks to see whether um P holds or not.

NOTE CONF {"raw":[100,100,100,100,100,94,96,100,100,100]}

00:20:46.500 --> 00:20:47.790
<v Speaker 0>Okay, so that's a guard.

NOTE CONF {"raw":[100,100,100,100,100]}

00:20:47.880 --> 00:20:50.850
<v Speaker 0>So you get you get a list of all of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:50.850 --> 00:20:55.260
<v Speaker 0>the of all of the, um, nodes that satisfy the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:55.260 --> 00:20:56.100
<v Speaker 0>predicate.

NOTE CONF {"raw":[94]}

00:20:56.940 --> 00:20:59.700
<v Speaker 0>Uh, with just wrapped around them because the result is

NOTE CONF {"raw":[97,100,100,100,100,100,100,100,100,100]}

00:20:59.700 --> 00:21:02.220
<v Speaker 0>maybe is maybe a here.

NOTE CONF {"raw":[100,100,100,100,96]}

00:21:02.400 --> 00:21:03.150
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:21:03.150 --> 00:21:06.180
<v Speaker 0>And the result is the first one of those.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:21:06.840 --> 00:21:09.780
<v Speaker 0>Except if this is if this list is empty, then

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:09.780 --> 00:21:10.830
<v Speaker 0>the result is nothing.

NOTE CONF {"raw":[100,100,100,100]}

00:21:10.830 --> 00:21:12.480
<v Speaker 0>Meaning you didn't find anything.

NOTE CONF {"raw":[100,100,100,100,100]}

00:21:14.070 --> 00:21:18.210
<v Speaker 0>Okay, I'm going kind of quickly through the code because

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:18.210 --> 00:21:19.740
<v Speaker 0>the code is not the main point.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:21:20.130 --> 00:21:20.880
<v Speaker 0>All right.

NOTE CONF {"raw":[100,100]}

00:21:21.270 --> 00:21:24.240
<v Speaker 0>Um, and so you get the same result.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:21:26.550 --> 00:21:29.310
<v Speaker 0>Um, you get the same result.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:21:29.730 --> 00:21:34.590
<v Speaker 0>And, uh, because of lazy evaluation, uh, it means you

NOTE CONF {"raw":[100,61,100,100,100,100,100,98,100,100]}

00:21:34.600 --> 00:21:39.130
<v Speaker 0>actually don't have to compute this entire list here in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:39.130 --> 00:21:40.000
<v Speaker 0>order to.

NOTE CONF {"raw":[100,100]}

00:21:40.120 --> 00:21:42.850
<v Speaker 0>In order to get the head you, you compute long

NOTE CONF {"raw":[100,100,100,100,100,100,97,100,100,100]}

00:21:42.850 --> 00:21:46.330
<v Speaker 0>enough until you have at least one element, and then

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:46.600 --> 00:21:48.760
<v Speaker 0>and then you produce the head and you're finished.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:21:49.660 --> 00:21:51.490
<v Speaker 0>Uh, you might have to produce you might have to

NOTE CONF {"raw":[90,100,100,100,100,100,100,100,100,100]}

00:21:51.490 --> 00:21:53.860
<v Speaker 0>compute the whole list if the list is.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:21:53.860 --> 00:21:54.520
<v Speaker 0>Wait a minute.

NOTE CONF {"raw":[100,100,100]}

00:21:54.820 --> 00:21:55.150
<v Speaker 0>Uh.

NOTE CONF {"raw":[100]}

00:21:58.210 --> 00:22:00.190
<v Speaker 0>If that list is empty, you have to compute the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:00.190 --> 00:22:01.900
<v Speaker 0>whole thing to find out that it's empty.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:22:01.900 --> 00:22:03.460
<v Speaker 0>And then the result is nothing.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:22:03.460 --> 00:22:06.910
<v Speaker 0>So that corresponds to doing the entire going through the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:06.910 --> 00:22:07.840
<v Speaker 0>entire tree.

NOTE CONF {"raw":[100,100]}

00:22:08.830 --> 00:22:17.320
<v Speaker 0>Okay, so, um, I have this, um, I've got a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:17.320 --> 00:22:23.290
<v Speaker 0>multimedia presentation today with, uh, laptop and, um.

NOTE CONF {"raw":[92,100,100,100,93,100,100,100]}

00:22:25.780 --> 00:22:28.330
<v Speaker 0>Drawing things and, uh, slides.

NOTE CONF {"raw":[100,100,100,100,100]}

00:22:28.330 --> 00:22:28.870
<v Speaker 0>So let me see.

NOTE CONF {"raw":[100,100,100,100]}

00:22:28.870 --> 00:22:31.900
<v Speaker 0>I've got this all of the code for this lecture

NOTE CONF {"raw":[100,100,100,92,85,100,100,100,100,100]}

00:22:31.900 --> 00:22:34.750
<v Speaker 0>and all the code for all the other lectures you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:34.750 --> 00:22:35.770
<v Speaker 0>can you can download.

NOTE CONF {"raw":[100,100,100,100]}

00:22:35.770 --> 00:22:38.650
<v Speaker 0>And I want to show you this, um, running.

NOTE CONF {"raw":[100,100,100,100,100,100,100,69,100]}

00:22:38.950 --> 00:22:42.850
<v Speaker 0>Uh, uh, so let me just, uh, load it in.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:45.850 --> 00:22:46.330
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:22:46.480 --> 00:22:48.700
<v Speaker 0>So I can do, um, that tree that I, that

NOTE CONF {"raw":[100,100,100,100,81,100,98,100,100,100]}

00:22:48.700 --> 00:22:50.410
<v Speaker 0>I, that I showed you, it's called.

NOTE CONF {"raw":[100,100,100,100,100,52,100]}

00:22:50.410 --> 00:22:51.040
<v Speaker 0>Whoops.

NOTE CONF {"raw":[67]}

00:22:52.450 --> 00:22:52.810
<v Speaker 0>Ah.

NOTE CONF {"raw":[90]}

00:22:55.150 --> 00:22:55.750
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:22:55.750 --> 00:22:57.220
<v Speaker 0>The tree is called T1.

NOTE CONF {"raw":[100,100,100,100,99]}

00:22:57.460 --> 00:22:59.590
<v Speaker 0>Um, I haven't defined it with a show.

NOTE CONF {"raw":[80,100,100,100,100,100,100,100]}

00:22:59.590 --> 00:23:01.930
<v Speaker 0>With a show, um, deriving show.

NOTE CONF {"raw":[100,73,100,100,100,100]}

00:23:01.930 --> 00:23:03.250
<v Speaker 0>So it's not going to print it out for me,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,57]}

00:23:03.250 --> 00:23:03.940
<v Speaker 0>but never mind.

NOTE CONF {"raw":[100,100,100]}

00:23:03.940 --> 00:23:04.990
<v Speaker 0>That's what it is.

NOTE CONF {"raw":[84,100,100,100]}

00:23:04.990 --> 00:23:05.350
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:23:05.350 --> 00:23:06.910
<v Speaker 0>And so I can do depth first.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:23:07.990 --> 00:23:13.120
<v Speaker 0>Um, looking for greater than for in T1.

NOTE CONF {"raw":[93,100,100,100,100,97,100,100]}

00:23:13.120 --> 00:23:17.320
<v Speaker 0>And it'll give me the result just five and I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:17.320 --> 00:23:19.450
<v Speaker 0>can do uh, depth first Prime.

NOTE CONF {"raw":[100,100,51,100,100,100]}

00:23:19.450 --> 00:23:23.800
<v Speaker 0>This was the alternative, um, way of writing this using,

NOTE CONF {"raw":[100,100,100,100,92,100,100,100,100,100]}

00:23:23.800 --> 00:23:24.700
<v Speaker 0>uh, traversal.

NOTE CONF {"raw":[82,100]}

00:23:24.700 --> 00:23:25.900
<v Speaker 0>And it will give me the same result.

NOTE CONF {"raw":[100,96,73,100,100,100,100,100]}

00:23:25.900 --> 00:23:26.230
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:23:26.230 --> 00:23:27.400
<v Speaker 0>Very exciting.

NOTE CONF {"raw":[100,100]}

00:23:27.400 --> 00:23:28.000
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:23:29.800 --> 00:23:33.950
<v Speaker 0>Um, And I could do this even on an infinite

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:33.950 --> 00:23:34.490
<v Speaker 0>tree.

NOTE CONF {"raw":[100]}

00:23:36.620 --> 00:23:37.250
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:23:37.250 --> 00:23:38.450
<v Speaker 0>Looking for something?

NOTE CONF {"raw":[100,100,100]}

00:23:38.450 --> 00:23:40.160
<v Speaker 0>And now I'm going to look for something that's less

NOTE CONF {"raw":[64,100,100,100,100,100,100,100,100,100]}

00:23:40.160 --> 00:23:46.190
<v Speaker 0>than, um, minus two in the infinite tree infos.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,47]}

00:23:46.190 --> 00:23:47.960
<v Speaker 0>This infinite tree that I showed you.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:23:48.950 --> 00:23:49.400
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:23:49.400 --> 00:23:52.220
<v Speaker 0>And it finds, uh, minus three.

NOTE CONF {"raw":[100,100,100,77,100,100]}

00:23:52.520 --> 00:23:53.300
<v Speaker 0>Okay.

NOTE CONF {"raw":[81]}

00:23:53.480 --> 00:23:58.730
<v Speaker 0>Uh, looking at my inventory, uh, minus three was was

NOTE CONF {"raw":[94,100,100,100,100,100,100,100,100,100]}

00:23:58.730 --> 00:23:59.480
<v Speaker 0>right here.

NOTE CONF {"raw":[100,100]}

00:24:00.980 --> 00:24:01.400
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:24:01.400 --> 00:24:01.730
<v Speaker 0>In depth.

NOTE CONF {"raw":[100,100]}

00:24:01.730 --> 00:24:04.130
<v Speaker 0>First search finds it very quickly going down here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:24:05.480 --> 00:24:06.260
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:24:09.380 --> 00:24:12.380
<v Speaker 0>So that's depth first search.

NOTE CONF {"raw":[100,100,100,100,100]}

00:24:14.000 --> 00:24:14.360
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:24:21.020 --> 00:24:21.650
<v Speaker 0>Okay.

NOTE CONF {"raw":[96]}

00:24:22.130 --> 00:24:23.810
<v Speaker 0>Um, breadth first search.

NOTE CONF {"raw":[100,100,100,100]}

00:24:26.930 --> 00:24:31.100
<v Speaker 0>So depth depth is about is about this direction getting

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:31.100 --> 00:24:32.060
<v Speaker 0>things deeper.

NOTE CONF {"raw":[100,100]}

00:24:32.870 --> 00:24:33.410
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:24:33.410 --> 00:24:34.460
<v Speaker 0>Things going deep.

NOTE CONF {"raw":[100,100,100]}

00:24:34.490 --> 00:24:35.870
<v Speaker 0>The search goes deep.

NOTE CONF {"raw":[100,100,100,100]}

00:24:35.870 --> 00:24:37.370
<v Speaker 0>It goes down into the left.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:24:37.370 --> 00:24:37.910
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:24:37.910 --> 00:24:43.910
<v Speaker 0>Breadth first search is, um, going across okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:24:43.910 --> 00:24:48.020
<v Speaker 0>The order that this these nodes are visited in in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:48.020 --> 00:24:51.920
<v Speaker 0>breadth first search is uh, is different.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:24:51.920 --> 00:24:53.390
<v Speaker 0>Let me draw my tree again.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:24:57.020 --> 00:24:58.940
<v Speaker 0>I'll leave out the nils to keep it a little

NOTE CONF {"raw":[100,100,100,100,100,100,96,100,100,100]}

00:24:58.940 --> 00:24:59.870
<v Speaker 0>bit tidier.

NOTE CONF {"raw":[100,100]}

00:25:02.780 --> 00:25:05.360
<v Speaker 0>Oh, sorry.

NOTE CONF {"raw":[100,100]}

00:25:07.400 --> 00:25:08.780
<v Speaker 0>I need three screens.

NOTE CONF {"raw":[100,100,100,100]}

00:25:08.930 --> 00:25:09.440
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:25:13.310 --> 00:25:14.660
<v Speaker 0>Okay, there's my tree again.

NOTE CONF {"raw":[100,100,100,100,100]}

00:25:14.660 --> 00:25:15.770
<v Speaker 0>I'll leave out the nils.

NOTE CONF {"raw":[100,100,100,100,100]}

00:25:17.120 --> 00:25:19.430
<v Speaker 0>Um, breadth first search proceeds.

NOTE CONF {"raw":[100,100,100,100,93]}

00:25:20.150 --> 00:25:23.960
<v Speaker 0>Losing my voice proceeds from the top in layers.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:25:24.770 --> 00:25:30.420
<v Speaker 0>Not not, uh, down into the left, but in layers.

NOTE CONF {"raw":[100,100,94,100,100,100,100,100,100,100]}

00:25:33.150 --> 00:25:33.900
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:25:34.980 --> 00:25:37.110
<v Speaker 0>Top layer one node.

NOTE CONF {"raw":[100,100,100,100]}

00:25:37.740 --> 00:25:39.960
<v Speaker 0>Next layer these two nodes.

NOTE CONF {"raw":[100,100,100,100,100]}

00:25:40.530 --> 00:25:41.730
<v Speaker 0>Next layer.

NOTE CONF {"raw":[100,100]}

00:25:45.930 --> 00:25:46.680
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:25:48.960 --> 00:25:49.320
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:25:49.320 --> 00:25:50.910
<v Speaker 0>You see the difference obviously right.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:25:50.910 --> 00:25:51.960
<v Speaker 0>That's in layers.

NOTE CONF {"raw":[100,100,100]}

00:25:55.230 --> 00:25:55.560
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:25:55.560 --> 00:25:58.020
<v Speaker 0>So this is an alternative breadth first traversal.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:25:59.460 --> 00:26:02.010
<v Speaker 0>Um so this was depth first traversal that you've seen

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:02.010 --> 00:26:02.700
<v Speaker 0>already.

NOTE CONF {"raw":[100]}

00:26:02.700 --> 00:26:04.380
<v Speaker 0>Breadth first traversal.

NOTE CONF {"raw":[100,100,100]}

00:26:04.650 --> 00:26:07.890
<v Speaker 0>Um here's a little program that computes that computes what

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:07.890 --> 00:26:09.630
<v Speaker 0>I just showed you there okay.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:26:09.990 --> 00:26:14.310
<v Speaker 0>Um and so this is just a different order of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:14.310 --> 00:26:15.720
<v Speaker 0>visiting the nodes.

NOTE CONF {"raw":[100,100,100]}

00:26:15.720 --> 00:26:18.990
<v Speaker 0>So this one, if we do the depth first traversal

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:18.990 --> 00:26:24.240
<v Speaker 0>the order would be 12453679.

NOTE CONF {"raw":[100,100,100,100,100]}

00:26:24.360 --> 00:26:26.850
<v Speaker 0>Sorry 36897.

NOTE CONF {"raw":[100,100]}

00:26:26.850 --> 00:26:30.420
<v Speaker 0>Here it would be 123456789.

NOTE CONF {"raw":[100,100,100,100,100]}

00:26:30.750 --> 00:26:38.610
<v Speaker 0>Okay, so, um, a breadth first search is exactly the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:38.610 --> 00:26:40.620
<v Speaker 0>same program that I had a minute ago.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:26:41.040 --> 00:26:44.550
<v Speaker 0>Um, for depth first search, except that instead of using,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:44.820 --> 00:26:49.290
<v Speaker 0>uh, depth first traverse, I use breadth first traverse.

NOTE CONF {"raw":[46,100,100,100,100,100,100,100,100]}

00:26:51.000 --> 00:26:51.420
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:26:51.420 --> 00:26:54.090
<v Speaker 0>So it just uses a different order of visiting the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:54.090 --> 00:26:55.140
<v Speaker 0>the nodes.

NOTE CONF {"raw":[100,100]}

00:26:57.180 --> 00:26:57.570
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:27:00.300 --> 00:27:00.960
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:27:00.960 --> 00:27:03.390
<v Speaker 0>And, uh, here's a slide showing it in action.

NOTE CONF {"raw":[100,94,100,100,100,100,100,100,100]}

00:27:03.390 --> 00:27:04.530
<v Speaker 0>I'm going to skip that.

NOTE CONF {"raw":[100,100,100,100,100]}

00:27:04.950 --> 00:27:07.410
<v Speaker 0>Um, and I'll skip this.

NOTE CONF {"raw":[96,84,91,99,100]}

00:27:09.180 --> 00:27:11.430
<v Speaker 0>Uh, I'll just show you it running.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:27:14.610 --> 00:27:16.350
<v Speaker 0>So just a second.

NOTE CONF {"raw":[100,100,100,100]}

00:27:22.800 --> 00:27:23.400
<v Speaker 2>Oh, dear.

NOTE CONF {"raw":[100,100]}

00:27:25.440 --> 00:27:27.330
<v Speaker 0>How do I get this thing to, uh.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:27:31.060 --> 00:27:31.930
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:27:33.550 --> 00:27:34.090
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:27:40.630 --> 00:27:40.930
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:27:40.930 --> 00:27:41.410
<v Speaker 0>Here's depth.

NOTE CONF {"raw":[100,100]}

00:27:41.410 --> 00:27:41.950
<v Speaker 0>First search.

NOTE CONF {"raw":[100,100]}

00:27:41.950 --> 00:27:44.230
<v Speaker 0>I, uh, no, I wanted breadth first search.

NOTE CONF {"raw":[83,65,75,100,100,100,100,100]}

00:27:44.410 --> 00:27:44.680
<v Speaker 0>Ah.

NOTE CONF {"raw":[60]}

00:27:52.000 --> 00:27:54.370
<v Speaker 0>Well, let me let me not do well, okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:27:54.370 --> 00:27:55.060
<v Speaker 0>Let me let me do it.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:27:55.060 --> 00:27:57.160
<v Speaker 0>Just because you're you're obviously, um.

NOTE CONF {"raw":[100,100,75,100,100,100]}

00:27:58.210 --> 00:27:58.960
<v Speaker 0>Breadth.

NOTE CONF {"raw":[100]}

00:27:59.770 --> 00:28:00.520
<v Speaker 0>Breadth.

NOTE CONF {"raw":[100]}

00:28:03.760 --> 00:28:04.990
<v Speaker 0>Why is this not.

NOTE CONF {"raw":[100,100,100,100]}

00:28:04.990 --> 00:28:06.340
<v Speaker 0>Oh, it's capital B.

NOTE CONF {"raw":[100,100,100,100]}

00:28:09.940 --> 00:28:11.890
<v Speaker 0>You're obviously wanting to see if this works or not.

NOTE CONF {"raw":[100,100,75,100,100,90,100,100,100,100]}

00:28:11.890 --> 00:28:12.160
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:28:12.160 --> 00:28:17.980
<v Speaker 0>So so breadth first, um, breadth first of of, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,98]}

00:28:18.010 --> 00:28:20.830
<v Speaker 0>you know, looking for something that's greater than for in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,62,100]}

00:28:20.830 --> 00:28:21.640
<v Speaker 0>T1.

NOTE CONF {"raw":[54]}

00:28:22.270 --> 00:28:22.690
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:28:22.690 --> 00:28:25.570
<v Speaker 0>Again, we get the same answer, you know, no surprise

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:25.570 --> 00:28:25.840
<v Speaker 0>there.

NOTE CONF {"raw":[100]}

00:28:25.840 --> 00:28:26.110
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:28:26.110 --> 00:28:30.130
<v Speaker 0>because we're going we're looking for something greater than for.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,69]}

00:28:30.130 --> 00:28:33.040
<v Speaker 0>So we go here, here, here, and we find it.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:33.040 --> 00:28:34.270
<v Speaker 0>We find it right there.

NOTE CONF {"raw":[100,100,100,100,100]}

00:28:34.270 --> 00:28:36.850
<v Speaker 0>Okay, okay.

NOTE CONF {"raw":[100,100]}

00:28:36.850 --> 00:28:38.560
<v Speaker 0>So we got the same answer.

NOTE CONF {"raw":[100,90,90,100,100,100]}

00:28:38.560 --> 00:28:43.030
<v Speaker 0>But that need not always be the case okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:28:43.030 --> 00:28:46.180
<v Speaker 0>So suppose that we're looking for, um.

NOTE CONF {"raw":[100,100,100,100,100,100,96]}

00:28:48.400 --> 00:28:48.940
<v Speaker 0>Sorry.

NOTE CONF {"raw":[100]}

00:28:48.940 --> 00:28:49.810
<v Speaker 0>Oh you can't see.

NOTE CONF {"raw":[100,100,100,100]}

00:28:49.810 --> 00:28:50.110
<v Speaker 0>Ah.

NOTE CONF {"raw":[87]}

00:28:53.410 --> 00:28:56.830
<v Speaker 0>Thanks for everybody telling me that they can't see because

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:56.830 --> 00:28:57.160
<v Speaker 0>I.

NOTE CONF {"raw":[100]}

00:28:57.760 --> 00:28:58.330
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:28:58.660 --> 00:29:01.630
<v Speaker 0>Um, so let's see, uh.

NOTE CONF {"raw":[100,100,100,100,100]}

00:29:06.610 --> 00:29:07.750
<v Speaker 0>What's an example?

NOTE CONF {"raw":[100,100,100]}

00:29:14.860 --> 00:29:15.430
<v Speaker 3>Um.

NOTE CONF {"raw":[88]}

00:29:31.390 --> 00:29:31.990
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:29:31.990 --> 00:29:33.610
<v Speaker 0>So I mean, I'll just I'll just show it in

NOTE CONF {"raw":[88,100,100,100,100,100,100,100,100,100]}

00:29:33.610 --> 00:29:34.300
<v Speaker 0>pictures.

NOTE CONF {"raw":[100]}

00:29:34.300 --> 00:29:37.540
<v Speaker 0>Suppose that I'm looking for something that's, um.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:29:41.530 --> 00:29:43.810
<v Speaker 0>Not equal to one, 2 or 4.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:29:44.500 --> 00:29:45.100
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:29:45.460 --> 00:29:47.110
<v Speaker 0>Any other one would be okay.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:29:47.410 --> 00:29:48.040
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:29:48.040 --> 00:29:51.400
<v Speaker 0>So, um, so this would find five.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:29:52.900 --> 00:29:53.380
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:29:53.380 --> 00:29:55.150
<v Speaker 0>It's the first one it visits that's not equal to

NOTE CONF {"raw":[100,100,100,100,100,100,96,100,100,100]}

00:29:55.150 --> 00:29:56.200
<v Speaker 0>one, 2 or 4.

NOTE CONF {"raw":[100,100,100,100]}

00:29:56.920 --> 00:30:00.640
<v Speaker 0>And this one would find three okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:30:00.640 --> 00:30:02.320
<v Speaker 0>So they would both find a solution but they would

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,94]}

00:30:02.320 --> 00:30:07.060
<v Speaker 0>be different solutions okay great.

NOTE CONF {"raw":[100,100,100,100,100]}

00:30:13.180 --> 00:30:13.570
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:30:13.780 --> 00:30:14.860
<v Speaker 0>What's the difference okay.

NOTE CONF {"raw":[100,100,100,100]}

00:30:14.860 --> 00:30:16.480
<v Speaker 0>They both find solutions.

NOTE CONF {"raw":[100,100,100,100]}

00:30:16.480 --> 00:30:18.520
<v Speaker 0>They might find different solutions.

NOTE CONF {"raw":[100,100,100,100,100]}

00:30:18.850 --> 00:30:19.270
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:30:23.230 --> 00:30:26.900
<v Speaker 0>Okay Um, the the difference is in the infinite case.

NOTE CONF {"raw":[100,100,77,100,99,99,100,100,100,100]}

00:30:28.880 --> 00:30:29.600
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:30:29.600 --> 00:30:31.460
<v Speaker 0>For for infinite trees.

NOTE CONF {"raw":[100,100,100,100]}

00:30:33.440 --> 00:30:36.320
<v Speaker 0>Um, uh, so let me go back to my depth

NOTE CONF {"raw":[100,78,100,100,100,100,100,100,100,100]}

00:30:36.320 --> 00:30:39.350
<v Speaker 0>first solution.

NOTE CONF {"raw":[100,100]}

00:30:40.040 --> 00:30:40.790
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:30:40.970 --> 00:30:47.120
<v Speaker 0>Depth first search can sometimes run forever when you, um.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:54.710 --> 00:30:55.520
<v Speaker 0>Uh.

NOTE CONF {"raw":[100]}

00:30:57.290 --> 00:30:58.100
<v Speaker 2>Wait a minute.

NOTE CONF {"raw":[100,100,100]}

00:30:59.450 --> 00:31:00.020
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:31:00.020 --> 00:31:02.120
<v Speaker 0>If you look at this infinite tree here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:31:04.220 --> 00:31:04.910
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:31:04.910 --> 00:31:07.370
<v Speaker 0>And you go with depth first search looking for a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:07.370 --> 00:31:09.320
<v Speaker 0>node that's greater than zero.

NOTE CONF {"raw":[100,100,100,100,100]}

00:31:10.910 --> 00:31:11.570
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:31:11.570 --> 00:31:12.740
<v Speaker 0>What happens?

NOTE CONF {"raw":[100,100]}

00:31:12.980 --> 00:31:15.350
<v Speaker 0>We start at the we start at the, at the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:15.350 --> 00:31:17.900
<v Speaker 0>top and we go down into the left.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:31:17.900 --> 00:31:19.070
<v Speaker 0>So is zero.

NOTE CONF {"raw":[100,70,100]}

00:31:19.070 --> 00:31:20.480
<v Speaker 0>Is zero greater than zero.

NOTE CONF {"raw":[100,100,100,100,100]}

00:31:20.480 --> 00:31:22.010
<v Speaker 0>No it isn't okay.

NOTE CONF {"raw":[100,100,100,100]}

00:31:22.010 --> 00:31:24.440
<v Speaker 0>Is is minus one greater than zero?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:31:24.470 --> 00:31:25.400
<v Speaker 0>No it isn't.

NOTE CONF {"raw":[100,100,100]}

00:31:25.430 --> 00:31:27.470
<v Speaker 0>Is minus two greater than zero?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:31:27.500 --> 00:31:28.340
<v Speaker 0>No it isn't.

NOTE CONF {"raw":[100,100,100]}

00:31:28.370 --> 00:31:30.110
<v Speaker 0>Is minus three greater than zero?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:31:30.140 --> 00:31:30.680
<v Speaker 0>No it isn't.

NOTE CONF {"raw":[100,100,100]}

00:31:30.680 --> 00:31:31.820
<v Speaker 0>Okay, we keep going.

NOTE CONF {"raw":[98,100,100,100]}

00:31:31.820 --> 00:31:34.700
<v Speaker 0>We'll never find anything that's greater than zero.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:31:34.700 --> 00:31:35.840
<v Speaker 0>And this is an infinite tree.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:31:35.840 --> 00:31:37.070
<v Speaker 0>So you'll go forever.

NOTE CONF {"raw":[100,100,100,100]}

00:31:38.150 --> 00:31:38.840
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:31:40.100 --> 00:31:43.160
<v Speaker 0>And, um, I could show it you running, but it

NOTE CONF {"raw":[94,75,100,99,100,98,100,100,100,100]}

00:31:43.160 --> 00:31:44.390
<v Speaker 0>would just not terminate.

NOTE CONF {"raw":[100,100,100,100]}

00:31:44.390 --> 00:31:44.660
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:31:44.660 --> 00:31:47.150
<v Speaker 0>And there's my two different implementations.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:31:47.300 --> 00:31:48.830
<v Speaker 0>Uh, fail in different ways.

NOTE CONF {"raw":[74,100,100,100,100]}

00:31:48.830 --> 00:31:52.580
<v Speaker 0>The first one, as it happens, it it fills up

NOTE CONF {"raw":[100,100,100,100,100,100,72,100,100,100]}

00:31:52.580 --> 00:31:55.580
<v Speaker 0>the memory, and then you get this, uh, Stack Overflow

NOTE CONF {"raw":[100,100,100,100,100,100,100,54,73,73]}

00:31:55.580 --> 00:31:56.210
<v Speaker 0>thing.

NOTE CONF {"raw":[100]}

00:31:56.300 --> 00:32:02.300
<v Speaker 0>And the second one, Haskell cleverly realises that it can

NOTE CONF {"raw":[90,100,100,100,100,100,97,100,100,100]}

00:32:02.300 --> 00:32:04.130
<v Speaker 0>do a version.

NOTE CONF {"raw":[100,100,100]}

00:32:04.400 --> 00:32:06.590
<v Speaker 0>Uh, it compile can compile this in such a way

NOTE CONF {"raw":[48,100,58,100,100,100,100,100,100,100]}

00:32:06.590 --> 00:32:09.740
<v Speaker 0>that it doesn't produce lots of stuff that consumes the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:09.740 --> 00:32:10.400
<v Speaker 0>memory.

NOTE CONF {"raw":[100]}

00:32:10.400 --> 00:32:13.490
<v Speaker 0>And so it just runs forever without having a stack

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:13.490 --> 00:32:13.910
<v Speaker 0>overflow.

NOTE CONF {"raw":[100]}

00:32:13.910 --> 00:32:16.790
<v Speaker 0>In both cases, you never find anything that's greater than

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:16.790 --> 00:32:19.940
<v Speaker 0>zero because you're going down and down and down this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:19.940 --> 00:32:22.590
<v Speaker 0>left branch forever Okay.

NOTE CONF {"raw":[100,100,100,100]}

00:32:22.620 --> 00:32:23.730
<v Speaker 0>However.

NOTE CONF {"raw":[100]}

00:32:25.320 --> 00:32:26.490
<v Speaker 0>Breadth first search.

NOTE CONF {"raw":[100,100,100]}

00:32:26.610 --> 00:32:26.970
<v Speaker 0>Sorry.

NOTE CONF {"raw":[95]}

00:32:26.970 --> 00:32:27.210
<v Speaker 0>Yeah.

NOTE CONF {"raw":[79]}

00:32:27.210 --> 00:32:31.470
<v Speaker 0>Breadth first search visits just three nodes.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:32:31.590 --> 00:32:32.670
<v Speaker 0>This one.

NOTE CONF {"raw":[100,100]}

00:32:34.020 --> 00:32:35.520
<v Speaker 0>So it's going in layers.

NOTE CONF {"raw":[100,100,100,100,100]}

00:32:36.900 --> 00:32:37.380
<v Speaker 0>Oops.

NOTE CONF {"raw":[78]}

00:32:38.670 --> 00:32:39.060
<v Speaker 2>Uh.

NOTE CONF {"raw":[100]}

00:32:43.080 --> 00:32:44.550
<v Speaker 0>So that one, that one.

NOTE CONF {"raw":[100,100,100,100,100]}

00:32:44.550 --> 00:32:46.470
<v Speaker 0>And then this one.

NOTE CONF {"raw":[100,100,100,100]}

00:32:46.620 --> 00:32:47.850
<v Speaker 0>And it returns.

NOTE CONF {"raw":[100,100,100]}

00:32:47.880 --> 00:32:48.960
<v Speaker 0>It returns that one okay.

NOTE CONF {"raw":[100,100,100,100,100]}

00:32:48.960 --> 00:32:49.890
<v Speaker 0>So it's going in layers.

NOTE CONF {"raw":[100,100,100,100,100]}

00:32:49.890 --> 00:32:52.980
<v Speaker 0>So here and then across and then across here and

NOTE CONF {"raw":[100,100,100,100,69,100,100,100,100,100]}

00:32:52.980 --> 00:32:53.850
<v Speaker 0>then across here.

NOTE CONF {"raw":[100,100,100]}

00:32:53.850 --> 00:32:56.550
<v Speaker 0>But it finds it already in this in this second

NOTE CONF {"raw":[100,100,100,100,100,100,65,100,97,100]}

00:32:56.550 --> 00:32:57.150
<v Speaker 0>layer.

NOTE CONF {"raw":[100]}

00:32:57.480 --> 00:32:58.050
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:32:58.050 --> 00:33:02.040
<v Speaker 0>So instead of running forever it finds it almost immediately.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:04.020 --> 00:33:04.530
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:33:04.530 --> 00:33:07.260
<v Speaker 0>And that's because um, the solution is in the right

NOTE CONF {"raw":[100,100,100,63,100,100,100,100,100,100]}

00:33:07.260 --> 00:33:07.920
<v Speaker 0>subtree.

NOTE CONF {"raw":[100]}

00:33:07.920 --> 00:33:10.530
<v Speaker 0>And so this strategy of going always to the left

NOTE CONF {"raw":[100,100,79,100,100,100,100,100,100,100]}

00:33:10.530 --> 00:33:13.170
<v Speaker 0>is in this case the wrong one.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:33:13.440 --> 00:33:14.100
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:33:14.460 --> 00:33:14.820
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:33:18.480 --> 00:33:19.860
<v Speaker 0>And um.

NOTE CONF {"raw":[100,100]}

00:33:21.240 --> 00:33:22.050
<v Speaker 0>Yeah, it's hard to.

NOTE CONF {"raw":[100,100,100,96]}

00:33:22.620 --> 00:33:23.010
<v Speaker 0>Oh.

NOTE CONF {"raw":[92]}

00:33:23.610 --> 00:33:24.210
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:33:25.860 --> 00:33:26.220
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:33:26.220 --> 00:33:28.140
<v Speaker 0>And it's all because the order in which the the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:28.140 --> 00:33:30.870
<v Speaker 0>nodes are being visited are is wrong.

NOTE CONF {"raw":[100,100,100,100,75,100,100]}

00:33:31.380 --> 00:33:31.980
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:33:31.980 --> 00:33:33.000
<v Speaker 0>The, um.

NOTE CONF {"raw":[100,100]}

00:33:34.770 --> 00:33:37.500
<v Speaker 0>So, so what this says is that sometimes depth first

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:37.500 --> 00:33:40.950
<v Speaker 0>search is better and sometimes breadth first search is better

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:41.250 --> 00:33:42.540
<v Speaker 0>in general.

NOTE CONF {"raw":[100,100]}

00:33:43.740 --> 00:33:47.010
<v Speaker 0>Um, and they really differ a lot for infinite trees.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:47.190 --> 00:33:47.880
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:33:47.880 --> 00:33:52.470
<v Speaker 0>So in general depth first search doesn't always terminate.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:33:53.730 --> 00:33:56.490
<v Speaker 0>Even if, even if you even if there is a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:56.490 --> 00:33:59.670
<v Speaker 0>node in the tree that satisfies the property you're looking

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:59.670 --> 00:34:00.930
<v Speaker 0>for depth.

NOTE CONF {"raw":[100,93]}

00:34:01.020 --> 00:34:05.280
<v Speaker 0>Breadth first search will always find it if it's there.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:05.790 --> 00:34:07.650
<v Speaker 0>Um, but it might take longer.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:34:08.550 --> 00:34:09.240
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:34:09.240 --> 00:34:12.360
<v Speaker 0>I mean, if the thing you're looking for is, is,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:12.360 --> 00:34:16.919
<v Speaker 0>you know, level 20 down this left hand branch here,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:17.909 --> 00:34:18.720
<v Speaker 0>um, depth.

NOTE CONF {"raw":[100,100]}

00:34:18.720 --> 00:34:22.450
<v Speaker 0>First search will find it in 20 steps, whereas breadth

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:22.450 --> 00:34:24.909
<v Speaker 0>first search will have to visit every single one of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:24.909 --> 00:34:25.450
<v Speaker 0>these layers.

NOTE CONF {"raw":[100,100]}

00:34:25.450 --> 00:34:28.179
<v Speaker 0>It's about two to the 20th nodes that it'll have

NOTE CONF {"raw":[93,100,100,100,100,100,99,94,72,100]}

00:34:28.179 --> 00:34:29.889
<v Speaker 0>to visit before it finds this thing.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:34:29.889 --> 00:34:34.149
<v Speaker 0>That's that's way down, way down the left hand branch.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:34.270 --> 00:34:35.020
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:34:37.179 --> 00:34:41.050
<v Speaker 0>So, um, and then the question is, can we do

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:41.050 --> 00:34:41.620
<v Speaker 0>better?

NOTE CONF {"raw":[100]}

00:34:42.580 --> 00:34:46.840
<v Speaker 0>And the answer is yes sometimes.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:34:46.840 --> 00:34:47.590
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:34:47.590 --> 00:34:51.280
<v Speaker 0>And, um, uh, this is, uh, this is an area

NOTE CONF {"raw":[100,100,83,100,100,98,100,100,100,100]}

00:34:51.280 --> 00:34:52.840
<v Speaker 0>called heuristic search.

NOTE CONF {"raw":[100,100,100]}

00:34:52.840 --> 00:34:55.120
<v Speaker 0>And this is where it gets into sort of AI.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,83]}

00:34:55.419 --> 00:35:01.480
<v Speaker 0>Um, so heuristic, uh, search is about, um, uh, using

NOTE CONF {"raw":[100,100,100,94,100,100,100,100,96,100]}

00:35:01.480 --> 00:35:02.170
<v Speaker 0>information.

NOTE CONF {"raw":[100]}

00:35:02.170 --> 00:35:04.180
<v Speaker 0>Well, in this case, it's about using information about the

NOTE CONF {"raw":[100,100,100,100,97,100,100,100,100,100]}

00:35:04.180 --> 00:35:07.810
<v Speaker 0>problem to, um, to cleverly pick the way to go

NOTE CONF {"raw":[100,100,48,100,100,100,100,100,100,100]}

00:35:07.810 --> 00:35:11.230
<v Speaker 0>next, rather than blindly always going down to the left

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:11.230 --> 00:35:13.240
<v Speaker 0>or always going in layers.

NOTE CONF {"raw":[100,100,100,100,100]}

00:35:13.240 --> 00:35:18.520
<v Speaker 0>So, uh, instead of that, um, you imagine, um well,

NOTE CONF {"raw":[100,60,100,100,100,77,100,100,100,100]}

00:35:18.520 --> 00:35:20.290
<v Speaker 0>let's start with with a sort of analogy.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:35:20.290 --> 00:35:22.390
<v Speaker 0>So if this was a chess, if this was a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:22.390 --> 00:35:27.340
<v Speaker 0>chess, um, search space where the branches are moves and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:27.340 --> 00:35:29.620
<v Speaker 0>you're looking for a good move.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:35:30.790 --> 00:35:33.910
<v Speaker 0>So how would you decide which is a good move?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:34.150 --> 00:35:36.670
<v Speaker 0>Uh, you you don't kind of blindly search for it.

NOTE CONF {"raw":[95,94,100,100,100,100,100,100,100,100]}

00:35:36.670 --> 00:35:39.520
<v Speaker 0>You look at the positions that you're that you're reaching,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:39.640 --> 00:35:41.230
<v Speaker 0>whether there are good positions or not.

NOTE CONF {"raw":[100,73,73,100,100,100,100]}

00:35:41.230 --> 00:35:43.240
<v Speaker 0>You want to make moves that put you in a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:43.240 --> 00:35:44.230
<v Speaker 0>good position.

NOTE CONF {"raw":[100,100]}

00:35:44.230 --> 00:35:46.690
<v Speaker 0>Or if you're looking for a flight from here to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:46.690 --> 00:35:52.870
<v Speaker 0>Singapore, let's say, um, uh, it would make sense to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:52.870 --> 00:35:56.230
<v Speaker 0>look for flights that go in the direction of Singapore.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:56.260 --> 00:35:58.660
<v Speaker 0>You know, if there's no direct flight to Singapore, at

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:58.660 --> 00:36:01.870
<v Speaker 0>least it would be better to go from from Edinburgh

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:01.870 --> 00:36:06.820
<v Speaker 0>to Dubai or or, uh, you know, some place east

NOTE CONF {"raw":[100,100,75,100,98,100,100,60,60,100]}

00:36:06.820 --> 00:36:09.730
<v Speaker 0>of here and not to New York, for example.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:36:09.730 --> 00:36:10.120
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:36:10.120 --> 00:36:11.770
<v Speaker 0>Well, I mean, you can get to Singapore going that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:11.770 --> 00:36:15.310
<v Speaker 0>way as well, but, um, uh, you know, anyway, it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:15.310 --> 00:36:17.510
<v Speaker 0>makes sense to go in the direction of the thing

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:17.510 --> 00:36:19.310
<v Speaker 0>that you're, that you're trying to get to.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:36:19.490 --> 00:36:20.060
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:36:20.060 --> 00:36:22.850
<v Speaker 0>And so and so it isn't just a matter of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:22.850 --> 00:36:27.500
<v Speaker 0>looking blindly, you know, left subtree or blindly layers, but

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:27.500 --> 00:36:31.220
<v Speaker 0>looking at the, the values at those nodes and using

NOTE CONF {"raw":[100,100,96,100,100,89,100,100,100,100]}

00:36:31.220 --> 00:36:33.230
<v Speaker 0>that information to decide what to do next.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:36:33.230 --> 00:36:36.590
<v Speaker 0>So this is um, something called best first search.

NOTE CONF {"raw":[100,100,100,68,100,100,100,100,100]}

00:36:37.940 --> 00:36:39.110
<v Speaker 0>At least that's what I'm going to call it.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:36:39.110 --> 00:36:41.930
<v Speaker 0>And um, the idea is to decide the order of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:41.930 --> 00:36:45.080
<v Speaker 0>nodes to visit using an evaluation function.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:36:45.080 --> 00:36:48.020
<v Speaker 0>So this evaluation function, which looks at the values in

NOTE CONF {"raw":[100,72,100,100,100,100,100,100,100,65]}

00:36:48.020 --> 00:36:52.370
<v Speaker 0>the tree and picks the right node or picks, decides

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:52.370 --> 00:36:55.670
<v Speaker 0>which node to to visit based on what this evaluation

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:55.670 --> 00:36:56.840
<v Speaker 0>function gives you.

NOTE CONF {"raw":[100,100,100]}

00:36:57.170 --> 00:36:59.390
<v Speaker 0>Okay, this code is a little bit complicated, but the

NOTE CONF {"raw":[100,100,94,94,100,100,100,100,100,100]}

00:36:59.390 --> 00:37:02.840
<v Speaker 0>important thing here is the um, is the type I

NOTE CONF {"raw":[100,100,100,100,100,81,100,100,100,100]}

00:37:02.840 --> 00:37:03.410
<v Speaker 0>guess.

NOTE CONF {"raw":[100]}

00:37:03.950 --> 00:37:04.220
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:37:04.220 --> 00:37:06.080
<v Speaker 0>So best first search.

NOTE CONF {"raw":[100,100,100,100]}

00:37:06.080 --> 00:37:10.040
<v Speaker 0>It's going to take a predicate, which is um, the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:10.040 --> 00:37:12.320
<v Speaker 0>uh, you know, it's the thing that we've had all

NOTE CONF {"raw":[58,100,100,100,100,100,100,89,100,100]}

00:37:12.320 --> 00:37:12.650
<v Speaker 0>along.

NOTE CONF {"raw":[100]}

00:37:12.650 --> 00:37:15.500
<v Speaker 0>This is, this is the, um, it tells you whether

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:15.500 --> 00:37:17.840
<v Speaker 0>you've you found something that you're looking for.

NOTE CONF {"raw":[95,100,100,100,100,100,100,100]}

00:37:18.500 --> 00:37:19.130
<v Speaker 0>Okay.

NOTE CONF {"raw":[77]}

00:37:19.610 --> 00:37:22.250
<v Speaker 0>But in addition, we have this thing here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:37:22.250 --> 00:37:24.770
<v Speaker 0>This is the evaluation function.

NOTE CONF {"raw":[100,100,100,100,100]}

00:37:24.770 --> 00:37:29.510
<v Speaker 0>And so this is going to take um, it's going

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:29.510 --> 00:37:33.950
<v Speaker 0>to take the, the the potential places to go okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:33.950 --> 00:37:36.500
<v Speaker 0>Which are in this case going to be, uh, the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,96,100]}

00:37:36.500 --> 00:37:40.880
<v Speaker 0>immediate subtrees of the place you are and it's going

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:40.880 --> 00:37:43.460
<v Speaker 0>to deliver, um, an integer result.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:37:44.390 --> 00:37:44.750
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:37:44.750 --> 00:37:47.960
<v Speaker 0>Think of this as the, the quality or the value

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:47.960 --> 00:37:50.000
<v Speaker 0>of, of that subtree.

NOTE CONF {"raw":[100,100,100,100]}

00:37:50.000 --> 00:37:52.310
<v Speaker 0>And I'm allowing it not just to look at the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:52.310 --> 00:37:53.870
<v Speaker 0>node but to look at the whole subtree.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:37:53.870 --> 00:37:55.820
<v Speaker 0>It might be like if it was a chess position,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,56,100]}

00:37:55.820 --> 00:37:58.040
<v Speaker 0>you might want to look at the potential places you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:58.040 --> 00:38:00.200
<v Speaker 0>could reach after 1 or 2 moves from that test

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,76]}

00:38:00.200 --> 00:38:00.950
<v Speaker 0>position.

NOTE CONF {"raw":[100]}

00:38:01.220 --> 00:38:03.110
<v Speaker 0>Okay, so a little bit more general than just looking

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:03.110 --> 00:38:07.340
<v Speaker 0>at the at the label okay.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:38:07.340 --> 00:38:09.680
<v Speaker 0>So otherwise it's the same as before.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:38:09.680 --> 00:38:12.380
<v Speaker 0>You take a you take the, you know, the predicate,

NOTE CONF {"raw":[100,100,86,100,100,100,100,100,100,100]}

00:38:12.680 --> 00:38:14.240
<v Speaker 0>uh, this is what you're looking for.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:38:14.240 --> 00:38:15.710
<v Speaker 0>You've got the evaluation function.

NOTE CONF {"raw":[100,100,100,100,100]}

00:38:15.710 --> 00:38:18.860
<v Speaker 0>You have the tree that you're looking in, and then

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:18.860 --> 00:38:21.530
<v Speaker 0>it will give you a result or maybe not give

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:21.530 --> 00:38:24.620
<v Speaker 0>you a result depending on whether it's there or not.

NOTE CONF {"raw":[100,94,100,100,100,100,100,100,100,100]}

00:38:25.340 --> 00:38:26.060
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:38:27.020 --> 00:38:28.490
<v Speaker 0>So that's the idea.

NOTE CONF {"raw":[100,100,100,100]}

00:38:29.000 --> 00:38:32.330
<v Speaker 0>And I won't go through this code because it's kind

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:32.330 --> 00:38:32.960
<v Speaker 0>of complicated.

NOTE CONF {"raw":[100,100]}

00:38:32.960 --> 00:38:36.170
<v Speaker 0>And there's also I think there's another page of code.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:37.400 --> 00:38:38.030
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:38:38.120 --> 00:38:41.630
<v Speaker 0>Another page of code which implements something called priority queues.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:41.630 --> 00:38:44.000
<v Speaker 0>But let me tell you what's going on here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:38:44.030 --> 00:38:44.600
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:38:44.600 --> 00:38:47.660
<v Speaker 0>So I haven't talked much about different data structures, but

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:47.660 --> 00:38:51.080
<v Speaker 0>two data structures that you may have heard of are

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:51.080 --> 00:38:52.910
<v Speaker 0>stack and queue.

NOTE CONF {"raw":[100,100,100]}

00:38:53.300 --> 00:38:54.050
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:38:54.050 --> 00:38:58.820
<v Speaker 0>A stack is the analogy is always used, like if

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:58.820 --> 00:39:01.880
<v Speaker 0>you're in a cafeteria and you have a bunch of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:01.880 --> 00:39:04.100
<v Speaker 0>plates and you take the sort of top one off

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:04.100 --> 00:39:04.880
<v Speaker 0>the stack.

NOTE CONF {"raw":[100,100]}

00:39:05.420 --> 00:39:08.270
<v Speaker 0>Um, so that's a stack of plates you put.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:39:08.270 --> 00:39:10.550
<v Speaker 0>If you want to put more plates into the stack,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:10.550 --> 00:39:12.350
<v Speaker 0>you put them on the top and it sort of

NOTE CONF {"raw":[100,100,100,100,100,100,100,99,100,100]}

00:39:12.350 --> 00:39:13.170
<v Speaker 0>sinks down.

NOTE CONF {"raw":[100,100]}

00:39:13.170 --> 00:39:16.410
<v Speaker 0>Everyone you put on the top is is causing it

NOTE CONF {"raw":[75,100,100,100,100,100,94,100,100,82]}

00:39:16.410 --> 00:39:18.000
<v Speaker 0>sink down and when you take one off, it's the

NOTE CONF {"raw":[93,100,100,100,100,100,100,100,97,100]}

00:39:18.000 --> 00:39:19.200
<v Speaker 0>last one that was put on.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:39:19.200 --> 00:39:19.470
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:39:19.470 --> 00:39:23.760
<v Speaker 0>So that's called um, uh last in first out.

NOTE CONF {"raw":[100,100,100,100,90,100,100,100,100]}

00:39:24.990 --> 00:39:25.620
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:39:25.620 --> 00:39:28.140
<v Speaker 0>And then there's a Q, which is like, um, at

NOTE CONF {"raw":[100,100,100,100,65,100,100,100,100,100]}

00:39:28.140 --> 00:39:31.500
<v Speaker 0>the, at the supermarket for the checkout or something like

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:31.500 --> 00:39:31.860
<v Speaker 0>that.

NOTE CONF {"raw":[100]}

00:39:31.860 --> 00:39:33.210
<v Speaker 0>You get in the back.

NOTE CONF {"raw":[100,100,100,100,100]}

00:39:33.840 --> 00:39:37.620
<v Speaker 0>This is if you're actually using, well, supermarkets with queues.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,90]}

00:39:37.620 --> 00:39:38.010
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:39:38.010 --> 00:39:42.600
<v Speaker 0>So um, you get in the last place and the,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:42.600 --> 00:39:45.090
<v Speaker 0>the person who is next served is at the front

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:45.090 --> 00:39:48.840
<v Speaker 0>and that's called um, uh, first in, first out.

NOTE CONF {"raw":[100,100,100,100,88,100,100,100,100]}

00:39:49.380 --> 00:39:50.100
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:39:50.550 --> 00:39:56.010
<v Speaker 0>Um, this is using something called a priority queue, which

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:56.010 --> 00:40:00.390
<v Speaker 0>is a variant on a queue, which is where the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:00.390 --> 00:40:04.080
<v Speaker 0>things in the queue have values and it isn't it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:04.080 --> 00:40:07.320
<v Speaker 0>isn't first in, first out or last in first out.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:07.320 --> 00:40:13.260
<v Speaker 0>It's it's, uh, it's, uh, best is the first out.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:13.590 --> 00:40:17.250
<v Speaker 0>Okay, so the things in the queue have values, and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:17.250 --> 00:40:19.650
<v Speaker 0>the queue is arranged such that the things with the

NOTE CONF {"raw":[100,94,100,100,100,100,100,100,100,100]}

00:40:19.650 --> 00:40:21.990
<v Speaker 0>best value are in the front.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:40:21.990 --> 00:40:24.900
<v Speaker 0>And those are the ones that go out first, even

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:24.900 --> 00:40:27.240
<v Speaker 0>if the best ones are the ones that came in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:27.240 --> 00:40:27.960
<v Speaker 0>last.

NOTE CONF {"raw":[100]}

00:40:27.960 --> 00:40:30.120
<v Speaker 0>Okay, so I'm not going to go through this code,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:30.120 --> 00:40:33.600
<v Speaker 0>but there's code here for implementing a priority queue.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:40:33.870 --> 00:40:37.500
<v Speaker 0>Um, and and this is code for best first search

NOTE CONF {"raw":[68,100,100,100,100,100,100,100,100,100]}

00:40:37.500 --> 00:40:39.570
<v Speaker 0>that uses that priority queue.

NOTE CONF {"raw":[100,100,91,100,100]}

00:40:39.840 --> 00:40:42.690
<v Speaker 0>Um, here's PQ standing for priority queue.

NOTE CONF {"raw":[100,100,72,100,100,100,100]}

00:40:42.690 --> 00:40:47.310
<v Speaker 0>And there's um functions that insert things into priority queues

NOTE CONF {"raw":[100,100,52,100,100,100,100,100,100,100]}

00:40:47.310 --> 00:40:47.940
<v Speaker 0>and so forth.

NOTE CONF {"raw":[100,100,100]}

00:40:47.940 --> 00:40:48.180
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:40:48.180 --> 00:40:50.520
<v Speaker 0>So you can look at this code, um, in your

NOTE CONF {"raw":[100,100,100,100,100,100,100,92,100,100]}

00:40:50.520 --> 00:40:53.610
<v Speaker 0>copious free time, um, if you, if you wish.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:40:53.610 --> 00:40:55.080
<v Speaker 0>But that's what it's doing.

NOTE CONF {"raw":[100,100,100,100,100]}

00:40:55.560 --> 00:40:58.530
<v Speaker 0>Um, the code for priorities queues is like, it's, it's

NOTE CONF {"raw":[100,100,100,100,79,100,100,100,100,100]}

00:40:58.530 --> 00:41:02.760
<v Speaker 0>kind of like, um, uh, ordered trees from the earlier

NOTE CONF {"raw":[100,100,100,100,100,95,100,100,100,100]}

00:41:02.760 --> 00:41:06.330
<v Speaker 0>lecture, but we're maintaining items in descending order according to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:06.330 --> 00:41:08.250
<v Speaker 0>the result of the evaluation function.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:41:08.610 --> 00:41:13.150
<v Speaker 0>Um, and getting stuff out of the tree uses these

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:13.150 --> 00:41:14.200
<v Speaker 0>functions top and pop.

NOTE CONF {"raw":[100,100,100,100]}

00:41:14.200 --> 00:41:14.560
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:41:14.560 --> 00:41:15.910
<v Speaker 0>So, um.

NOTE CONF {"raw":[100,91]}

00:41:17.560 --> 00:41:18.130
<v Speaker 0>Right.

NOTE CONF {"raw":[96]}

00:41:21.100 --> 00:41:25.690
<v Speaker 0>So, for example, um, I could show you these things

NOTE CONF {"raw":[100,100,100,100,100,93,100,100,100,100]}

00:41:25.690 --> 00:41:28.330
<v Speaker 0>running, but I think in the interest of time, I'll

NOTE CONF {"raw":[100,100,100,100,100,100,98,100,100,100]}

00:41:28.330 --> 00:41:30.280
<v Speaker 0>just talk through these, okay?

NOTE CONF {"raw":[100,100,100,100,100]}

00:41:30.280 --> 00:41:32.500
<v Speaker 0>This is what I would get if I would run

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:32.500 --> 00:41:34.840
<v Speaker 0>them on my computer, on my laptop.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:41:34.960 --> 00:41:35.530
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:41:35.530 --> 00:41:39.010
<v Speaker 0>So, um, this this, um, infinite tree.

NOTE CONF {"raw":[100,100,100,100,96,100,100]}

00:41:39.010 --> 00:41:40.810
<v Speaker 0>I mean, the interesting thing is to look at infinite

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:40.810 --> 00:41:43.210
<v Speaker 0>trees, because these, these these tree that I have is

NOTE CONF {"raw":[100,100,100,100,100,68,100,100,100,100]}

00:41:43.210 --> 00:41:45.580
<v Speaker 0>too small to be very interesting.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:41:45.580 --> 00:41:47.320
<v Speaker 0>So this was the infinite tree that I had.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:41:47.320 --> 00:41:47.950
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:41:47.950 --> 00:41:49.840
<v Speaker 0>So just remember this tree.

NOTE CONF {"raw":[100,100,100,100,100]}

00:41:51.400 --> 00:41:52.150
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:41:52.420 --> 00:41:54.730
<v Speaker 0>Um, negative stuff down to the left.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:41:54.730 --> 00:41:56.710
<v Speaker 0>Positive stuff down to the right.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:42:03.340 --> 00:42:04.060
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:42:04.270 --> 00:42:07.930
<v Speaker 0>And let's suppose that my evaluation function, just to keep

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:07.930 --> 00:42:11.620
<v Speaker 0>things really simple All it does is return the node

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:11.620 --> 00:42:12.250
<v Speaker 0>label.

NOTE CONF {"raw":[100]}

00:42:13.000 --> 00:42:14.890
<v Speaker 0>Okay, this is really, really simple.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:42:15.310 --> 00:42:19.150
<v Speaker 0>Um, and for the nil tree it returns zero.

NOTE CONF {"raw":[100,100,100,100,97,100,100,100,100]}

00:42:19.480 --> 00:42:20.170
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:42:20.170 --> 00:42:25.780
<v Speaker 0>So um, so using that using that evaluation function.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:42:26.650 --> 00:42:30.010
<v Speaker 0>Um, well first of all breadth first search will find

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:30.010 --> 00:42:32.980
<v Speaker 0>will find uh, if I'm looking for something that's greater

NOTE CONF {"raw":[97,100,100,100,100,100,100,100,100,100]}

00:42:32.980 --> 00:42:37.030
<v Speaker 0>than 19 it'll find it.

NOTE CONF {"raw":[100,100,98,100,100]}

00:42:39.010 --> 00:42:39.550
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:42:39.550 --> 00:42:43.030
<v Speaker 0>Remember my my tree negative stuff down to the to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:43.030 --> 00:42:43.990
<v Speaker 0>the left.

NOTE CONF {"raw":[100,100]}

00:42:43.990 --> 00:42:45.820
<v Speaker 0>Positive stuff down to the right.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:42:45.820 --> 00:42:48.670
<v Speaker 0>It'll eventually find something that's greater than 19.

NOTE CONF {"raw":[96,100,100,100,100,100,100,100]}

00:42:48.670 --> 00:42:50.080
<v Speaker 0>It's a label with 20.

NOTE CONF {"raw":[100,100,100,56,100]}

00:42:50.260 --> 00:42:51.460
<v Speaker 0>And it will.

NOTE CONF {"raw":[100,100,100]}

00:42:51.670 --> 00:42:54.760
<v Speaker 0>It'll find it by going layer by layer.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:42:55.150 --> 00:42:58.570
<v Speaker 0>And it'll find it in the 21st layer.

NOTE CONF {"raw":[100,96,100,100,100,100,100,100]}

00:42:59.470 --> 00:43:00.250
<v Speaker 0>Okay.

NOTE CONF {"raw":[80]}

00:43:00.820 --> 00:43:02.620
<v Speaker 0>Um, and in order to get there.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:43:02.620 --> 00:43:05.500
<v Speaker 0>Okay, if I run this on my laptop, it takes

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:05.500 --> 00:43:10.940
<v Speaker 0>about 10s and it had to look at 2 million

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:10.940 --> 00:43:13.070
<v Speaker 0>nodes to find it.

NOTE CONF {"raw":[100,100,100,100]}

00:43:13.070 --> 00:43:13.490
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:43:13.490 --> 00:43:16.760
<v Speaker 0>Because starting at the top, it's down here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:43:16.970 --> 00:43:17.420
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:43:17.420 --> 00:43:19.580
<v Speaker 0>Starting at the top it's going layer by layer by

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:19.580 --> 00:43:20.630
<v Speaker 0>layer by layer.

NOTE CONF {"raw":[100,100,100]}

00:43:20.630 --> 00:43:22.880
<v Speaker 0>Each one is twice as long as the one before,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:22.880 --> 00:43:26.960
<v Speaker 0>and eventually it finds it down here layer 21 okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:26.960 --> 00:43:28.700
<v Speaker 0>But it finds it okay.

NOTE CONF {"raw":[100,100,100,100,100]}

00:43:28.700 --> 00:43:33.410
<v Speaker 0>Best first search if if the evaluation function is the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:33.410 --> 00:43:38.600
<v Speaker 0>value of the of the value of the node, it'll

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,98]}

00:43:38.600 --> 00:43:42.680
<v Speaker 0>find it in a 0.02 seconds.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:43:42.680 --> 00:43:44.750
<v Speaker 0>And it only has to look at 21 nodes to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:44.750 --> 00:43:45.050
<v Speaker 0>find it.

NOTE CONF {"raw":[100,100]}

00:43:45.050 --> 00:43:46.370
<v Speaker 0>So let me just go back and look at this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:46.370 --> 00:43:47.540
<v Speaker 0>tree quickly.

NOTE CONF {"raw":[100,100]}

00:43:48.050 --> 00:43:50.330
<v Speaker 0>Uh, okay.

NOTE CONF {"raw":[100,100]}

00:43:50.330 --> 00:43:54.050
<v Speaker 0>It'll start here and it'll decide what what am I

NOTE CONF {"raw":[100,100,100,100,100,100,91,100,100,100]}

00:43:54.080 --> 00:43:54.920
<v Speaker 0>going to do now?

NOTE CONF {"raw":[100,100,100,100]}

00:43:54.920 --> 00:43:56.780
<v Speaker 0>I've got a node with a one and a node

NOTE CONF {"raw":[100,100,100,100,100,94,100,100,100,100]}

00:43:56.780 --> 00:43:57.740
<v Speaker 0>with a minus one.

NOTE CONF {"raw":[100,100,100,100]}

00:43:57.740 --> 00:44:01.220
<v Speaker 0>And so if my strategy is to take the one

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:01.220 --> 00:44:04.940
<v Speaker 0>with the evaluation function giving the largest value and the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:04.940 --> 00:44:07.430
<v Speaker 0>value of the evaluation function is just the node, It's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:07.430 --> 00:44:09.980
<v Speaker 0>going to go this way because one is greater than

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:09.980 --> 00:44:11.000
<v Speaker 0>minus one.

NOTE CONF {"raw":[100,100]}

00:44:11.480 --> 00:44:12.110
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:44:12.110 --> 00:44:14.120
<v Speaker 0>And then at this point it's going to look at

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:14.120 --> 00:44:14.930
<v Speaker 0>these two branches.

NOTE CONF {"raw":[100,100,100]}

00:44:14.930 --> 00:44:17.030
<v Speaker 0>And it's going to decide to go again to the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:17.030 --> 00:44:19.910
<v Speaker 0>right because two is greater than zero and so forth

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:19.910 --> 00:44:20.330
<v Speaker 0>and so on.

NOTE CONF {"raw":[100,100,100]}

00:44:20.330 --> 00:44:21.830
<v Speaker 0>It's going to go down this branch.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:44:22.190 --> 00:44:26.030
<v Speaker 0>Keep going until it gets to the label 20 which

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:26.030 --> 00:44:28.430
<v Speaker 0>is on level 21.

NOTE CONF {"raw":[100,100,100,100]}

00:44:29.960 --> 00:44:32.300
<v Speaker 0>Uh, wait a minute.

NOTE CONF {"raw":[100,100,100,100]}

00:44:35.600 --> 00:44:35.960
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:44:35.960 --> 00:44:38.810
<v Speaker 0>So it'll find it and much more quickly okay.

NOTE CONF {"raw":[100,95,100,100,100,100,100,100,100]}

00:44:38.810 --> 00:44:41.870
<v Speaker 0>Because it's doing this best, best first search.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:44:43.580 --> 00:44:44.210
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:44:46.280 --> 00:44:49.100
<v Speaker 0>Now, if I was looking for something that's greater than

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:49.100 --> 00:44:54.950
<v Speaker 0>100, and if I use breadth first search, it will

NOTE CONF {"raw":[79,100,100,100,100,100,100,100,100,100]}

00:44:54.950 --> 00:45:00.380
<v Speaker 0>have to look through 100 layers, which it will find.

NOTE CONF {"raw":[100,100,100,100,80,100,100,100,100,100]}

00:45:00.830 --> 00:45:02.960
<v Speaker 0>Uh, I don't know how long it would take on

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:02.960 --> 00:45:05.480
<v Speaker 0>my laptop, but it has to look at this many

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:05.480 --> 00:45:06.390
<v Speaker 0>nodes to get there.

NOTE CONF {"raw":[100,100,100,100]}

00:45:06.390 --> 00:45:07.230
<v Speaker 0>That's a lot.

NOTE CONF {"raw":[100,100,100]}

00:45:07.440 --> 00:45:10.650
<v Speaker 0>Okay, probably, uh, probably.

NOTE CONF {"raw":[100,100,100,100]}

00:45:10.650 --> 00:45:12.810
<v Speaker 0>It would take too long to wait for it, I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:12.810 --> 00:45:13.410
<v Speaker 0>don't know.

NOTE CONF {"raw":[100,100]}

00:45:13.620 --> 00:45:14.880
<v Speaker 0>Um, okay.

NOTE CONF {"raw":[100,100]}

00:45:14.880 --> 00:45:20.580
<v Speaker 0>Because it's basically two to the 100th or two to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:20.580 --> 00:45:24.210
<v Speaker 0>the two to the, uh, actually two to the 102

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,55]}

00:45:24.210 --> 00:45:26.640
<v Speaker 0>minus one I've got written down here.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:45:26.640 --> 00:45:27.000
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:45:27.000 --> 00:45:29.040
<v Speaker 0>Because top layer is layer zero and so forth.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:45:29.040 --> 00:45:29.220
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:45:29.220 --> 00:45:31.950
<v Speaker 0>It's the 21st layer where the first one is zero.

NOTE CONF {"raw":[100,68,100,100,100,100,100,100,100,100]}

00:45:31.950 --> 00:45:32.250
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:45:32.250 --> 00:45:33.990
<v Speaker 0>So that will take an awful long time.

NOTE CONF {"raw":[100,71,71,100,100,100,100,100]}

00:45:33.990 --> 00:45:38.010
<v Speaker 0>It'll find it because breadth first search will always terminate

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:38.010 --> 00:45:39.660
<v Speaker 0>if the thing is there.

NOTE CONF {"raw":[100,100,100,100,100]}

00:45:40.620 --> 00:45:41.220
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:45:41.220 --> 00:45:44.730
<v Speaker 0>But best first search just has to do um, it'll

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:44.730 --> 00:45:48.150
<v Speaker 0>go right down the, um, down this branch and find

NOTE CONF {"raw":[100,100,100,100,60,100,100,100,100,100]}

00:45:48.150 --> 00:45:52.140
<v Speaker 0>it very quickly looking at 101 nodes to get there,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:52.290 --> 00:45:52.920
<v Speaker 0>okay.

NOTE CONF {"raw":[100]}

00:45:52.920 --> 00:45:54.240
<v Speaker 0>In almost no time.

NOTE CONF {"raw":[100,100,100,100]}

00:45:55.620 --> 00:45:56.430
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:45:56.760 --> 00:46:00.090
<v Speaker 0>So I mean, this was a very, very, um, uh,

NOTE CONF {"raw":[100,100,100,100,82,100,100,100,100,100]}

00:46:00.090 --> 00:46:04.440
<v Speaker 0>kind of superficial look at this idea of heuristic search.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:04.440 --> 00:46:07.470
<v Speaker 0>The thing about heuristic search is that the heuristics don't

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:07.470 --> 00:46:10.860
<v Speaker 0>always work okay.

NOTE CONF {"raw":[100,100,100]}

00:46:10.860 --> 00:46:14.160
<v Speaker 0>The performance depends critically on the quality of the evaluation

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:14.160 --> 00:46:14.850
<v Speaker 0>function.

NOTE CONF {"raw":[100]}

00:46:14.850 --> 00:46:18.750
<v Speaker 0>And my evaluation function here was was the simplest possible

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:18.750 --> 00:46:19.350
<v Speaker 0>thing.

NOTE CONF {"raw":[100]}

00:46:19.530 --> 00:46:20.340
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:46:20.580 --> 00:46:22.560
<v Speaker 0>Um, and it also depends on the structure of the

NOTE CONF {"raw":[98,100,100,100,100,100,100,100,100,100]}

00:46:22.560 --> 00:46:26.580
<v Speaker 0>search space and how the evaluation function relates to the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,95]}

00:46:26.580 --> 00:46:27.540
<v Speaker 0>search space.

NOTE CONF {"raw":[100,100]}

00:46:27.540 --> 00:46:32.430
<v Speaker 0>And this diagram sort of shows you what can happen.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:32.610 --> 00:46:35.490
<v Speaker 0>Um, ignore these, these equations.

NOTE CONF {"raw":[100,100,100,100,100]}

00:46:35.550 --> 00:46:38.010
<v Speaker 0>Uh, the important thing was these with these pictures.

NOTE CONF {"raw":[86,100,100,100,100,100,100,100,100]}

00:46:38.010 --> 00:46:38.400
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:46:38.400 --> 00:46:42.390
<v Speaker 0>So you can think of, um, of best first search

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:42.600 --> 00:46:48.000
<v Speaker 0>as, um, as, as climbing a hill and you're going,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,98,100]}

00:46:48.000 --> 00:46:49.440
<v Speaker 0>you're always going up.

NOTE CONF {"raw":[100,100,100,100]}

00:46:49.440 --> 00:46:51.780
<v Speaker 0>So if you're at a point, if you're at a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:51.780 --> 00:46:55.410
<v Speaker 0>point in this space and you want to decide where

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:55.410 --> 00:46:56.970
<v Speaker 0>to go next, and your objective is to get to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:56.970 --> 00:46:59.370
<v Speaker 0>the top of the hill, a good heuristic is to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:59.370 --> 00:47:02.820
<v Speaker 0>go is to go the steepest in the steepest direction.

NOTE CONF {"raw":[100,100,100,100,100,100,92,100,100,100]}

00:47:02.820 --> 00:47:03.990
<v Speaker 0>You can upwards.

NOTE CONF {"raw":[100,100,100]}

00:47:04.380 --> 00:47:04.980
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:47:04.980 --> 00:47:07.560
<v Speaker 0>And then you eventually get up to the top.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:47:08.790 --> 00:47:09.480
<v Speaker 0>Okay.

NOTE CONF {"raw":[87]}

00:47:09.750 --> 00:47:11.280
<v Speaker 0>And that that works.

NOTE CONF {"raw":[100,100,100,100]}

00:47:11.280 --> 00:47:13.860
<v Speaker 0>If the search space looks like this, no matter where

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:13.860 --> 00:47:17.010
<v Speaker 0>you are in this space, if you always follow the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:17.010 --> 00:47:21.240
<v Speaker 0>heuristic of going the steepest direction upwards, you'll get to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:21.240 --> 00:47:22.020
<v Speaker 0>the top.

NOTE CONF {"raw":[100,100]}

00:47:22.020 --> 00:47:22.620
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:47:22.620 --> 00:47:25.830
<v Speaker 0>But if the search space looks like this, this bottom

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:25.830 --> 00:47:26.550
<v Speaker 0>picture.

NOTE CONF {"raw":[100]}

00:47:26.940 --> 00:47:28.920
<v Speaker 0>Okay, when you have a when you have a local

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:28.920 --> 00:47:31.200
<v Speaker 0>maximum which is not a global maximum.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:47:31.200 --> 00:47:34.890
<v Speaker 0>So if you start off over here and you follow

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:34.890 --> 00:47:38.250
<v Speaker 0>the heuristic of going always in the steepest upward direction,

NOTE CONF {"raw":[97,100,100,100,100,100,100,100,100,100]}

00:47:38.250 --> 00:47:39.360
<v Speaker 0>you'll get to this.

NOTE CONF {"raw":[100,100,100,100]}

00:47:39.360 --> 00:47:41.010
<v Speaker 0>You'll get to the top here.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:47:41.340 --> 00:47:42.090
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:47:42.090 --> 00:47:45.750
<v Speaker 0>But if you start over here and you follow that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:45.750 --> 00:47:50.400
<v Speaker 0>heuristic, you'll end up at this at this point here,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:50.400 --> 00:47:52.530
<v Speaker 0>which is the top of a hill, but it's the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:52.530 --> 00:47:55.590
<v Speaker 0>top of the smaller hill, okay.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:47:55.590 --> 00:47:58.860
<v Speaker 0>And you would never you would never think to go

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:58.860 --> 00:48:00.600
<v Speaker 0>down and then up again.

NOTE CONF {"raw":[100,100,100,100,100]}

00:48:00.960 --> 00:48:01.500
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:48:01.500 --> 00:48:06.190
<v Speaker 0>If your heuristic is simply always go upwards as deeply

NOTE CONF {"raw":[100,95,100,100,100,100,100,100,100,100]}

00:48:06.190 --> 00:48:06.850
<v Speaker 0>as possible.

NOTE CONF {"raw":[100,100]}

00:48:06.850 --> 00:48:10.720
<v Speaker 0>Okay, so like I say, uh, how well this works

NOTE CONF {"raw":[100,100,100,100,100,72,100,100,100,100]}

00:48:10.720 --> 00:48:15.760
<v Speaker 0>is it's affected by the, the evaluation function and the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:15.760 --> 00:48:17.110
<v Speaker 0>shape of the search space.

NOTE CONF {"raw":[100,100,100,100,100]}

00:48:17.110 --> 00:48:20.230
<v Speaker 0>And in general, um, you don't know the shape of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:20.230 --> 00:48:21.310
<v Speaker 0>the search space.

NOTE CONF {"raw":[100,100,100]}

00:48:21.550 --> 00:48:24.670
<v Speaker 0>Um, you can maybe guess and you can also see

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:24.670 --> 00:48:26.800
<v Speaker 0>local bits of it when you're doing a search, but

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:26.800 --> 00:48:28.600
<v Speaker 0>you can't see the whole thing at once.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:48:28.990 --> 00:48:29.680
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:48:30.040 --> 00:48:31.450
<v Speaker 0>Um, right.

NOTE CONF {"raw":[100,100]}

00:48:31.450 --> 00:48:34.870
<v Speaker 0>And so that was a kind of lightning, um, introduction

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:34.870 --> 00:48:37.300
<v Speaker 0>to, um, searching in trees.

NOTE CONF {"raw":[100,100,100,91,100]}

00:48:37.450 --> 00:48:41.020
<v Speaker 0>Um, if you go on in informatics and you do,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:41.020 --> 00:48:43.600
<v Speaker 0>um, courses in AI and so forth, there's a lot

NOTE CONF {"raw":[64,100,100,100,100,100,100,100,100,100]}

00:48:43.600 --> 00:48:45.820
<v Speaker 0>more to say about search than what I've said here,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:45.820 --> 00:48:47.410
<v Speaker 0>but it's a a first glimpse.

NOTE CONF {"raw":[100,100,95,100,100,100]}

00:48:47.410 --> 00:48:48.070
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:48:48.070 --> 00:48:50.200
<v Speaker 0>So thanks for your attention.

NOTE CONF {"raw":[100,100,100,100,100]}

00:48:50.200 --> 00:48:54.160
<v Speaker 0>And I'll see you on Tuesday, Monday, Monday.

NOTE CONF {"raw":[100,84,100,100,100,100,100,100]}

00:48:55.030 --> 00:48:55.330
<v Unknown>Yeah.

NOTE CONF {"raw":[100]}

00:49:28.690 --> 00:49:29.050
<v Unknown>All right.

NOTE CONF {"raw":[95,95]}

00:49:30.160 --> 00:49:31.540
<v Speaker 0>Did you get your thing to work?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

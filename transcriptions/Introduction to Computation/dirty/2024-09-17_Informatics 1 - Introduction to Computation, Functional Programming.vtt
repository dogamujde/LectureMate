WEBVTT

00:00:00.510 --> 00:00:00.930
<v Speaker 0>Yeah, yeah.

NOTE CONF {"raw":[100,100]}

00:00:00.930 --> 00:00:01.350
<v Speaker 0>Of course.

NOTE CONF {"raw":[100,100]}

00:00:01.350 --> 00:00:02.550
<v Speaker 0>Music comes after you.

NOTE CONF {"raw":[100,100,100,100]}

00:00:02.730 --> 00:00:03.300
<v Speaker 0>All right.

NOTE CONF {"raw":[100,100]}

00:00:04.020 --> 00:00:04.410
<v Speaker 1>Um.

NOTE CONF {"raw":[100]}

00:00:04.410 --> 00:00:05.310
<v Speaker 1>Hello, everyone.

NOTE CONF {"raw":[100,100]}

00:00:05.520 --> 00:00:07.440
<v Speaker 1>Uh, the lecture is starting, but before the lecture is

NOTE CONF {"raw":[100,74,97,95,100,100,100,100,100,72]}

00:00:07.440 --> 00:00:09.600
<v Speaker 1>starting, I'm here from Comstock.

NOTE CONF {"raw":[100,71,100,100,52]}

00:00:10.140 --> 00:00:11.850
<v Speaker 1>Uh, and I'd like to announce an event we're going

NOTE CONF {"raw":[91,100,100,100,100,100,75,100,100,100]}

00:00:11.850 --> 00:00:12.990
<v Speaker 1>to be doing this week.

NOTE CONF {"raw":[100,100,100,100,100]}

00:00:13.170 --> 00:00:14.610
<v Speaker 1>Uh, maybe some of you have just been to the

NOTE CONF {"raw":[92,100,100,100,100,100,100,100,100,100]}

00:00:14.610 --> 00:00:15.540
<v Speaker 1>Informatics fair.

NOTE CONF {"raw":[100,97]}

00:00:15.540 --> 00:00:16.020
<v Speaker 1>Right now.

NOTE CONF {"raw":[100,100]}

00:00:16.020 --> 00:00:17.160
<v Speaker 1>We're going to have a similar event.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:00:17.160 --> 00:00:18.990
<v Speaker 1>It's going to be the sig fair where you can

NOTE CONF {"raw":[100,100,100,100,100,83,100,100,100,100]}

00:00:18.990 --> 00:00:20.880
<v Speaker 1>find out more about a special interest groups.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:00:20.880 --> 00:00:24.180
<v Speaker 1>We have one for AI theoretical computer science, quant server

NOTE CONF {"raw":[100,100,100,100,95,100,100,100,100,100]}

00:00:24.180 --> 00:00:30.390
<v Speaker 1>management, personal projects, cybersecurity, cloud stuff, computer architecture, game development

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:00:30.390 --> 00:00:31.770
<v Speaker 1>and competitive programming.

NOTE CONF {"raw":[100,100,100]}

00:00:31.770 --> 00:00:33.450
<v Speaker 1>So if any of those sound like they might be

NOTE CONF {"raw":[100,100,100,100,100,89,100,100,100,100]}

00:00:33.450 --> 00:00:35.490
<v Speaker 1>of interest to you, this event is going to take

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:00:35.490 --> 00:00:39.450
<v Speaker 1>place on September 21st this Saturday at 3 p.m..

NOTE CONF {"raw":[100,100,100,100,100,100,100,82,82]}

00:00:39.600 --> 00:00:41.160
<v Speaker 1>Uh, it's from 3 to 530.

NOTE CONF {"raw":[86,100,100,100,100,100]}

00:00:41.160 --> 00:00:42.540
<v Speaker 1>If you show up at three, there's going to be

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:00:42.540 --> 00:00:44.430
<v Speaker 1>a welcome talk where all the sigs introduce themselves.

NOTE CONF {"raw":[100,100,100,100,100,87,81,100,100]}

00:00:44.430 --> 00:00:46.110
<v Speaker 1>You can find out what they do, what kind of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:00:46.110 --> 00:00:48.270
<v Speaker 1>events you can attend and how you can get involved.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:00:48.270 --> 00:00:50.460
<v Speaker 1>And after that you can chat to the different committees.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:00:51.030 --> 00:00:53.370
<v Speaker 1>Uh, so yeah, that's going to be that's going to

NOTE CONF {"raw":[90,100,100,100,100,100,100,100,100,100]}

00:00:53.370 --> 00:00:54.360
<v Speaker 1>be this Saturday.

NOTE CONF {"raw":[100,100,100]}

00:00:54.360 --> 00:00:56.520
<v Speaker 1>There's also going to be free pizza if that's a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:00:56.520 --> 00:00:57.930
<v Speaker 1>deal maker for any of you.

NOTE CONF {"raw":[100,87,100,100,100,100]}

00:00:58.050 --> 00:01:00.420
<v Speaker 1>And if this sounds interesting, join our discord.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:01:00.420 --> 00:01:02.010
<v Speaker 1>We will have more announcements about that there.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:01:02.010 --> 00:01:03.750
<v Speaker 1>And of course see you guys on Saturday.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:01:03.900 --> 00:01:05.160
<v Speaker 1>And now over to Don.

NOTE CONF {"raw":[98,100,100,100,100]}

00:01:05.160 --> 00:01:06.060
<v Speaker 1>Enjoy this lecture.

NOTE CONF {"raw":[71,100,100]}

00:01:06.060 --> 00:01:06.660
<v Speaker 1>Where is it.

NOTE CONF {"raw":[100,100,100]}

00:01:06.660 --> 00:01:08.430
<v Speaker 1>Oh this is going to be in the Informatics Forum.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:08.430 --> 00:01:09.210
<v Speaker 1>Thank you very much okay.

NOTE CONF {"raw":[100,100,100,100,70]}

00:01:09.210 --> 00:01:09.480
<v Speaker 0>Right.

NOTE CONF {"raw":[97]}

00:01:09.480 --> 00:01:09.780
<v Speaker 1>Yeah.

NOTE CONF {"raw":[67]}

00:01:10.260 --> 00:01:10.980
<v Speaker 1>Thank you guys.

NOTE CONF {"raw":[100,100,100]}

00:01:13.560 --> 00:01:13.740
<v Speaker 0>Thanks.

NOTE CONF {"raw":[51]}

00:01:13.740 --> 00:01:16.110
<v Speaker 0>Thanks very much.

NOTE CONF {"raw":[87,100,100]}

00:01:16.110 --> 00:01:16.800
<v Speaker 0>Thanks.

NOTE CONF {"raw":[100]}

00:01:16.920 --> 00:01:18.090
<v Speaker 0>Thanks, Martin.

NOTE CONF {"raw":[100,100]}

00:01:18.360 --> 00:01:19.500
<v Speaker 0>Um, right.

NOTE CONF {"raw":[98,100]}

00:01:19.500 --> 00:01:21.210
<v Speaker 0>So, uh, lecture time.

NOTE CONF {"raw":[100,68,100,100]}

00:02:05.830 --> 00:02:06.070
<v Speaker 0>All.

NOTE CONF {"raw":[60]}

00:02:42.550 --> 00:02:43.180
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:02:43.180 --> 00:02:45.790
<v Speaker 0>So that was a theme from Indiana Jones, as you

NOTE CONF {"raw":[100,100,100,100,93,100,100,100,100,100]}

00:02:45.790 --> 00:02:47.920
<v Speaker 0>probably recognised.

NOTE CONF {"raw":[100,98]}

00:02:48.250 --> 00:02:51.490
<v Speaker 0>Um, put us in the right state of mind for

NOTE CONF {"raw":[97,100,100,100,100,100,100,100,100,100]}

00:02:51.490 --> 00:02:55.150
<v Speaker 0>our, um, first lecture on functional programming.

NOTE CONF {"raw":[100,82,100,100,100,100,100]}

00:02:55.150 --> 00:02:59.380
<v Speaker 0>So this lecture is going to be on two things.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:00.430 --> 00:03:02.470
<v Speaker 0>Um, so first of all, I'm going to be telling

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:02.470 --> 00:03:05.050
<v Speaker 0>you what is functional programming and why you want to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:05.050 --> 00:03:06.250
<v Speaker 0>learn about it.

NOTE CONF {"raw":[100,100,100]}

00:03:06.550 --> 00:03:08.230
<v Speaker 0>That's about the first half of the lecture.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:03:08.230 --> 00:03:09.850
<v Speaker 0>And then the second half of the lecture.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:03:09.850 --> 00:03:13.240
<v Speaker 0>I'm going to be starting to actually teach you functional

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:13.240 --> 00:03:19.060
<v Speaker 0>programming, starting with very simple concepts, um, types and values.

NOTE CONF {"raw":[100,100,100,100,100,100,88,100,100,100]}

00:03:20.260 --> 00:03:21.010
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:03:21.220 --> 00:03:22.420
<v Speaker 0>Uh, let's get started.

NOTE CONF {"raw":[52,100,100,100]}

00:03:23.620 --> 00:03:28.120
<v Speaker 0>So, um, who has heard of object oriented programming?

NOTE CONF {"raw":[100,69,100,100,100,100,100,100,100]}

00:03:28.120 --> 00:03:28.870
<v Speaker 0>Anybody?

NOTE CONF {"raw":[100]}

00:03:29.080 --> 00:03:30.430
<v Speaker 0>Okay, everybody.

NOTE CONF {"raw":[100,100]}

00:03:30.430 --> 00:03:30.970
<v Speaker 0>Almost.

NOTE CONF {"raw":[100]}

00:03:30.970 --> 00:03:32.140
<v Speaker 0>Or maybe everybody.

NOTE CONF {"raw":[100,100,100]}

00:03:32.140 --> 00:03:32.530
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:03:32.530 --> 00:03:33.550
<v Speaker 0>Who has heard?

NOTE CONF {"raw":[100,100,100]}

00:03:33.910 --> 00:03:36.460
<v Speaker 0>Um, you know, so that's that's that's things like Java

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:36.490 --> 00:03:40.030
<v Speaker 0>C plus plus, uh, many programming languages.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:03:40.030 --> 00:03:45.490
<v Speaker 0>So who before they, uh, started reading about what's in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:45.490 --> 00:03:49.210
<v Speaker 0>this course, uh, had heard of functional programming before.

NOTE CONF {"raw":[100,100,99,100,100,71,100,100,100]}

00:03:49.840 --> 00:03:50.740
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:03:51.160 --> 00:03:53.380
<v Speaker 0>A fair number of people, but less than half.

NOTE CONF {"raw":[55,100,100,100,100,100,100,100,100]}

00:03:53.380 --> 00:03:53.710
<v Speaker 0>All right.

NOTE CONF {"raw":[82,82]}

00:03:53.710 --> 00:03:54.610
<v Speaker 0>That's not surprising.

NOTE CONF {"raw":[100,100,100]}

00:03:54.640 --> 00:03:56.990
<v Speaker 0>Okay, so Haskell is a functional programming language.

NOTE CONF {"raw":[82,100,100,100,100,100,100,100]}

00:03:56.990 --> 00:04:00.380
<v Speaker 0>Why are we teaching functional programming in Haskell?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:04:01.820 --> 00:04:06.770
<v Speaker 0>All right, so, um, does anybody know what Turing Award

NOTE CONF {"raw":[99,99,100,100,100,100,100,100,100,100]}

00:04:06.770 --> 00:04:07.250
<v Speaker 0>is?

NOTE CONF {"raw":[100]}

00:04:09.530 --> 00:04:10.040
<v Speaker 0>Yeah.

NOTE CONF {"raw":[99]}

00:04:10.160 --> 00:04:10.820
<v Speaker 0>And yeah.

NOTE CONF {"raw":[93,100]}

00:04:10.820 --> 00:04:12.740
<v Speaker 0>Can you just say, um.

NOTE CONF {"raw":[100,100,100,100,82]}

00:04:14.690 --> 00:04:16.700
<v Speaker 0>I'm sorry, the.

NOTE CONF {"raw":[87,100,98]}

00:04:16.700 --> 00:04:17.720
<v Speaker 0>What did.

NOTE CONF {"raw":[100,88]}

00:04:17.720 --> 00:04:17.959
<v Speaker 2>You say?

NOTE CONF {"raw":[100,100]}

00:04:17.959 --> 00:04:18.109
<v Speaker 2>What?

NOTE CONF {"raw":[100]}

00:04:18.109 --> 00:04:18.590
<v Speaker 2>The Turing.

NOTE CONF {"raw":[100,100]}

00:04:18.920 --> 00:04:22.370
<v Speaker 0>Turing award, the highest award in computer science.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:04:22.370 --> 00:04:22.550
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:04:22.550 --> 00:04:25.310
<v Speaker 0>So it's like the Nobel Prize of of computer science

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:25.310 --> 00:04:27.290
<v Speaker 0>named after Alan Turing.

NOTE CONF {"raw":[100,100,100,100]}

00:04:27.290 --> 00:04:29.510
<v Speaker 0>I mentioned this because two of the names on this

NOTE CONF {"raw":[100,58,100,100,100,100,100,100,100,100]}

00:04:29.510 --> 00:04:31.400
<v Speaker 0>slide are Turing Award winners.

NOTE CONF {"raw":[100,100,100,100,87]}

00:04:31.400 --> 00:04:33.650
<v Speaker 0>So this is like people you have to take seriously

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:33.650 --> 00:04:35.270
<v Speaker 0>when they say things.

NOTE CONF {"raw":[100,100,100,100]}

00:04:35.300 --> 00:04:35.720
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:04:35.720 --> 00:04:41.240
<v Speaker 0>So, um, some quotations about the relationship between computation and

NOTE CONF {"raw":[100,70,100,100,100,100,100,100,100,100]}

00:04:41.240 --> 00:04:42.110
<v Speaker 0>language.

NOTE CONF {"raw":[100]}

00:04:42.440 --> 00:04:45.830
<v Speaker 0>Um, at least that's why I'm telling you about this,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:45.830 --> 00:04:46.670
<v Speaker 0>uh, these quotations.

NOTE CONF {"raw":[80,100,100]}

00:04:46.670 --> 00:04:51.230
<v Speaker 0>So the first one is by Edsger Dijkstra, Turing Award

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:51.230 --> 00:04:51.800
<v Speaker 0>winner.

NOTE CONF {"raw":[100]}

00:04:52.040 --> 00:04:54.470
<v Speaker 0>Um, he was one of the first computer scientists to

NOTE CONF {"raw":[98,100,100,100,100,100,100,100,100,100]}

00:04:54.470 --> 00:05:00.170
<v Speaker 0>take programming seriously as a kind of scientific activity, rather

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:00.170 --> 00:05:03.500
<v Speaker 0>than just trying to sort of get programs to do

NOTE CONF {"raw":[100,100,100,100,100,100,100,99,100,100]}

00:05:03.500 --> 00:05:07.190
<v Speaker 0>stuff by putting putting instructions in the right order and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:07.190 --> 00:05:07.640
<v Speaker 0>so forth.

NOTE CONF {"raw":[100,100]}

00:05:07.640 --> 00:05:11.690
<v Speaker 0>So he's looking at it as a serious intellectual activity.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:11.690 --> 00:05:14.240
<v Speaker 0>And he he wrote that computer science is no more

NOTE CONF {"raw":[100,100,100,100,100,100,58,58,58,100]}

00:05:14.240 --> 00:05:16.970
<v Speaker 0>about computers than astronomy is about telescopes.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:05:16.970 --> 00:05:19.670
<v Speaker 0>And what he means by that is that, you know,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:19.670 --> 00:05:26.450
<v Speaker 0>astronomers don't, uh, devote their their intellectual effort to the,

NOTE CONF {"raw":[100,100,56,100,100,100,100,100,100,100]}

00:05:26.450 --> 00:05:29.480
<v Speaker 0>the gadgets on their telescopes and, you know, how to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:29.480 --> 00:05:30.590
<v Speaker 0>focus them and so forth.

NOTE CONF {"raw":[100,100,100,100,100]}

00:05:30.590 --> 00:05:33.980
<v Speaker 0>They're they're interested in the stars and the planets and

NOTE CONF {"raw":[92,100,100,100,100,100,100,100,100,100]}

00:05:33.980 --> 00:05:35.690
<v Speaker 0>things they can see through the telescopes.

NOTE CONF {"raw":[100,100,100,100,100,100,97]}

00:05:35.690 --> 00:05:37.250
<v Speaker 0>Telescope is just a tool.

NOTE CONF {"raw":[100,100,100,100,100]}

00:05:38.120 --> 00:05:38.660
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:05:38.660 --> 00:05:43.790
<v Speaker 0>And computer science is about computation, and the computer is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:43.790 --> 00:05:46.910
<v Speaker 0>a device that we use to do computation.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:05:46.910 --> 00:05:51.680
<v Speaker 0>But computer scientists are, you know, just well, you you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:51.680 --> 00:05:53.000
<v Speaker 0>get the analogy, I hope.

NOTE CONF {"raw":[100,100,100,100,100]}

00:05:53.000 --> 00:05:53.300
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:05:53.300 --> 00:05:57.810
<v Speaker 0>So the important thing is computation and how computation works,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:57.810 --> 00:06:00.030
<v Speaker 0>the limits of computation, that sort of thing.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:06:00.450 --> 00:06:02.160
<v Speaker 0>Okay, so that was him.

NOTE CONF {"raw":[100,100,100,100,100]}

00:06:02.430 --> 00:06:05.610
<v Speaker 0>Um, the next two people here are um.

NOTE CONF {"raw":[100,100,100,100,100,100,100,97]}

00:06:05.820 --> 00:06:09.930
<v Speaker 0>So Benjamin Lee Warf was a, was a linguist, and

NOTE CONF {"raw":[100,100,100,43,100,100,100,100,100,100]}

00:06:09.930 --> 00:06:13.650
<v Speaker 0>he invented something called linguistic relativity.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:06:14.220 --> 00:06:19.290
<v Speaker 0>Uh, and, uh, Wittgenstein, a famous philosopher, had similar ideas.

NOTE CONF {"raw":[97,100,69,100,100,100,100,100,100,100]}

00:06:19.290 --> 00:06:22.980
<v Speaker 0>Okay, so this is about the way that language and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:22.980 --> 00:06:28.500
<v Speaker 0>the structure of language, um, determines the kind of things

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:28.500 --> 00:06:30.750
<v Speaker 0>you can say and the kind of things you can

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:30.750 --> 00:06:31.650
<v Speaker 0>think about.

NOTE CONF {"raw":[100,100]}

00:06:32.850 --> 00:06:33.480
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:06:33.480 --> 00:06:37.170
<v Speaker 0>And, um, the standard example of this kind of thing,

NOTE CONF {"raw":[100,70,100,100,100,100,100,100,100,100]}

00:06:37.170 --> 00:06:40.500
<v Speaker 0>which are probably urban legends, but I'll say them anyway

NOTE CONF {"raw":[100,100,100,100,100,100,95,100,100,100]}

00:06:40.500 --> 00:06:42.180
<v Speaker 0>because it makes it easy to understand.

NOTE CONF {"raw":[100,100,100,100,82,100,100]}

00:06:42.180 --> 00:06:42.600
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:06:42.600 --> 00:06:46.470
<v Speaker 0>So supposedly people who live in the in the Arctic

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:46.470 --> 00:06:52.020
<v Speaker 0>have lots of different words for describing snow, okay?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:06:52.020 --> 00:06:53.280
<v Speaker 0>Because there's lots of snow.

NOTE CONF {"raw":[100,100,100,100,100]}

00:06:53.280 --> 00:06:54.510
<v Speaker 0>There's different kinds of snow.

NOTE CONF {"raw":[100,100,100,100,100]}

00:06:54.540 --> 00:06:56.760
<v Speaker 0>They need different words for talking about the different kinds

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:56.760 --> 00:06:57.450
<v Speaker 0>of snow.

NOTE CONF {"raw":[100,100]}

00:06:57.870 --> 00:07:02.040
<v Speaker 0>Um, and people who live in rain forests supposedly have

NOTE CONF {"raw":[100,100,100,100,100,100,87,87,100,100]}

00:07:02.040 --> 00:07:06.600
<v Speaker 0>lots of words for different kinds of green, because there's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:06.600 --> 00:07:07.920
<v Speaker 0>lots of green there, right?

NOTE CONF {"raw":[100,100,100,78,100]}

00:07:07.920 --> 00:07:09.750
<v Speaker 0>They need to be able to distinguish between them.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:07:09.750 --> 00:07:15.180
<v Speaker 0>So, um, uh, as I said, these are possibly not

NOTE CONF {"raw":[100,100,95,100,100,100,100,100,92,100]}

00:07:15.180 --> 00:07:19.320
<v Speaker 0>actually accurate examples, but they give you the idea that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:19.320 --> 00:07:22.590
<v Speaker 0>if you're if you have 27 words for talking about

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:22.590 --> 00:07:26.370
<v Speaker 0>snow, you can say much more subtle things about snow

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:26.400 --> 00:07:28.290
<v Speaker 0>than if you just have the word snow.

NOTE CONF {"raw":[93,100,100,100,100,100,100,100]}

00:07:28.650 --> 00:07:29.340
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:07:29.340 --> 00:07:32.580
<v Speaker 0>And similarly, you know, different colours of greens and so

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:32.580 --> 00:07:32.820
<v Speaker 0>forth.

NOTE CONF {"raw":[100]}

00:07:32.820 --> 00:07:35.640
<v Speaker 0>So the, the fact that you have ways of saying

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:35.640 --> 00:07:40.650
<v Speaker 0>things, um, certain things means you have ways of, of,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:40.650 --> 00:07:42.750
<v Speaker 0>of thinking about those things.

NOTE CONF {"raw":[100,100,100,100,100]}

00:07:42.750 --> 00:07:43.470
<v Speaker 0>All right.

NOTE CONF {"raw":[100,100]}

00:07:43.470 --> 00:07:46.200
<v Speaker 0>And this is the idea, the language shapes the way

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:46.200 --> 00:07:49.230
<v Speaker 0>that we think and determines what we can think about.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:51.820 --> 00:07:52.210
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:07:52.210 --> 00:07:56.110
<v Speaker 0>And programming languages, uh, similarly, they determine the way that

NOTE CONF {"raw":[74,100,100,80,100,100,95,100,100,100]}

00:07:56.110 --> 00:07:59.620
<v Speaker 0>you think about computation because they're about about computation.

NOTE CONF {"raw":[100,100,100,100,100,98,100,100,100]}

00:07:59.620 --> 00:08:02.440
<v Speaker 0>And then finally, the last person on this slide happens

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:02.440 --> 00:08:02.980
<v Speaker 0>to be.

NOTE CONF {"raw":[100,100]}

00:08:02.980 --> 00:08:05.770
<v Speaker 0>So he's the first Turing Award winner, happens to be

NOTE CONF {"raw":[100,98,100,100,100,100,100,100,100,100]}

00:08:05.770 --> 00:08:10.720
<v Speaker 0>the the guy who taught my first, uh, my first

NOTE CONF {"raw":[100,100,100,100,100,100,100,92,100,100]}

00:08:10.720 --> 00:08:13.630
<v Speaker 0>lectures on, on on computer science when I was a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,61]}

00:08:13.630 --> 00:08:16.330
<v Speaker 0>undergraduate student a million years ago.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:08:16.480 --> 00:08:19.060
<v Speaker 0>Um, so he was he was here and I was

NOTE CONF {"raw":[96,100,100,100,100,100,100,100,100,100]}

00:08:19.060 --> 00:08:23.050
<v Speaker 0>there, and, uh, and he taught me, um, about programming

NOTE CONF {"raw":[100,100,68,100,100,100,100,100,100,100]}

00:08:23.050 --> 00:08:26.260
<v Speaker 0>way back then, and he said a language that doesn't

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:26.260 --> 00:08:28.810
<v Speaker 0>affect the way you think about programming is not worth

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:28.810 --> 00:08:29.530
<v Speaker 0>knowing.

NOTE CONF {"raw":[100]}

00:08:31.480 --> 00:08:35.050
<v Speaker 0>Okay, so my goal in teaching you functional programming is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:35.050 --> 00:08:37.479
<v Speaker 0>to get you to think at a higher level about

NOTE CONF {"raw":[100,100,100,100,100,100,100,64,100,100]}

00:08:37.479 --> 00:08:38.500
<v Speaker 0>programming.

NOTE CONF {"raw":[100]}

00:08:38.620 --> 00:08:39.099
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:08:39.099 --> 00:08:42.310
<v Speaker 0>So, um, Haskell is just a vehicle for that.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:08:42.430 --> 00:08:42.849
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:08:42.849 --> 00:08:45.220
<v Speaker 0>So I'm going to be teaching you about Haskell, but

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:45.220 --> 00:08:48.370
<v Speaker 0>I really want to teach you about about programming and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:48.370 --> 00:08:50.530
<v Speaker 0>high level thinking about programming.

NOTE CONF {"raw":[100,100,100,100,98]}

00:08:51.040 --> 00:08:51.580
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:08:51.580 --> 00:08:52.480
<v Speaker 0>High level.

NOTE CONF {"raw":[100,100]}

00:08:52.810 --> 00:08:53.170
<v Speaker 0>Uh.

NOTE CONF {"raw":[76]}

00:08:54.910 --> 00:08:55.420
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:08:55.900 --> 00:08:58.390
<v Speaker 0>I hope it's clear why high level is good.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:08:58.780 --> 00:09:00.280
<v Speaker 0>Um, okay.

NOTE CONF {"raw":[100,100]}

00:09:00.280 --> 00:09:00.940
<v Speaker 0>So what?

NOTE CONF {"raw":[100,100]}

00:09:00.940 --> 00:09:02.890
<v Speaker 0>What is functional programming?

NOTE CONF {"raw":[100,100,100,100]}

00:09:04.090 --> 00:09:08.170
<v Speaker 0>Okay, so as the as the name suggests, um, functions

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:08.170 --> 00:09:09.430
<v Speaker 0>are the main thing.

NOTE CONF {"raw":[100,100,100,100]}

00:09:11.350 --> 00:09:11.680
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:09:11.680 --> 00:09:13.240
<v Speaker 0>Functional programming functions.

NOTE CONF {"raw":[100,100,100]}

00:09:13.570 --> 00:09:14.770
<v Speaker 0>Um, not.

NOTE CONF {"raw":[100,100]}

00:09:14.770 --> 00:09:16.390
<v Speaker 0>So what is not the main thing?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:09:16.390 --> 00:09:21.190
<v Speaker 0>So, um, uh, not assignment of values to variables.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:09:21.190 --> 00:09:25.420
<v Speaker 0>Now, I say this for people who've done programming before.

NOTE CONF {"raw":[100,100,100,100,100,100,94,100,100,100]}

00:09:25.420 --> 00:09:28.360
<v Speaker 0>It's very common in a programming language other than a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:28.360 --> 00:09:29.500
<v Speaker 0>functional programming language.

NOTE CONF {"raw":[100,100,100]}

00:09:29.500 --> 00:09:34.150
<v Speaker 0>You would write a statement like um, n equals three,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:34.150 --> 00:09:36.310
<v Speaker 0>and then later on you'd have a statement that says

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:36.310 --> 00:09:38.230
<v Speaker 0>um n equals n plus one.

NOTE CONF {"raw":[58,100,100,100,100,100]}

00:09:38.230 --> 00:09:40.870
<v Speaker 0>So this means take the value of n, add one

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:40.870 --> 00:09:44.230
<v Speaker 0>to it and assign it to a variable n okay.

NOTE CONF {"raw":[100,100,100,100,100,100,61,100,100,100]}

00:09:44.230 --> 00:09:46.510
<v Speaker 0>This is assignment of values to variables.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:09:46.510 --> 00:09:49.210
<v Speaker 0>So functional programming this is not important.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:09:49.210 --> 00:09:51.070
<v Speaker 0>In fact, it's so unimportant that it doesn't.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:09:51.070 --> 00:09:52.270
<v Speaker 0>It's not possible.

NOTE CONF {"raw":[100,100,100]}

00:09:52.270 --> 00:09:55.480
<v Speaker 0>There are no variables that you can assign values to.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:55.510 --> 00:09:58.780
<v Speaker 0>There are variables and they have values, but you don't

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:58.780 --> 00:09:59.560
<v Speaker 0>like.

NOTE CONF {"raw":[100]}

00:09:59.560 --> 00:10:02.560
<v Speaker 0>Update the value of a variable by adding one to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:02.560 --> 00:10:03.940
<v Speaker 0>what it was previously.

NOTE CONF {"raw":[100,100,100,100]}

00:10:03.940 --> 00:10:04.480
<v Speaker 0>It isn't.

NOTE CONF {"raw":[100,100]}

00:10:04.480 --> 00:10:05.290
<v Speaker 0>It isn't possible.

NOTE CONF {"raw":[100,100,100]}

00:10:05.290 --> 00:10:08.230
<v Speaker 0>There's ways to do things that are what you were

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,69]}

00:10:08.230 --> 00:10:11.140
<v Speaker 0>trying to do when you wrote that.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:10:11.680 --> 00:10:15.160
<v Speaker 0>Uh, but you can't write statements like that.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:10:15.910 --> 00:10:16.570
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:10:16.570 --> 00:10:17.920
<v Speaker 0>So that's interesting.

NOTE CONF {"raw":[100,100,100]}

00:10:18.160 --> 00:10:21.430
<v Speaker 0>Um, so functional programming, you take a bunch of simple

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:21.430 --> 00:10:26.230
<v Speaker 0>but very powerful ideas in combination, taken to their logical

NOTE CONF {"raw":[100,100,100,100,100,100,96,100,100,100]}

00:10:26.230 --> 00:10:27.070
<v Speaker 0>extreme.

NOTE CONF {"raw":[100]}

00:10:27.070 --> 00:10:30.760
<v Speaker 0>And you get a very, a very powerful, uh, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,50,95]}

00:10:30.760 --> 00:10:35.710
<v Speaker 0>way of writing programs, usually very short programs in comparison

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:35.710 --> 00:10:38.530
<v Speaker 0>with, um, object oriented programming languages.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:10:38.530 --> 00:10:42.040
<v Speaker 0>Okay, really, you know, one line programs instead of instead

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:42.040 --> 00:10:43.510
<v Speaker 0>of 50 line programs.

NOTE CONF {"raw":[100,100,100,100]}

00:10:43.510 --> 00:10:47.770
<v Speaker 0>So, um, let me show you, uh.

NOTE CONF {"raw":[100,74,100,100,100,100,100]}

00:10:49.850 --> 00:10:54.200
<v Speaker 0>So in this week's in this week's sort of, you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:54.200 --> 00:10:57.650
<v Speaker 0>know, page with the lecture slides and so forth, I've

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:57.650 --> 00:11:01.160
<v Speaker 0>put a link to, uh, uh, something on Quora.

NOTE CONF {"raw":[100,100,100,100,70,100,100,100,100]}

00:11:01.160 --> 00:11:02.330
<v Speaker 0>I don't know if, you know, Quora.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:11:02.330 --> 00:11:05.210
<v Speaker 0>It's a sort of place where people ask and answer

NOTE CONF {"raw":[100,81,100,100,100,100,100,100,100,100]}

00:11:05.210 --> 00:11:05.720
<v Speaker 0>questions.

NOTE CONF {"raw":[100]}

00:11:05.720 --> 00:11:05.990
<v Speaker 0>Okay.

NOTE CONF {"raw":[99]}

00:11:05.990 --> 00:11:10.250
<v Speaker 0>So somebody asked a question about about programming paradigms other

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:10.250 --> 00:11:11.630
<v Speaker 0>than object oriented.

NOTE CONF {"raw":[100,100,100]}

00:11:12.050 --> 00:11:14.030
<v Speaker 0>Um, I'll tell you what a programming paradigm is in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:14.030 --> 00:11:14.690
<v Speaker 0>a minute.

NOTE CONF {"raw":[100,100]}

00:11:14.690 --> 00:11:15.290
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:11:15.290 --> 00:11:19.040
<v Speaker 0>And this is somebody who, uh, um, wrote an answer

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:19.040 --> 00:11:21.620
<v Speaker 0>about functional programming is black magic.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:11:22.550 --> 00:11:26.720
<v Speaker 0>And I put this here partly because it's interesting to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:26.720 --> 00:11:30.290
<v Speaker 0>read and to get his opinion about this, uh, which

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,86,100]}

00:11:30.290 --> 00:11:33.290
<v Speaker 0>which I agree with, um, and the fact that he's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:33.290 --> 00:11:35.900
<v Speaker 0>saying it rather than me means it's not just it's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,76]}

00:11:35.900 --> 00:11:37.550
<v Speaker 0>not just me that thinks this.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:11:37.550 --> 00:11:39.470
<v Speaker 0>It's a it's a it's at least one other person

NOTE CONF {"raw":[100,92,100,100,100,100,100,100,100,100]}

00:11:39.470 --> 00:11:39.890
<v Speaker 0>in the world.

NOTE CONF {"raw":[100,100,100]}

00:11:39.890 --> 00:11:40.310
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:11:40.310 --> 00:11:45.380
<v Speaker 0>So, um, as it says here, um, uh, Haskell will

NOTE CONF {"raw":[98,50,100,100,100,100,100,100,92,100]}

00:11:45.620 --> 00:11:47.360
<v Speaker 0>thoroughly blow your mind.

NOTE CONF {"raw":[100,100,100,100]}

00:11:47.480 --> 00:11:48.140
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:11:48.260 --> 00:11:51.530
<v Speaker 0>My aim in teaching you Haskell is to is to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:51.530 --> 00:11:53.720
<v Speaker 0>blow your mind in a kind of good way.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:11:53.930 --> 00:11:57.200
<v Speaker 0>A way that will improve your mind.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:11:57.470 --> 00:11:58.580
<v Speaker 0>Okay, so.

NOTE CONF {"raw":[100,100]}

00:11:58.850 --> 00:12:00.200
<v Speaker 0>So it's worth reading this.

NOTE CONF {"raw":[100,100,100,100,100]}

00:12:00.200 --> 00:12:00.740
<v Speaker 0>It's fun.

NOTE CONF {"raw":[100,100]}

00:12:00.740 --> 00:12:01.820
<v Speaker 0>It's interesting.

NOTE CONF {"raw":[100,100]}

00:12:01.910 --> 00:12:06.170
<v Speaker 0>Um, and he talks about the reasons why it's special

NOTE CONF {"raw":[48,100,100,100,100,100,100,100,100,100]}

00:12:06.170 --> 00:12:08.270
<v Speaker 0>and and good and so forth.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:12:08.300 --> 00:12:08.450
<v Speaker 0>Okay.

NOTE CONF {"raw":[99]}

00:12:08.450 --> 00:12:09.470
<v Speaker 0>It's not very long.

NOTE CONF {"raw":[100,100,100,100]}

00:12:12.260 --> 00:12:13.040
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:12:13.880 --> 00:12:15.410
<v Speaker 0>Uh, that's worth having a look at.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:12:15.410 --> 00:12:16.580
<v Speaker 0>So where was I?

NOTE CONF {"raw":[100,100,100,100]}

00:12:17.030 --> 00:12:17.390
<v Speaker 0>Uh.

NOTE CONF {"raw":[100]}

00:12:17.390 --> 00:12:18.350
<v Speaker 0>Right here.

NOTE CONF {"raw":[100,100]}

00:12:18.860 --> 00:12:21.260
<v Speaker 0>So what do I mean by a programming paradigm?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:12:21.500 --> 00:12:21.920
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:12:21.920 --> 00:12:24.800
<v Speaker 0>A programming paradigm is a way of looking at programming

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:24.800 --> 00:12:28.610
<v Speaker 0>and the relationship between programming and the world.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:12:28.610 --> 00:12:29.600
<v Speaker 0>The real world.

NOTE CONF {"raw":[100,100,100]}

00:12:29.600 --> 00:12:32.510
<v Speaker 0>Okay, the thing that you're trying to write a program

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:32.780 --> 00:12:34.370
<v Speaker 0>in order to, um.

NOTE CONF {"raw":[100,100,100,100]}

00:12:35.960 --> 00:12:38.030
<v Speaker 0>Yeah, in order to do something useful.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:12:38.180 --> 00:12:38.840
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:12:38.840 --> 00:12:44.930
<v Speaker 0>So, um, so functional programming is a paradigm object oriented

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:44.930 --> 00:12:46.470
<v Speaker 0>programming is another paradigm.

NOTE CONF {"raw":[100,100,100,100]}

00:12:46.800 --> 00:12:47.850
<v Speaker 0>There are others.

NOTE CONF {"raw":[100,100,100]}

00:12:48.930 --> 00:12:51.630
<v Speaker 0>Okay, so it's a way of looking at programming and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:51.630 --> 00:12:53.970
<v Speaker 0>the relationship between programming and and the world.

NOTE CONF {"raw":[100,100,100,100,84,100,100,100]}

00:12:53.970 --> 00:12:58.650
<v Speaker 0>So in functional programming, things in the world, okay, people,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:58.950 --> 00:13:02.250
<v Speaker 0>uh, objects and stuff, you know, that are moving around.

NOTE CONF {"raw":[97,100,100,100,100,100,100,100,100,100]}

00:13:02.250 --> 00:13:05.820
<v Speaker 0>These are values, data values.

NOTE CONF {"raw":[100,100,100,100,100]}

00:13:06.420 --> 00:13:06.870
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:13:06.870 --> 00:13:10.020
<v Speaker 0>You use functions to compute with with data values to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:10.020 --> 00:13:10.950
<v Speaker 0>get other values.

NOTE CONF {"raw":[100,100,100]}

00:13:10.950 --> 00:13:14.160
<v Speaker 0>This is like what you do in functional programming.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:13:14.610 --> 00:13:16.560
<v Speaker 0>In object oriented programming.

NOTE CONF {"raw":[100,100,100,100]}

00:13:16.950 --> 00:13:20.040
<v Speaker 0>Things in the world are what are called objects.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:13:20.220 --> 00:13:22.530
<v Speaker 0>That's why it's called object oriented programming.

NOTE CONF {"raw":[72,100,100,100,100,100,100]}

00:13:22.530 --> 00:13:26.550
<v Speaker 0>And there are things called methods that you use to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:26.550 --> 00:13:27.420
<v Speaker 0>change objects.

NOTE CONF {"raw":[100,100]}

00:13:27.420 --> 00:13:29.790
<v Speaker 0>So you operate on the objects using methods.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:13:29.790 --> 00:13:32.460
<v Speaker 0>And the the reason you do that is you want

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:32.460 --> 00:13:34.110
<v Speaker 0>to change something about the object.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:13:34.530 --> 00:13:35.280
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:13:35.700 --> 00:13:38.610
<v Speaker 0>Um, so if an object is a car, you might

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:38.610 --> 00:13:41.640
<v Speaker 0>have a method which is um, speed up or something

NOTE CONF {"raw":[100,100,100,100,100,94,100,100,100,100]}

00:13:41.640 --> 00:13:43.710
<v Speaker 0>like that, and it will change the velocity of the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:43.710 --> 00:13:46.950
<v Speaker 0>car from what it was to a larger number.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:13:47.190 --> 00:13:47.850
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:13:48.210 --> 00:13:52.200
<v Speaker 0>Um, so here are some examples of, um.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:13:53.370 --> 00:13:54.030
<v Speaker 0>Wait a minute.

NOTE CONF {"raw":[100,100,100]}

00:13:54.330 --> 00:13:57.990
<v Speaker 0>Uh, here are some examples of functional programming languages.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:13:57.990 --> 00:14:01.530
<v Speaker 0>Here are some examples of object oriented programming languages.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:14:01.530 --> 00:14:04.230
<v Speaker 0>Some of the languages are in both categories because they

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:04.740 --> 00:14:06.300
<v Speaker 0>combine features of both.

NOTE CONF {"raw":[67,100,100,100]}

00:14:06.300 --> 00:14:08.400
<v Speaker 0>So Scala is an example.

NOTE CONF {"raw":[100,100,100,100,100]}

00:14:08.670 --> 00:14:14.400
<v Speaker 0>Uh, JavaScript is another example f sharp okay.

NOTE CONF {"raw":[100,94,100,100,100,95,95,100]}

00:14:15.510 --> 00:14:20.010
<v Speaker 0>So there's no ultimate perfect language or ultimate perfect programming

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:20.010 --> 00:14:20.580
<v Speaker 0>paradigm.

NOTE CONF {"raw":[100]}

00:14:20.580 --> 00:14:23.010
<v Speaker 0>There are advantages and disadvantages to all of them.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:14:23.250 --> 00:14:26.070
<v Speaker 0>Um, and so you need to learn more than one.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:26.070 --> 00:14:29.730
<v Speaker 0>And that's why we teach you in first semester functional

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:29.730 --> 00:14:33.000
<v Speaker 0>programming and second semester object oriented programming.

NOTE CONF {"raw":[100,72,100,100,100,100,100]}

00:14:34.290 --> 00:14:38.160
<v Speaker 0>Um, so, uh, so I said on the previous slide,

NOTE CONF {"raw":[100,100,100,100,100,100,89,100,100,100]}

00:14:38.520 --> 00:14:41.880
<v Speaker 0>um, or maybe I didn't say it, but, uh, functional

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,96,100]}

00:14:41.880 --> 00:14:46.780
<v Speaker 0>programming is is is less widely used than object oriented

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:46.780 --> 00:14:47.230
<v Speaker 0>programming.

NOTE CONF {"raw":[100]}

00:14:47.230 --> 00:14:49.360
<v Speaker 0>Why do we bother teaching it to you while it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:49.360 --> 00:14:51.160
<v Speaker 0>is still widely used?

NOTE CONF {"raw":[100,100,100,100]}

00:14:51.460 --> 00:14:55.420
<v Speaker 0>Not not as popular as object oriented programming, and it's

NOTE CONF {"raw":[100,100,100,100,100,100,93,100,100,96]}

00:14:55.420 --> 00:14:57.280
<v Speaker 0>used to do useful things in industry.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:14:57.280 --> 00:14:58.990
<v Speaker 0>And here are some examples.

NOTE CONF {"raw":[100,100,100,100,100]}

00:14:59.020 --> 00:14:59.740
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:14:59.740 --> 00:15:00.190
<v Speaker 0>Um.

NOTE CONF {"raw":[98]}

00:15:00.190 --> 00:15:01.090
<v Speaker 0>Google.

NOTE CONF {"raw":[100]}

00:15:01.600 --> 00:15:03.880
<v Speaker 0>So when you type a query in Google, you get

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:03.880 --> 00:15:05.380
<v Speaker 0>an answer very fast.

NOTE CONF {"raw":[100,100,100,100]}

00:15:06.040 --> 00:15:06.850
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:15:07.090 --> 00:15:10.690
<v Speaker 0>Um, uh, that's pretty impressive considering how big the internet

NOTE CONF {"raw":[100,97,100,100,100,100,100,100,100,100]}

00:15:10.690 --> 00:15:11.170
<v Speaker 0>is.

NOTE CONF {"raw":[100]}

00:15:11.170 --> 00:15:15.010
<v Speaker 0>And it's searching through gazillion pages on the internet.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:15:15.040 --> 00:15:16.180
<v Speaker 0>How does it do that?

NOTE CONF {"raw":[100,100,100,100,100]}

00:15:16.420 --> 00:15:16.990
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:15:16.990 --> 00:15:19.960
<v Speaker 0>The way it does that is that Google has, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,88]}

00:15:19.960 --> 00:15:24.610
<v Speaker 0>warehouses full of computers, and they're all working in parallel,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:24.820 --> 00:15:26.350
<v Speaker 0>uh, solving problems.

NOTE CONF {"raw":[76,100,100]}

00:15:26.470 --> 00:15:27.160
<v Speaker 0>Okay.

NOTE CONF {"raw":[92]}

00:15:27.190 --> 00:15:33.040
<v Speaker 0>Um, uh, they index the entire internet, um, uh, so

NOTE CONF {"raw":[91,76,100,97,100,100,100,100,100,100]}

00:15:33.040 --> 00:15:35.080
<v Speaker 0>that they can answer queries quickly.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:15:35.080 --> 00:15:37.000
<v Speaker 0>And when you give them a query, they will be

NOTE CONF {"raw":[100,84,100,100,100,100,100,100,100,100]}

00:15:37.000 --> 00:15:40.720
<v Speaker 0>working in parallel on that query, doing different things on

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:40.720 --> 00:15:44.350
<v Speaker 0>it, maybe trying different, different things and and then deciding

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:44.350 --> 00:15:45.760
<v Speaker 0>what the best answer is.

NOTE CONF {"raw":[100,100,100,100,100]}

00:15:45.760 --> 00:15:45.970
<v Speaker 0>Okay.

NOTE CONF {"raw":[98]}

00:15:45.970 --> 00:15:47.770
<v Speaker 0>And that all happens lightning fast.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:15:47.920 --> 00:15:48.490
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:15:48.490 --> 00:15:53.170
<v Speaker 0>And the mechanism that they use is something called MapReduce.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:53.170 --> 00:15:56.350
<v Speaker 0>So this is a this is a way to break

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:56.350 --> 00:16:01.660
<v Speaker 0>problems up into into smaller problems, compute the solution to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:01.660 --> 00:16:04.600
<v Speaker 0>the smaller problems, then combine those solutions into the solution

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:04.600 --> 00:16:05.770
<v Speaker 0>to the main problem.

NOTE CONF {"raw":[100,100,100,100]}

00:16:06.130 --> 00:16:06.790
<v Speaker 0>All right.

NOTE CONF {"raw":[81,81]}

00:16:06.790 --> 00:16:08.440
<v Speaker 0>So this is a thing.

NOTE CONF {"raw":[100,100,100,97,100]}

00:16:08.440 --> 00:16:12.850
<v Speaker 0>And um it's what they use to, to uh, to

NOTE CONF {"raw":[100,89,100,100,100,98,100,100,100,100]}

00:16:12.850 --> 00:16:16.750
<v Speaker 0>program their warehouses full of uh, full of computers.

NOTE CONF {"raw":[97,100,100,100,100,87,100,100,100]}

00:16:17.020 --> 00:16:20.800
<v Speaker 0>And this is directly from functional programming.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:16:20.800 --> 00:16:25.150
<v Speaker 0>So I will be teaching you about a function called

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:25.150 --> 00:16:25.810
<v Speaker 0>map.

NOTE CONF {"raw":[100]}

00:16:26.110 --> 00:16:30.730
<v Speaker 0>And, um, and I'll be teaching you about another function

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:30.730 --> 00:16:35.020
<v Speaker 0>called fold, which is the Haskell, uh, version of what's

NOTE CONF {"raw":[100,100,100,100,100,100,83,100,100,100]}

00:16:35.020 --> 00:16:36.220
<v Speaker 0>called reduce here.

NOTE CONF {"raw":[100,100,100]}

00:16:36.220 --> 00:16:40.940
<v Speaker 0>And, uh, putting those together gives you exactly, uh, this

NOTE CONF {"raw":[100,92,100,100,100,100,100,100,100,100]}

00:16:40.940 --> 00:16:42.800
<v Speaker 0>this MapReduce idea.

NOTE CONF {"raw":[100,100,100]}

00:16:42.800 --> 00:16:46.820
<v Speaker 0>And, um, so this is from functional programming from the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:46.820 --> 00:16:48.200
<v Speaker 0>1960s.

NOTE CONF {"raw":[100]}

00:16:48.230 --> 00:16:49.040
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:16:49.040 --> 00:16:52.490
<v Speaker 0>Um, so this is not directly using Haskell and functional

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:52.490 --> 00:16:54.470
<v Speaker 0>programming, but it's using the ideas.

NOTE CONF {"raw":[100,100,94,100,100,100]}

00:16:54.710 --> 00:16:55.220
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:16:55.220 --> 00:16:56.810
<v Speaker 0>Directly using Haskell.

NOTE CONF {"raw":[100,100,100]}

00:16:57.020 --> 00:16:59.930
<v Speaker 0>Um, you know, there's stuff in Facebook that uses Haskell.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:59.930 --> 00:17:03.710
<v Speaker 0>There's, um, stuff in Twitter that uses Scala, which is

NOTE CONF {"raw":[100,88,100,100,100,100,100,100,100,100]}

00:17:03.710 --> 00:17:09.079
<v Speaker 0>a functional object oriented programming language.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:17:09.350 --> 00:17:11.030
<v Speaker 0>Um, here's another example.

NOTE CONF {"raw":[100,100,100,100]}

00:17:11.030 --> 00:17:14.030
<v Speaker 0>There's a lot of banks that use functional programming.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:17:14.420 --> 00:17:17.839
<v Speaker 0>What they're doing is automated trading on the stock market.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:18.230 --> 00:17:18.770
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:17:18.770 --> 00:17:19.640
<v Speaker 0>And, um.

NOTE CONF {"raw":[100,100]}

00:17:22.160 --> 00:17:26.540
<v Speaker 0>Uh, so this is, this is doing trading without human

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:26.540 --> 00:17:27.470
<v Speaker 0>intervention.

NOTE CONF {"raw":[100]}

00:17:27.470 --> 00:17:32.060
<v Speaker 0>So the the program recognises some condition on the stock

NOTE CONF {"raw":[100,100,100,100,96,100,100,100,100,100]}

00:17:32.060 --> 00:17:38.270
<v Speaker 0>market and, and buys shares and sells shares sometimes, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:38.270 --> 00:17:41.810
<v Speaker 0>with a sort of millisecond in between, because it recognises

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,74]}

00:17:41.810 --> 00:17:45.620
<v Speaker 0>that there's a temporary difference in price between different markets

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:45.620 --> 00:17:45.980
<v Speaker 0>and so forth.

NOTE CONF {"raw":[100,100,100]}

00:17:45.980 --> 00:17:47.420
<v Speaker 0>Anyway, complicated?

NOTE CONF {"raw":[100,100]}

00:17:47.420 --> 00:17:48.320
<v Speaker 0>All right.

NOTE CONF {"raw":[100,100]}

00:17:48.710 --> 00:17:51.020
<v Speaker 0>But there's lots of money involved.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:17:51.560 --> 00:17:53.720
<v Speaker 0>It's doing this in an automated way.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:17:53.720 --> 00:17:57.410
<v Speaker 0>And if you if you buy if you buy high

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:57.410 --> 00:17:59.180
<v Speaker 0>and sell low, you lose money.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:17:59.420 --> 00:18:01.310
<v Speaker 0>Uh, what you want to do is buy low and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:01.310 --> 00:18:02.720
<v Speaker 0>sell high, okay.

NOTE CONF {"raw":[100,100,100]}

00:18:02.720 --> 00:18:05.030
<v Speaker 0>And if you make a mistake in your program and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:05.030 --> 00:18:06.980
<v Speaker 0>you do things the wrong way around, you can you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:06.980 --> 00:18:08.810
<v Speaker 0>can lose a lot of money very quickly.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:18:08.810 --> 00:18:10.040
<v Speaker 0>And this has actually happened.

NOTE CONF {"raw":[100,100,96,100,100]}

00:18:10.040 --> 00:18:12.200
<v Speaker 0>So there's been companies that have gone out of business

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:12.200 --> 00:18:15.110
<v Speaker 0>because in a half an hour they're there.

NOTE CONF {"raw":[100,100,100,100,100,100,75,52]}

00:18:15.110 --> 00:18:18.770
<v Speaker 0>Automated stock market trading, um, had had a bug in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:18.770 --> 00:18:22.970
<v Speaker 0>it and it and it ruptured, you know, billions of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:22.970 --> 00:18:25.070
<v Speaker 0>dollars in a half an hour before they could turn

NOTE CONF {"raw":[100,70,78,100,100,100,100,100,100,100]}

00:18:25.070 --> 00:18:25.610
<v Speaker 0>it off.

NOTE CONF {"raw":[100,100]}

00:18:26.000 --> 00:18:31.130
<v Speaker 0>Um, anyway, so these, these companies, among others, use functional

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,96,100]}

00:18:31.130 --> 00:18:35.810
<v Speaker 0>programming, um, to do some of their, um, automated stock

NOTE CONF {"raw":[100,95,100,100,100,100,100,100,100,100]}

00:18:35.810 --> 00:18:36.650
<v Speaker 0>market trading.

NOTE CONF {"raw":[100,100]}

00:18:36.650 --> 00:18:39.560
<v Speaker 0>And the idea is that they can write programs that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:39.560 --> 00:18:41.720
<v Speaker 0>are they can write them quickly.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:18:41.720 --> 00:18:44.150
<v Speaker 0>They're easy to read, they're easy to understand.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:18:44.150 --> 00:18:46.760
<v Speaker 0>They're easy to, you know, check that they're doing what

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:46.760 --> 00:18:50.630
<v Speaker 0>they should do as opposed to some, you know, hundreds

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:50.630 --> 00:18:53.570
<v Speaker 0>of thousands of lines of Java or something like that.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:54.680 --> 00:18:56.780
<v Speaker 0>Um, okay.

NOTE CONF {"raw":[100,100]}

00:18:56.780 --> 00:18:57.800
<v Speaker 0>There's other examples.

NOTE CONF {"raw":[100,100,100]}

00:18:57.800 --> 00:18:59.240
<v Speaker 0>I'll just mention the last one.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:18:59.240 --> 00:19:00.860
<v Speaker 0>It's a it's a fun example.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:19:00.860 --> 00:19:05.420
<v Speaker 0>So Ericsson is a is a Swedish telephone, uh, telecommunications

NOTE CONF {"raw":[100,75,100,100,100,100,100,100,100,100]}

00:19:05.420 --> 00:19:05.990
<v Speaker 0>company.

NOTE CONF {"raw":[100]}

00:19:05.990 --> 00:19:09.440
<v Speaker 0>They had a project in the 70s or 80s to,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,67,100]}

00:19:09.470 --> 00:19:10.760
<v Speaker 0>to build a new phone switch.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:19:10.760 --> 00:19:13.310
<v Speaker 0>So a phone switch is the thing which connects telephone

NOTE CONF {"raw":[100,100,100,100,100,72,100,100,100,100]}

00:19:13.310 --> 00:19:15.620
<v Speaker 0>calls, uh, together.

NOTE CONF {"raw":[100,100,100]}

00:19:15.620 --> 00:19:15.980
<v Speaker 0>All right.

NOTE CONF {"raw":[100,100]}

00:19:15.980 --> 00:19:18.260
<v Speaker 0>And so they had they had this project to build

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:18.260 --> 00:19:20.600
<v Speaker 0>their, their next generation telephone switch.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:19:20.600 --> 00:19:23.600
<v Speaker 0>And they and they started programming it in C plus

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:23.600 --> 00:19:24.110
<v Speaker 0>plus.

NOTE CONF {"raw":[100]}

00:19:24.110 --> 00:19:26.870
<v Speaker 0>And after a couple of years, they, uh, it was

NOTE CONF {"raw":[100,100,100,100,100,100,100,94,100,100]}

00:19:26.870 --> 00:19:27.410
<v Speaker 0>a disaster.

NOTE CONF {"raw":[100,100]}

00:19:27.410 --> 00:19:30.650
<v Speaker 0>They gave up um, uh, they, they said they couldn't

NOTE CONF {"raw":[100,100,100,100,83,100,100,100,100,100]}

00:19:30.650 --> 00:19:30.890
<v Speaker 0>do it.

NOTE CONF {"raw":[100,100]}

00:19:30.890 --> 00:19:32.390
<v Speaker 0>It was just too complicated.

NOTE CONF {"raw":[100,93,100,100,100]}

00:19:32.390 --> 00:19:32.810
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:19:32.810 --> 00:19:36.110
<v Speaker 0>And so, um, somebody said, why don't we try functional

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:36.110 --> 00:19:39.660
<v Speaker 0>programming They invented a language called Erlang, which is a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:39.660 --> 00:19:43.110
<v Speaker 0>functional programming language with some special features for this kind

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:43.110 --> 00:19:44.160
<v Speaker 0>of situation.

NOTE CONF {"raw":[100,100]}

00:19:44.160 --> 00:19:49.830
<v Speaker 0>And and the project, they they successfully built a software

NOTE CONF {"raw":[100,100,100,100,95,100,100,100,100,100]}

00:19:50.280 --> 00:19:54.210
<v Speaker 0>in record time and it achieves it achieves what's called

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:54.210 --> 00:19:57.930
<v Speaker 0>nine nines, uh, reliability.

NOTE CONF {"raw":[100,100,100,100]}

00:19:57.930 --> 00:20:03.330
<v Speaker 0>So this is 99.99999999% reliability.

NOTE CONF {"raw":[100,100,100,100,100]}

00:20:03.330 --> 00:20:06.720
<v Speaker 0>It means that it's only, um, it's only allowed to,

NOTE CONF {"raw":[60,100,100,100,100,57,100,100,100,100]}

00:20:06.720 --> 00:20:09.420
<v Speaker 0>um, to fail for a few seconds per century.

NOTE CONF {"raw":[58,100,100,100,100,100,100,100,100]}

00:20:09.690 --> 00:20:10.230
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:20:10.230 --> 00:20:13.830
<v Speaker 0>And, um, uh, this is, uh, you know, the software

NOTE CONF {"raw":[100,100,50,100,100,100,100,100,100,100]}

00:20:13.830 --> 00:20:17.490
<v Speaker 0>is so is so high quality that it achieves that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:18.630 --> 00:20:20.490
<v Speaker 0>partly because of parallelism.

NOTE CONF {"raw":[100,100,100,100]}

00:20:20.490 --> 00:20:22.230
<v Speaker 0>This is one of the things that's in Erlang that's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:22.230 --> 00:20:24.180
<v Speaker 0>not, um, that you're not going to be learning about

NOTE CONF {"raw":[100,86,100,100,100,100,100,100,100,100]}

00:20:24.180 --> 00:20:25.020
<v Speaker 0>in this course.

NOTE CONF {"raw":[100,100,100]}

00:20:25.020 --> 00:20:25.290
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:20:25.290 --> 00:20:27.150
<v Speaker 0>So these are just some places that PHP has learned

NOTE CONF {"raw":[100,100,100,100,100,100,100,69,97,100]}

00:20:27.240 --> 00:20:28.260
<v Speaker 0>is used in industry.

NOTE CONF {"raw":[100,100,100,100]}

00:20:28.260 --> 00:20:30.930
<v Speaker 0>We've got a talk on Thursday from a guy working

NOTE CONF {"raw":[100,100,93,100,100,100,100,100,100,100]}

00:20:30.930 --> 00:20:34.140
<v Speaker 0>from a company called grok, which does, um, large language

NOTE CONF {"raw":[100,91,100,100,100,100,100,95,100,100]}

00:20:34.140 --> 00:20:34.980
<v Speaker 0>models.

NOTE CONF {"raw":[100]}

00:20:34.980 --> 00:20:37.620
<v Speaker 0>Um, and, um, I'm interested to see what he's going

NOTE CONF {"raw":[100,100,52,100,100,100,100,100,100,100]}

00:20:37.620 --> 00:20:40.620
<v Speaker 0>to tell us about, because they use Haskell in their,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,96]}

00:20:40.620 --> 00:20:44.370
<v Speaker 0>um, in the programming for their, for their large language

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:44.370 --> 00:20:46.680
<v Speaker 0>models, which is interesting.

NOTE CONF {"raw":[100,100,100,100]}

00:20:47.040 --> 00:20:48.900
<v Speaker 0>Um, new thing for me anyway.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:20:49.800 --> 00:20:50.640
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:20:51.030 --> 00:20:54.210
<v Speaker 0>Um, it's important to learn many languages in different paradigms

NOTE CONF {"raw":[100,100,100,100,100,100,100,50,100,100]}

00:20:54.210 --> 00:20:57.210
<v Speaker 0>in your computer science or informatics career.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:20:57.720 --> 00:21:02.040
<v Speaker 0>Um, and, and so we, we, we give you two

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:02.040 --> 00:21:04.740
<v Speaker 0>of them in the first, in the first year, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:04.740 --> 00:21:07.710
<v Speaker 0>functional programming followed by object oriented programming.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:21:07.710 --> 00:21:11.160
<v Speaker 0>The order that you do these things is controversial, and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:11.160 --> 00:21:12.810
<v Speaker 0>we do it that way around.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:21:12.810 --> 00:21:16.650
<v Speaker 0>In common with some other good universities in Britain and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:16.650 --> 00:21:17.760
<v Speaker 0>around the world.

NOTE CONF {"raw":[100,100,100]}

00:21:18.000 --> 00:21:18.330
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:21:20.580 --> 00:21:24.210
<v Speaker 0>Uh, we think it's the right choice.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:21:25.530 --> 00:21:27.450
<v Speaker 0>Um, one of the reasons why we do this is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:27.450 --> 00:21:31.830
<v Speaker 0>because it puts everybody on, on the same level when

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:31.830 --> 00:21:32.370
<v Speaker 0>they start.

NOTE CONF {"raw":[100,100]}

00:21:32.370 --> 00:21:32.640
<v Speaker 0>Okay.

NOTE CONF {"raw":[97]}

00:21:32.640 --> 00:21:35.770
<v Speaker 0>So those of you who've done lots of programming before,

NOTE CONF {"raw":[100,100,100,100,97,100,100,100,100,100]}

00:21:35.770 --> 00:21:38.470
<v Speaker 0>and those of you who've done no programming before.

NOTE CONF {"raw":[100,100,100,100,87,100,97,100,100]}

00:21:38.470 --> 00:21:41.830
<v Speaker 0>And we have both both kinds of students here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:21:41.830 --> 00:21:42.610
<v Speaker 0>Okay.

NOTE CONF {"raw":[90]}

00:21:42.790 --> 00:21:45.490
<v Speaker 0>Um, the ones who've done lots of programming before don't

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:45.490 --> 00:21:49.120
<v Speaker 0>have, uh, they have a certain kind of advantage in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:49.120 --> 00:21:53.920
<v Speaker 0>being used to thinking about about programs and how computers

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:54.160 --> 00:21:54.940
<v Speaker 0>compute.

NOTE CONF {"raw":[100]}

00:21:54.940 --> 00:22:00.730
<v Speaker 0>But they won't have experience mostly with functional programming, and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:00.730 --> 00:22:01.960
<v Speaker 0>it'll be quite new to them.

NOTE CONF {"raw":[90,100,100,100,100,100]}

00:22:01.960 --> 00:22:02.260
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:22:02.260 --> 00:22:05.380
<v Speaker 0>So it'll be something that you have to, in a

NOTE CONF {"raw":[100,92,100,100,100,100,100,100,100,100]}

00:22:05.380 --> 00:22:08.890
<v Speaker 0>way, forget some of the things that you know already

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:08.890 --> 00:22:11.170
<v Speaker 0>in order to understand what I'm going to be talking

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:11.170 --> 00:22:11.950
<v Speaker 0>to you about.

NOTE CONF {"raw":[100,100,100]}

00:22:13.150 --> 00:22:13.870
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:22:13.870 --> 00:22:18.880
<v Speaker 0>Now, this last thing here, uh, functional programming operates on

NOTE CONF {"raw":[100,100,100,100,100,91,100,100,100,100]}

00:22:18.880 --> 00:22:21.490
<v Speaker 0>data structures as a whole rather than piecemeal.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:22:24.640 --> 00:22:26.380
<v Speaker 0>Let me explain what I mean by that.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:22:28.450 --> 00:22:33.310
<v Speaker 0>Okay, so imagine you've got your you're working in in

NOTE CONF {"raw":[100,100,100,100,100,93,100,100,100,100]}

00:22:33.310 --> 00:22:36.670
<v Speaker 0>Java or another object oriented programming language.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:22:36.940 --> 00:22:40.300
<v Speaker 0>You've got a big data structure.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:22:40.300 --> 00:22:41.380
<v Speaker 0>Let's say you've got an array.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:22:41.380 --> 00:22:42.160
<v Speaker 0>Here's an array.

NOTE CONF {"raw":[100,100,100]}

00:22:42.160 --> 00:22:43.510
<v Speaker 0>It's an array of numbers.

NOTE CONF {"raw":[98,100,100,100,100]}

00:22:43.630 --> 00:22:44.440
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:22:44.890 --> 00:22:49.540
<v Speaker 0>Um, there's a million numbers in this array.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:22:50.080 --> 00:22:50.830
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:22:51.250 --> 00:22:51.730
<v Speaker 0>Let me see.

NOTE CONF {"raw":[100,100,100]}

00:22:51.730 --> 00:22:52.600
<v Speaker 0>Left to right.

NOTE CONF {"raw":[100,100,100]}

00:22:52.660 --> 00:22:55.810
<v Speaker 0>Uh, I guess it's from here.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:22:55.810 --> 00:22:56.020
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:22:56.020 --> 00:22:56.410
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:22:56.410 --> 00:22:58.840
<v Speaker 0>So the first number, the in array is there, the

NOTE CONF {"raw":[100,100,100,100,99,60,100,100,92,100]}

00:22:58.840 --> 00:23:00.760
<v Speaker 0>second number in the array is here and so forth.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:00.760 --> 00:23:01.870
<v Speaker 0>There's a million of them.

NOTE CONF {"raw":[100,100,100,100,100]}

00:23:02.200 --> 00:23:02.740
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:23:02.740 --> 00:23:07.030
<v Speaker 0>Suppose that you want to multiply each of the numbers

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:07.240 --> 00:23:09.190
<v Speaker 0>in this array by two.

NOTE CONF {"raw":[100,100,100,100,100]}

00:23:10.270 --> 00:23:11.920
<v Speaker 0>Or do something else with it okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:23:11.920 --> 00:23:13.600
<v Speaker 0>Each number in the array you want to do something

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:13.600 --> 00:23:14.170
<v Speaker 0>with it.

NOTE CONF {"raw":[100,100]}

00:23:14.170 --> 00:23:16.930
<v Speaker 0>Let's say multiply by two to keep things simple okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:16.930 --> 00:23:18.040
<v Speaker 0>So what do you do.

NOTE CONF {"raw":[100,100,100,100,100]}

00:23:18.040 --> 00:23:21.490
<v Speaker 0>You you you take the first one, you multiply it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:21.490 --> 00:23:23.440
<v Speaker 0>by two and you put it back.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:23:23.950 --> 00:23:26.380
<v Speaker 0>And then you take the second one and you multiply

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:26.380 --> 00:23:28.750
<v Speaker 0>it by two, and you put it back and the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:28.750 --> 00:23:30.460
<v Speaker 0>third one and so forth.

NOTE CONF {"raw":[100,100,100,100,100]}

00:23:30.460 --> 00:23:30.910
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:23:30.910 --> 00:23:32.170
<v Speaker 0>One at a time.

NOTE CONF {"raw":[100,100,100,100]}

00:23:32.840 --> 00:23:36.050
<v Speaker 0>You write a loop, what's called a loop, which has

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:36.050 --> 00:23:39.560
<v Speaker 0>an index into the array, and it says, you know,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:39.980 --> 00:23:44.630
<v Speaker 0>a sub, a sub n uh equals a sub n

NOTE CONF {"raw":[100,100,100,100,100,62,100,100,100,100]}

00:23:44.630 --> 00:23:45.560
<v Speaker 0>times two.

NOTE CONF {"raw":[100,100]}

00:23:45.950 --> 00:23:46.580
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:23:46.580 --> 00:23:48.800
<v Speaker 0>For, for n from 1 to 1 million.

NOTE CONF {"raw":[83,100,100,100,100,100,100,100]}

00:23:49.430 --> 00:23:50.540
<v Speaker 0>Uh, okay.

NOTE CONF {"raw":[100,100]}

00:23:50.540 --> 00:23:53.150
<v Speaker 0>And so it's going one at a time down this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:53.150 --> 00:23:54.800
<v Speaker 0>array doing this okay.

NOTE CONF {"raw":[100,100,100,97]}

00:23:54.950 --> 00:23:57.140
<v Speaker 0>Um tick tick tick tick tick.

NOTE CONF {"raw":[100,94,100,100,100,100]}

00:23:57.140 --> 00:23:57.770
<v Speaker 3>Tick tick tick tick.

NOTE CONF {"raw":[100,100,100,100]}

00:23:57.770 --> 00:23:59.060
<v Speaker 0>Tick a million times.

NOTE CONF {"raw":[98,100,100,100]}

00:23:59.270 --> 00:24:00.950
<v Speaker 0>Okay, a million operations.

NOTE CONF {"raw":[100,100,100,100]}

00:24:02.510 --> 00:24:07.220
<v Speaker 0>That's standard object oriented programming, okay.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:24:07.220 --> 00:24:08.630
<v Speaker 0>In functional language.

NOTE CONF {"raw":[100,100,100]}

00:24:08.960 --> 00:24:10.370
<v Speaker 0>You do it differently.

NOTE CONF {"raw":[100,100,100,100]}

00:24:10.370 --> 00:24:13.370
<v Speaker 0>You'd you'd you'd write a function, a very simple function,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:13.370 --> 00:24:16.280
<v Speaker 0>which is the function for multiplying a number by two.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:16.790 --> 00:24:20.150
<v Speaker 0>You take your, your array which in functional programming would

NOTE CONF {"raw":[100,100,100,100,100,100,99,100,100,94]}

00:24:20.150 --> 00:24:20.930
<v Speaker 0>be called a list.

NOTE CONF {"raw":[100,100,100,100]}

00:24:20.930 --> 00:24:21.920
<v Speaker 0>But it's the same idea.

NOTE CONF {"raw":[100,100,100,100,100]}

00:24:21.950 --> 00:24:24.200
<v Speaker 0>You've got a million values one at a time here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:24.350 --> 00:24:30.080
<v Speaker 0>And you'd say apply this function to this array and.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:30.080 --> 00:24:31.010
<v Speaker 4>Whoosh.

NOTE CONF {"raw":[87]}

00:24:31.760 --> 00:24:32.150
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:24:32.150 --> 00:24:35.210
<v Speaker 0>It just sort of all happens conceptually at once.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:24:35.210 --> 00:24:38.780
<v Speaker 0>You apply this function to everything in the array.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:24:39.170 --> 00:24:40.070
<v Speaker 4>Whoosh!

NOTE CONF {"raw":[75]}

00:24:40.100 --> 00:24:40.820
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:24:43.490 --> 00:24:44.660
<v Speaker 0>That's a technical term.

NOTE CONF {"raw":[100,100,100,100]}

00:24:44.660 --> 00:24:45.260
<v Speaker 0>Whoosh.

NOTE CONF {"raw":[99]}

00:24:46.640 --> 00:24:47.030
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:24:47.210 --> 00:24:48.140
<v Speaker 0>Not really.

NOTE CONF {"raw":[100,100]}

00:24:48.170 --> 00:24:48.650
<v Speaker 0>Okay.

NOTE CONF {"raw":[99]}

00:24:48.650 --> 00:24:50.420
<v Speaker 0>So it's it's higher level.

NOTE CONF {"raw":[100,100,100,100,100]}

00:24:50.420 --> 00:24:52.790
<v Speaker 0>It's not doing a little bit at a time.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:24:52.790 --> 00:24:55.550
<v Speaker 0>You're not writing a loop to tell you, you know,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:55.550 --> 00:24:58.130
<v Speaker 0>that you start at the beginning and work your way

NOTE CONF {"raw":[100,100,92,100,100,100,100,100,100,100]}

00:24:58.130 --> 00:25:00.950
<v Speaker 0>down to the end, rather than starting at the at

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:00.950 --> 00:25:02.690
<v Speaker 0>the other end and working your way back to the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:02.690 --> 00:25:03.470
<v Speaker 0>beginning.

NOTE CONF {"raw":[100]}

00:25:03.470 --> 00:25:05.930
<v Speaker 0>You don't need to, uh, you know, you don't need

NOTE CONF {"raw":[100,100,100,100,77,100,100,100,100,100]}

00:25:05.930 --> 00:25:06.770
<v Speaker 0>to write any of that code.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:25:06.770 --> 00:25:09.260
<v Speaker 0>You just say, apply the function to everything in this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:09.260 --> 00:25:10.880
<v Speaker 0>list, and it just happens.

NOTE CONF {"raw":[100,100,100,100,100]}

00:25:11.210 --> 00:25:12.800
<v Speaker 0>Okay, so this is what I mean.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:25:12.800 --> 00:25:16.730
<v Speaker 0>It's it's it's it's, uh, operating on data structures as

NOTE CONF {"raw":[68,100,100,100,98,100,100,100,100,100]}

00:25:16.730 --> 00:25:17.360
<v Speaker 0>a whole.

NOTE CONF {"raw":[100,100]}

00:25:18.440 --> 00:25:19.160
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:25:19.460 --> 00:25:22.880
<v Speaker 0>Um, so there's, um, this is this is allowing you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:22.880 --> 00:25:26.150
<v Speaker 0>to have higher level thinking about algorithms, and you might

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:26.150 --> 00:25:29.780
<v Speaker 0>say, well, you know, that's that's cheating because of course

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:30.150 --> 00:25:33.240
<v Speaker 0>inside the computer it's going to take the function and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:33.240 --> 00:25:35.400
<v Speaker 0>apply it first to the to the first thing in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:35.400 --> 00:25:36.870
<v Speaker 0>the list and then to the second thing, the list

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,97,100]}

00:25:36.870 --> 00:25:37.320
<v Speaker 0>and so forth.

NOTE CONF {"raw":[100,100,100]}

00:25:37.320 --> 00:25:39.180
<v Speaker 0>So actually they're equivalent.

NOTE CONF {"raw":[100,100,93,100]}

00:25:39.600 --> 00:25:41.220
<v Speaker 0>And that's true okay.

NOTE CONF {"raw":[100,100,100,100]}

00:25:41.220 --> 00:25:45.060
<v Speaker 0>But you're not writing any of this detail about about

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:45.060 --> 00:25:47.790
<v Speaker 0>doing the, you know, the things in a row left

NOTE CONF {"raw":[100,100,94,94,100,100,100,100,100,100]}

00:25:47.790 --> 00:25:49.560
<v Speaker 0>to right or right to left or whatever it is.

NOTE CONF {"raw":[85,100,100,100,100,100,100,100,100,100]}

00:25:49.560 --> 00:25:53.190
<v Speaker 0>It's kind of like when you when you write a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:53.190 --> 00:25:57.600
<v Speaker 0>program that, you know, does arithmetic, you don't think in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:57.600 --> 00:26:01.740
<v Speaker 0>terms of the binary digits that are used to encode

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:01.740 --> 00:26:04.020
<v Speaker 0>the integers, or the or the or the other numbers

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:04.020 --> 00:26:05.010
<v Speaker 0>that you're using.

NOTE CONF {"raw":[100,100,100]}

00:26:05.010 --> 00:26:08.700
<v Speaker 0>You don't need to think about the algorithm for for

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:08.700 --> 00:26:09.900
<v Speaker 0>adding binary numbers.

NOTE CONF {"raw":[100,100,100]}

00:26:09.900 --> 00:26:11.040
<v Speaker 0>That's in the computer.

NOTE CONF {"raw":[100,100,100,100]}

00:26:11.040 --> 00:26:12.960
<v Speaker 0>And it just it just happens.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:26:12.960 --> 00:26:16.440
<v Speaker 0>You just think about addition and numbers, okay.

NOTE CONF {"raw":[100,100,100,100,58,100,100,100]}

00:26:16.440 --> 00:26:18.630
<v Speaker 0>You don't think about the electrons that are used to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:18.630 --> 00:26:21.960
<v Speaker 0>encode the bits in the computer.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:26:21.960 --> 00:26:22.380
<v Speaker 0>Right?

NOTE CONF {"raw":[100]}

00:26:22.380 --> 00:26:24.090
<v Speaker 0>So that's low level stuff.

NOTE CONF {"raw":[100,100,100,100,100]}

00:26:24.090 --> 00:26:24.960
<v Speaker 0>You don't think about it.

NOTE CONF {"raw":[100,100,100,100,100]}

00:26:24.960 --> 00:26:26.490
<v Speaker 0>You think about numbers in addition.

NOTE CONF {"raw":[100,100,100,100,92,97]}

00:26:26.490 --> 00:26:30.120
<v Speaker 0>And so here you're thinking about data structures and operating

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:30.120 --> 00:26:31.590
<v Speaker 0>on the whole data structure.

NOTE CONF {"raw":[100,100,100,100,100]}

00:26:32.010 --> 00:26:33.420
<v Speaker 0>Okay, that's the difference.

NOTE CONF {"raw":[100,100,100,100]}

00:26:34.770 --> 00:26:35.790
<v Speaker 0>That's important.

NOTE CONF {"raw":[100,100]}

00:26:38.460 --> 00:26:43.380
<v Speaker 0>I'll just mention before I finished my advertising, uh, that,

NOTE CONF {"raw":[100,100,100,100,100,82,100,100,100,100]}

00:26:43.380 --> 00:26:46.980
<v Speaker 0>um, uh, functional languages have influenced lots of other languages.

NOTE CONF {"raw":[100,79,100,100,100,100,100,100,100,100]}

00:26:46.980 --> 00:26:47.220
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:26:47.220 --> 00:26:48.960
<v Speaker 0>And I'll just mention a couple of things on this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:48.960 --> 00:26:49.650
<v Speaker 0>list here.

NOTE CONF {"raw":[100,100]}

00:26:49.650 --> 00:26:53.790
<v Speaker 0>So garbage collection, this is, this refers to, um, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,52]}

00:26:53.790 --> 00:27:00.360
<v Speaker 0>automated um, allocation and d allocation of storage in, in

NOTE CONF {"raw":[100,100,100,100,36,100,100,100,79,100]}

00:27:00.360 --> 00:27:00.990
<v Speaker 0>programming.

NOTE CONF {"raw":[100]}

00:27:00.990 --> 00:27:01.290
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:27:01.290 --> 00:27:05.250
<v Speaker 0>So um, in, in, in Haskell and in other functional

NOTE CONF {"raw":[100,100,98,100,100,100,100,97,100,100]}

00:27:05.250 --> 00:27:08.190
<v Speaker 0>programming languages, uh, storage is allocated.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:27:08.190 --> 00:27:12.330
<v Speaker 0>And when you're finished using it, it's automated automatically garbage

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:12.330 --> 00:27:13.680
<v Speaker 0>collected or deallocated.

NOTE CONF {"raw":[100,100,100]}

00:27:13.680 --> 00:27:14.910
<v Speaker 0>So you don't run out of storage.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:27:14.910 --> 00:27:15.990
<v Speaker 0>You can reuse it.

NOTE CONF {"raw":[100,100,100,100]}

00:27:16.290 --> 00:27:16.920
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:27:16.920 --> 00:27:21.480
<v Speaker 0>And um, this is also um, this is also done

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:21.480 --> 00:27:22.920
<v Speaker 0>in these other languages.

NOTE CONF {"raw":[100,100,100,100]}

00:27:22.920 --> 00:27:23.430
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:27:23.430 --> 00:27:26.610
<v Speaker 0>But um, many, many, many years later.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:27:26.610 --> 00:27:30.430
<v Speaker 0>So garbage collection was invented in 1960 for a programming

NOTE CONF {"raw":[100,100,100,100,100,100,100,79,100,100]}

00:27:30.430 --> 00:27:33.130
<v Speaker 0>language called Lisp, which was the first functional programming language,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:33.130 --> 00:27:39.490
<v Speaker 0>and Java um was invented in 1995.

NOTE CONF {"raw":[100,100,62,100,100,100,100]}

00:27:39.490 --> 00:27:42.970
<v Speaker 0>And it was a kind of, um, uh, exciting innovation

NOTE CONF {"raw":[100,100,100,100,100,100,100,76,100,100]}

00:27:42.970 --> 00:27:47.620
<v Speaker 0>that it was using garbage collection rather than doing manual

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:47.800 --> 00:27:49.510
<v Speaker 0>allocation and de allocation.

NOTE CONF {"raw":[100,100,60,100]}

00:27:50.710 --> 00:27:51.460
<v Speaker 0>Okay.

NOTE CONF {"raw":[87]}

00:27:51.550 --> 00:27:54.340
<v Speaker 0>Um, so that's some 35 years later.

NOTE CONF {"raw":[83,100,100,99,100,100,100]}

00:27:54.790 --> 00:27:55.570
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:27:55.690 --> 00:27:58.960
<v Speaker 0>Um, c plus plus when you go to the airport

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:58.960 --> 00:28:01.390
<v Speaker 0>or someplace and you see a computer screen, it's supposed

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:01.390 --> 00:28:04.390
<v Speaker 0>to be telling you when your flight is leaving and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:04.390 --> 00:28:07.960
<v Speaker 0>it and it says, um, uh, and has an error

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:07.960 --> 00:28:12.730
<v Speaker 0>message, okay, that's the C plus plus program, which has

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:12.730 --> 00:28:17.680
<v Speaker 0>had an error with with storage allocation usually.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:28:17.680 --> 00:28:20.710
<v Speaker 0>Okay, okay.

NOTE CONF {"raw":[100,100]}

00:28:20.710 --> 00:28:23.020
<v Speaker 0>And there's other things here that I won't go into

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:23.020 --> 00:28:23.530
<v Speaker 0>in detail.

NOTE CONF {"raw":[96,100]}

00:28:23.530 --> 00:28:27.160
<v Speaker 0>But in each case it's it's stuff that um, came

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,96,100]}

00:28:27.160 --> 00:28:31.990
<v Speaker 0>from functional programming languages influence mainstream programming language many years

NOTE CONF {"raw":[100,100,100,100,69,100,100,100,100,100]}

00:28:31.990 --> 00:28:32.620
<v Speaker 0>later.

NOTE CONF {"raw":[100]}

00:28:33.850 --> 00:28:35.890
<v Speaker 0>Okay, list comprehensions, I'm going to be telling you about

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:35.890 --> 00:28:37.060
<v Speaker 0>them in the next lecture.

NOTE CONF {"raw":[100,100,100,100,100]}

00:28:37.570 --> 00:28:40.270
<v Speaker 0>Um, now, now also in Python.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:28:40.720 --> 00:28:41.020
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:28:42.010 --> 00:28:42.670
<v Speaker 5>Right.

NOTE CONF {"raw":[100]}

00:28:44.590 --> 00:28:45.190
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:28:45.190 --> 00:28:47.650
<v Speaker 0>Any questions so far I'm now going to get into

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:47.650 --> 00:28:53.320
<v Speaker 0>the actual, uh, content of functional programming.

NOTE CONF {"raw":[100,100,94,100,100,100,100]}

00:28:53.320 --> 00:28:55.210
<v Speaker 0>Anybody know?

NOTE CONF {"raw":[100,77]}

00:28:55.210 --> 00:28:55.870
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:28:56.140 --> 00:28:56.800
<v Speaker 0>Never mind.

NOTE CONF {"raw":[100,100]}

00:28:57.040 --> 00:28:59.170
<v Speaker 0>Um, so I'm going to be telling you about values

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:59.170 --> 00:28:59.620
<v Speaker 0>and types.

NOTE CONF {"raw":[100,100]}

00:28:59.620 --> 00:29:02.680
<v Speaker 0>So these are the most important things to start with.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:02.680 --> 00:29:08.140
<v Speaker 0>Anyway, in functional programming, um, it's going to be important

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:08.140 --> 00:29:09.760
<v Speaker 0>for you to read the textbook.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:29:10.090 --> 00:29:13.810
<v Speaker 0>Um, partly because not because this is so hard, but

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:13.810 --> 00:29:16.720
<v Speaker 0>because there's details that I'm not going to talk about

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:16.720 --> 00:29:17.560
<v Speaker 0>in the lecture.

NOTE CONF {"raw":[100,100,100]}

00:29:17.980 --> 00:29:18.760
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:29:18.760 --> 00:29:22.930
<v Speaker 0>Details like, um, the, the way that you type in,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:23.260 --> 00:29:27.670
<v Speaker 0>uh, Strings that have special, that have special characters in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:27.670 --> 00:29:28.000
<v Speaker 0>them.

NOTE CONF {"raw":[100]}

00:29:28.000 --> 00:29:29.560
<v Speaker 0>All that stuff I'm not going to go into in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:29.560 --> 00:29:30.280
<v Speaker 0>the lectures.

NOTE CONF {"raw":[100,100]}

00:29:31.840 --> 00:29:35.620
<v Speaker 0>Okay, so we compute with values in Haskell and here

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:35.620 --> 00:29:37.210
<v Speaker 0>are some examples of values.

NOTE CONF {"raw":[100,100,100,100,100]}

00:29:37.420 --> 00:29:38.110
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:29:38.110 --> 00:29:39.610
<v Speaker 0>You can read these yourself.

NOTE CONF {"raw":[100,100,100,100,100]}

00:29:39.610 --> 00:29:41.830
<v Speaker 0>There's things like numbers and strings.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:29:41.830 --> 00:29:43.750
<v Speaker 0>Um truth values.

NOTE CONF {"raw":[100,100,100]}

00:29:44.290 --> 00:29:46.240
<v Speaker 0>You could have a value which is a date.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:29:46.240 --> 00:29:47.710
<v Speaker 0>Although that's not built in.

NOTE CONF {"raw":[100,100,100,100,100]}

00:29:48.220 --> 00:29:51.310
<v Speaker 0>You could have a value which is a person okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:51.310 --> 00:29:52.660
<v Speaker 0>These things at the end.

NOTE CONF {"raw":[100,100,100,100,100]}

00:29:52.660 --> 00:29:54.130
<v Speaker 0>These are functions.

NOTE CONF {"raw":[100,100,100]}

00:29:54.670 --> 00:29:55.900
<v Speaker 0>Square root function.

NOTE CONF {"raw":[100,100,100]}

00:29:55.900 --> 00:29:59.590
<v Speaker 0>Addition function a function that takes the length of a

NOTE CONF {"raw":[90,100,100,100,100,100,100,100,100,100]}

00:29:59.590 --> 00:30:01.450
<v Speaker 0>of a of a data structure.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:30:01.450 --> 00:30:03.820
<v Speaker 0>It gives you a number and maybe a function which

NOTE CONF {"raw":[55,100,100,100,100,100,100,100,100,100]}

00:30:03.820 --> 00:30:04.480
<v Speaker 0>takes a person.

NOTE CONF {"raw":[100,100,100]}

00:30:04.480 --> 00:30:06.250
<v Speaker 0>It tells you whether they're alive or not.

NOTE CONF {"raw":[52,100,100,100,100,100,100,100]}

00:30:06.520 --> 00:30:07.330
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:30:07.570 --> 00:30:10.000
<v Speaker 0>Um, so these are values.

NOTE CONF {"raw":[97,100,100,100,100]}

00:30:10.000 --> 00:30:13.660
<v Speaker 0>Functions are values just like numbers or values okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:30:13.660 --> 00:30:18.250
<v Speaker 0>There's no uh, there's no special way that you need

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:18.250 --> 00:30:20.680
<v Speaker 0>to treat functions.

NOTE CONF {"raw":[100,100,100]}

00:30:21.160 --> 00:30:24.500
<v Speaker 0>Well, of course you do different things with functions than

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:24.500 --> 00:30:27.290
<v Speaker 0>you do with values, but there's no way in which

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:27.290 --> 00:30:29.900
<v Speaker 0>you need to treat them specially because their functions, you

NOTE CONF {"raw":[100,100,100,100,100,98,100,66,100,100]}

00:30:29.900 --> 00:30:31.160
<v Speaker 0>know, it isn't like.

NOTE CONF {"raw":[100,100,100,100]}

00:30:31.160 --> 00:30:34.370
<v Speaker 0>So an example is you can build data structures that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:34.370 --> 00:30:36.800
<v Speaker 0>have numbers in them, and you can build data structures

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:36.800 --> 00:30:38.150
<v Speaker 0>that have functions in them.

NOTE CONF {"raw":[100,100,100,100,100]}

00:30:38.150 --> 00:30:39.740
<v Speaker 0>And it's exactly the same.

NOTE CONF {"raw":[100,100,100,100,100]}

00:30:40.010 --> 00:30:43.010
<v Speaker 0>Uh, you know, there's no special difficulty in having the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:43.010 --> 00:30:44.660
<v Speaker 0>functions in the data structure.

NOTE CONF {"raw":[100,100,100,100,100]}

00:30:44.660 --> 00:30:45.650
<v Speaker 0>It's the same thing.

NOTE CONF {"raw":[100,100,100,100]}

00:30:45.650 --> 00:30:48.110
<v Speaker 0>It's just a value, okay?

NOTE CONF {"raw":[100,100,100,100,100]}

00:30:48.110 --> 00:30:49.850
<v Speaker 0>Every value has a type.

NOTE CONF {"raw":[100,100,100,100,100]}

00:30:51.470 --> 00:30:51.890
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:30:51.890 --> 00:30:52.880
<v Speaker 0>Types are very important.

NOTE CONF {"raw":[100,100,100,100]}

00:30:52.880 --> 00:30:54.110
<v Speaker 0>I'll tell you what types are.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:30:54.380 --> 00:30:55.910
<v Speaker 0>Um, every value has a type.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:30:55.910 --> 00:31:01.610
<v Speaker 0>And we use this notation value uh double colon type

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:03.050 --> 00:31:03.560
<v Speaker 0>okay.

NOTE CONF {"raw":[100]}

00:31:03.560 --> 00:31:06.470
<v Speaker 0>So there's a vocabulary of types that are built into

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:06.470 --> 00:31:06.800
<v Speaker 0>Haskell.

NOTE CONF {"raw":[100]}

00:31:06.800 --> 00:31:08.750
<v Speaker 0>And you can also build your you can also define

NOTE CONF {"raw":[100,100,100,100,100,96,100,100,100,100]}

00:31:08.750 --> 00:31:09.470
<v Speaker 0>your own types.

NOTE CONF {"raw":[100,100,100]}

00:31:09.470 --> 00:31:12.860
<v Speaker 0>So one of the types is integers abbreviated int.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:31:13.070 --> 00:31:17.780
<v Speaker 0>So integers are numbers without decimal points you know 012

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:17.780 --> 00:31:20.030
<v Speaker 0>negative numbers as well okay.

NOTE CONF {"raw":[100,100,100,100,100]}

00:31:20.030 --> 00:31:21.620
<v Speaker 0>So 42 is an example.

NOTE CONF {"raw":[100,100,100,100,100]}

00:31:21.800 --> 00:31:23.060
<v Speaker 0>Um Strings.

NOTE CONF {"raw":[100,100]}

00:31:24.140 --> 00:31:27.050
<v Speaker 0>Uh, these are, uh, you know, they have double quotes

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:27.050 --> 00:31:28.070
<v Speaker 0>around them.

NOTE CONF {"raw":[100,100]}

00:31:28.880 --> 00:31:31.880
<v Speaker 0>Uh, that's a that's a type, um, false.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:31:31.880 --> 00:31:33.200
<v Speaker 0>This is a truth value.

NOTE CONF {"raw":[100,100,100,100,100]}

00:31:33.260 --> 00:31:34.400
<v Speaker 0>Uh, we call it a bool.

NOTE CONF {"raw":[92,100,100,100,100,100]}

00:31:34.400 --> 00:31:38.990
<v Speaker 0>Bool stands for Boolean, which is named after George Boole,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:39.020 --> 00:31:42.470
<v Speaker 0>who was a one of, well, the first logician in

NOTE CONF {"raw":[100,100,100,100,81,100,100,100,100,100]}

00:31:42.470 --> 00:31:44.300
<v Speaker 0>the in the 1800s.

NOTE CONF {"raw":[100,100,100,100]}

00:31:44.600 --> 00:31:48.020
<v Speaker 0>Um, so truth value is true and false, okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:31:48.020 --> 00:31:49.100
<v Speaker 0>And so forth.

NOTE CONF {"raw":[100,100,100]}

00:31:49.250 --> 00:31:51.200
<v Speaker 0>Uh, this would be a date.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:31:51.200 --> 00:31:53.390
<v Speaker 0>This would be a person, perhaps.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:31:53.390 --> 00:31:54.140
<v Speaker 0>Okay.

NOTE CONF {"raw":[90]}

00:31:54.170 --> 00:31:55.790
<v Speaker 0>Um, functions.

NOTE CONF {"raw":[100,99]}

00:31:56.180 --> 00:31:58.340
<v Speaker 0>The type is not just that.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:31:58.340 --> 00:31:59.210
<v Speaker 0>It's a function.

NOTE CONF {"raw":[100,100,100]}

00:31:59.210 --> 00:32:01.340
<v Speaker 0>It says what kind of function it is.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:32:01.340 --> 00:32:06.020
<v Speaker 0>So function types, uh, always have these, these this, this

NOTE CONF {"raw":[100,100,100,76,100,100,100,100,100,100]}

00:32:06.020 --> 00:32:09.380
<v Speaker 0>thing, this sort of hyphen greater than, which is meant

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:09.380 --> 00:32:10.790
<v Speaker 0>to represent an arrow.

NOTE CONF {"raw":[100,100,100,100]}

00:32:11.180 --> 00:32:11.780
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:32:11.780 --> 00:32:15.770
<v Speaker 0>So square root function takes a float to a float.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:15.770 --> 00:32:18.620
<v Speaker 0>A float is a is a number which might have

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:18.620 --> 00:32:19.640
<v Speaker 0>a decimal point in it.

NOTE CONF {"raw":[100,100,100,100,100]}

00:32:19.640 --> 00:32:24.240
<v Speaker 0>It might be in scientific notation like uh, 2.7, uh

NOTE CONF {"raw":[100,100,100,100,100,100,100,83,100,84]}

00:32:24.240 --> 00:32:26.820
<v Speaker 0>times ten to the 23rd or whatever it is.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:32:26.820 --> 00:32:29.220
<v Speaker 0>So there's a notation for writing that in Haskell.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:32:29.220 --> 00:32:31.350
<v Speaker 0>It's called a float or floating point number.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:32:31.710 --> 00:32:35.430
<v Speaker 0>Um, so square root takes one of those and produces

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:35.430 --> 00:32:36.810
<v Speaker 0>another one of those.

NOTE CONF {"raw":[100,100,100,100]}

00:32:36.810 --> 00:32:37.560
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:32:38.490 --> 00:32:44.310
<v Speaker 0>Um, the plus function um, takes two takes two, two

NOTE CONF {"raw":[100,100,100,100,87,100,100,100,100,100]}

00:32:44.310 --> 00:32:44.940
<v Speaker 0>numbers.

NOTE CONF {"raw":[100]}

00:32:44.940 --> 00:32:47.910
<v Speaker 0>For example, it takes two integers and produces an integer.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:47.910 --> 00:32:50.610
<v Speaker 0>And the way that you write functions which take more

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:50.610 --> 00:32:55.500
<v Speaker 0>than one uh, value, uh, is is like this okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:55.500 --> 00:32:57.120
<v Speaker 0>Not int okay.

NOTE CONF {"raw":[100,100,100]}

00:32:57.120 --> 00:32:58.890
<v Speaker 0>It's int arrow int arrow int.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:32:58.890 --> 00:33:02.370
<v Speaker 0>And I'll explain why in a later lecture okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:33:02.370 --> 00:33:04.800
<v Speaker 0>But just for now that's the way you do it

NOTE CONF {"raw":[83,100,100,100,100,100,100,100,100,100]}

00:33:05.400 --> 00:33:08.820
<v Speaker 0>in Haskell usually.

NOTE CONF {"raw":[100,100,100]}

00:33:09.960 --> 00:33:10.380
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:33:10.380 --> 00:33:13.290
<v Speaker 0>Length takes a string gives you an int and uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,58]}

00:33:13.290 --> 00:33:14.070
<v Speaker 0>and so forth.

NOTE CONF {"raw":[100,100,100]}

00:33:14.070 --> 00:33:14.610
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:33:14.610 --> 00:33:20.610
<v Speaker 0>So um, so function names always have capital letters at

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:20.610 --> 00:33:21.360
<v Speaker 0>the beginning.

NOTE CONF {"raw":[100,100]}

00:33:24.030 --> 00:33:24.570
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:33:24.690 --> 00:33:28.380
<v Speaker 0>Sorry, not function names, type names, type names, int string,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:28.380 --> 00:33:28.950
<v Speaker 0>and so forth.

NOTE CONF {"raw":[100,100,100]}

00:33:28.950 --> 00:33:30.450
<v Speaker 0>Have capital letters at the beginning.

NOTE CONF {"raw":[100,100,100,41,73,100]}

00:33:30.540 --> 00:33:36.510
<v Speaker 0>Function names have lowercase letters at the beginning, except when

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:36.510 --> 00:33:38.430
<v Speaker 0>they have symbolic names.

NOTE CONF {"raw":[100,100,100,100]}

00:33:40.440 --> 00:33:42.960
<v Speaker 0>Okay with me so far this is all very easy.

NOTE CONF {"raw":[100,100,100,100,100,87,66,100,100,100]}

00:33:43.650 --> 00:33:47.970
<v Speaker 0>Um, now what do you do with values and functions?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:48.270 --> 00:33:52.260
<v Speaker 0>Um, so here is uh, some examples that are related

NOTE CONF {"raw":[100,100,100,100,62,100,100,100,100,100]}

00:33:52.260 --> 00:33:55.980
<v Speaker 0>to things that are in the first tutorial exercise.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:33:56.490 --> 00:33:59.400
<v Speaker 0>Um, so the optional part of the first tutorial exercise,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:59.400 --> 00:34:02.100
<v Speaker 0>you are going to be doing things with pictures of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:02.100 --> 00:34:03.120
<v Speaker 0>chess pieces.

NOTE CONF {"raw":[100,100]}

00:34:03.270 --> 00:34:03.930
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:34:03.930 --> 00:34:06.510
<v Speaker 0>And here is a it doesn't matter if you've never

NOTE CONF {"raw":[100,100,100,100,79,100,100,100,100,100]}

00:34:06.510 --> 00:34:08.909
<v Speaker 0>played chess, you just need to know that there are

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:08.909 --> 00:34:10.560
<v Speaker 0>these pictures of things.

NOTE CONF {"raw":[100,100,100,100]}

00:34:10.560 --> 00:34:12.870
<v Speaker 0>So, um, this is this is called a knight.

NOTE CONF {"raw":[100,93,100,100,100,100,100,100,100]}

00:34:12.870 --> 00:34:13.980
<v Speaker 0>It's a black knight.

NOTE CONF {"raw":[100,100,100,100]}

00:34:15.510 --> 00:34:16.620
<v Speaker 0>It looks like a horse.

NOTE CONF {"raw":[87,100,100,100,100]}

00:34:17.070 --> 00:34:20.830
<v Speaker 0>Okay, so a knight uh, is a chess piece.

NOTE CONF {"raw":[100,100,100,100,57,100,100,100,100]}

00:34:20.830 --> 00:34:21.669
<v Speaker 0>And we're where.

NOTE CONF {"raw":[100,100,73]}

00:34:21.700 --> 00:34:22.300
<v Speaker 0>Where?

NOTE CONF {"raw":[95]}

00:34:22.510 --> 00:34:26.110
<v Speaker 0>We're using the name picture for the type.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:34:26.320 --> 00:34:26.889
<v Speaker 0>Okay?

NOTE CONF {"raw":[100]}

00:34:26.889 --> 00:34:29.470
<v Speaker 0>Because we're going to be building pictures of chess pieces,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:29.470 --> 00:34:33.100
<v Speaker 0>but also pictures of multiple chess pieces, um, put together.

NOTE CONF {"raw":[100,100,100,100,100,100,100,87,100,100]}

00:34:33.429 --> 00:34:37.570
<v Speaker 0>Okay, so, so suppose we have a knight and it

NOTE CONF {"raw":[100,100,100,100,100,100,95,62,100,100]}

00:34:37.570 --> 00:34:40.060
<v Speaker 0>looks like this, this black, this black picture.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:34:40.810 --> 00:34:43.840
<v Speaker 0>And suppose we've got a function called invert which takes

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:43.840 --> 00:34:44.889
<v Speaker 0>a picture to picture.

NOTE CONF {"raw":[100,100,46,100]}

00:34:44.889 --> 00:34:47.290
<v Speaker 0>And it's what it does is it takes the kind

NOTE CONF {"raw":[100,98,100,100,100,100,100,100,100,100]}

00:34:47.290 --> 00:34:48.580
<v Speaker 0>of photographic negative.

NOTE CONF {"raw":[100,100,100]}

00:34:48.580 --> 00:34:51.100
<v Speaker 0>So it turns black to white and white to black.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:51.100 --> 00:34:54.010
<v Speaker 0>So if you apply it to this, to this, to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:54.010 --> 00:34:58.360
<v Speaker 0>this black chess piece on a white background, you get

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:58.360 --> 00:35:02.230
<v Speaker 0>a white chess piece on a black, black background, okay.

NOTE CONF {"raw":[100,100,100,100,100,100,84,100,100,100]}

00:35:02.230 --> 00:35:04.360
<v Speaker 0>That's what the invert function does.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:35:04.900 --> 00:35:07.660
<v Speaker 0>This thing is called um, this is the function.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:35:07.660 --> 00:35:11.140
<v Speaker 0>This is called uh, the argument or the parameter.

NOTE CONF {"raw":[100,100,100,58,100,100,100,100,100]}

00:35:11.920 --> 00:35:13.780
<v Speaker 0>I'm going to be using both of those names.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:35:14.710 --> 00:35:15.550
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:35:15.790 --> 00:35:21.130
<v Speaker 0>Um, And one thing to notice here is that you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:21.130 --> 00:35:22.300
<v Speaker 0>don't need to use.

NOTE CONF {"raw":[100,100,100,100]}

00:35:22.300 --> 00:35:25.600
<v Speaker 0>I'm just mentioning this because in many programming languages you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:25.600 --> 00:35:29.140
<v Speaker 0>need to use parentheses to write function applications.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:35:29.140 --> 00:35:30.820
<v Speaker 0>You don't need to do it here.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:35:31.090 --> 00:35:31.930
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:35:34.180 --> 00:35:37.420
<v Speaker 0>So let's see is this going to work right.

NOTE CONF {"raw":[100,100,100,85,100,100,100,100,98]}

00:35:42.250 --> 00:35:44.290
<v Speaker 0>Invert night.

NOTE CONF {"raw":[100,100]}

00:35:47.950 --> 00:35:48.520
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:35:48.520 --> 00:35:51.730
<v Speaker 0>So function applied to argument.

NOTE CONF {"raw":[100,100,98,100,100]}

00:35:52.990 --> 00:35:55.690
<v Speaker 0>In many languages you would have to write this.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:35:57.310 --> 00:36:00.010
<v Speaker 0>Um in Haskell you can write that if you want.

NOTE CONF {"raw":[98,100,100,100,100,100,100,100,100,100]}

00:36:00.400 --> 00:36:03.580
<v Speaker 0>Parentheses are used for grouping okay.

NOTE CONF {"raw":[100,100,100,100,100,92]}

00:36:04.060 --> 00:36:07.450
<v Speaker 0>Um, you don't have to write the parentheses because night

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:07.450 --> 00:36:08.560
<v Speaker 0>is already a group.

NOTE CONF {"raw":[100,100,100,100]}

00:36:08.560 --> 00:36:10.690
<v Speaker 0>You don't have to kind of put it in parentheses

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:10.690 --> 00:36:12.820
<v Speaker 0>to make it a group, okay?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:36:12.820 --> 00:36:14.050
<v Speaker 0>You're allowed to do it.

NOTE CONF {"raw":[100,100,100,100,100]}

00:36:14.140 --> 00:36:17.000
<v Speaker 0>In fact, you're allowed to do it as many times

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:17.000 --> 00:36:17.660
<v Speaker 0>as you want.

NOTE CONF {"raw":[100,100,100]}

00:36:17.660 --> 00:36:20.270
<v Speaker 0>If you wish, you can also put parentheses around invert.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:20.570 --> 00:36:22.820
<v Speaker 0>You can also put a parentheses around the whole thing.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:22.820 --> 00:36:23.540
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:36:23.930 --> 00:36:25.850
<v Speaker 0>Uh, you don't have to.

NOTE CONF {"raw":[100,100,100,100,100]}

00:36:25.850 --> 00:36:26.210
<v Speaker 0>Okay.

NOTE CONF {"raw":[73]}

00:36:26.240 --> 00:36:28.760
<v Speaker 0>Simplest way is as it's shown there.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:36:29.360 --> 00:36:29.900
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:36:29.900 --> 00:36:34.760
<v Speaker 0>So, um, the reason why we don't require parentheses partly

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:34.760 --> 00:36:38.450
<v Speaker 0>is because, um, you tend to write in functional programming,

NOTE CONF {"raw":[100,100,97,100,100,100,100,100,100,100]}

00:36:38.450 --> 00:36:42.890
<v Speaker 0>you tend to write expressions combining functions, which tend to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:42.890 --> 00:36:45.650
<v Speaker 0>get sometimes a little bit long.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:36:46.040 --> 00:36:48.980
<v Speaker 0>And there will be parentheses in there to group things

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:48.980 --> 00:36:51.110
<v Speaker 0>so that you know which parts have to be done

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:51.110 --> 00:36:52.850
<v Speaker 0>before other parts and so forth.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:36:52.850 --> 00:36:56.780
<v Speaker 0>And adding extra parentheses makes things more cluttered, so we

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:56.780 --> 00:36:58.760
<v Speaker 0>try to avoid them when we can.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:37:02.510 --> 00:37:03.290
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:37:05.270 --> 00:37:07.970
<v Speaker 0>Now combining functions.

NOTE CONF {"raw":[100,100,100]}

00:37:07.970 --> 00:37:12.200
<v Speaker 0>So here's an example where we're taking, um, a black

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:12.200 --> 00:37:15.890
<v Speaker 0>knight doing various things to it and coming out Here's

NOTE CONF {"raw":[85,100,100,100,100,100,100,100,100,100]}

00:37:15.890 --> 00:37:16.460
<v Speaker 0>the Black Knight.

NOTE CONF {"raw":[100,100,86]}

00:37:16.460 --> 00:37:17.270
<v Speaker 0>We're doing various things.

NOTE CONF {"raw":[100,100,100,100]}

00:37:17.270 --> 00:37:19.700
<v Speaker 0>We're coming out with a picture that looks like this.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:19.850 --> 00:37:20.480
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:37:20.480 --> 00:37:23.570
<v Speaker 0>Using some some, some functions okay.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:37:23.570 --> 00:37:26.600
<v Speaker 0>So there's a function called beside which takes two pictures

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:26.600 --> 00:37:30.380
<v Speaker 0>and produces a picture by putting the first one, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,87]}

00:37:30.380 --> 00:37:32.660
<v Speaker 0>to the left of the second one.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:37:33.500 --> 00:37:33.710
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:37:33.710 --> 00:37:36.860
<v Speaker 0>So here's beside applied to a white knight on a

NOTE CONF {"raw":[100,100,100,98,100,100,100,100,100,100]}

00:37:36.860 --> 00:37:39.230
<v Speaker 0>black black brown background and a black knight on a

NOTE CONF {"raw":[56,100,87,100,100,100,100,100,100,100]}

00:37:39.230 --> 00:37:39.920
<v Speaker 0>white background.

NOTE CONF {"raw":[100,100]}

00:37:39.920 --> 00:37:41.300
<v Speaker 0>You get this picture here.

NOTE CONF {"raw":[100,100,100,100,100]}

00:37:42.650 --> 00:37:44.300
<v Speaker 0>Um, we've seen invert already.

NOTE CONF {"raw":[100,100,100,100,100]}

00:37:44.300 --> 00:37:47.570
<v Speaker 0>And then flip V is a function for taking a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:47.570 --> 00:37:50.780
<v Speaker 0>picture and flipping it around a vertical axis.

NOTE CONF {"raw":[100,100,100,100,100,60,100,100]}

00:37:50.780 --> 00:37:51.500
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:37:51.500 --> 00:37:52.490
<v Speaker 0>Like that.

NOTE CONF {"raw":[100,100]}

00:37:52.490 --> 00:37:56.780
<v Speaker 0>So you take a, uh, a left, you take a

NOTE CONF {"raw":[100,100,100,100,86,100,100,100,100,100]}

00:37:56.780 --> 00:37:59.600
<v Speaker 0>left facing black Knight, you do a flip V and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:59.600 --> 00:38:01.490
<v Speaker 0>you get a right facing Black Knight.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:38:05.000 --> 00:38:05.480
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:38:05.480 --> 00:38:10.730
<v Speaker 0>And so this, this combination of functions and and the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:10.730 --> 00:38:11.570
<v Speaker 0>value knight.

NOTE CONF {"raw":[100,100]}

00:38:14.360 --> 00:38:16.700
<v Speaker 0>Is, uh, pictorially.

NOTE CONF {"raw":[100,80,100]}

00:38:16.700 --> 00:38:17.600
<v Speaker 0>You can see it here.

NOTE CONF {"raw":[100,100,100,100,100]}

00:38:17.600 --> 00:38:18.110
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:38:18.110 --> 00:38:21.320
<v Speaker 0>Invert the invert the black knight, flip it around its

NOTE CONF {"raw":[100,100,100,100,100,55,100,100,100,79]}

00:38:21.410 --> 00:38:22.460
<v Speaker 0>vertical axis.

NOTE CONF {"raw":[100,95]}

00:38:22.460 --> 00:38:24.530
<v Speaker 0>Put the first one of those beside the second one.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:24.530 --> 00:38:26.030
<v Speaker 0>You get that okay.

NOTE CONF {"raw":[100,100,100,100]}

00:38:26.030 --> 00:38:26.840
<v Speaker 0>Is that clear.

NOTE CONF {"raw":[100,100,100]}

00:38:26.840 --> 00:38:32.090
<v Speaker 0>And here you need the parentheses because beside is applied

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:32.090 --> 00:38:37.070
<v Speaker 0>to um the result of applying invert tonight and the

NOTE CONF {"raw":[100,78,100,100,100,100,100,68,100,100]}

00:38:37.070 --> 00:38:39.320
<v Speaker 0>result of applying flip V tonight okay.

NOTE CONF {"raw":[100,100,100,100,99,83,100]}

00:38:39.320 --> 00:38:40.940
<v Speaker 0>So you need the parentheses.

NOTE CONF {"raw":[100,72,100,100,100]}

00:38:40.940 --> 00:38:43.550
<v Speaker 0>So these are not there because you need them for

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:43.550 --> 00:38:44.450
<v Speaker 0>function application.

NOTE CONF {"raw":[100,100]}

00:38:44.450 --> 00:38:46.520
<v Speaker 0>They're there for because you need them for grouping.

NOTE CONF {"raw":[93,71,100,100,100,100,100,100,100]}

00:38:48.680 --> 00:38:52.490
<v Speaker 0>So that's combining functions together to do things more complicated

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:52.490 --> 00:38:53.570
<v Speaker 0>things with objects.

NOTE CONF {"raw":[100,100,100]}

00:38:53.570 --> 00:38:58.400
<v Speaker 0>And um you can is that all clear so far.

NOTE CONF {"raw":[100,100,100,100,100,72,100,100,100,100]}

00:38:59.720 --> 00:39:01.040
<v Speaker 0>Yeah okay.

NOTE CONF {"raw":[100,100]}

00:39:01.040 --> 00:39:06.530
<v Speaker 0>You can define a function which packages this up.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:39:07.790 --> 00:39:10.760
<v Speaker 0>Um, because maybe you want to, to do it to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:10.760 --> 00:39:13.800
<v Speaker 0>more things than just this picture of a black knight.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,96]}

00:39:14.310 --> 00:39:14.760
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:39:14.760 --> 00:39:15.930
<v Speaker 0>And so you can define it.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:39:15.930 --> 00:39:18.090
<v Speaker 0>You can define a function which will do the similar

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:18.090 --> 00:39:22.230
<v Speaker 0>thing to any picture, including complicated pictures.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:39:22.380 --> 00:39:22.980
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:39:22.980 --> 00:39:26.070
<v Speaker 0>So, um, so what we had a minute ago was,

NOTE CONF {"raw":[100,98,100,100,100,100,100,100,100,100]}

00:39:26.070 --> 00:39:30.150
<v Speaker 0>was, was this expression here beside invert night and flip

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:30.150 --> 00:39:30.960
<v Speaker 0>V night.

NOTE CONF {"raw":[100,100]}

00:39:30.960 --> 00:39:31.590
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:39:31.590 --> 00:39:34.950
<v Speaker 0>So here is a function which does the same thing

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:35.250 --> 00:39:37.740
<v Speaker 0>not just to a night but to any but to

NOTE CONF {"raw":[100,100,100,100,72,100,100,100,100,100]}

00:39:37.740 --> 00:39:40.860
<v Speaker 0>any picture P okay, so we use a variable to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:40.860 --> 00:39:42.300
<v Speaker 0>stand for a picture.

NOTE CONF {"raw":[100,100,100,100]}

00:39:42.390 --> 00:39:44.670
<v Speaker 0>And then we have the thing that we had on

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,97]}

00:39:44.670 --> 00:39:47.340
<v Speaker 0>the previous uh previous slide there.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:39:47.340 --> 00:39:49.230
<v Speaker 0>And we're doing it not with a knight but with

NOTE CONF {"raw":[100,100,100,100,100,100,79,52,100,100]}

00:39:49.230 --> 00:39:51.000
<v Speaker 0>P okay.

NOTE CONF {"raw":[100,100]}

00:39:51.000 --> 00:39:52.560
<v Speaker 0>We're calling this function double.

NOTE CONF {"raw":[40,100,100,100,100]}

00:39:54.120 --> 00:39:56.460
<v Speaker 0>And it's a function which takes a picture and produces

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:56.460 --> 00:39:57.780
<v Speaker 0>a picture okay.

NOTE CONF {"raw":[100,100,100]}

00:39:57.780 --> 00:40:00.600
<v Speaker 0>It takes, it takes for example, this black knight.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,83]}

00:40:00.600 --> 00:40:04.170
<v Speaker 0>And it produces this more complicated picture with a black

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,36,100]}

00:40:04.170 --> 00:40:05.340
<v Speaker 0>knight and a white knight.

NOTE CONF {"raw":[100,100,66,100,100]}

00:40:06.330 --> 00:40:06.690
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:40:06.690 --> 00:40:09.750
<v Speaker 0>And inside the box it's doing, it's doing what we

NOTE CONF {"raw":[100,100,100,100,93,100,95,100,100,100]}

00:40:09.750 --> 00:40:11.550
<v Speaker 0>saw on the last slide.

NOTE CONF {"raw":[100,100,100,100,100]}

00:40:11.550 --> 00:40:12.210
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:40:12.210 --> 00:40:14.910
<v Speaker 0>But, you know, you package this up and so you

NOTE CONF {"raw":[100,100,100,100,98,100,100,100,100,100]}

00:40:14.910 --> 00:40:17.580
<v Speaker 0>see it as a, as a unit which, which does

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:17.580 --> 00:40:18.390
<v Speaker 0>this thing.

NOTE CONF {"raw":[100,100]}

00:40:18.660 --> 00:40:21.000
<v Speaker 0>Uh, and not just to night, but to anything.

NOTE CONF {"raw":[63,100,100,100,98,55,100,100,100]}

00:40:21.420 --> 00:40:21.780
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:40:21.780 --> 00:40:24.840
<v Speaker 0>So so that's our first function definition.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:40:24.930 --> 00:40:30.000
<v Speaker 0>Function definitions are written using an equation like that function

NOTE CONF {"raw":[100,100,100,100,100,98,100,100,100,100]}

00:40:30.000 --> 00:40:35.880
<v Speaker 0>name on the left with a variable for the for

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:35.880 --> 00:40:38.640
<v Speaker 0>the argument or the parameter okay.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:40:38.640 --> 00:40:41.370
<v Speaker 0>And then the function body here which says what you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:41.370 --> 00:40:44.520
<v Speaker 0>do with that thing to get the answer.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:40:45.960 --> 00:40:46.470
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:40:46.470 --> 00:40:50.490
<v Speaker 0>This thing at the beginning is the so-called type signature.

NOTE CONF {"raw":[100,100,100,100,100,100,100,52,100,100]}

00:40:50.490 --> 00:40:53.460
<v Speaker 0>So this is declaring what kind of function it is.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:53.460 --> 00:40:54.870
<v Speaker 0>It's not required.

NOTE CONF {"raw":[100,100,100]}

00:40:55.170 --> 00:40:57.420
<v Speaker 0>Um, Haskell will figure it out for itself if you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:57.420 --> 00:40:58.320
<v Speaker 0>don't write it down.

NOTE CONF {"raw":[100,100,100,100]}

00:40:58.320 --> 00:40:59.250
<v Speaker 0>But it's good.

NOTE CONF {"raw":[100,100,100]}

00:40:59.250 --> 00:41:02.550
<v Speaker 0>It's good, good practice to write it down, to make

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:02.550 --> 00:41:04.170
<v Speaker 0>clear what it is you're trying to do.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:41:05.850 --> 00:41:06.390
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:41:06.390 --> 00:41:07.980
<v Speaker 0>So that's defining new function.

NOTE CONF {"raw":[100,100,77,100,100]}

00:41:08.520 --> 00:41:12.100
<v Speaker 0>Um, and this is just now that you've defined it.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:12.100 --> 00:41:13.240
<v Speaker 0>It's just a thing.

NOTE CONF {"raw":[100,100,100,100]}

00:41:13.240 --> 00:41:15.310
<v Speaker 0>You don't have to have a you don't have to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:15.310 --> 00:41:16.390
<v Speaker 0>know what's inside the box.

NOTE CONF {"raw":[100,100,100,100,100]}

00:41:16.390 --> 00:41:20.290
<v Speaker 0>You just have to know that it does what's shown

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:20.290 --> 00:41:20.770
<v Speaker 0>there.

NOTE CONF {"raw":[100]}

00:41:22.600 --> 00:41:26.290
<v Speaker 0>Okay, I'm running out of time.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:41:26.290 --> 00:41:27.190
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:41:31.090 --> 00:41:36.220
<v Speaker 0>Nevertheless, I will show you, um, so we can right

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,60]}

00:41:36.220 --> 00:41:43.150
<v Speaker 0>define other functions like, um, let's suppose that, um, we

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:43.150 --> 00:41:44.200
<v Speaker 0>want a function.

NOTE CONF {"raw":[100,93,100]}

00:41:44.560 --> 00:41:47.980
<v Speaker 0>By the way, I said p, the letter p, you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:47.980 --> 00:41:49.900
<v Speaker 0>can use any, any variable you like.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:41:49.900 --> 00:41:51.970
<v Speaker 0>It could be x or n or pick or something

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:51.970 --> 00:41:52.630
<v Speaker 0>like that.

NOTE CONF {"raw":[100,100]}

00:41:52.630 --> 00:41:57.100
<v Speaker 0>So um, suppose that we want to have a function

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:57.100 --> 00:41:58.240
<v Speaker 0>which, um.

NOTE CONF {"raw":[100,100]}

00:42:00.520 --> 00:42:04.270
<v Speaker 0>Takes a picture and takes three copies of them of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:04.270 --> 00:42:09.130
<v Speaker 0>it and puts them, uh, puts them together left to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:09.130 --> 00:42:09.430
<v Speaker 0>right.

NOTE CONF {"raw":[100]}

00:42:09.430 --> 00:42:10.030
<v Speaker 0>Okay.

NOTE CONF {"raw":[99]}

00:42:10.330 --> 00:42:11.950
<v Speaker 0>We could call that triple.

NOTE CONF {"raw":[100,100,100,100,100]}

00:42:12.130 --> 00:42:15.490
<v Speaker 0>Uh, we could write, uh, the the signature as well.

NOTE CONF {"raw":[100,100,100,96,100,100,100,100,100,100]}

00:42:15.490 --> 00:42:16.930
<v Speaker 0>I should do this to, um.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:42:18.850 --> 00:42:21.490
<v Speaker 0>I said it was best practice, so I'll do it.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:21.700 --> 00:42:25.240
<v Speaker 0>Okay, so there's a there's a function which would take,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:25.540 --> 00:42:28.420
<v Speaker 0>for example, a night, give you three copies next to

NOTE CONF {"raw":[100,100,100,78,100,100,100,100,100,100]}

00:42:28.420 --> 00:42:28.990
<v Speaker 0>each other.

NOTE CONF {"raw":[100,100]}

00:42:28.990 --> 00:42:34.480
<v Speaker 0>I could have written I could have written, um, this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:34.480 --> 00:42:35.200
<v Speaker 0>instead.

NOTE CONF {"raw":[100]}

00:42:39.910 --> 00:42:40.210
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:42:40.210 --> 00:42:41.470
<v Speaker 0>I get the same result.

NOTE CONF {"raw":[67,100,100,100,100]}

00:42:42.310 --> 00:42:46.630
<v Speaker 0>Does anybody know what the property of beside is that,

NOTE CONF {"raw":[100,100,100,100,100,100,100,97,100,100]}

00:42:46.630 --> 00:42:48.400
<v Speaker 0>uh, that says that these are equal?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:42:48.400 --> 00:42:51.520
<v Speaker 0>It's a it's a it's a mathematical concept.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:42:51.850 --> 00:42:53.290
<v Speaker 0>Uh, do you have your hand up?

NOTE CONF {"raw":[100,61,100,100,100,100,100]}

00:42:54.220 --> 00:42:57.910
<v Speaker 0>Not commutative, but you're close associative, right.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:42:57.910 --> 00:42:58.870
<v Speaker 0>It's associative.

NOTE CONF {"raw":[100,100]}

00:42:58.870 --> 00:42:59.140
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:42:59.140 --> 00:43:01.960
<v Speaker 0>Commutative is is is uh, close but different.

NOTE CONF {"raw":[100,100,77,100,45,100,100,100]}

00:43:01.960 --> 00:43:04.810
<v Speaker 0>So here is associativity of plus.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:43:10.220 --> 00:43:10.970
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:43:11.180 --> 00:43:13.790
<v Speaker 0>Here is here's commutativity of plus.

NOTE CONF {"raw":[100,100,56,100,100,100]}

00:43:16.100 --> 00:43:16.700
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:43:16.700 --> 00:43:18.500
<v Speaker 0>Beside is associative.

NOTE CONF {"raw":[100,87,100]}

00:43:20.570 --> 00:43:25.670
<v Speaker 0>Um you could you can use a notation in Haskell

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:25.670 --> 00:43:27.500
<v Speaker 0>to make it a little bit tidier.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:43:27.500 --> 00:43:29.270
<v Speaker 0>It's a little bit hard to see what's going on

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:29.270 --> 00:43:30.590
<v Speaker 0>here okay.

NOTE CONF {"raw":[100,100]}

00:43:30.590 --> 00:43:31.550
<v Speaker 0>You can write.

NOTE CONF {"raw":[100,100,96]}

00:43:31.610 --> 00:43:33.740
<v Speaker 0>And the reason is because beside is what's called a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:33.740 --> 00:43:34.850
<v Speaker 0>prefix function.

NOTE CONF {"raw":[100,100]}

00:43:34.850 --> 00:43:37.610
<v Speaker 0>You you write the function name and then the argument.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:37.610 --> 00:43:38.390
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:43:38.540 --> 00:43:41.750
<v Speaker 0>Um, uh, you can take uh functions which take two

NOTE CONF {"raw":[95,84,100,100,100,49,100,100,100,100]}

00:43:41.750 --> 00:43:46.460
<v Speaker 0>arguments like beside and you can write them differently.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:43:46.460 --> 00:43:47.780
<v Speaker 0>So let me just do that.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:43:49.850 --> 00:43:52.820
<v Speaker 0>The notation is to use what are called back quotes.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:52.820 --> 00:43:54.440
<v Speaker 0>So these are like quotation marks.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:43:54.440 --> 00:43:57.380
<v Speaker 0>But you'll find them on your keyboard in a different

NOTE CONF {"raw":[100,93,100,100,100,100,100,100,100,100]}

00:43:57.380 --> 00:43:59.240
<v Speaker 0>place from the usual quotation mark.

NOTE CONF {"raw":[100,100,100,100,100,87]}

00:43:59.810 --> 00:44:03.110
<v Speaker 0>Um, they lean backwards.

NOTE CONF {"raw":[100,100,100,100]}

00:44:04.850 --> 00:44:05.300
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:44:05.300 --> 00:44:07.400
<v Speaker 0>You can write this like that.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:44:07.400 --> 00:44:10.910
<v Speaker 0>This is equivalent to actually the second one of those.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:10.910 --> 00:44:13.070
<v Speaker 0>Or you can write it like this.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:44:16.400 --> 00:44:18.440
<v Speaker 0>Uh, sorry.

NOTE CONF {"raw":[100,100]}

00:44:18.440 --> 00:44:20.570
<v Speaker 0>My handwriting is always sloppy.

NOTE CONF {"raw":[100,100,100,100,100]}

00:44:21.260 --> 00:44:24.440
<v Speaker 0>Um, or you can leave out the parentheses, because actually,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:24.710 --> 00:44:27.890
<v Speaker 0>the fact that this thing is, um, associative means it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:27.890 --> 00:44:31.670
<v Speaker 0>doesn't matter which way around you do the grouping.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:44:31.850 --> 00:44:32.570
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:44:33.290 --> 00:44:34.910
<v Speaker 0>Um, can you read that?

NOTE CONF {"raw":[100,100,100,100,100]}

00:44:34.910 --> 00:44:36.530
<v Speaker 0>I hope it's clear enough.

NOTE CONF {"raw":[100,100,100,100,100]}

00:44:36.620 --> 00:44:38.240
<v Speaker 0>Um, okay.

NOTE CONF {"raw":[100,97]}

00:44:38.450 --> 00:44:43.700
<v Speaker 0>Uh, so, uh, so beside is associative.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:44:43.820 --> 00:44:44.570
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:44:44.570 --> 00:44:45.860
<v Speaker 0>Two copies of of.

NOTE CONF {"raw":[100,100,100,100]}

00:44:45.860 --> 00:44:46.430
<v Speaker 4>P.

NOTE CONF {"raw":[100]}

00:44:46.940 --> 00:44:49.550
<v Speaker 0>Next to another copy of P is the same as

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:49.550 --> 00:44:52.160
<v Speaker 0>a copy of P next to two copies of P

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:52.160 --> 00:44:52.730
<v Speaker 0>okay.

NOTE CONF {"raw":[100]}

00:44:52.730 --> 00:44:55.250
<v Speaker 0>Is is beside commutative.

NOTE CONF {"raw":[100,100,86,96]}

00:44:57.020 --> 00:44:58.460
<v Speaker 0>No it isn't.

NOTE CONF {"raw":[100,100,100]}

00:44:58.610 --> 00:44:58.970
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:44:58.970 --> 00:45:01.550
<v Speaker 0>Because, um, a knight next to a bishop is not

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:01.550 --> 00:45:03.830
<v Speaker 0>the same as a bishop next to a knight.

NOTE CONF {"raw":[100,100,100,100,100,100,100,54,100]}

00:45:06.360 --> 00:45:06.960
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:45:06.960 --> 00:45:09.150
<v Speaker 0>Um, running.

NOTE CONF {"raw":[100,100]}

00:45:09.150 --> 00:45:10.800
<v Speaker 0>Really running out of time here.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:45:10.830 --> 00:45:13.050
<v Speaker 0>Um, so I'll just say this, um, terminology.

NOTE CONF {"raw":[100,100,100,100,100,89,88,100]}

00:45:13.050 --> 00:45:14.100
<v Speaker 0>Type signature.

NOTE CONF {"raw":[100,100]}

00:45:14.100 --> 00:45:15.210
<v Speaker 0>Function name.

NOTE CONF {"raw":[100,100]}

00:45:15.210 --> 00:45:15.750
<v Speaker 0>Function.

NOTE CONF {"raw":[100]}

00:45:15.750 --> 00:45:16.410
<v Speaker 0>Body.

NOTE CONF {"raw":[100]}

00:45:16.770 --> 00:45:17.160
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:45:19.350 --> 00:45:21.810
<v Speaker 0>You know, function body is the thing on the right

NOTE CONF {"raw":[100,100,100,100,100,94,100,100,100,100]}

00:45:21.810 --> 00:45:23.280
<v Speaker 0>hand side of the equal sign.

NOTE CONF {"raw":[100,100,100,100,98,100]}

00:45:23.580 --> 00:45:27.240
<v Speaker 0>Um, uh, this, uh, this variable here is sometimes known

NOTE CONF {"raw":[89,81,100,100,100,100,100,100,100,100]}

00:45:27.240 --> 00:45:28.710
<v Speaker 0>as a formal parameter.

NOTE CONF {"raw":[100,100,100,100]}

00:45:28.980 --> 00:45:29.730
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:45:29.730 --> 00:45:35.670
<v Speaker 0>Formal, uh, as opposed to actual the like here night

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:36.270 --> 00:45:37.650
<v Speaker 0>double applied to night.

NOTE CONF {"raw":[100,52,72,72]}

00:45:37.650 --> 00:45:39.270
<v Speaker 0>This is called an actual parameter.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:45:39.270 --> 00:45:42.390
<v Speaker 0>It's an actual value as opposed to a name for

NOTE CONF {"raw":[96,100,100,100,100,100,100,100,100,100]}

00:45:42.390 --> 00:45:43.170
<v Speaker 0>a value.

NOTE CONF {"raw":[100,100]}

00:45:44.850 --> 00:45:45.210
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:45:45.210 --> 00:45:47.880
<v Speaker 0>Formal is not like wearing a necktie.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:45:47.880 --> 00:45:49.620
<v Speaker 0>It's it's to do with form.

NOTE CONF {"raw":[69,100,100,100,100,100]}

00:45:50.850 --> 00:45:52.140
<v Speaker 0>Uh, technical word.

NOTE CONF {"raw":[100,100,100]}

00:45:52.140 --> 00:45:52.410
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:45:52.410 --> 00:45:54.030
<v Speaker 0>This thing here is called an expression.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:45:54.030 --> 00:45:55.500
<v Speaker 0>This is also an expression.

NOTE CONF {"raw":[100,100,100,100,100]}

00:45:55.770 --> 00:45:56.460
<v Speaker 0>Um, and so forth.

NOTE CONF {"raw":[100,100,100,100]}

00:45:56.460 --> 00:45:58.350
<v Speaker 0>The whole thing is called a function definition.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:45:58.680 --> 00:46:02.340
<v Speaker 0>Um, I wanted to get to this last slide.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:46:02.340 --> 00:46:05.160
<v Speaker 0>This is about defining a type yourself.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:46:05.160 --> 00:46:05.700
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:46:05.700 --> 00:46:08.790
<v Speaker 0>And I'm including this because Julian, when he starts talking

NOTE CONF {"raw":[100,100,100,100,100,88,100,100,100,100]}

00:46:08.790 --> 00:46:11.880
<v Speaker 0>about, um, logic and computation, one of the things that

NOTE CONF {"raw":[100,98,100,100,100,100,100,100,100,69]}

00:46:11.880 --> 00:46:14.190
<v Speaker 0>you're going to be doing in the first lectures is

NOTE CONF {"raw":[88,100,100,100,100,100,100,100,100,100]}

00:46:14.190 --> 00:46:17.730
<v Speaker 0>using Haskell to do some to encode some logic.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:46:17.730 --> 00:46:18.180
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:46:18.180 --> 00:46:20.880
<v Speaker 0>And he's going to be using, um, some of what

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:20.880 --> 00:46:21.780
<v Speaker 0>I'm showing you here.

NOTE CONF {"raw":[100,100,100,100]}

00:46:21.780 --> 00:46:24.900
<v Speaker 0>So this is a way to define a new type

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:24.900 --> 00:46:26.910
<v Speaker 0>as a name for an old type okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:46:26.910 --> 00:46:31.380
<v Speaker 0>So a pick pick trans or picture transformer is is

NOTE CONF {"raw":[100,96,52,52,100,100,100,100,100,100]}

00:46:31.380 --> 00:46:33.390
<v Speaker 0>a is a type of things which take pictures and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:33.390 --> 00:46:34.440
<v Speaker 0>produce pictures.

NOTE CONF {"raw":[100,100]}

00:46:34.740 --> 00:46:35.160
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:46:35.160 --> 00:46:39.090
<v Speaker 0>So double is a pick trans okay.

NOTE CONF {"raw":[100,100,93,100,52,100,100]}

00:46:39.090 --> 00:46:41.790
<v Speaker 0>You can define a type.

NOTE CONF {"raw":[100,100,100,75,100]}

00:46:41.790 --> 00:46:43.560
<v Speaker 0>So this is called a type abbreviation.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:46:43.560 --> 00:46:46.440
<v Speaker 0>You can you can define type abbreviations with variables in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:46.470 --> 00:46:46.920
<v Speaker 0>them.

NOTE CONF {"raw":[100]}

00:46:47.970 --> 00:46:51.840
<v Speaker 0>Um so trans of a type A is a is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:51.840 --> 00:46:54.270
<v Speaker 0>a is a type which takes an a to an

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:54.270 --> 00:46:54.690
<v Speaker 0>a.

NOTE CONF {"raw":[100]}

00:46:55.350 --> 00:46:59.820
<v Speaker 0>So um, so double is not just a trans.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:46:59.820 --> 00:47:01.110
<v Speaker 0>It's not just a picture to picture.

NOTE CONF {"raw":[100,100,100,100,100,93,100]}

00:47:01.110 --> 00:47:04.410
<v Speaker 0>It's also a trans picture trends applied.

NOTE CONF {"raw":[100,100,100,100,100,85,100]}

00:47:04.410 --> 00:47:06.600
<v Speaker 0>So this is a this is like a type function.

NOTE CONF {"raw":[100,100,100,74,100,100,100,100,100,100]}

00:47:07.890 --> 00:47:11.490
<v Speaker 0>Trans applied to the type picture okay.

NOTE CONF {"raw":[99,100,100,100,100,100,100]}

00:47:11.490 --> 00:47:13.530
<v Speaker 0>And you can find entirely new types.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:47:13.530 --> 00:47:15.870
<v Speaker 0>So this is the type of of weekdays.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:47:16.290 --> 00:47:17.220
<v Speaker 0>And you can define them.

NOTE CONF {"raw":[100,100,100,100,100]}

00:47:17.220 --> 00:47:21.660
<v Speaker 0>There's there's various ways of defining types using this data.

NOTE CONF {"raw":[100,100,100,100,100,87,100,100,100,100]}

00:47:22.050 --> 00:47:24.030
<v Speaker 0>Um word here okay.

NOTE CONF {"raw":[100,100,100,100]}

00:47:24.030 --> 00:47:26.370
<v Speaker 0>One way is to enumerate all the possibilities.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:47:26.370 --> 00:47:29.190
<v Speaker 0>So here are all the possible days of the week

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:29.520 --> 00:47:30.120
<v Speaker 0>okay.

NOTE CONF {"raw":[100]}

00:47:30.120 --> 00:47:33.000
<v Speaker 0>And so Monday is a weekday.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:47:33.000 --> 00:47:36.060
<v Speaker 0>Thursday is a weekday because they're in this list.

NOTE CONF {"raw":[100,100,100,100,100,92,100,100,100]}

00:47:36.660 --> 00:47:38.760
<v Speaker 0>And you can do things with these like compare them

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:38.760 --> 00:47:40.410
<v Speaker 0>to see if they're equal okay.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:47:40.410 --> 00:47:41.040
<v Speaker 0>They aren't.

NOTE CONF {"raw":[100,100]}

00:47:41.040 --> 00:47:43.920
<v Speaker 0>So it's the answer is false okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:47:44.100 --> 00:47:50.310
<v Speaker 0>Um notice the difference between comparison equality comparison and equality

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:50.310 --> 00:47:55.110
<v Speaker 0>definition here and here and here and so forth.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:47:55.110 --> 00:47:55.650
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:47:56.400 --> 00:47:59.610
<v Speaker 0>Um, double equals for equality comparison.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:47:59.610 --> 00:48:01.140
<v Speaker 0>There's going to be a lot more in this course

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:01.140 --> 00:48:04.420
<v Speaker 0>about, uh, Type definitions, but these are some very simple

NOTE CONF {"raw":[100,90,100,100,100,100,100,100,100,100]}

00:48:04.420 --> 00:48:08.230
<v Speaker 0>ones you're going to need for Julian's, um, lectures.

NOTE CONF {"raw":[100,100,100,100,100,100,81,91,100]}

00:48:08.230 --> 00:48:09.790
<v Speaker 0>And I have two minutes.

NOTE CONF {"raw":[100,100,100,100,100]}

00:48:09.790 --> 00:48:13.570
<v Speaker 0>And this allows me to, um, first of all, are

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:13.570 --> 00:48:15.040
<v Speaker 0>there any questions about any of that?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:48:16.120 --> 00:48:16.600
<v Speaker 6>Yep.

NOTE CONF {"raw":[52]}

00:48:20.230 --> 00:48:20.770
<v Speaker 0>Uh, wait a minute.

NOTE CONF {"raw":[80,100,100,100]}

00:48:20.770 --> 00:48:23.260
<v Speaker 0>Let me go back to that here.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:48:23.260 --> 00:48:24.250
<v Speaker 4>A yeah.

NOTE CONF {"raw":[87,93]}

00:48:25.120 --> 00:48:26.830
<v Speaker 0>Yeah, that would be a formal parameter and this would

NOTE CONF {"raw":[100,100,100,100,100,100,100,96,100,100]}

00:48:26.830 --> 00:48:27.970
<v Speaker 0>be an actual parameter.

NOTE CONF {"raw":[100,100,100,100]}

00:48:27.970 --> 00:48:28.540
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:48:28.540 --> 00:48:29.410
<v Speaker 0>Somebody else.

NOTE CONF {"raw":[100,100]}

00:48:29.410 --> 00:48:29.800
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:48:30.310 --> 00:48:32.470
<v Speaker 2>Um, this may be a bit more of a set

NOTE CONF {"raw":[88,100,100,100,100,100,100,100,100,69]}

00:48:32.470 --> 00:48:36.430
<v Speaker 2>of questions, but, um, are you able to essentially.

NOTE CONF {"raw":[69,69,100,100,100,100,100,100,100]}

00:48:36.580 --> 00:48:40.690
<v Speaker 2>So you had like the beside beside besides the triple,

NOTE CONF {"raw":[100,100,100,100,100,98,100,52,76,100]}

00:48:40.960 --> 00:48:42.280
<v Speaker 2>are you able to do that.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:48:42.460 --> 00:48:45.730
<v Speaker 2>Um, like have, you know, let's just say an emphasis

NOTE CONF {"raw":[100,100,100,100,77,100,100,100,54,41]}

00:48:45.850 --> 00:48:46.750
<v Speaker 2>for instance.

NOTE CONF {"raw":[100,100]}

00:48:47.290 --> 00:48:49.540
<v Speaker 2>Um, that would do that infinitely, I guess.

NOTE CONF {"raw":[100,99,98,100,100,100,100,100]}

00:48:49.960 --> 00:48:52.540
<v Speaker 2>Well, you could do that two and end number of

NOTE CONF {"raw":[100,100,80,100,100,75,79,37,100,100]}

00:48:52.540 --> 00:48:53.020
<v Speaker 2>minds.

NOTE CONF {"raw":[77]}

00:48:53.650 --> 00:48:57.190
<v Speaker 0>Uh, you can have a list of a list of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:57.190 --> 00:49:00.400
<v Speaker 0>values to be able to do it with more than

NOTE CONF {"raw":[100,100,100,100,100,100,91,100,100,100]}

00:49:00.400 --> 00:49:02.380
<v Speaker 0>to, to be able to do an arbitrary number.

NOTE CONF {"raw":[51,100,100,100,100,100,100,100,100]}

00:49:02.380 --> 00:49:02.950
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:49:02.950 --> 00:49:05.920
<v Speaker 0>There's no notation that would conveniently allow you to do

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:05.920 --> 00:49:06.370
<v Speaker 0>that.

NOTE CONF {"raw":[100]}

00:49:06.370 --> 00:49:08.050
<v Speaker 0>I think is what you're asking about.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:49:08.050 --> 00:49:08.560
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:49:09.370 --> 00:49:09.970
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:49:12.400 --> 00:49:12.910
<v Speaker 0>Sorry.

NOTE CONF {"raw":[100]}

00:49:12.910 --> 00:49:13.450
<v Speaker 0>What's that?

NOTE CONF {"raw":[100,100]}

00:49:15.820 --> 00:49:17.500
<v Speaker 0>Uh, pic trans is not a type class.

NOTE CONF {"raw":[90,24,78,100,100,100,98,98]}

00:49:17.500 --> 00:49:19.840
<v Speaker 0>I'll tell you about type classes later, okay?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:49:19.840 --> 00:49:20.620
<v Speaker 0>It's a type.

NOTE CONF {"raw":[100,100,100]}

00:49:20.620 --> 00:49:21.280
<v Speaker 0>It's a type.

NOTE CONF {"raw":[100,100,100]}

00:49:21.280 --> 00:49:22.240
<v Speaker 4>Function.

NOTE CONF {"raw":[100]}

00:49:25.270 --> 00:49:26.980
<v Speaker 0>So I don't see any other hands.

NOTE CONF {"raw":[100,100,100,100,100,95,100]}

00:49:26.980 --> 00:49:28.990
<v Speaker 0>I just want to show you this thing.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:49:28.990 --> 00:49:30.280
<v Speaker 0>I've been asked to show you this.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:49:30.280 --> 00:49:33.280
<v Speaker 0>This is, um, computing support in informatics.

NOTE CONF {"raw":[100,100,100,100,99,58,100]}

00:49:33.520 --> 00:49:36.910
<v Speaker 0>Um, so, uh, if you've been to the labs in

NOTE CONF {"raw":[100,100,85,100,100,100,100,100,100,82]}

00:49:36.910 --> 00:49:40.510
<v Speaker 0>Appleton Tower, you will see that, um, there are computers

NOTE CONF {"raw":[100,100,100,100,100,100,88,100,100,100]}

00:49:40.510 --> 00:49:40.990
<v Speaker 0>there.

NOTE CONF {"raw":[100]}

00:49:40.990 --> 00:49:41.980
<v Speaker 0>You can use these.

NOTE CONF {"raw":[100,100,100,100]}

00:49:41.980 --> 00:49:44.110
<v Speaker 0>You can get you can get a password for them.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:44.110 --> 00:49:46.390
<v Speaker 0>And the reason why you might want to use these

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:46.390 --> 00:49:50.290
<v Speaker 0>is because Haskell is installed and it works.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:49:50.290 --> 00:49:51.520
<v Speaker 4>And, um.

NOTE CONF {"raw":[100,100]}

00:49:51.970 --> 00:49:55.450
<v Speaker 0>All of the tutorial exercises are tested, uh, to make

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:55.450 --> 00:49:58.570
<v Speaker 0>sure that they work on those on that installation.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:49:58.780 --> 00:50:01.280
<v Speaker 0>Um, it could be that when you install Haskell on

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:50:01.280 --> 00:50:06.260
<v Speaker 0>your own laptop or home home desktop computer that you've

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:50:06.260 --> 00:50:07.220
<v Speaker 0>done something wrong.

NOTE CONF {"raw":[100,100,100]}

00:50:07.220 --> 00:50:09.440
<v Speaker 0>Whatever it is, it's hard to know what you might

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:50:09.440 --> 00:50:09.920
<v Speaker 0>have done.

NOTE CONF {"raw":[100,100]}

00:50:09.920 --> 00:50:13.400
<v Speaker 0>If you have trouble, it might be worth going through

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,82]}

00:50:13.400 --> 00:50:15.230
<v Speaker 0>the labs and using the computers there.

NOTE CONF {"raw":[100,100,100,100,100,97,100]}

00:50:15.230 --> 00:50:18.380
<v Speaker 0>They run a version of Linux called dice.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:50:18.380 --> 00:50:19.010
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:50:19.010 --> 00:50:21.650
<v Speaker 0>And um, there's a link to this.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:50:21.650 --> 00:50:25.970
<v Speaker 0>Sorry, there's a link to this on the, in the,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:50:26.000 --> 00:50:30.110
<v Speaker 0>in the course, uh, just the week, week one page.

NOTE CONF {"raw":[100,100,100,65,91,100,100,100,100,100]}

00:50:30.110 --> 00:50:32.060
<v Speaker 0>And so you can look this up yourself.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:50:32.060 --> 00:50:32.270
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:50:32.270 --> 00:50:32.990
<v Speaker 0>If you're interested.

NOTE CONF {"raw":[100,100,100]}

00:50:32.990 --> 00:50:33.410
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:50:33.410 --> 00:50:34.160
<v Speaker 0>Thank you.

NOTE CONF {"raw":[100,100]}

00:50:34.460 --> 00:50:35.570
<v Speaker 0>Um, for your patience.

NOTE CONF {"raw":[94,100,100,100]}

00:50:36.770 --> 00:50:36.980
<v Unknown>Um.

NOTE CONF {"raw":[69]}

00:51:03.920 --> 00:51:07.520
<v Unknown>I tried installing the program on my computer last night,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:51:07.520 --> 00:51:07.970
<v Unknown>I had trouble.

NOTE CONF {"raw":[58,92,100]}

00:51:07.970 --> 00:51:09.290
<v Unknown>Can I go to the drop in lab?

NOTE CONF {"raw":[99,100,100,100,100,82,78,89]}

00:51:09.500 --> 00:51:10.820
<v Unknown>Yes, that's the whole point.

NOTE CONF {"raw":[100,100,100,100,100]}

WEBVTT

00:00:48.210 --> 00:00:52.170
<v Speaker 0>Okay, it's 210, so let's get started.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:00:56.670 --> 00:00:58.920
<v Speaker 0>My name is Phil Wadler.

NOTE CONF {"raw":[100,100,100,100,100]}

00:01:00.030 --> 00:01:02.760
<v Speaker 0>I actually created this version of infant a many years

NOTE CONF {"raw":[100,100,100,100,100,100,48,61,100,100]}

00:01:02.760 --> 00:01:05.220
<v Speaker 0>ago, but Don has been teaching it recently.

NOTE CONF {"raw":[100,100,96,100,100,100,100,100]}

00:01:05.309 --> 00:01:07.380
<v Speaker 0>But I've, uh.

NOTE CONF {"raw":[100,98,70]}

00:01:07.830 --> 00:01:10.590
<v Speaker 0>I requested to teach a few lectures to you, and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:10.590 --> 00:01:11.850
<v Speaker 0>Don graciously agreed to.

NOTE CONF {"raw":[100,100,100,63]}

00:01:11.850 --> 00:01:16.620
<v Speaker 0>I'll be giving you lectures today, tomorrow, and a week

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:16.620 --> 00:01:17.430
<v Speaker 0>from today.

NOTE CONF {"raw":[100,100]}

00:01:17.430 --> 00:01:18.300
<v Speaker 0>Next Monday.

NOTE CONF {"raw":[100,100]}

00:01:21.750 --> 00:01:25.020
<v Speaker 0>And just to check tomorrow's lectures in the same room

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:25.020 --> 00:01:25.920
<v Speaker 0>as this one.

NOTE CONF {"raw":[100,100,100]}

00:01:28.020 --> 00:01:29.790
<v Speaker 0>That is so amazing.

NOTE CONF {"raw":[100,100,100,100]}

00:01:30.510 --> 00:01:34.110
<v Speaker 0>Back when I created this class, timetabling treated it as

NOTE CONF {"raw":[95,100,100,100,100,100,100,100,91,100]}

00:01:34.110 --> 00:01:34.920
<v Speaker 0>horribly.

NOTE CONF {"raw":[100]}

00:01:34.920 --> 00:01:38.640
<v Speaker 0>And we met at a different day, every a different

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:38.640 --> 00:01:41.520
<v Speaker 0>time, every day of the week, and a different room

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:41.520 --> 00:01:42.630
<v Speaker 0>every day of the week.

NOTE CONF {"raw":[100,100,100,100,100]}

00:01:42.630 --> 00:01:45.300
<v Speaker 0>So this is great.

NOTE CONF {"raw":[100,100,100,100]}

00:01:45.450 --> 00:01:46.890
<v Speaker 0>I'm so pleased.

NOTE CONF {"raw":[100,100,100]}

00:01:48.090 --> 00:01:52.740
<v Speaker 0>So to get started, as usual, are there any questions?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:57.810 --> 00:02:00.490
<v Speaker 0>So has Don taught you guys how important it is

NOTE CONF {"raw":[100,100,96,100,100,100,100,100,100,100]}

00:02:00.490 --> 00:02:01.660
<v Speaker 0>to ask questions?

NOTE CONF {"raw":[100,100,100]}

00:02:02.650 --> 00:02:02.860
<v Speaker 0>Yes.

NOTE CONF {"raw":[67]}

00:02:02.950 --> 00:02:04.030
<v Speaker 0>Yes, yes.

NOTE CONF {"raw":[93,100]}

00:02:04.450 --> 00:02:05.110
<v Speaker 0>Good.

NOTE CONF {"raw":[100]}

00:02:05.440 --> 00:02:07.810
<v Speaker 0>Do you want to demonstrate that by asking one?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:02:09.250 --> 00:02:09.460
<v Speaker 0>Right.

NOTE CONF {"raw":[77]}

00:02:09.580 --> 00:02:11.590
<v Speaker 0>I'll tell you my story about asking questions.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:02:11.590 --> 00:02:14.860
<v Speaker 0>I don't know what story Don uses, but I used

NOTE CONF {"raw":[100,100,100,100,100,83,100,100,100,100]}

00:02:14.860 --> 00:02:19.570
<v Speaker 0>to be a postgraduate at Oxford University, and while I

NOTE CONF {"raw":[100,100,100,77,100,100,100,100,100,100]}

00:02:19.570 --> 00:02:24.220
<v Speaker 0>was there, they interviewed for a lectureship position.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:02:24.220 --> 00:02:26.980
<v Speaker 0>I was too junior to even be considered.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:02:28.900 --> 00:02:33.850
<v Speaker 0>Uh, but they did something unusual, so it's quite usual.

NOTE CONF {"raw":[100,100,100,100,100,100,100,98,100,100]}

00:02:33.850 --> 00:02:36.250
<v Speaker 0>You have all your candidates in.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:02:36.250 --> 00:02:38.560
<v Speaker 0>Each candidate gives a talk.

NOTE CONF {"raw":[100,100,100,100,100]}

00:02:38.560 --> 00:02:41.530
<v Speaker 0>What was unusual is they had them all in on

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:41.530 --> 00:02:46.810
<v Speaker 0>the same day, and the candidates sat in on the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:46.810 --> 00:02:48.730
<v Speaker 0>talks by the other candidates.

NOTE CONF {"raw":[100,100,100,100,100]}

00:02:48.760 --> 00:02:50.470
<v Speaker 0>This is very unusual.

NOTE CONF {"raw":[100,100,100,100]}

00:02:51.460 --> 00:02:55.600
<v Speaker 0>So there was one person who, um.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:02:59.170 --> 00:03:03.820
<v Speaker 0>Asked to talk at every single lecture, and that turned

NOTE CONF {"raw":[77,100,100,100,100,100,100,100,100,100]}

00:03:03.820 --> 00:03:05.470
<v Speaker 0>out to be Richard Byrd.

NOTE CONF {"raw":[100,100,100,100,88]}

00:03:05.470 --> 00:03:08.860
<v Speaker 0>And then he turned out to get the lectureship position,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:09.910 --> 00:03:12.370
<v Speaker 0>and he and I became colleagues.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:03:12.370 --> 00:03:15.370
<v Speaker 0>And in fact, we wrote a textbook on Haskell that's

NOTE CONF {"raw":[97,100,100,100,100,100,100,100,100,100]}

00:03:15.370 --> 00:03:18.490
<v Speaker 0>sort of the predecessor to the textbook for this course.

NOTE CONF {"raw":[100,100,100,100,54,100,100,100,100,100]}

00:03:19.450 --> 00:03:22.210
<v Speaker 0>So how many people here have been through the Scottish

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,74,100]}

00:03:22.210 --> 00:03:23.230
<v Speaker 0>education system?

NOTE CONF {"raw":[100,100]}

00:03:23.230 --> 00:03:25.420
<v Speaker 0>I have not, as you can tell by my accent,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:25.780 --> 00:03:26.860
<v Speaker 0>a fair number of you.

NOTE CONF {"raw":[100,100,100,100,100]}

00:03:26.860 --> 00:03:30.130
<v Speaker 0>So the impression I sometimes get of the Scottish education

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:30.130 --> 00:03:33.670
<v Speaker 0>system is that they teach you not to ask questions.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:33.700 --> 00:03:35.650
<v Speaker 0>They teach you that if you ask a question, I

NOTE CONF {"raw":[100,100,100,95,100,100,100,91,91,100]}

00:03:35.650 --> 00:03:37.000
<v Speaker 0>see people nodding there.

NOTE CONF {"raw":[100,100,100,100]}

00:03:37.120 --> 00:03:39.730
<v Speaker 0>They teach you that if you ask a question that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:39.730 --> 00:03:43.000
<v Speaker 0>you're saying that you don't know and therefore you're admitting

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:43.030 --> 00:03:45.580
<v Speaker 0>to ignorance, and so asking a question is a bad

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:45.580 --> 00:03:46.150
<v Speaker 0>idea.

NOTE CONF {"raw":[100]}

00:03:46.150 --> 00:03:50.740
<v Speaker 0>Has anybody in the Scottish education system or elsewhere ever

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:51.130 --> 00:03:53.320
<v Speaker 0>received a message of that kind?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:03:53.830 --> 00:03:56.570
<v Speaker 0>Several of you are nodding your heads or Raising your

NOTE CONF {"raw":[100,100,100,100,100,100,100,82,100,100]}

00:03:56.570 --> 00:03:57.290
<v Speaker 0>hands.

NOTE CONF {"raw":[94]}

00:03:57.320 --> 00:03:59.840
<v Speaker 0>So the reason I tell this story about Richard Byrd

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,85]}

00:03:59.840 --> 00:04:00.560
<v Speaker 0>is to make the point.

NOTE CONF {"raw":[100,100,100,100,100]}

00:04:00.560 --> 00:04:02.330
<v Speaker 0>It's the exact opposite.

NOTE CONF {"raw":[100,100,100,100]}

00:04:03.440 --> 00:04:06.560
<v Speaker 0>If you ask a question, you show that you are

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:06.560 --> 00:04:09.230
<v Speaker 0>involved, that you are interested.

NOTE CONF {"raw":[100,100,100,100,100]}

00:04:09.260 --> 00:04:11.270
<v Speaker 0>And guess what?

NOTE CONF {"raw":[100,100,100]}

00:04:12.080 --> 00:04:16.010
<v Speaker 0>There is no single person in the whole world who

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:16.010 --> 00:04:17.299
<v Speaker 0>knows everything.

NOTE CONF {"raw":[100,100]}

00:04:19.549 --> 00:04:22.070
<v Speaker 0>So if you are asking a question, it is not

NOTE CONF {"raw":[100,100,92,92,100,100,100,100,100,100]}

00:04:22.070 --> 00:04:26.030
<v Speaker 0>like you're showing that you're ignorant.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:04:32.600 --> 00:04:35.210
<v Speaker 0>On the other hand, I don't know about you, but

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:35.210 --> 00:04:38.840
<v Speaker 0>sometimes I feel a bit nervous about asking a question.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:39.650 --> 00:04:42.470
<v Speaker 0>I feel a little bit like everybody else in the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:42.470 --> 00:04:44.570
<v Speaker 0>audience must know the answer to this.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:04:44.600 --> 00:04:46.610
<v Speaker 0>I'm the only one who doesn't.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:04:47.360 --> 00:04:51.290
<v Speaker 0>So fortunately, I'm an old fart now, and so I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:51.290 --> 00:04:54.740
<v Speaker 0>trust myself a little bit more, and I'm more likely

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:54.770 --> 00:04:56.810
<v Speaker 0>to just go off and ask questions.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:04:56.810 --> 00:05:00.320
<v Speaker 0>But when I was closer to your age and I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:00.320 --> 00:05:04.400
<v Speaker 0>was nervous, um, if I wasn't sure if it was

NOTE CONF {"raw":[100,100,57,100,100,100,100,100,100,100]}

00:05:04.400 --> 00:05:06.560
<v Speaker 0>safe to ask a question, what I would do is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:06.560 --> 00:05:08.600
<v Speaker 0>I would turn to the person next to me.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:05:08.600 --> 00:05:09.740
<v Speaker 0>I'd whisper in their ear.

NOTE CONF {"raw":[100,100,100,100,100]}

00:05:09.740 --> 00:05:14.210
<v Speaker 0>I'd say, the lecture is talking about monads.

NOTE CONF {"raw":[92,100,100,100,100,100,100,100]}

00:05:15.230 --> 00:05:17.060
<v Speaker 0>I've never heard of monads.

NOTE CONF {"raw":[100,100,100,100,100]}

00:05:17.720 --> 00:05:19.280
<v Speaker 0>Should I know what a monad is?

NOTE CONF {"raw":[94,100,100,100,100,100,100]}

00:05:19.550 --> 00:05:21.740
<v Speaker 0>And then either the guy will say, yes, of course,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:21.740 --> 00:05:25.490
<v Speaker 0>everybody knows what monads are, but this is very rare.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:25.490 --> 00:05:26.180
<v Speaker 0>What would happen?

NOTE CONF {"raw":[100,100,100]}

00:05:26.180 --> 00:05:27.230
<v Speaker 0>Way more often.

NOTE CONF {"raw":[100,100,100]}

00:05:27.230 --> 00:05:29.630
<v Speaker 0>It's the guy who goes, no, I don't know what

NOTE CONF {"raw":[98,100,100,100,90,100,100,100,100,100]}

00:05:29.630 --> 00:05:30.890
<v Speaker 0>monads are either.

NOTE CONF {"raw":[100,100,100]}

00:05:31.460 --> 00:05:33.260
<v Speaker 0>And then I would know it was safe to ask

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:33.260 --> 00:05:34.100
<v Speaker 0>a question.

NOTE CONF {"raw":[100,100]}

00:05:34.520 --> 00:05:39.740
<v Speaker 0>So if you have a question, please ask, because that's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:39.740 --> 00:05:41.960
<v Speaker 0>the way learning happens, right?

NOTE CONF {"raw":[100,100,100,100,100]}

00:05:41.960 --> 00:05:44.660
<v Speaker 0>Learning happens when you get stuck, when there's something you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:44.660 --> 00:05:47.270
<v Speaker 0>don't know, and then you have to get yourself unstuck.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:47.270 --> 00:05:48.800
<v Speaker 0>And there are many ways of doing that.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:05:48.800 --> 00:05:50.720
<v Speaker 0>But one of them's by asking a question and I

NOTE CONF {"raw":[100,100,100,52,100,100,100,100,100,100]}

00:05:50.720 --> 00:05:51.890
<v Speaker 0>see a hand raised.

NOTE CONF {"raw":[100,100,100,100]}

00:05:52.400 --> 00:05:53.880
<v Speaker 1>What does IO stand enjoy.

NOTE CONF {"raw":[100,100,95,97,65]}

00:05:54.060 --> 00:05:55.980
<v Speaker 0>What does IO stand for?

NOTE CONF {"raw":[100,100,100,100,100]}

00:05:56.010 --> 00:05:59.580
<v Speaker 0>IO stands for input output and we'll get.

NOTE CONF {"raw":[91,100,100,100,100,100,100,100]}

00:05:59.580 --> 00:06:01.470
<v Speaker 0>We'll say more about that in a minute.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:06:01.680 --> 00:06:05.970
<v Speaker 0>But I was actually a fairly standard term in computing.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:06.510 --> 00:06:08.010
<v Speaker 0>But and now you know it.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:06:09.960 --> 00:06:14.760
<v Speaker 0>Um, oh, and this is another reason why it's very

NOTE CONF {"raw":[100,97,100,100,100,100,100,100,100,100]}

00:06:14.760 --> 00:06:17.310
<v Speaker 0>important to ask questions, because my job is to communicate

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:17.310 --> 00:06:18.180
<v Speaker 0>with you.

NOTE CONF {"raw":[100,100]}

00:06:19.290 --> 00:06:21.180
<v Speaker 0>Um, but you have a problem.

NOTE CONF {"raw":[96,100,100,100,100,100]}

00:06:21.450 --> 00:06:24.180
<v Speaker 0>Your problem is I know too much.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:06:26.160 --> 00:06:30.180
<v Speaker 0>Um, so I might think that something is completely obvious

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:30.570 --> 00:06:32.040
<v Speaker 0>where it's not obvious to you.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:06:32.040 --> 00:06:34.890
<v Speaker 0>And in fact, the word io is an example of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:34.890 --> 00:06:35.040
<v Speaker 0>that.

NOTE CONF {"raw":[100]}

00:06:35.040 --> 00:06:37.080
<v Speaker 0>I'm just so used to it, I forget that there

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:37.080 --> 00:06:39.120
<v Speaker 0>are people who don't know what this means yet.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:06:39.510 --> 00:06:42.540
<v Speaker 0>So by all means, if I say something you don't

NOTE CONF {"raw":[99,100,100,100,100,100,100,100,100,100]}

00:06:42.540 --> 00:06:43.560
<v Speaker 0>understand.

NOTE CONF {"raw":[100]}

00:06:43.770 --> 00:06:46.020
<v Speaker 0>Please ask, and I can't.

NOTE CONF {"raw":[100,100,100,100,99]}

00:06:46.020 --> 00:06:47.490
<v Speaker 0>I can sort of see the people over there if

NOTE CONF {"raw":[100,100,95,95,100,100,100,100,100,100]}

00:06:47.490 --> 00:06:48.330
<v Speaker 0>I if I lean over.

NOTE CONF {"raw":[100,100,100,100,100]}

00:06:48.330 --> 00:06:50.100
<v Speaker 0>You guys want them all moved somewhere else.

NOTE CONF {"raw":[100,100,100,64,97,40,100,100]}

00:06:50.100 --> 00:06:51.900
<v Speaker 0>There's plenty of other room in the room.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:06:51.900 --> 00:06:53.760
<v Speaker 0>I like to see people's faces.

NOTE CONF {"raw":[99,100,100,100,100,100]}

00:06:53.760 --> 00:06:55.860
<v Speaker 0>You're all clustered in the corner where I can't see

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:55.860 --> 00:06:55.950
<v Speaker 0>you.

NOTE CONF {"raw":[92]}

00:06:55.980 --> 00:06:57.180
<v Speaker 0>Is this deliberate?

NOTE CONF {"raw":[100,100,100]}

00:06:58.440 --> 00:06:59.280
<v Speaker 2>This is what we said.

NOTE CONF {"raw":[100,100,100,100,58]}

00:06:59.910 --> 00:07:00.600
<v Speaker 0>It's just what you said.

NOTE CONF {"raw":[94,100,85,81,96]}

00:07:00.630 --> 00:07:02.490
<v Speaker 0>Can I get you to sit somewhere else today?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:07:02.490 --> 00:07:04.260
<v Speaker 0>Because I'm going to sit down for this.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:07:04.290 --> 00:07:07.260
<v Speaker 0>Well, just move a bit, all of you.

NOTE CONF {"raw":[94,100,100,100,100,100,100,100]}

00:07:07.590 --> 00:07:08.460
<v Speaker 0>That's cool.

NOTE CONF {"raw":[100,100]}

00:07:08.460 --> 00:07:09.210
<v Speaker 0>Thank you.

NOTE CONF {"raw":[100,100]}

00:07:17.880 --> 00:07:19.980
<v Speaker 0>All right, so I should explain why I'm sitting.

NOTE CONF {"raw":[37,78,90,100,100,100,100,100,100]}

00:07:19.980 --> 00:07:21.870
<v Speaker 0>I had my, um.

NOTE CONF {"raw":[100,100,100,89]}

00:07:23.880 --> 00:07:28.200
<v Speaker 0>Right hip replaced at the beginning of term so I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:28.200 --> 00:07:29.790
<v Speaker 0>can walk much better now.

NOTE CONF {"raw":[100,100,100,100,100]}

00:07:29.790 --> 00:07:33.270
<v Speaker 0>I occasionally forget my stick, but I'm still walking with

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:33.270 --> 00:07:36.120
<v Speaker 0>a stick, so that's why I am going to sit

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:36.120 --> 00:07:37.080
<v Speaker 0>down during the class.

NOTE CONF {"raw":[100,100,100,100]}

00:07:37.080 --> 00:07:39.060
<v Speaker 0>But it's also very important that you know about the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:39.060 --> 00:07:42.900
<v Speaker 0>stick, because you know that I am armed, so be

NOTE CONF {"raw":[100,100,100,100,100,98,98,100,100,100]}

00:07:42.900 --> 00:07:43.740
<v Speaker 0>polite to me.

NOTE CONF {"raw":[100,100,100]}

00:07:47.460 --> 00:07:47.880
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:07:47.880 --> 00:07:48.750
<v Speaker 0>Thank you for moving.

NOTE CONF {"raw":[100,100,100,100]}

00:07:48.750 --> 00:07:49.230
<v Speaker 0>That's great.

NOTE CONF {"raw":[100,100]}

00:07:49.230 --> 00:07:50.670
<v Speaker 0>Now I can see everybody.

NOTE CONF {"raw":[100,100,100,100,100]}

00:07:51.120 --> 00:07:54.190
<v Speaker 0>Uh, before we get started, are there any other questions?

NOTE CONF {"raw":[94,100,100,100,100,100,100,100,100,100]}

00:07:56.980 --> 00:07:57.340
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:07:57.340 --> 00:07:59.200
<v Speaker 0>So I'm going to talk a little bit about one

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:59.200 --> 00:08:01.990
<v Speaker 0>of the features of Haskell monads.

NOTE CONF {"raw":[100,100,100,100,100,98]}

00:08:02.080 --> 00:08:04.420
<v Speaker 0>It's actually right.

NOTE CONF {"raw":[100,100,99]}

00:08:04.480 --> 00:08:06.610
<v Speaker 0>How many people are familiar with the Haskell logo?

NOTE CONF {"raw":[84,100,100,100,100,100,100,100,100]}

00:08:07.540 --> 00:08:07.870
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:08:07.870 --> 00:08:09.160
<v Speaker 0>You've all seen the Haskell logo.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:08:09.160 --> 00:08:12.070
<v Speaker 0>So what are the two elements in the Haskell logo?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:12.100 --> 00:08:13.870
<v Speaker 0>So this big thing in the centre, you all know

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:13.870 --> 00:08:17.380
<v Speaker 0>what that is by now a lambda, right.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:08:17.380 --> 00:08:19.090
<v Speaker 0>Which stands for making a function.

NOTE CONF {"raw":[100,100,100,100,98,100]}

00:08:19.090 --> 00:08:20.620
<v Speaker 0>And what's the other thing there.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:08:20.620 --> 00:08:21.250
<v Speaker 0>Can you see that?

NOTE CONF {"raw":[100,100,100,100]}

00:08:21.250 --> 00:08:22.600
<v Speaker 0>There's something else there.

NOTE CONF {"raw":[99,100,100,100]}

00:08:24.850 --> 00:08:27.490
<v Speaker 0>There's a greater than greater than equal sign.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:08:28.180 --> 00:08:28.390
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:08:28.390 --> 00:08:30.100
<v Speaker 0>So the second grader then.

NOTE CONF {"raw":[100,100,100,77,100]}

00:08:30.850 --> 00:08:31.360
<v Speaker 0>Right.

NOTE CONF {"raw":[97]}

00:08:31.360 --> 00:08:34.539
<v Speaker 0>This is part of the lambda and part of a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,99]}

00:08:34.539 --> 00:08:35.320
<v Speaker 0>greater than.

NOTE CONF {"raw":[100,99]}

00:08:35.320 --> 00:08:37.419
<v Speaker 0>So it's a greater than greater than equal.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:08:39.219 --> 00:08:41.500
<v Speaker 0>Uh and does anybody know why that's there.

NOTE CONF {"raw":[97,100,100,100,100,100,100,100]}

00:08:43.960 --> 00:08:46.000
<v Speaker 0>You will by the end of today.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:08:46.420 --> 00:08:47.950
<v Speaker 2>It's a symbol of a monad, right.

NOTE CONF {"raw":[100,98,100,100,100,100,91]}

00:08:47.980 --> 00:08:50.050
<v Speaker 0>It's a it's one of the symbols used with monads.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:50.050 --> 00:08:50.650
<v Speaker 0>That's right.

NOTE CONF {"raw":[100,100]}

00:08:52.540 --> 00:08:55.300
<v Speaker 0>So I'm going to start with some philosophy.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:08:56.140 --> 00:08:58.510
<v Speaker 0>I'm going to tell you about the Mind-Body problem.

NOTE CONF {"raw":[88,92,92,100,100,100,100,61,99]}

00:08:59.260 --> 00:09:04.420
<v Speaker 0>So I'm back in the, well, back through history.

NOTE CONF {"raw":[100,46,100,100,100,100,100,100,100]}

00:09:04.420 --> 00:09:07.600
<v Speaker 0>But the particular time we're going to talk about is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:07.600 --> 00:09:08.800
<v Speaker 0>the Middle Ages.

NOTE CONF {"raw":[100,100,100]}

00:09:09.340 --> 00:09:11.080
<v Speaker 0>Um, there was a concern, right?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:09:11.080 --> 00:09:15.010
<v Speaker 0>Because you have thoughts and your body does stuff.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:09:15.790 --> 00:09:18.520
<v Speaker 0>And they were wondering what is the connection between these

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:18.520 --> 00:09:19.150
<v Speaker 0>two?

NOTE CONF {"raw":[100]}

00:09:19.330 --> 00:09:22.990
<v Speaker 0>And they'd begun to work out that maybe the brain

NOTE CONF {"raw":[100,81,100,100,100,100,100,100,100,100]}

00:09:23.170 --> 00:09:25.690
<v Speaker 0>has something to do with thoughts.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:09:25.960 --> 00:09:27.220
<v Speaker 0>And then the body does stuff.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:09:27.220 --> 00:09:31.180
<v Speaker 0>So they thought there had to be a connection between

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:31.300 --> 00:09:32.470
<v Speaker 0>I'm saying mind.

NOTE CONF {"raw":[100,100,100]}

00:09:32.470 --> 00:09:34.960
<v Speaker 0>But actually back then they were worried about the soul.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:35.080 --> 00:09:39.040
<v Speaker 0>There has to be a connection between the soul and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:39.040 --> 00:09:39.910
<v Speaker 0>the body.

NOTE CONF {"raw":[100,100]}

00:09:41.350 --> 00:09:45.070
<v Speaker 0>And so how many people have heard of Descartes, the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:45.070 --> 00:09:46.960
<v Speaker 0>guy who says, I think, therefore I am?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:09:46.960 --> 00:09:49.240
<v Speaker 0>So he was a philosopher in the middle Ages.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:09:49.240 --> 00:09:52.060
<v Speaker 0>He also came up with Cartesian coordinates, which are very

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:52.060 --> 00:09:53.080
<v Speaker 0>important to us.

NOTE CONF {"raw":[100,100,100]}

00:09:53.980 --> 00:09:58.150
<v Speaker 0>Now I'm just giving x, y coordinates for things, right?

NOTE CONF {"raw":[100,62,100,100,100,100,100,100,100,92]}

00:09:58.180 --> 00:10:00.970
<v Speaker 0>It seems completely obvious, but somebody had to invent it.

NOTE CONF {"raw":[85,97,100,100,100,100,100,100,100,100]}

00:10:01.180 --> 00:10:02.470
<v Speaker 0>And that was Descartes.

NOTE CONF {"raw":[100,100,100,100]}

00:10:03.280 --> 00:10:07.540
<v Speaker 0>And so there's a picture of Descartes, and there's a

NOTE CONF {"raw":[92,100,100,100,100,100,100,100,100,100]}

00:10:07.540 --> 00:10:10.060
<v Speaker 0>picture illustrating the mind body problem.

NOTE CONF {"raw":[100,100,100,96,96,100]}

00:10:10.060 --> 00:10:12.550
<v Speaker 0>And he figured he knew the answer.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:10:12.880 --> 00:10:16.480
<v Speaker 0>The answer is that the soul connects to the body

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:16.480 --> 00:10:19.420
<v Speaker 0>through the pineal gland.

NOTE CONF {"raw":[100,100,100,100]}

00:10:20.980 --> 00:10:23.860
<v Speaker 0>And why did he think it was the pineal gland?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:23.890 --> 00:10:26.620
<v Speaker 0>Well, because you don't see double.

NOTE CONF {"raw":[100,100,100,100,100,88]}

00:10:27.640 --> 00:10:29.560
<v Speaker 0>Of course you do if you get drunk.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:10:29.920 --> 00:10:32.560
<v Speaker 0>But he said, well, you don't see double and everything

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:32.560 --> 00:10:36.130
<v Speaker 0>else is duplicated, but there's only one pineal gland, so

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:36.310 --> 00:10:39.250
<v Speaker 0>that must be the place where it connects.

NOTE CONF {"raw":[100,100,100,100,100,100,95,100]}

00:10:40.810 --> 00:10:43.300
<v Speaker 0>So we're still very interested in things like minds and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:43.300 --> 00:10:45.400
<v Speaker 0>bodies and how they relate to each other.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:10:45.430 --> 00:10:48.770
<v Speaker 0>We no longer believe that the pineal gland is the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:48.770 --> 00:10:49.820
<v Speaker 0>connection point.

NOTE CONF {"raw":[100,100]}

00:10:49.820 --> 00:10:52.790
<v Speaker 0>But he thought there was just that, this one connection

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:52.790 --> 00:10:53.360
<v Speaker 0>point.

NOTE CONF {"raw":[100]}

00:10:53.990 --> 00:10:55.610
<v Speaker 0>So we will come back to that.

NOTE CONF {"raw":[100,84,84,100,100,100,100]}

00:10:56.870 --> 00:10:57.440
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:10:57.440 --> 00:11:00.410
<v Speaker 0>So you all know Haskell by now?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:11:01.760 --> 00:11:02.210
<v Speaker 0>Yep.

NOTE CONF {"raw":[74]}

00:11:02.720 --> 00:11:03.620
<v Speaker 0>Okay, good.

NOTE CONF {"raw":[100,100]}

00:11:04.430 --> 00:11:08.660
<v Speaker 0>Um, so that's great.

NOTE CONF {"raw":[100,100,100,100]}

00:11:08.660 --> 00:11:12.170
<v Speaker 0>But many of you have learned other programming languages and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,96]}

00:11:12.170 --> 00:11:13.310
<v Speaker 0>other programming languages.

NOTE CONF {"raw":[100,100,100]}

00:11:13.310 --> 00:11:15.230
<v Speaker 0>You can give commands like print.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:11:15.440 --> 00:11:17.810
<v Speaker 0>And then the program will do something.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:11:18.050 --> 00:11:21.470
<v Speaker 0>Whereas in Haskell all we do is we compute values.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:22.850 --> 00:11:25.520
<v Speaker 0>So now I'm going to give you a way of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:25.520 --> 00:11:27.500
<v Speaker 0>talking about doing things.

NOTE CONF {"raw":[100,100,100,100]}

00:11:27.590 --> 00:11:31.460
<v Speaker 0>And we're going to fit that in to the way

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:31.490 --> 00:11:33.020
<v Speaker 0>Haskell looks at the world.

NOTE CONF {"raw":[100,100,100,100,100]}

00:11:33.020 --> 00:11:35.330
<v Speaker 0>And the way Haskell looks at the world is everything

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:35.330 --> 00:11:36.230
<v Speaker 0>is a value.

NOTE CONF {"raw":[100,80,100]}

00:11:37.010 --> 00:11:40.040
<v Speaker 0>So we're going to have a value that means do

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:40.040 --> 00:11:40.700
<v Speaker 0>something.

NOTE CONF {"raw":[100]}

00:11:41.870 --> 00:11:44.300
<v Speaker 0>And those are going to be called well we're going

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:44.300 --> 00:11:45.290
<v Speaker 0>to start with commands.

NOTE CONF {"raw":[100,100,100,100]}

00:11:45.290 --> 00:11:49.310
<v Speaker 0>And then we will generalised to so command does something

NOTE CONF {"raw":[100,100,100,100,40,100,100,100,100,100]}

00:11:49.880 --> 00:11:51.080
<v Speaker 0>but often right.

NOTE CONF {"raw":[100,100,88]}

00:11:51.080 --> 00:11:52.430
<v Speaker 0>We're still interested in values.

NOTE CONF {"raw":[100,100,100,100,100]}

00:11:52.430 --> 00:11:53.690
<v Speaker 0>So we're also going to have a notion of a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:53.690 --> 00:11:55.760
<v Speaker 0>command that also returns a value.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:11:55.760 --> 00:11:57.440
<v Speaker 0>But let's just start with commands.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:11:57.860 --> 00:12:00.050
<v Speaker 0>So here's a command put char.

NOTE CONF {"raw":[100,100,100,100,100,69]}

00:12:00.920 --> 00:12:04.850
<v Speaker 0>So that takes a character and returns a command.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:12:05.600 --> 00:12:08.690
<v Speaker 0>And commands are gonna have the funny name io.

NOTE CONF {"raw":[100,98,88,75,100,100,100,100,100]}

00:12:08.810 --> 00:12:13.160
<v Speaker 0>So this is io applied to the unit type.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:12:14.570 --> 00:12:18.620
<v Speaker 0>And io and I wouldn't bother to explain this because

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:18.620 --> 00:12:19.490
<v Speaker 0>I would forget.

NOTE CONF {"raw":[100,100,100]}

00:12:19.490 --> 00:12:21.410
<v Speaker 0>But IO stands for input output.

NOTE CONF {"raw":[95,100,100,100,100,100]}

00:12:22.400 --> 00:12:24.020
<v Speaker 0>And here's an example of output.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:12:24.020 --> 00:12:27.170
<v Speaker 0>If you say put char, then that's the command that,

NOTE CONF {"raw":[100,100,100,94,100,100,100,100,100,100]}

00:12:27.170 --> 00:12:31.400
<v Speaker 0>if it is ever performed, will print an exclamation mark.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:34.220 --> 00:12:36.680
<v Speaker 0>And we also have a way to combine two commands.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:36.680 --> 00:12:38.810
<v Speaker 0>So this is written greater than greater than.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:12:38.810 --> 00:12:42.680
<v Speaker 0>And this takes a command whoops and a command.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:12:42.680 --> 00:12:46.770
<v Speaker 0>And it returns a command so.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:12:49.350 --> 00:12:52.200
<v Speaker 0>Put char of question mark followed by put char of

NOTE CONF {"raw":[100,98,100,100,100,100,100,94,100,100]}

00:12:52.200 --> 00:12:55.860
<v Speaker 0>exclamation mark is the command that, if it is ever

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:55.860 --> 00:13:00.900
<v Speaker 0>performed, prints a question mark followed by an x and

NOTE CONF {"raw":[100,98,93,100,100,100,100,100,57,99]}

00:13:00.900 --> 00:13:05.040
<v Speaker 0>exclamation mark, also sometimes pronounced pling.

NOTE CONF {"raw":[100,100,100,100,95,85]}

00:13:09.990 --> 00:13:13.200
<v Speaker 0>And then we've got the command done, which is again

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:13.200 --> 00:13:13.650
<v Speaker 0>a command.

NOTE CONF {"raw":[100,100]}

00:13:13.650 --> 00:13:17.040
<v Speaker 0>It's an IO that returns the unit type, and the

NOTE CONF {"raw":[97,100,100,100,100,100,100,100,100,100]}

00:13:17.040 --> 00:13:20.370
<v Speaker 0>term done denotes the command that, if it is ever

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:20.370 --> 00:13:22.440
<v Speaker 0>performed, does nothing.

NOTE CONF {"raw":[100,100,100]}

00:13:23.880 --> 00:13:30.720
<v Speaker 0>And notice that this is different from doing nothing right.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,96]}

00:13:30.720 --> 00:13:34.530
<v Speaker 0>If you think about thinking about doing nothing and doing

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:34.530 --> 00:13:35.190
<v Speaker 0>nothing.

NOTE CONF {"raw":[100]}

00:13:35.580 --> 00:13:38.220
<v Speaker 0>Those are not quite the same thing, are they?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:13:40.380 --> 00:13:42.420
<v Speaker 0>Okay, so this is the command that if you did,

NOTE CONF {"raw":[94,100,100,100,100,100,100,100,100,100]}

00:13:42.420 --> 00:13:44.070
<v Speaker 0>it would do nothing.

NOTE CONF {"raw":[100,100,100,100]}

00:13:47.400 --> 00:13:50.160
<v Speaker 0>So now we can write a command to print a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:50.160 --> 00:13:50.670
<v Speaker 0>string.

NOTE CONF {"raw":[100]}

00:13:50.670 --> 00:13:52.830
<v Speaker 0>So string is just a list of characters.

NOTE CONF {"raw":[100,100,100,100,99,100,100,100]}

00:13:52.950 --> 00:13:54.570
<v Speaker 0>So we're going to call this put string.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:13:54.840 --> 00:13:56.940
<v Speaker 0>And it takes a string and it returns a command

NOTE CONF {"raw":[97,68,100,100,100,100,100,100,100,100]}

00:13:56.940 --> 00:13:57.510
<v Speaker 0>again.

NOTE CONF {"raw":[100]}

00:13:57.630 --> 00:14:01.410
<v Speaker 0>So put string of the empty list.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:14:01.410 --> 00:14:02.520
<v Speaker 0>How would you print the empty list?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:14:02.520 --> 00:14:03.360
<v Speaker 0>By doing nothing.

NOTE CONF {"raw":[100,100,100]}

00:14:03.360 --> 00:14:04.110
<v Speaker 0>So we return.

NOTE CONF {"raw":[100,100,99]}

00:14:04.320 --> 00:14:04.890
<v Speaker 0>Done.

NOTE CONF {"raw":[92]}

00:14:06.060 --> 00:14:09.390
<v Speaker 0>If we have a string whose name of a list

NOTE CONF {"raw":[100,100,100,100,100,100,57,100,100,100]}

00:14:09.390 --> 00:14:14.490
<v Speaker 0>whose head is X and whose tail is xz, then

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,78,100]}

00:14:14.490 --> 00:14:18.720
<v Speaker 0>we can put char of x followed by putting string

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:18.720 --> 00:14:19.740
<v Speaker 0>of x's.

NOTE CONF {"raw":[100,56]}

00:14:20.130 --> 00:14:21.930
<v Speaker 0>So now if we say put string.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:14:22.110 --> 00:14:23.100
<v Speaker 0>Question mark.

NOTE CONF {"raw":[100,100]}

00:14:23.100 --> 00:14:24.360
<v Speaker 0>Exclamation mark.

NOTE CONF {"raw":[100,100]}

00:14:24.390 --> 00:14:28.350
<v Speaker 0>That would be equivalent to put char question mark, put

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:28.350 --> 00:14:31.290
<v Speaker 0>char exclamation mark and then done.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:14:31.620 --> 00:14:34.320
<v Speaker 0>And both of these are the command that if it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:34.320 --> 00:14:39.150
<v Speaker 0>is ever performed, prints a question mark followed by an

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:39.150 --> 00:14:40.410
<v Speaker 0>exclamation mark.

NOTE CONF {"raw":[100,100]}

00:14:42.760 --> 00:14:44.320
<v Speaker 0>Any questions?

NOTE CONF {"raw":[100,100]}

00:14:45.790 --> 00:14:46.510
<v Speaker 0>Yes.

NOTE CONF {"raw":[100]}

00:14:46.990 --> 00:14:49.510
<v Speaker 3>Why do you keep saying if it is ever performed?

NOTE CONF {"raw":[100,100,100,100,100,100,99,99,100,76]}

00:14:49.960 --> 00:14:52.120
<v Speaker 0>Because it doesn't do it.

NOTE CONF {"raw":[100,100,100,100,100]}

00:14:52.840 --> 00:14:56.290
<v Speaker 0>It just stands for something that you can do.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:14:56.560 --> 00:14:58.090
<v Speaker 0>But we don't do it.

NOTE CONF {"raw":[100,100,100,100,100]}

00:15:03.400 --> 00:15:03.820
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:15:03.820 --> 00:15:05.710
<v Speaker 0>And more compactly.

NOTE CONF {"raw":[100,100,100]}

00:15:05.710 --> 00:15:06.100
<v Speaker 0>Right.

NOTE CONF {"raw":[85]}

00:15:06.100 --> 00:15:08.230
<v Speaker 0>We could define put string as follows.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:15:08.230 --> 00:15:08.650
<v Speaker 0>Right.

NOTE CONF {"raw":[99]}

00:15:08.650 --> 00:15:12.700
<v Speaker 0>It would just be folder with the two greater than

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:12.700 --> 00:15:15.010
<v Speaker 0>signs and done.

NOTE CONF {"raw":[94,100,100]}

00:15:15.010 --> 00:15:17.410
<v Speaker 0>So this is what you do with the empty list.

NOTE CONF {"raw":[100,100,100,100,100,100,91,100,100,100]}

00:15:17.410 --> 00:15:18.940
<v Speaker 0>This is how you combine.

NOTE CONF {"raw":[100,100,100,100,100]}

00:15:18.940 --> 00:15:21.280
<v Speaker 0>And A had an a tail of a list.

NOTE CONF {"raw":[99,50,90,75,69,62,100,100,100]}

00:15:21.670 --> 00:15:24.940
<v Speaker 0>And then we would compose that with mapping put char.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,84]}

00:15:25.150 --> 00:15:26.740
<v Speaker 0>So you're given a list of characters.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:15:26.740 --> 00:15:29.770
<v Speaker 0>You replace each character by the command that if it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:29.770 --> 00:15:32.470
<v Speaker 0>was ever done, would print that character.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:15:32.470 --> 00:15:35.710
<v Speaker 0>And then you combine those all into one big character.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:36.820 --> 00:15:38.170
<v Speaker 0>That should be clear enough.

NOTE CONF {"raw":[100,100,100,100,100]}

00:15:39.370 --> 00:15:41.350
<v Speaker 0>Is that familiar to people?

NOTE CONF {"raw":[100,100,100,100,100]}

00:15:41.350 --> 00:15:41.950
<v Speaker 0>By now.

NOTE CONF {"raw":[100,100]}

00:15:42.940 --> 00:15:43.360
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:15:44.320 --> 00:15:48.250
<v Speaker 0>And right then the this operator has some properties, right?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:48.250 --> 00:15:51.640
<v Speaker 0>It's, um, a right identity.

NOTE CONF {"raw":[96,100,100,100,100]}

00:15:51.640 --> 00:15:54.250
<v Speaker 0>It's a left identity and it's associative.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:15:54.250 --> 00:15:57.340
<v Speaker 0>So it doesn't matter where you put the parentheses.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:15:57.340 --> 00:15:59.020
<v Speaker 0>And again, these should be familiar.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:15:59.020 --> 00:16:01.210
<v Speaker 0>I see at least one person nodding their head.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:16:02.320 --> 00:16:02.920
<v Speaker 0>Two people.

NOTE CONF {"raw":[100,100]}

00:16:02.920 --> 00:16:03.730
<v Speaker 0>Three people.

NOTE CONF {"raw":[100,100]}

00:16:03.730 --> 00:16:04.540
<v Speaker 0>Very good.

NOTE CONF {"raw":[100,100]}

00:16:07.900 --> 00:16:10.480
<v Speaker 0>I see one person wearing 3D goggles.

NOTE CONF {"raw":[100,100,100,100,100,83,100]}

00:16:10.480 --> 00:16:13.840
<v Speaker 0>Does that mean you're watching a movie like in the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:13.840 --> 00:16:14.830
<v Speaker 0>meta ads?

NOTE CONF {"raw":[100,96]}

00:16:15.040 --> 00:16:15.580
<v Speaker 0>No.

NOTE CONF {"raw":[100]}

00:16:15.580 --> 00:16:21.670
<v Speaker 0>Okay, so by now, right, somebody already asked us, wait

NOTE CONF {"raw":[100,100,87,100,100,78,100,100,93,100]}

00:16:21.670 --> 00:16:22.780
<v Speaker 0>a minute, what does this mean?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:16:22.780 --> 00:16:26.980
<v Speaker 0>If it's ever performed, how do I actually do something?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:28.780 --> 00:16:32.800
<v Speaker 0>So the way we're going to do things is by

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:32.800 --> 00:16:37.360
<v Speaker 0>saying, I've got a special command called main, and whatever

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:37.360 --> 00:16:40.700
<v Speaker 0>a main must be defined to be a command, An

NOTE CONF {"raw":[56,100,100,100,100,100,100,100,100,100]}

00:16:40.700 --> 00:16:48.200
<v Speaker 0>IO of unit and whatever main says to do, we

NOTE CONF {"raw":[56,100,100,100,97,89,100,100,100,100]}

00:16:48.200 --> 00:16:48.830
<v Speaker 0>do.

NOTE CONF {"raw":[100]}

00:16:49.850 --> 00:16:53.210
<v Speaker 0>So here it says, okay, run the command.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:16:53.210 --> 00:16:54.230
<v Speaker 0>Confused.

NOTE CONF {"raw":[100]}

00:16:54.230 --> 00:16:54.980
<v Speaker 0>Confused.

NOTE CONF {"raw":[100]}

00:16:54.980 --> 00:17:00.860
<v Speaker 0>It's just this module that defines um, put string of

NOTE CONF {"raw":[100,100,100,100,100,100,100,98,100,100]}

00:17:00.860 --> 00:17:04.339
<v Speaker 0>that and let's just try this.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:17:05.780 --> 00:17:06.650
<v Speaker 0>This should run.

NOTE CONF {"raw":[78,100,100]}

00:17:08.750 --> 00:17:09.890
<v Speaker 4>So.

NOTE CONF {"raw":[100]}

00:17:16.670 --> 00:17:18.079
<v Speaker 0>So this is defined just this way.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:17:18.079 --> 00:17:20.329
<v Speaker 0>So I don't need to define put string in this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:20.329 --> 00:17:22.850
<v Speaker 0>program because that's part of the standard prelude.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:17:23.000 --> 00:17:26.150
<v Speaker 0>The same thing that defines plus and so on also

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:26.150 --> 00:17:27.380
<v Speaker 0>defines put string.

NOTE CONF {"raw":[100,98,100]}

00:17:28.189 --> 00:17:29.720
<v Speaker 0>So that's the program.

NOTE CONF {"raw":[100,100,100,100]}

00:17:30.620 --> 00:17:32.450
<v Speaker 0>And now if I do.

NOTE CONF {"raw":[100,100,100,100,100]}

00:17:35.450 --> 00:17:39.860
<v Speaker 0>GHC confused Right now.

NOTE CONF {"raw":[95,100,100,100]}

00:17:39.860 --> 00:17:44.240
<v Speaker 0>If I say Maine did I it did it look

NOTE CONF {"raw":[100,100,100,86,100,70,100,100,100,100]}

00:17:44.240 --> 00:17:44.810
<v Speaker 0>right here.

NOTE CONF {"raw":[100,100]}

00:17:44.810 --> 00:17:46.250
<v Speaker 0>Didn't even print the new line.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:17:46.460 --> 00:17:48.380
<v Speaker 0>Just did the two things it said to do.

NOTE CONF {"raw":[100,100,100,100,100,94,100,100,100]}

00:17:48.380 --> 00:17:51.170
<v Speaker 0>Printed a question mark and an exclamation mark.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:17:51.170 --> 00:17:52.040
<v Speaker 0>And that's it.

NOTE CONF {"raw":[100,100,100]}

00:17:53.300 --> 00:17:53.840
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:17:55.220 --> 00:17:56.840
<v Speaker 0>And we can also just.

NOTE CONF {"raw":[100,100,100,100,100]}

00:18:00.680 --> 00:18:04.310
<v Speaker 0>You say run GHC, it finds Maine and does whatever

NOTE CONF {"raw":[99,100,100,82,100,100,89,100,100,100]}

00:18:04.310 --> 00:18:05.030
<v Speaker 0>it says.

NOTE CONF {"raw":[100,100]}

00:18:05.030 --> 00:18:05.930
<v Speaker 0>So there it does.

NOTE CONF {"raw":[100,100,100,100]}

00:18:05.960 --> 00:18:08.060
<v Speaker 0>It prints question mark, exclamation mark.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:18:09.320 --> 00:18:09.650
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:18:09.650 --> 00:18:11.450
<v Speaker 0>Any questions about that?

NOTE CONF {"raw":[100,100,100,100]}

00:18:14.090 --> 00:18:15.950
<v Speaker 0>So now you understand why I was telling you about

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:15.950 --> 00:18:17.210
<v Speaker 0>the pineal gland.

NOTE CONF {"raw":[100,100,100]}

00:18:17.510 --> 00:18:21.740
<v Speaker 0>Maine is the pineal gland of Haskell.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:18:22.190 --> 00:18:24.380
<v Speaker 0>Everything goes through there.

NOTE CONF {"raw":[100,100,100,100]}

00:18:24.590 --> 00:18:28.490
<v Speaker 0>If you want a program that does anything, it has

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:28.490 --> 00:18:31.220
<v Speaker 0>to work via Maine.

NOTE CONF {"raw":[100,100,97,98]}

00:18:32.900 --> 00:18:33.590
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:18:40.550 --> 00:18:44.330
<v Speaker 0>So main is the link from Haskell's mind to Haskell's

NOTE CONF {"raw":[100,63,100,100,100,100,100,100,100,100]}

00:18:44.330 --> 00:18:44.720
<v Speaker 0>body.

NOTE CONF {"raw":[100]}

00:18:44.720 --> 00:18:47.480
<v Speaker 0>It is the analogue of the pineal gland.

NOTE CONF {"raw":[100,100,100,58,100,100,100,100]}

00:18:52.010 --> 00:18:55.640
<v Speaker 0>Of course, that was very messy because we didn't really,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:55.640 --> 00:18:58.310
<v Speaker 0>you know, generally you want a new line after the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:58.310 --> 00:18:58.610
<v Speaker 0>string.

NOTE CONF {"raw":[100]}

00:18:58.610 --> 00:19:01.910
<v Speaker 0>So it's another command put string line which is just

NOTE CONF {"raw":[100,93,100,100,90,100,100,100,100,100]}

00:19:01.910 --> 00:19:05.390
<v Speaker 0>like put string followed by printing a new line.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:19:05.660 --> 00:19:09.170
<v Speaker 0>And if we did there's another program here called Confused

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:09.170 --> 00:19:09.770
<v Speaker 0>Line.

NOTE CONF {"raw":[97]}

00:19:15.440 --> 00:19:15.710
<v Speaker 0>Oh.

NOTE CONF {"raw":[54]}

00:19:16.850 --> 00:19:18.260
<v Speaker 0>Oh what.

NOTE CONF {"raw":[100,100]}

00:19:19.190 --> 00:19:20.060
<v Speaker 0>It's right there.

NOTE CONF {"raw":[100,100,100]}

00:19:20.300 --> 00:19:22.550
<v Speaker 0>Oh I see, I have to put the dot hs

NOTE CONF {"raw":[100,100,100,100,100,100,100,99,98,100]}

00:19:24.020 --> 00:19:25.820
<v Speaker 0>um, right.

NOTE CONF {"raw":[98,100]}

00:19:25.820 --> 00:19:26.810
<v Speaker 0>So that's just the same.

NOTE CONF {"raw":[100,100,100,100,100]}

00:19:26.810 --> 00:19:27.920
<v Speaker 0>But put string line.

NOTE CONF {"raw":[83,75,100,100]}

00:19:27.920 --> 00:19:29.360
<v Speaker 0>And so now if I do.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:19:36.770 --> 00:19:41.190
<v Speaker 0>It actually prints it out neatly without this, um, prompt

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,77,100]}

00:19:41.190 --> 00:19:42.570
<v Speaker 0>immediately afterwards.

NOTE CONF {"raw":[100,100]}

00:19:43.440 --> 00:19:43.950
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:19:43.950 --> 00:19:47.340
<v Speaker 0>Any questions about that?

NOTE CONF {"raw":[100,100,100,100]}

00:19:48.120 --> 00:19:53.730
<v Speaker 0>So it might seem like this is too restricted, right?

NOTE CONF {"raw":[100,100,100,100,100,100,100,83,97,98]}

00:19:53.730 --> 00:19:57.240
<v Speaker 0>There's only one place where we can do things, but

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:57.240 --> 00:19:59.760
<v Speaker 0>we will see that we can build up very large

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:59.760 --> 00:20:02.190
<v Speaker 0>commands, even interactive commands.

NOTE CONF {"raw":[100,100,100,100]}

00:20:02.490 --> 00:20:05.250
<v Speaker 0>And so, in fact, anything that we want to do,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:05.430 --> 00:20:08.520
<v Speaker 0>anything that seems reasonable, we will be able to program.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,90]}

00:20:08.520 --> 00:20:09.240
<v Speaker 0>Yes.

NOTE CONF {"raw":[100]}

00:20:09.270 --> 00:20:10.290
<v Speaker 0>Another question.

NOTE CONF {"raw":[100,100]}

00:20:10.740 --> 00:20:13.170
<v Speaker 1>What's the difference between confused and confused?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:20:14.250 --> 00:20:16.350
<v Speaker 0>Uh, one prints a new line afterwards.

NOTE CONF {"raw":[98,100,100,100,100,100,100]}

00:20:18.780 --> 00:20:18.960
<v Speaker 0>Right.

NOTE CONF {"raw":[85]}

00:20:18.960 --> 00:20:20.070
<v Speaker 0>So here it was.

NOTE CONF {"raw":[100,100,100,100]}

00:20:20.070 --> 00:20:23.730
<v Speaker 0>Um, not put string, but put string ln which it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,76]}

00:20:23.730 --> 00:20:26.160
<v Speaker 0>means put a string with a new line.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:20:34.500 --> 00:20:35.280
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:20:35.850 --> 00:20:36.690
<v Speaker 0>So.

NOTE CONF {"raw":[100]}

00:20:39.600 --> 00:20:42.330
<v Speaker 0>One thing that we've learned throughout the course, right, is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:42.330 --> 00:20:45.150
<v Speaker 0>Equation's reasoning, right?

NOTE CONF {"raw":[82,100,71]}

00:20:45.180 --> 00:20:49.920
<v Speaker 0>Haskell programs are basically equations, and it's always safe to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:49.920 --> 00:20:52.740
<v Speaker 0>replace the left hand side of an equation by the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:52.740 --> 00:20:53.790
<v Speaker 0>right hand side.

NOTE CONF {"raw":[100,100,100]}

00:20:57.060 --> 00:20:57.510
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:20:59.610 --> 00:21:01.890
<v Speaker 0>So right in Haskell you can write one plus two

NOTE CONF {"raw":[97,64,52,100,100,100,100,100,100,100]}

00:21:01.890 --> 00:21:03.390
<v Speaker 0>times one plus two.

NOTE CONF {"raw":[100,100,100,100]}

00:21:03.420 --> 00:21:06.750
<v Speaker 0>Or you could write let x equal one plus two

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:06.750 --> 00:21:08.130
<v Speaker 0>in x times x.

NOTE CONF {"raw":[52,100,100,100]}

00:21:08.280 --> 00:21:10.860
<v Speaker 0>And those both mean the same thing.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:21:12.180 --> 00:21:12.450
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:21:12.450 --> 00:21:14.640
<v Speaker 0>We can just take every occurrence of x and replace

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:14.640 --> 00:21:16.020
<v Speaker 0>it by one plus two.

NOTE CONF {"raw":[100,100,100,100,100]}

00:21:16.020 --> 00:21:17.910
<v Speaker 0>And this would reduce to that.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:21:17.910 --> 00:21:19.980
<v Speaker 0>And this reduces to nine.

NOTE CONF {"raw":[100,100,100,100,100]}

00:21:21.780 --> 00:21:26.310
<v Speaker 0>Now who's ever learned a programming language other than Haskell.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:27.900 --> 00:21:28.230
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:21:28.230 --> 00:21:31.830
<v Speaker 0>And was that one a functional language or object oriented

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:31.830 --> 00:21:33.120
<v Speaker 0>or imperative.

NOTE CONF {"raw":[100,100]}

00:21:33.630 --> 00:21:36.400
<v Speaker 0>Let's see how many people learned another functional language.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:21:37.930 --> 00:21:38.290
<v Speaker 0>Ooh.

NOTE CONF {"raw":[99]}

00:21:38.980 --> 00:21:39.910
<v Speaker 0>Which one?

NOTE CONF {"raw":[100,100]}

00:21:44.380 --> 00:21:45.640
<v Speaker 0>You with your hand up in the back.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:21:45.640 --> 00:21:46.840
<v Speaker 0>Which language you do learn?

NOTE CONF {"raw":[100,100,72,72,100]}

00:21:49.270 --> 00:21:50.350
<v Speaker 2>I don't want to answer.

NOTE CONF {"raw":[100,100,83,89,66]}

00:21:51.070 --> 00:21:51.850
<v Speaker 0>You don't want to answer?

NOTE CONF {"raw":[100,100,100,100,100]}

00:21:51.850 --> 00:21:52.420
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:21:54.130 --> 00:21:54.460
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:21:57.610 --> 00:22:00.160
<v Speaker 0>And who learned an object oriented language?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:22:01.030 --> 00:22:01.420
<v Speaker 0>Right.

NOTE CONF {"raw":[98]}

00:22:01.420 --> 00:22:02.410
<v Speaker 0>Quite a few of you.

NOTE CONF {"raw":[100,100,100,100,100]}

00:22:02.410 --> 00:22:04.000
<v Speaker 0>So in an object oriented language.

NOTE CONF {"raw":[97,92,97,100,100,100]}

00:22:04.000 --> 00:22:04.150
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:22:04.150 --> 00:22:06.460
<v Speaker 0>You can just give a command and it will do

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:06.460 --> 00:22:06.850
<v Speaker 0>it.

NOTE CONF {"raw":[100]}

00:22:06.850 --> 00:22:09.910
<v Speaker 0>So if you say print ha, print ha, it will

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:09.910 --> 00:22:10.330
<v Speaker 0>print.

NOTE CONF {"raw":[100]}

00:22:10.330 --> 00:22:10.990
<v Speaker 0>Ha ha.

NOTE CONF {"raw":[98,98]}

00:22:13.510 --> 00:22:16.270
<v Speaker 0>On the other hand, in a language like that with

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:16.270 --> 00:22:19.900
<v Speaker 0>side effects, if you say let x equal print ha

NOTE CONF {"raw":[100,100,100,100,100,100,100,98,100,100]}

00:22:19.900 --> 00:22:22.900
<v Speaker 0>in x followed by x, what's going to do is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:22.900 --> 00:22:26.230
<v Speaker 0>it's going to execute this to figure out what value

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:26.230 --> 00:22:27.670
<v Speaker 0>to assign to x.

NOTE CONF {"raw":[100,100,100,100]}

00:22:28.030 --> 00:22:31.060
<v Speaker 0>And when it executes this, it will print ha.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:22:32.080 --> 00:22:34.540
<v Speaker 0>And then it'll bind x to some value, maybe it's

NOTE CONF {"raw":[100,100,98,100,100,100,100,100,100,69]}

00:22:34.540 --> 00:22:37.960
<v Speaker 0>unit, and then it will just return unit and return

NOTE CONF {"raw":[100,94,66,66,92,100,100,100,100,100]}

00:22:37.960 --> 00:22:38.860
<v Speaker 0>unit again.

NOTE CONF {"raw":[100,100]}

00:22:40.150 --> 00:22:41.200
<v Speaker 0>So it just prints.

NOTE CONF {"raw":[100,100,100,100]}

00:22:41.200 --> 00:22:41.740
<v Speaker 0>Ha.

NOTE CONF {"raw":[74]}

00:22:43.150 --> 00:22:43.840
<v Speaker 0>It doesn't print.

NOTE CONF {"raw":[100,100,100]}

00:22:43.840 --> 00:22:44.470
<v Speaker 0>Ha ha.

NOTE CONF {"raw":[50,51]}

00:22:45.640 --> 00:22:48.340
<v Speaker 0>So you'd think you were optimising your program by doing

NOTE CONF {"raw":[100,35,100,100,76,99,100,100,100,100]}

00:22:48.340 --> 00:22:49.060
<v Speaker 0>this.

NOTE CONF {"raw":[100]}

00:22:49.060 --> 00:22:52.240
<v Speaker 0>But in fact when you do it, the laugh is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,83,100]}

00:22:52.240 --> 00:22:53.200
<v Speaker 0>on you.

NOTE CONF {"raw":[100,100]}

00:22:56.200 --> 00:22:59.020
<v Speaker 0>On the other hand, you could turned it into a

NOTE CONF {"raw":[100,100,100,100,100,100,61,100,100,100]}

00:22:59.020 --> 00:23:02.320
<v Speaker 0>function like say let f of unit be print.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:23:02.320 --> 00:23:02.890
<v Speaker 0>Ha!

NOTE CONF {"raw":[100]}

00:23:03.490 --> 00:23:06.520
<v Speaker 0>And now, right, it's waiting for the argument before it

NOTE CONF {"raw":[100,100,97,100,100,100,100,100,100,100]}

00:23:06.520 --> 00:23:07.510
<v Speaker 0>does anything.

NOTE CONF {"raw":[100,100]}

00:23:08.050 --> 00:23:10.210
<v Speaker 0>And so now if you say f of unit followed

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:10.210 --> 00:23:13.450
<v Speaker 0>by f of unit, it will go ha ha again.

NOTE CONF {"raw":[100,100,100,100,100,100,100,98,98,100]}

00:23:13.450 --> 00:23:16.900
<v Speaker 0>So you need to learn this trick of always delaying

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:16.900 --> 00:23:20.110
<v Speaker 0>any actions to the exact point where you want them.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:23.830 --> 00:23:24.100
<v Speaker 0>Okay.

NOTE CONF {"raw":[93]}

00:23:24.100 --> 00:23:25.840
<v Speaker 0>And people have learned that trick.

NOTE CONF {"raw":[100,100,100,100,100,96]}

00:23:25.840 --> 00:23:29.140
<v Speaker 0>Some of you, the ones using languages with side effects.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:30.910 --> 00:23:31.330
<v Speaker 0>Yes.

NOTE CONF {"raw":[100]}

00:23:31.330 --> 00:23:31.780
<v Speaker 0>No.

NOTE CONF {"raw":[100]}

00:23:31.790 --> 00:23:33.740
<v Speaker 0>Maybe not familiar.

NOTE CONF {"raw":[100,100,100]}

00:23:34.670 --> 00:23:35.150
<v Speaker 2>Yeah.

NOTE CONF {"raw":[81]}

00:23:37.970 --> 00:23:40.280
<v Speaker 0>What are languages with side effects?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:23:40.370 --> 00:23:43.910
<v Speaker 0>Pretty much every language in the world other than Haskell.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:50.450 --> 00:23:53.000
<v Speaker 0>So write in Haskell, right?

NOTE CONF {"raw":[100,75,100,100,96]}

00:23:53.030 --> 00:23:56.450
<v Speaker 0>Obviously, you can do exceptional reasoning like this, but we

NOTE CONF {"raw":[100,100,100,100,90,100,100,100,100,100]}

00:23:56.450 --> 00:24:02.930
<v Speaker 0>can also do that just as well with commands.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,98]}

00:24:03.260 --> 00:24:07.190
<v Speaker 0>So if I say put string ha followed by put

NOTE CONF {"raw":[100,100,100,100,100,100,96,100,100,100]}

00:24:07.190 --> 00:24:11.210
<v Speaker 0>string ha or I've got the term let em be

NOTE CONF {"raw":[100,96,97,100,100,100,100,100,81,94]}

00:24:11.300 --> 00:24:14.360
<v Speaker 0>put string ha in em, followed by em.

NOTE CONF {"raw":[100,100,100,100,100,100,100,93]}

00:24:14.390 --> 00:24:16.490
<v Speaker 0>These are both entirely equivalent.

NOTE CONF {"raw":[100,100,100,100,100]}

00:24:16.490 --> 00:24:19.250
<v Speaker 0>So you don't have this problem that you need to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:19.250 --> 00:24:22.880
<v Speaker 0>worry about where the side effects occur.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:24:23.270 --> 00:24:27.230
<v Speaker 0>We only have values that behave just like any other

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:27.230 --> 00:24:30.950
<v Speaker 0>value, and there's only one point at which you can

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:30.950 --> 00:24:34.940
<v Speaker 0>turn that value into an action which is main the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,99,100]}

00:24:34.940 --> 00:24:35.930
<v Speaker 0>pineal gland.

NOTE CONF {"raw":[100,100]}

00:24:35.960 --> 00:24:38.420
<v Speaker 0>So other than that, it's just a value.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:24:38.540 --> 00:24:42.320
<v Speaker 0>And it's a value that denotes a command that if

NOTE CONF {"raw":[100,98,100,100,100,100,100,100,100,100]}

00:24:42.320 --> 00:24:44.930
<v Speaker 0>it is ever performed, will do this thing.

NOTE CONF {"raw":[100,97,100,100,100,100,100,100]}

00:24:47.330 --> 00:24:47.630
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:24:47.630 --> 00:24:53.180
<v Speaker 0>Is that subtle little distinction clear to people now anybody

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:53.180 --> 00:24:55.040
<v Speaker 0>want to ask a question about that.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:24:59.150 --> 00:24:59.420
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:24:59.420 --> 00:25:03.950
<v Speaker 0>So the next question you might have is well all

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,93]}

00:25:03.950 --> 00:25:05.060
<v Speaker 0>right that's fine.

NOTE CONF {"raw":[93,100,100]}

00:25:05.060 --> 00:25:08.300
<v Speaker 0>But what if I actually want to do something interactive.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:08.660 --> 00:25:10.430
<v Speaker 0>So now I'm getting inputs.

NOTE CONF {"raw":[100,100,100,100,100]}

00:25:10.430 --> 00:25:14.090
<v Speaker 0>The AI part of IO and I'm printing outputs.

NOTE CONF {"raw":[100,39,100,100,52,100,100,100,100]}

00:25:14.090 --> 00:25:16.790
<v Speaker 0>So so far we've just learned how to do output.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:16.790 --> 00:25:19.700
<v Speaker 0>What about mixing inputs and outputs.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:25:19.700 --> 00:25:21.650
<v Speaker 0>So now I'm going to have a command that says

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:21.650 --> 00:25:25.220
<v Speaker 0>read a character that's going to be called get char

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,96]}

00:25:25.700 --> 00:25:28.220
<v Speaker 0>and that's going to return a character.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:25:28.220 --> 00:25:31.440
<v Speaker 0>So now instead of just having things that do stuff.

NOTE CONF {"raw":[100,100,96,100,100,100,100,100,100,100]}

00:25:31.470 --> 00:25:35.700
<v Speaker 0>We have things that do stuff and return a value.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:39.240 --> 00:25:42.750
<v Speaker 0>So I o of unit is the type of commands

NOTE CONF {"raw":[100,61,60,100,100,100,100,100,100,100]}

00:25:42.750 --> 00:25:43.650
<v Speaker 0>that yield no value.

NOTE CONF {"raw":[100,100,100,100]}

00:25:43.650 --> 00:25:43.830
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:25:43.830 --> 00:25:47.220
<v Speaker 0>Because unit is the trivial type that contains just one

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:47.220 --> 00:25:50.550
<v Speaker 0>value, which we also write as an open and closed

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,96]}

00:25:50.550 --> 00:25:51.420
<v Speaker 0>parenthesis.

NOTE CONF {"raw":[89]}

00:25:52.080 --> 00:25:56.490
<v Speaker 0>So now we're going to write io char for you

NOTE CONF {"raw":[100,100,100,100,100,100,93,100,100,100]}

00:25:56.490 --> 00:25:56.700
<v Speaker 0>guys.

NOTE CONF {"raw":[100]}

00:25:56.700 --> 00:25:58.170
<v Speaker 0>Pronounce it char or care.

NOTE CONF {"raw":[100,100,100,100,100]}

00:25:58.200 --> 00:25:59.100
<v Speaker 0>I never know.

NOTE CONF {"raw":[100,100,100]}

00:25:59.100 --> 00:26:00.180
<v Speaker 0>We'll take a vote.

NOTE CONF {"raw":[100,100,100,100]}

00:26:00.180 --> 00:26:01.710
<v Speaker 0>How many people say char.

NOTE CONF {"raw":[100,100,100,100,100]}

00:26:02.670 --> 00:26:04.320
<v Speaker 0>How many people say care.

NOTE CONF {"raw":[100,100,100,100,100]}

00:26:05.520 --> 00:26:07.080
<v Speaker 0>Oh good I had the majority.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:26:07.080 --> 00:26:12.030
<v Speaker 0>All right char, um, so here's the command to read

NOTE CONF {"raw":[98,98,100,100,100,100,100,100,100,100]}

00:26:12.030 --> 00:26:12.630
<v Speaker 0>a character.

NOTE CONF {"raw":[98,100]}

00:26:12.630 --> 00:26:15.930
<v Speaker 0>Get char whose type is I o of char.

NOTE CONF {"raw":[100,100,96,100,100,61,61,100,100]}

00:26:17.370 --> 00:26:20.730
<v Speaker 0>So if, let's say the input say I've typed at

NOTE CONF {"raw":[100,100,100,100,100,100,100,97,100,99]}

00:26:20.730 --> 00:26:24.240
<v Speaker 0>the terminal a, b, c and I execute get char

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:24.240 --> 00:26:28.350
<v Speaker 0>that's going to return the value a, and now it's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:28.350 --> 00:26:30.750
<v Speaker 0>no longer as if I've typed a, b, c, it's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:30.750 --> 00:26:31.560
<v Speaker 0>read the a.

NOTE CONF {"raw":[96,100,100]}

00:26:31.590 --> 00:26:34.260
<v Speaker 0>So now the remaining input is just b and C

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:34.260 --> 00:26:36.000
<v Speaker 0>because the A has been read.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:26:36.390 --> 00:26:38.730
<v Speaker 0>And so if I do get char again the next

NOTE CONF {"raw":[98,100,100,100,100,100,93,100,100,100]}

00:26:38.730 --> 00:26:39.990
<v Speaker 0>thing I'll get will be b.

NOTE CONF {"raw":[100,100,100,100,68,100]}

00:26:43.110 --> 00:26:46.650
<v Speaker 0>So in general we can write IOA for a command

NOTE CONF {"raw":[100,100,100,100,100,100,57,100,87,100]}

00:26:46.650 --> 00:26:48.000
<v Speaker 0>that returns a value of type A.

NOTE CONF {"raw":[100,100,96,100,100,100,100]}

00:26:48.000 --> 00:26:53.520
<v Speaker 0>And there's one very important command return which takes an

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:53.520 --> 00:26:55.650
<v Speaker 0>A and returns an I o of a.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:26:55.890 --> 00:27:00.030
<v Speaker 0>And so this is the command that does nothing but

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:00.030 --> 00:27:01.620
<v Speaker 0>returns the given value.

NOTE CONF {"raw":[100,100,100,100]}

00:27:02.430 --> 00:27:06.090
<v Speaker 0>So for instance return empty list.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:27:06.930 --> 00:27:10.530
<v Speaker 0>Um has type I o of string um and it

NOTE CONF {"raw":[72,100,100,94,94,100,100,68,61,96]}

00:27:10.530 --> 00:27:12.120
<v Speaker 0>returns the empty string.

NOTE CONF {"raw":[100,100,100,100]}

00:27:13.890 --> 00:27:17.070
<v Speaker 0>Um, and if the input was bcc right, it would

NOTE CONF {"raw":[100,100,100,100,100,100,61,94,100,100]}

00:27:17.070 --> 00:27:20.370
<v Speaker 0>return the value empty and the input is not changed.

NOTE CONF {"raw":[100,100,100,100,100,100,52,52,100,100]}

00:27:20.370 --> 00:27:20.580
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:27:20.580 --> 00:27:21.720
<v Speaker 0>It does nothing.

NOTE CONF {"raw":[100,100,100]}

00:27:21.720 --> 00:27:23.940
<v Speaker 0>So the input is still BCC.

NOTE CONF {"raw":[100,100,100,100,100,93]}

00:27:28.570 --> 00:27:32.380
<v Speaker 0>And we can combine commands with values.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:27:32.380 --> 00:27:34.150
<v Speaker 0>So we've got this.

NOTE CONF {"raw":[100,100,100,100]}

00:27:34.150 --> 00:27:34.960
<v Speaker 0>Operator.

NOTE CONF {"raw":[99]}

00:27:36.040 --> 00:27:38.680
<v Speaker 0>Um, so the other one greater than greater than sometimes

NOTE CONF {"raw":[60,100,100,100,100,100,100,100,100,100]}

00:27:38.680 --> 00:27:41.530
<v Speaker 0>pronounced seek for sequence, do one thing and then another

NOTE CONF {"raw":[57,100,100,100,100,100,100,100,100,100]}

00:27:41.530 --> 00:27:42.040
<v Speaker 0>thing.

NOTE CONF {"raw":[100]}

00:27:43.210 --> 00:27:46.300
<v Speaker 0>Um, this one is greater than greater than equal.

NOTE CONF {"raw":[96,100,100,100,100,100,100,100,100]}

00:27:46.300 --> 00:27:48.340
<v Speaker 0>And it's pronounced bind.

NOTE CONF {"raw":[100,96,100,100]}

00:27:49.960 --> 00:27:52.840
<v Speaker 0>So greater than greater than equal takes.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:27:52.840 --> 00:27:54.310
<v Speaker 0>This is a weird type.

NOTE CONF {"raw":[100,100,100,100,100]}

00:27:54.340 --> 00:27:57.850
<v Speaker 0>It takes an I o of a and a function

NOTE CONF {"raw":[100,100,100,91,91,100,100,100,100,100]}

00:27:57.850 --> 00:28:01.270
<v Speaker 0>from a to I o of b, and it returns

NOTE CONF {"raw":[100,100,100,52,52,100,100,100,100,100]}

00:28:01.270 --> 00:28:02.800
<v Speaker 0>an I o of b.

NOTE CONF {"raw":[100,79,79,100,100]}

00:28:08.650 --> 00:28:08.800
<v Speaker 0>Right.

NOTE CONF {"raw":[96]}

00:28:08.800 --> 00:28:10.420
<v Speaker 0>So you have you have to wake up now because

NOTE CONF {"raw":[100,98,88,100,100,100,100,100,100,100]}

00:28:10.420 --> 00:28:12.430
<v Speaker 0>I just said something weird, right.

NOTE CONF {"raw":[100,100,100,100,100,99]}

00:28:12.430 --> 00:28:15.340
<v Speaker 0>This ah people does this.

NOTE CONF {"raw":[98,46,93,100,100]}

00:28:15.340 --> 00:28:18.250
<v Speaker 0>Look you're all used to functions as arguments okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:28:18.250 --> 00:28:20.860
<v Speaker 0>But this should look at least a little bit weird.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:22.000 --> 00:28:23.560
<v Speaker 0>So what does this do?

NOTE CONF {"raw":[100,100,100,100,100]}

00:28:24.760 --> 00:28:29.410
<v Speaker 0>Um, so if I say get char bind lambda x

NOTE CONF {"raw":[100,100,100,100,100,100,79,98,100,100]}

00:28:29.650 --> 00:28:32.500
<v Speaker 0>goes to put char of two upper of x.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:28:33.100 --> 00:28:36.100
<v Speaker 0>Then when the input is a b c get char

NOTE CONF {"raw":[100,100,100,100,100,98,98,98,100,100]}

00:28:36.100 --> 00:28:39.580
<v Speaker 0>returns an a, it binds it to x.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:28:39.580 --> 00:28:42.520
<v Speaker 0>So in other words you take this function and you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:42.520 --> 00:28:46.720
<v Speaker 0>return it to whatever value was returned by this.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:28:51.340 --> 00:28:54.250
<v Speaker 0>So x will get bound to the a returned by

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:54.250 --> 00:28:55.060
<v Speaker 0>this.

NOTE CONF {"raw":[100]}

00:28:55.240 --> 00:28:57.220
<v Speaker 0>And now I compute two upper of x.

NOTE CONF {"raw":[100,100,100,100,87,98,100,100]}

00:28:57.220 --> 00:28:58.540
<v Speaker 0>So that will be an uppercase A.

NOTE CONF {"raw":[100,91,72,100,100,96,100]}

00:28:58.660 --> 00:29:00.730
<v Speaker 0>And I write that out to the screen.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:29:01.510 --> 00:29:03.070
<v Speaker 0>I'm doing something interactive.

NOTE CONF {"raw":[100,100,100,100]}

00:29:03.070 --> 00:29:05.500
<v Speaker 0>I type in a character and it echoes it in

NOTE CONF {"raw":[100,100,100,100,100,100,100,62,100,100]}

00:29:05.500 --> 00:29:06.460
<v Speaker 0>uppercase.

NOTE CONF {"raw":[99]}

00:29:08.440 --> 00:29:11.770
<v Speaker 0>And that's why this operator is called bind, because you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:11.770 --> 00:29:15.370
<v Speaker 0>get a you do stuff and you get a value,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:15.370 --> 00:29:18.610
<v Speaker 0>and you bind this function to the value you got,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:18.610 --> 00:29:20.620
<v Speaker 0>and then you do some more stuff.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:29:21.250 --> 00:29:23.560
<v Speaker 0>And then what stuff does the whole thing do?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:29:24.310 --> 00:29:27.970
<v Speaker 0>It does Whatever this did and whatever this did, once

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:27.970 --> 00:29:30.790
<v Speaker 0>you gave it to the value returned by this one.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:30.790 --> 00:29:33.640
<v Speaker 0>So we must do this one first to get the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:33.640 --> 00:29:36.190
<v Speaker 0>value out, and then we do this one.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:29:36.640 --> 00:29:41.650
<v Speaker 0>So to do this and then do that, that's what

NOTE CONF {"raw":[100,54,100,100,100,100,100,100,100,100]}

00:29:41.680 --> 00:29:42.520
<v Speaker 0>bind is.

NOTE CONF {"raw":[100,100]}

00:29:42.520 --> 00:29:46.570
<v Speaker 0>So it's just sequencing of operations.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:29:46.570 --> 00:29:49.210
<v Speaker 0>And it seems a bit weird.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:29:49.210 --> 00:29:51.100
<v Speaker 0>But if you think about for a bit you realise

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,86]}

00:29:51.100 --> 00:29:54.130
<v Speaker 0>this must, you know, this is the way you would

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:54.130 --> 00:29:55.420
<v Speaker 0>do two operations, right?

NOTE CONF {"raw":[100,99,100,100]}

00:29:55.420 --> 00:30:01.330
<v Speaker 0>Because you do the first operation and then we'll do

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:01.330 --> 00:30:02.410
<v Speaker 0>the second operation.

NOTE CONF {"raw":[100,100,100]}

00:30:02.410 --> 00:30:05.260
<v Speaker 0>Now this one seems to have thrown away this a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,97]}

00:30:05.260 --> 00:30:06.100
<v Speaker 0>right.

NOTE CONF {"raw":[98]}

00:30:06.970 --> 00:30:09.820
<v Speaker 0>Um, it's only returning whatever the second one does.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:30:09.820 --> 00:30:12.640
<v Speaker 0>But I can have this return, whatever I want.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:30:12.970 --> 00:30:16.360
<v Speaker 0>So maybe this B has an A in it.

NOTE CONF {"raw":[100,100,100,98,100,100,100,100,100]}

00:30:16.360 --> 00:30:18.040
<v Speaker 0>So we'll see an example of that in just a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:18.040 --> 00:30:18.670
<v Speaker 0>moment.

NOTE CONF {"raw":[100]}

00:30:19.090 --> 00:30:23.110
<v Speaker 0>So in fact the output of this one can appear

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:23.110 --> 00:30:24.230
<v Speaker 0>in the output here.

NOTE CONF {"raw":[100,100,100,100]}

00:30:24.230 --> 00:30:26.930
<v Speaker 0>It depends on what this function does.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:30:31.820 --> 00:30:32.210
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:30:32.210 --> 00:30:35.630
<v Speaker 0>So let's just go over that in a little bit

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:35.630 --> 00:30:36.650
<v Speaker 0>more detail.

NOTE CONF {"raw":[100,100]}

00:30:36.680 --> 00:30:40.520
<v Speaker 0>So bind again takes an I o of a and

NOTE CONF {"raw":[100,100,100,100,100,93,93,100,100,100]}

00:30:40.520 --> 00:30:42.200
<v Speaker 0>a to I o of being returns an iob.

NOTE CONF {"raw":[97,90,97,97,100,78,100,87,92]}

00:30:42.200 --> 00:30:47.630
<v Speaker 0>So let m be the first argument and k be

NOTE CONF {"raw":[100,100,80,100,100,100,100,100,100,96]}

00:30:47.630 --> 00:30:48.500
<v Speaker 0>the second argument.

NOTE CONF {"raw":[100,100,100]}

00:30:48.500 --> 00:30:50.570
<v Speaker 0>It's called k by the way, because it's short for

NOTE CONF {"raw":[97,100,100,100,100,100,100,97,45,100]}

00:30:50.570 --> 00:30:51.770
<v Speaker 0>continuation.

NOTE CONF {"raw":[100]}

00:30:52.040 --> 00:30:56.090
<v Speaker 0>A continuation is just, um, a name in programming theory

NOTE CONF {"raw":[100,100,100,100,73,100,100,60,99,100]}

00:30:56.180 --> 00:30:59.570
<v Speaker 0>for whatever you do after the first thing.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:30:59.960 --> 00:31:03.140
<v Speaker 0>And that takes whatever the value of the first thing

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:03.140 --> 00:31:04.700
<v Speaker 0>was as an argument.

NOTE CONF {"raw":[100,100,100,100]}

00:31:04.940 --> 00:31:07.640
<v Speaker 0>So the continuation says, okay, I've computed this much.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:31:07.640 --> 00:31:08.960
<v Speaker 0>You do the next bit.

NOTE CONF {"raw":[100,100,100,100,100]}

00:31:11.330 --> 00:31:15.020
<v Speaker 0>So m bind k we'll have type I o of

NOTE CONF {"raw":[100,100,100,100,94,100,100,94,66,100]}

00:31:15.020 --> 00:31:16.340
<v Speaker 0>b right.

NOTE CONF {"raw":[100,100]}

00:31:16.340 --> 00:31:19.760
<v Speaker 0>And if it has ever before performed it behaves as

NOTE CONF {"raw":[100,100,100,55,100,100,100,100,100,100]}

00:31:19.760 --> 00:31:20.480
<v Speaker 0>follows.

NOTE CONF {"raw":[100]}

00:31:20.480 --> 00:31:24.110
<v Speaker 0>It first performs command m which will yield a value

NOTE CONF {"raw":[93,100,100,100,100,100,100,100,99,100]}

00:31:24.110 --> 00:31:27.710
<v Speaker 0>x of type A and then perform the command k

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:27.710 --> 00:31:32.030
<v Speaker 0>of x, yielding a value y of type B, right.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:32.030 --> 00:31:37.250
<v Speaker 0>So k has type a to I o b, x

NOTE CONF {"raw":[100,100,100,100,100,100,52,52,52,100]}

00:31:37.250 --> 00:31:40.460
<v Speaker 0>has type a, so k of x has type iob.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:41.360 --> 00:31:44.210
<v Speaker 0>So it returns a value y of type b.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:31:44.900 --> 00:31:48.140
<v Speaker 0>And then finally we will yield the value y.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:31:48.140 --> 00:31:50.180
<v Speaker 0>So we're going to do this thing followed by this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:50.180 --> 00:31:50.390
<v Speaker 0>thing.

NOTE CONF {"raw":[100]}

00:31:50.390 --> 00:31:53.150
<v Speaker 0>So we combine two different things.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:31:53.150 --> 00:31:56.900
<v Speaker 0>So it's very similar to the um sequence operator.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:31:56.900 --> 00:32:00.770
<v Speaker 0>But now it's sequencing where we're threading a value through.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:03.920 --> 00:32:08.420
<v Speaker 0>And this is probably the most complicated design pattern that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:08.420 --> 00:32:10.550
<v Speaker 0>you will bump into in Haskell.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:32:13.430 --> 00:32:13.640
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:32:13.640 --> 00:32:16.700
<v Speaker 0>So it's not that complicated, but it should be just

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:16.700 --> 00:32:18.950
<v Speaker 0>complicated enough that you wake up and go, wait, what

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:18.950 --> 00:32:19.520
<v Speaker 0>is that?

NOTE CONF {"raw":[100,100]}

00:32:20.450 --> 00:32:22.620
<v Speaker 0>So if I have, I explained it clearly enough or

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:22.620 --> 00:32:24.360
<v Speaker 0>are there some questions about that?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:32:27.480 --> 00:32:27.990
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:32:28.290 --> 00:32:28.530
<v Speaker 0>So.

NOTE CONF {"raw":[94]}

00:32:31.140 --> 00:32:35.220
<v Speaker 0>So so I wouldn't um.

NOTE CONF {"raw":[52,100,100,100,67]}

00:32:35.280 --> 00:32:36.990
<v Speaker 0>So a function would be this.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:32:36.990 --> 00:32:37.230
<v Speaker 0>Right.

NOTE CONF {"raw":[78]}

00:32:37.230 --> 00:32:40.560
<v Speaker 0>And a function takes an argument and produces a result.

NOTE CONF {"raw":[29,99,100,100,100,100,100,100,74,100]}

00:32:41.820 --> 00:32:45.720
<v Speaker 0>Um, in this case we've got commands which might either

NOTE CONF {"raw":[90,100,100,100,100,100,100,100,100,100]}

00:32:45.720 --> 00:32:47.520
<v Speaker 0>take input or produce output.

NOTE CONF {"raw":[100,100,100,100,100]}

00:32:51.390 --> 00:32:51.810
<v Speaker 0>Right.

NOTE CONF {"raw":[96]}

00:32:51.810 --> 00:32:53.130
<v Speaker 0>It can do anything.

NOTE CONF {"raw":[100,100,100,100]}

00:32:53.130 --> 00:32:55.290
<v Speaker 0>It can read a character, can write a character, it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:55.290 --> 00:32:57.240
<v Speaker 0>can read and then write a character.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:32:57.240 --> 00:32:58.380
<v Speaker 0>It can do anything.

NOTE CONF {"raw":[100,100,100,100]}

00:32:58.830 --> 00:33:00.390
<v Speaker 0>And this one similarly.

NOTE CONF {"raw":[100,100,49,100]}

00:33:00.750 --> 00:33:03.480
<v Speaker 0>But when it does stuff, one of the things that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:03.480 --> 00:33:05.580
<v Speaker 0>we'll do is just it says, oh, and I'm returning

NOTE CONF {"raw":[100,100,100,100,98,100,98,100,100,100]}

00:33:05.580 --> 00:33:06.390
<v Speaker 0>this value.

NOTE CONF {"raw":[100,100]}

00:33:09.600 --> 00:33:10.980
<v Speaker 0>It's not clear enough now.

NOTE CONF {"raw":[80,79,100,100,100]}

00:33:12.120 --> 00:33:12.480
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:33:12.480 --> 00:33:13.500
<v Speaker 0>Good question.

NOTE CONF {"raw":[100,100]}

00:33:14.250 --> 00:33:16.290
<v Speaker 0>Anybody else with a question?

NOTE CONF {"raw":[100,100,100,89,100]}

00:33:22.290 --> 00:33:25.470
<v Speaker 0>Okay, so now we can do something interactive.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:33:25.470 --> 00:33:28.200
<v Speaker 0>So get line is going to return a string.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:33:29.430 --> 00:33:33.810
<v Speaker 0>And what is going to do is get a character

NOTE CONF {"raw":[100,100,66,100,100,100,100,100,100,100]}

00:33:33.810 --> 00:33:35.250
<v Speaker 0>bind it to x.

NOTE CONF {"raw":[100,100,100,100]}

00:33:35.400 --> 00:33:37.380
<v Speaker 0>If x is new line then it stopped.

NOTE CONF {"raw":[100,100,100,100,100,100,86,64]}

00:33:37.380 --> 00:33:39.240
<v Speaker 0>So we're going to just read one line.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:33:39.420 --> 00:33:41.370
<v Speaker 0>So as soon as we read a new line we

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:41.370 --> 00:33:42.000
<v Speaker 0>stop.

NOTE CONF {"raw":[100]}

00:33:43.710 --> 00:33:49.740
<v Speaker 0>Um, otherwise we're going to recursively call that line, bind

NOTE CONF {"raw":[97,100,100,100,100,100,100,85,100,100]}

00:33:49.740 --> 00:33:54.150
<v Speaker 0>that to XS and then return ex cons axes.

NOTE CONF {"raw":[100,100,50,100,100,100,46,86,72]}

00:33:54.300 --> 00:33:56.100
<v Speaker 0>So here is an example.

NOTE CONF {"raw":[100,100,100,100,100]}

00:33:56.940 --> 00:34:01.500
<v Speaker 0>In um this bind right.

NOTE CONF {"raw":[100,100,100,100,100]}

00:34:01.500 --> 00:34:03.570
<v Speaker 0>We bind x to the first thing and then we

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:03.570 --> 00:34:04.860
<v Speaker 0>do another bind.

NOTE CONF {"raw":[100,100,100]}

00:34:04.860 --> 00:34:06.210
<v Speaker 0>We bind x is the next thing.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:34:06.210 --> 00:34:08.760
<v Speaker 0>And then we do a return right which does nothing.

NOTE CONF {"raw":[89,100,100,100,100,100,98,100,100,100]}

00:34:08.760 --> 00:34:11.340
<v Speaker 0>But it returns these two things combined.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:34:12.480 --> 00:34:15.419
<v Speaker 0>So we can put these parts together to say okay,

NOTE CONF {"raw":[97,100,100,100,100,100,100,100,100,100]}

00:34:15.419 --> 00:34:16.740
<v Speaker 0>first read a character.

NOTE CONF {"raw":[100,100,100,100]}

00:34:17.610 --> 00:34:19.240
<v Speaker 0>Um, Stop.

NOTE CONF {"raw":[100,100]}

00:34:19.270 --> 00:34:22.090
<v Speaker 0>If it's a new line and otherwise, read the rest

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:22.090 --> 00:34:22.870
<v Speaker 0>of the line.

NOTE CONF {"raw":[100,100,100]}

00:34:22.870 --> 00:34:26.379
<v Speaker 0>So get line is recursively defined in terms of that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,80]}

00:34:26.379 --> 00:34:26.560
<v Speaker 0>line.

NOTE CONF {"raw":[91]}

00:34:26.560 --> 00:34:30.820
<v Speaker 0>So now if the input was ABC new line def

NOTE CONF {"raw":[95,100,100,100,100,100,96,100,100,100]}

00:34:31.090 --> 00:34:31.450
<v Speaker 0>right.

NOTE CONF {"raw":[94]}

00:34:31.450 --> 00:34:34.659
<v Speaker 0>This will return the string ABC and it will have

NOTE CONF {"raw":[100,100,100,100,100,98,96,40,58,100]}

00:34:34.659 --> 00:34:35.440
<v Speaker 0>read the new line.

NOTE CONF {"raw":[100,100,100,100]}

00:34:35.440 --> 00:34:40.629
<v Speaker 0>So the remaining input is def clear enough.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:34:45.370 --> 00:34:49.330
<v Speaker 0>And notice that right return and bind.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:34:49.330 --> 00:34:52.300
<v Speaker 0>Just generalise done and sequence.

NOTE CONF {"raw":[100,100,100,100,100]}

00:34:52.389 --> 00:34:55.929
<v Speaker 0>So done is just return a the value of the

NOTE CONF {"raw":[100,100,100,100,100,91,100,100,100,100]}

00:34:55.929 --> 00:34:59.890
<v Speaker 0>unit type and sequence.

NOTE CONF {"raw":[100,100,100,100]}

00:35:00.100 --> 00:35:00.370
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:35:00.370 --> 00:35:02.590
<v Speaker 0>We've got two things that just return values of the

NOTE CONF {"raw":[100,100,100,100,100,100,94,100,100,100]}

00:35:02.590 --> 00:35:03.580
<v Speaker 0>unit type.

NOTE CONF {"raw":[100,100]}

00:35:03.880 --> 00:35:05.680
<v Speaker 0>So we return a value of the unit type.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:35:05.680 --> 00:35:07.900
<v Speaker 0>And so we do m that will return a value

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:07.900 --> 00:35:08.620
<v Speaker 0>of the unit type.

NOTE CONF {"raw":[100,100,100,100]}

00:35:08.620 --> 00:35:11.440
<v Speaker 0>So we can bind the argument of this lambda to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:11.440 --> 00:35:12.760
<v Speaker 0>the value of the unit type.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:35:12.760 --> 00:35:15.460
<v Speaker 0>And then go off and do n which will return

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:15.460 --> 00:35:16.660
<v Speaker 0>value of the unit type.

NOTE CONF {"raw":[100,100,100,100,100]}

00:35:16.660 --> 00:35:17.290
<v Speaker 0>Yes.

NOTE CONF {"raw":[100]}

00:35:19.810 --> 00:35:22.900
<v Speaker 0>The unit type is just the type written open parenthesis.

NOTE CONF {"raw":[100,95,100,100,100,100,100,100,100,73]}

00:35:22.900 --> 00:35:24.100
<v Speaker 0>Close parentheses.

NOTE CONF {"raw":[93,87]}

00:35:24.400 --> 00:35:26.620
<v Speaker 0>It has as one value the empty tuple.

NOTE CONF {"raw":[79,100,100,100,100,100,100,100]}

00:35:26.620 --> 00:35:27.490
<v Speaker 0>Open parenthesis.

NOTE CONF {"raw":[100,64]}

00:35:27.490 --> 00:35:28.720
<v Speaker 0>Close parentheses.

NOTE CONF {"raw":[100,100]}

00:35:31.060 --> 00:35:31.600
<v Speaker 0>I'm sorry.

NOTE CONF {"raw":[100,100]}

00:35:31.600 --> 00:35:32.590
<v Speaker 0>Just speak up a bit.

NOTE CONF {"raw":[100,100,100,67,67]}

00:35:45.070 --> 00:35:47.710
<v Speaker 0>If you ask what the type of that is, it's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:47.710 --> 00:35:48.730
<v Speaker 0>written the same way.

NOTE CONF {"raw":[100,100,100,100]}

00:35:50.980 --> 00:35:51.520
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:35:52.810 --> 00:35:53.770
<v Speaker 0>Good question.

NOTE CONF {"raw":[100,100]}

00:35:54.910 --> 00:35:56.290
<v Speaker 0>Anything else?

NOTE CONF {"raw":[100,100]}

00:36:08.080 --> 00:36:08.680
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:36:08.680 --> 00:36:11.650
<v Speaker 0>So now now that we've got get line.

NOTE CONF {"raw":[100,100,100,100,100,100,100,96]}

00:36:11.950 --> 00:36:13.840
<v Speaker 0>And now that we've got put string line, we can

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:13.840 --> 00:36:17.780
<v Speaker 0>do a little interactive program which I'll call echo So

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:17.780 --> 00:36:23.120
<v Speaker 0>echo says read a line behind that to line if

NOTE CONF {"raw":[100,100,100,100,100,29,100,100,100,100]}

00:36:23.120 --> 00:36:25.100
<v Speaker 0>the line is the empty string.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:36:25.100 --> 00:36:26.810
<v Speaker 0>So if we have a line with nothing in it,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:26.810 --> 00:36:27.740
<v Speaker 0>we stop.

NOTE CONF {"raw":[100,100]}

00:36:29.900 --> 00:36:33.890
<v Speaker 0>Um, otherwise do put string line of map of two

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,71]}

00:36:33.890 --> 00:36:37.610
<v Speaker 0>up of line and then do echo again.

NOTE CONF {"raw":[40,88,100,100,100,100,100,100]}

00:36:38.030 --> 00:36:40.070
<v Speaker 0>So this is very similar pattern to what we just

NOTE CONF {"raw":[56,100,100,100,100,100,100,100,100,100]}

00:36:40.070 --> 00:36:44.180
<v Speaker 0>saw with um uh, get line itself.

NOTE CONF {"raw":[100,100,100,58,100,100,100]}

00:36:44.210 --> 00:36:44.510
<v Speaker 0>Right.

NOTE CONF {"raw":[98]}

00:36:44.510 --> 00:36:47.660
<v Speaker 0>So that would keep reading characters until you see a

NOTE CONF {"raw":[100,100,93,100,100,100,100,100,100,100]}

00:36:47.660 --> 00:36:48.470
<v Speaker 0>new line.

NOTE CONF {"raw":[100,100]}

00:36:48.500 --> 00:36:51.380
<v Speaker 0>This is keep reading lines until you see an empty

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:51.380 --> 00:36:51.890
<v Speaker 0>line.

NOTE CONF {"raw":[100]}

00:36:55.700 --> 00:36:56.510
<v Speaker 0>Clear enough.

NOTE CONF {"raw":[100,100]}

00:37:01.160 --> 00:37:02.810
<v Speaker 0>So let's try this one.

NOTE CONF {"raw":[100,100,100,100,100]}

00:37:10.490 --> 00:37:11.090
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:37:11.090 --> 00:37:15.800
<v Speaker 0>So main is bound to all that.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:37:17.390 --> 00:37:17.780
<v Speaker 0>Hmm.

NOTE CONF {"raw":[89]}

00:37:21.500 --> 00:37:22.010
<v Speaker 0>Aha!

NOTE CONF {"raw":[51]}

00:37:23.300 --> 00:37:24.680
<v Speaker 0>Oh, should I make this larger?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:37:24.680 --> 00:37:26.210
<v Speaker 0>Would that make it easier to read?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:37:35.690 --> 00:37:39.230
<v Speaker 0>Okay, so I've typed in this as a test and

NOTE CONF {"raw":[100,100,100,100,100,100,71,100,100,100]}

00:37:39.230 --> 00:37:41.060
<v Speaker 0>it's echoed it in uppercase.

NOTE CONF {"raw":[84,100,47,100,100]}

00:37:49.550 --> 00:37:50.120
<v Speaker 0>Uh oh.

NOTE CONF {"raw":[93,100]}

00:37:50.390 --> 00:37:51.860
<v Speaker 0>I can't do back spaces.

NOTE CONF {"raw":[100,100,100,100,100]}

00:37:52.160 --> 00:37:52.790
<v Speaker 0>All right.

NOTE CONF {"raw":[100,100]}

00:38:07.490 --> 00:38:09.980
<v Speaker 0>And now, if I type in, just return here.

NOTE CONF {"raw":[94,100,100,100,100,100,100,100,100]}

00:38:09.980 --> 00:38:11.000
<v Speaker 0>What's going to happen?

NOTE CONF {"raw":[100,100,100,100]}

00:38:13.970 --> 00:38:14.690
<v Speaker 0>It will stop.

NOTE CONF {"raw":[98,98,100]}

00:38:15.350 --> 00:38:15.950
<v Speaker 0>And it did.

NOTE CONF {"raw":[100,100,98]}

00:38:17.480 --> 00:38:18.050
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:38:19.610 --> 00:38:22.160
<v Speaker 0>And just to prove that's really interactive.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:38:22.820 --> 00:38:24.500
<v Speaker 0>Somebody tell me what to type.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:38:28.130 --> 00:38:30.110
<v Speaker 3>Rice are delicious.

NOTE CONF {"raw":[91,77,78]}

00:38:31.280 --> 00:38:31.910
<v Speaker 0>Sorry.

NOTE CONF {"raw":[100]}

00:38:32.210 --> 00:38:34.280
<v Speaker 3>French fries are delicious.

NOTE CONF {"raw":[100,100,99,99]}

00:38:34.280 --> 00:38:38.750
<v Speaker 0>French fries are delicious.

NOTE CONF {"raw":[100,100,100,100]}

00:38:38.960 --> 00:38:39.380
<v Speaker 0>Huh?

NOTE CONF {"raw":[45]}

00:38:39.860 --> 00:38:41.450
<v Speaker 0>Uh oh, I misspelled it.

NOTE CONF {"raw":[100,100,100,100,100]}

00:38:45.800 --> 00:38:48.380
<v Speaker 0>Well, that's no good.

NOTE CONF {"raw":[96,100,100,100]}

00:38:49.730 --> 00:38:52.610
<v Speaker 0>Oh, no, I can't type.

NOTE CONF {"raw":[100,100,100,100,100]}

00:38:58.160 --> 00:38:58.460
<v Speaker 2>Ah.

NOTE CONF {"raw":[90]}

00:39:01.100 --> 00:39:01.700
<v Speaker 0>Last time.

NOTE CONF {"raw":[100,100]}

00:39:01.700 --> 00:39:03.380
<v Speaker 0>I will give up if I can't do it right

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:03.380 --> 00:39:04.160
<v Speaker 0>this time.

NOTE CONF {"raw":[100,100]}

00:39:09.290 --> 00:39:10.100
<v Speaker 0>Yay!

NOTE CONF {"raw":[95]}

00:39:11.690 --> 00:39:12.350
<v Speaker 0>Ha ha ha!

NOTE CONF {"raw":[36,43,40]}

00:39:19.320 --> 00:39:19.980
<v Speaker 5>Okay.

NOTE CONF {"raw":[100]}

00:39:20.610 --> 00:39:21.330
<v Speaker 2>Very good.

NOTE CONF {"raw":[100,100]}

00:39:25.830 --> 00:39:30.510
<v Speaker 0>So there you see something very similar running.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:39:32.190 --> 00:39:32.670
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:39:32.670 --> 00:39:37.170
<v Speaker 0>So now we've got a convenient abbreviation for this called

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:37.170 --> 00:39:38.400
<v Speaker 0>do notation.

NOTE CONF {"raw":[71,100]}

00:39:41.130 --> 00:39:45.750
<v Speaker 0>So before I wrote bind and then x and so

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:45.750 --> 00:39:46.080
<v Speaker 0>on.

NOTE CONF {"raw":[100]}

00:39:46.110 --> 00:39:49.320
<v Speaker 0>The way our mind works right.

NOTE CONF {"raw":[100,100,100,100,100,93]}

00:39:49.320 --> 00:39:51.120
<v Speaker 0>It's much easier to read things the way we do

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:51.120 --> 00:39:51.360
<v Speaker 0>it in.

NOTE CONF {"raw":[100,100]}

00:39:51.360 --> 00:39:54.810
<v Speaker 0>Let's first you give the short name for the thing,

NOTE CONF {"raw":[86,100,100,100,100,100,100,100,100,100]}

00:39:55.050 --> 00:39:59.130
<v Speaker 0>and then you give the long expression that evaluates to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:59.130 --> 00:39:59.730
<v Speaker 0>the thing.

NOTE CONF {"raw":[100,100]}

00:39:59.730 --> 00:40:02.790
<v Speaker 0>So here we've got longer value expression that evaluates to

NOTE CONF {"raw":[100,100,100,100,61,64,100,100,100,100]}

00:40:02.790 --> 00:40:07.170
<v Speaker 0>the thing and then short name for the thing.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:40:07.200 --> 00:40:09.120
<v Speaker 0>So a better way to do this, just as a

NOTE CONF {"raw":[100,99,100,100,100,100,100,100,100,100]}

00:40:09.120 --> 00:40:13.980
<v Speaker 0>matter of engineering, is to say X gets bound to

NOTE CONF {"raw":[100,100,100,100,100,100,91,100,100,100]}

00:40:13.980 --> 00:40:14.910
<v Speaker 0>get char.

NOTE CONF {"raw":[100,58]}

00:40:15.630 --> 00:40:17.700
<v Speaker 0>And then as before, if X is new line then

NOTE CONF {"raw":[100,100,100,100,100,100,100,70,70,100]}

00:40:17.700 --> 00:40:18.750
<v Speaker 0>return empty.

NOTE CONF {"raw":[100,100]}

00:40:18.780 --> 00:40:22.710
<v Speaker 0>Otherwise, recursively we have a do with two things in

NOTE CONF {"raw":[100,100,100,100,71,97,100,100,100,76]}

00:40:22.710 --> 00:40:22.830
<v Speaker 0>it.

NOTE CONF {"raw":[97]}

00:40:22.830 --> 00:40:28.110
<v Speaker 0>Bind x to get line and then return x context.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,43]}

00:40:28.110 --> 00:40:31.020
<v Speaker 0>So this is just another way of saying this.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:40:31.020 --> 00:40:35.970
<v Speaker 0>And this is called do notation okay.

NOTE CONF {"raw":[100,100,100,100,71,100,100]}

00:40:38.640 --> 00:40:40.620
<v Speaker 0>Now very important.

NOTE CONF {"raw":[100,100,100]}

00:40:40.620 --> 00:40:43.650
<v Speaker 0>So do notation is built into Haskell.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:40:43.650 --> 00:40:45.300
<v Speaker 0>So this is um.

NOTE CONF {"raw":[100,100,100,100]}

00:40:48.480 --> 00:40:49.710
<v Speaker 0>This is great.

NOTE CONF {"raw":[100,100,100]}

00:40:50.610 --> 00:40:51.120
<v Speaker 0>Uh.

NOTE CONF {"raw":[100]}

00:40:53.400 --> 00:40:53.700
<v Speaker 0>Right.

NOTE CONF {"raw":[84]}

00:40:53.700 --> 00:40:56.130
<v Speaker 0>This is very convenient notation to use.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:40:56.130 --> 00:41:00.060
<v Speaker 0>But it's defined in terms of this which is just

NOTE CONF {"raw":[100,97,100,100,100,100,100,100,100,100]}

00:41:00.060 --> 00:41:01.500
<v Speaker 0>using lambda binding.

NOTE CONF {"raw":[100,100,100]}

00:41:04.440 --> 00:41:06.720
<v Speaker 0>So here's the important thing.

NOTE CONF {"raw":[100,100,100,100,100]}

00:41:07.350 --> 00:41:08.580
<v Speaker 0>So um.

NOTE CONF {"raw":[100,100]}

00:41:11.050 --> 00:41:16.990
<v Speaker 0>Back in 1987, we'd started the Haskell Committee, and I

NOTE CONF {"raw":[100,100,100,64,100,100,100,100,100,100]}

00:41:16.990 --> 00:41:20.080
<v Speaker 0>was a young lecturer at Glasgow University on the other

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:20.080 --> 00:41:21.190
<v Speaker 0>side of the country.

NOTE CONF {"raw":[100,100,100,100]}

00:41:22.000 --> 00:41:26.770
<v Speaker 0>Uh, Eugenio Maggi was a PhD student here, and he

NOTE CONF {"raw":[100,100,74,100,100,96,100,100,100,100]}

00:41:26.770 --> 00:41:29.980
<v Speaker 0>had come up with this idea of using monads as

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:29.980 --> 00:41:30.580
<v Speaker 0>a way.

NOTE CONF {"raw":[100,100]}

00:41:30.610 --> 00:41:33.130
<v Speaker 0>Monad is the name for this thing, by the way.

NOTE CONF {"raw":[93,100,100,100,100,100,100,100,100,100]}

00:41:33.670 --> 00:41:36.970
<v Speaker 0>Um, something with a return and a bind is called

NOTE CONF {"raw":[57,100,100,100,100,100,100,100,100,100]}

00:41:36.970 --> 00:41:37.630
<v Speaker 0>a monad.

NOTE CONF {"raw":[100,100]}

00:41:39.220 --> 00:41:41.080
<v Speaker 0>Um, he had come up with.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:41:43.150 --> 00:41:45.820
<v Speaker 0>He'd come up with, uh, monads as a way of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:45.820 --> 00:41:49.690
<v Speaker 0>structuring the semantics of programming languages.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:41:50.080 --> 00:41:52.060
<v Speaker 0>And so I came over and talked with him, and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:52.060 --> 00:41:54.190
<v Speaker 0>he sort of explained to me what was going on.

NOTE CONF {"raw":[90,100,100,100,100,100,100,100,100,100]}

00:41:55.270 --> 00:41:57.280
<v Speaker 0>Um, and then I went back and I said, oh,

NOTE CONF {"raw":[100,100,100,100,100,100,56,98,100,100]}

00:41:57.280 --> 00:42:00.190
<v Speaker 0>this would be a good way of structuring Haskell programs.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:00.940 --> 00:42:02.500
<v Speaker 0>And the point was, right.

NOTE CONF {"raw":[100,100,100,100,100]}

00:42:02.500 --> 00:42:05.350
<v Speaker 0>We had a preliminary Haskell implementation.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:42:05.350 --> 00:42:10.750
<v Speaker 0>Then I didn't need to wait for Will Partain, who

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,99,86]}

00:42:10.750 --> 00:42:15.610
<v Speaker 0>was in charge of the Haskell implementation, to implement do.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,92]}

00:42:16.360 --> 00:42:19.690
<v Speaker 0>I could just define something with an operator I did

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:19.690 --> 00:42:20.170
<v Speaker 0>not use.

NOTE CONF {"raw":[100,100]}

00:42:20.170 --> 00:42:21.610
<v Speaker 0>Greater than greater than equal.

NOTE CONF {"raw":[100,100,100,100,100]}

00:42:21.610 --> 00:42:23.500
<v Speaker 0>I don't remember what I used.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:42:24.130 --> 00:42:28.240
<v Speaker 0>Greater than greater than equal was proposed by Andy Gordon,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:28.600 --> 00:42:31.150
<v Speaker 0>who also happens to be a graduate of the University

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:31.150 --> 00:42:31.900
<v Speaker 0>of Edinburgh.

NOTE CONF {"raw":[100,100]}

00:42:32.710 --> 00:42:37.510
<v Speaker 0>Um, and he was an undergraduate here.

NOTE CONF {"raw":[79,100,96,96,100,100,100]}

00:42:37.510 --> 00:42:41.350
<v Speaker 0>He was a graduate student at Cambridge, which he was

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,70]}

00:42:41.350 --> 00:42:43.810
<v Speaker 0>where he was at the time when he proposed using

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:43.810 --> 00:42:44.680
<v Speaker 0>this symbol.

NOTE CONF {"raw":[100,100]}

00:42:45.640 --> 00:42:45.970
<v Speaker 0>Uh, right.

NOTE CONF {"raw":[62,100]}

00:42:45.970 --> 00:42:50.470
<v Speaker 0>But you can define any operator you want in Haskell.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:50.470 --> 00:42:53.140
<v Speaker 0>And the point is, if you need something that does

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:53.140 --> 00:42:56.080
<v Speaker 0>some binding, you can use lambdas to do it.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:42:57.310 --> 00:42:57.550
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:42:57.550 --> 00:43:00.850
<v Speaker 0>So I'm teaching you about this neat programming language feature

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:00.850 --> 00:43:02.350
<v Speaker 0>that I implemented.

NOTE CONF {"raw":[100,100,100]}

00:43:03.730 --> 00:43:08.480
<v Speaker 0>But the key point is you can do the same.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:08.960 --> 00:43:09.290
<v Speaker 0>Right.

NOTE CONF {"raw":[98]}

00:43:09.290 --> 00:43:13.580
<v Speaker 0>If you need something that binds new stuff.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:43:13.610 --> 00:43:15.830
<v Speaker 0>You can use lambdas to do it.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:43:15.830 --> 00:43:20.120
<v Speaker 0>So Haskell is sort of a programming language that lets

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:20.120 --> 00:43:23.780
<v Speaker 0>you define your own programming language within Haskell.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:43:24.770 --> 00:43:27.110
<v Speaker 0>So monads have now been used so much that they're

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:27.110 --> 00:43:28.160
<v Speaker 0>kind of built in.

NOTE CONF {"raw":[100,100,100,100]}

00:43:28.160 --> 00:43:30.560
<v Speaker 0>And we've got this convenient do notation.

NOTE CONF {"raw":[100,100,100,100,100,67,100]}

00:43:31.400 --> 00:43:35.000
<v Speaker 0>But the point is all the important stuff is up

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:35.000 --> 00:43:35.690
<v Speaker 0>here.

NOTE CONF {"raw":[100]}

00:43:35.810 --> 00:43:37.610
<v Speaker 0>And you can do that yourself.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:43:37.610 --> 00:43:41.090
<v Speaker 0>So if you want to invent your own, um, language

NOTE CONF {"raw":[99,100,100,100,100,100,100,100,87,100]}

00:43:41.090 --> 00:43:42.620
<v Speaker 0>features, you can do it.

NOTE CONF {"raw":[100,100,100,100,100]}

00:43:42.620 --> 00:43:45.350
<v Speaker 0>And that's one of the things that makes Haskell so

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:45.350 --> 00:43:46.100
<v Speaker 0>powerful.

NOTE CONF {"raw":[100]}

00:43:50.390 --> 00:43:53.270
<v Speaker 0>And then here's echo rewritten and do notation.

NOTE CONF {"raw":[100,100,100,91,100,56,65,100]}

00:43:53.270 --> 00:43:53.510
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:43:53.510 --> 00:43:56.510
<v Speaker 0>So you just say do and a curly brace and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:56.510 --> 00:43:58.910
<v Speaker 0>then variable name arrow.

NOTE CONF {"raw":[100,100,100,100]}

00:43:58.910 --> 00:44:02.180
<v Speaker 0>And then something of a type uh I o of

NOTE CONF {"raw":[100,100,100,100,100,100,72,82,82,100]}

00:44:02.180 --> 00:44:02.810
<v Speaker 0>blah.

NOTE CONF {"raw":[100]}

00:44:05.390 --> 00:44:08.600
<v Speaker 0>And again do curly braces, something of type I o

NOTE CONF {"raw":[100,100,100,100,100,100,95,100,78,78]}

00:44:08.600 --> 00:44:09.170
<v Speaker 0>of blah.

NOTE CONF {"raw":[100,88]}

00:44:09.170 --> 00:44:12.410
<v Speaker 0>And this is very important because the most popular language

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,65]}

00:44:12.410 --> 00:44:16.220
<v Speaker 0>at the time with C and in C you use

NOTE CONF {"raw":[100,100,100,99,100,100,100,100,63,100]}

00:44:16.220 --> 00:44:20.030
<v Speaker 0>curly braces and semicolons for commands.

NOTE CONF {"raw":[100,100,100,97,100,100]}

00:44:20.030 --> 00:44:22.700
<v Speaker 0>So this made Haskell look a little bit like C.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:27.470 --> 00:44:27.680
<v Speaker 0>Right.

NOTE CONF {"raw":[61]}

00:44:27.680 --> 00:44:31.220
<v Speaker 0>So the general meaning is that whenever you write x

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:31.220 --> 00:44:35.960
<v Speaker 0>drawn from E semicolon and then some stuff that becomes

NOTE CONF {"raw":[100,100,86,94,100,100,100,100,100,100]}

00:44:35.960 --> 00:44:40.910
<v Speaker 0>e bind lambda x arrow and then the same stuff,

NOTE CONF {"raw":[100,100,100,100,91,100,100,100,100,100]}

00:44:41.060 --> 00:44:46.250
<v Speaker 0>if you just write e that becomes E um sequence

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:46.250 --> 00:44:48.800
<v Speaker 0>and then some stuff and notice that E sequence.

NOTE CONF {"raw":[100,100,100,100,100,100,57,100,100]}

00:44:48.800 --> 00:44:52.280
<v Speaker 0>And then some stuff could also be written as um

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,95]}

00:44:52.280 --> 00:44:58.190
<v Speaker 0>e bind backslash uh unit and then some stuff.

NOTE CONF {"raw":[100,100,100,65,100,100,100,100,100]}

00:45:00.500 --> 00:45:01.400
<v Speaker 0>So right.

NOTE CONF {"raw":[100,100]}

00:45:01.400 --> 00:45:03.680
<v Speaker 0>If we had do x one from e1, x2 from

NOTE CONF {"raw":[100,100,100,100,100,100,100,78,100,100]}

00:45:03.680 --> 00:45:07.050
<v Speaker 0>E to E3 and so on, that becomes e1, bind

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:07.050 --> 00:45:10.350
<v Speaker 0>x1, e2, bind to x2, and so on.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:45:10.920 --> 00:45:13.770
<v Speaker 0>So do is just an abbreviation for stuff we've already

NOTE CONF {"raw":[100,100,97,100,100,100,100,100,100,100]}

00:45:13.770 --> 00:45:14.310
<v Speaker 0>got.

NOTE CONF {"raw":[100]}

00:45:17.820 --> 00:45:20.430
<v Speaker 0>So I've been using this word monad.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:45:21.660 --> 00:45:24.570
<v Speaker 0>Um, the word monad comes from category theory.

NOTE CONF {"raw":[84,100,100,100,100,100,100,100]}

00:45:24.570 --> 00:45:29.280
<v Speaker 0>That's what inspired, um, Eugenio Homology when he first did

NOTE CONF {"raw":[100,100,100,100,98,46,100,100,100,100]}

00:45:29.280 --> 00:45:29.910
<v Speaker 0>his semantics.

NOTE CONF {"raw":[100,100]}

00:45:29.910 --> 00:45:32.670
<v Speaker 0>There's this construct that had been sitting around in category

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:32.670 --> 00:45:35.130
<v Speaker 0>theory since the 1950s called a monad.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:45:36.990 --> 00:45:40.080
<v Speaker 0>Um, and it was actually all this that convinced me

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:40.080 --> 00:45:41.100
<v Speaker 0>it was worth learning.

NOTE CONF {"raw":[100,100,100,100]}

00:45:41.100 --> 00:45:46.290
<v Speaker 0>Category theory and category theory since then has inspired other

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:46.290 --> 00:45:49.350
<v Speaker 0>useful ideas for programming languages.

NOTE CONF {"raw":[100,100,100,100,100]}

00:45:50.940 --> 00:45:55.440
<v Speaker 0>So, um, I'll just write N, followed by x gets

NOTE CONF {"raw":[100,97,100,100,100,100,100,100,100,100]}

00:45:55.440 --> 00:45:58.920
<v Speaker 0>V to stand for term n with the variable x

NOTE CONF {"raw":[100,100,100,100,100,98,100,100,100,100]}

00:45:58.920 --> 00:46:00.060
<v Speaker 0>replaced by the value v.

NOTE CONF {"raw":[100,100,100,100,100]}

00:46:00.060 --> 00:46:03.870
<v Speaker 0>So if I've got x times x with x replaced

NOTE CONF {"raw":[100,61,100,100,100,100,100,100,100,100]}

00:46:03.870 --> 00:46:06.270
<v Speaker 0>by three, that becomes three times three.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:46:06.390 --> 00:46:09.090
<v Speaker 0>And I think you've all learned the beta law by

NOTE CONF {"raw":[84,100,100,100,100,100,100,76,100,100]}

00:46:09.090 --> 00:46:13.560
<v Speaker 0>now, which is that lambda x n applied to v

NOTE CONF {"raw":[100,100,100,100,100,100,99,100,100,100]}

00:46:13.560 --> 00:46:15.390
<v Speaker 0>becomes n with x gets v.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:46:15.390 --> 00:46:19.680
<v Speaker 0>So for instance lambda x x times x applied to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:19.680 --> 00:46:22.830
<v Speaker 0>three is the same as x times x with x

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:22.830 --> 00:46:26.280
<v Speaker 0>replaced by three, which is the same as three times

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:26.280 --> 00:46:26.880
<v Speaker 0>three.

NOTE CONF {"raw":[100]}

00:46:27.960 --> 00:46:29.490
<v Speaker 0>That should be familiar to you.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:46:31.770 --> 00:46:35.940
<v Speaker 0>And how many people have bumped into the name monoid?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:36.180 --> 00:46:39.360
<v Speaker 0>Monoid is standard in algebra, so a few of you

NOTE CONF {"raw":[100,100,100,100,100,100,97,100,100,100]}

00:46:39.360 --> 00:46:42.150
<v Speaker 0>have bumped into it before, but it's a very standard

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:42.150 --> 00:46:43.020
<v Speaker 0>term in algebra.

NOTE CONF {"raw":[100,100,100]}

00:46:43.020 --> 00:46:45.960
<v Speaker 0>It's how many people run into the term group in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:45.960 --> 00:46:47.970
<v Speaker 0>algebra, right?

NOTE CONF {"raw":[100,55]}

00:46:47.970 --> 00:46:48.810
<v Speaker 0>A few more of you.

NOTE CONF {"raw":[100,100,100,100,100]}

00:46:48.810 --> 00:46:50.910
<v Speaker 0>So a monoid is like a group, but it has

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:50.910 --> 00:46:52.260
<v Speaker 0>a bit less structure.

NOTE CONF {"raw":[100,100,100,100]}

00:46:52.410 --> 00:46:57.510
<v Speaker 0>A group has an operator, a unit and an inverse,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:57.840 --> 00:47:01.200
<v Speaker 0>and a monoid just has an operator and a unit.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:01.200 --> 00:47:02.340
<v Speaker 0>No inverse.

NOTE CONF {"raw":[100,100]}

00:47:03.360 --> 00:47:05.610
<v Speaker 0>So it just says, you've got an operator, which I'll

NOTE CONF {"raw":[100,100,100,98,92,100,100,100,100,100]}

00:47:05.610 --> 00:47:09.120
<v Speaker 0>write here is O plus and it value you.

NOTE CONF {"raw":[96,100,77,45,100,100,55,100,87]}

00:47:09.300 --> 00:47:11.880
<v Speaker 0>And you must be the unit for O plus.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:47:11.880 --> 00:47:13.770
<v Speaker 0>And O plus must be associative.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:47:13.950 --> 00:47:19.440
<v Speaker 0>So you um O plus x is x x, o

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:19.440 --> 00:47:23.220
<v Speaker 0>plus u is x and x plus y plus z

NOTE CONF {"raw":[100,91,100,100,100,100,100,100,100,100]}

00:47:23.250 --> 00:47:26.460
<v Speaker 0>is the same as x plus y plus z parentheses

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,96]}

00:47:26.460 --> 00:47:27.240
<v Speaker 0>each way.

NOTE CONF {"raw":[100,100]}

00:47:27.240 --> 00:47:27.570
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:47:27.570 --> 00:47:30.180
<v Speaker 0>And we bump into monoids all the time.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:47:31.290 --> 00:47:31.560
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:47:31.560 --> 00:47:34.110
<v Speaker 0>Monoids are pretty much what we use in a fold.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,78,100]}

00:47:35.220 --> 00:47:38.430
<v Speaker 0>Um, so plus and zero times and one or in

NOTE CONF {"raw":[100,100,100,100,100,100,78,100,100,76]}

00:47:38.430 --> 00:47:43.470
<v Speaker 0>false and in true, um, concatenate and the empty list.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:43.470 --> 00:47:46.590
<v Speaker 0>And we've already seen write sequence and done these are

NOTE CONF {"raw":[100,100,100,100,79,100,100,100,100,100]}

00:47:46.590 --> 00:47:48.900
<v Speaker 0>all examples of monoids.

NOTE CONF {"raw":[100,100,100,100]}

00:47:51.210 --> 00:47:54.300
<v Speaker 0>So as we saw right a monad is almost the

NOTE CONF {"raw":[100,100,100,100,62,100,100,100,100,100]}

00:47:54.300 --> 00:47:55.080
<v Speaker 0>same.

NOTE CONF {"raw":[100]}

00:47:56.160 --> 00:47:57.330
<v Speaker 0>Um, sorry we haven't seen that yet.

NOTE CONF {"raw":[91,100,98,99,100,100,100]}

00:47:57.330 --> 00:47:57.510
<v Speaker 0>Right.

NOTE CONF {"raw":[90]}

00:47:57.510 --> 00:47:59.280
<v Speaker 0>We saw this with sequencing.

NOTE CONF {"raw":[100,100,100,100,100]}

00:47:59.280 --> 00:48:01.590
<v Speaker 0>So a monads almost the same.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:48:01.590 --> 00:48:04.720
<v Speaker 0>So the thing that becomes done that becomes return V,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:05.470 --> 00:48:10.150
<v Speaker 0>so we return V followed by lambda xm becomes um

NOTE CONF {"raw":[100,97,86,100,100,100,100,100,100,100]}

00:48:10.150 --> 00:48:14.350
<v Speaker 0>lambda xm applied to v or m with x replaced

NOTE CONF {"raw":[100,85,100,100,100,100,100,100,100,100]}

00:48:14.350 --> 00:48:18.850
<v Speaker 0>by v, and then m followed by lambda x return

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:18.850 --> 00:48:22.450
<v Speaker 0>x where we can even just say m bind return

NOTE CONF {"raw":[100,97,100,100,100,100,100,100,96,100]}

00:48:22.450 --> 00:48:24.520
<v Speaker 0>is the same as m, right?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:48:24.520 --> 00:48:25.390
<v Speaker 0>So what does this say?

NOTE CONF {"raw":[100,100,100,83,95]}

00:48:25.390 --> 00:48:29.620
<v Speaker 0>It says do m get the value it returns, bind

NOTE CONF {"raw":[74,100,100,100,100,100,100,100,100,100]}

00:48:29.620 --> 00:48:32.350
<v Speaker 0>that to x and then do nothing else and return

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:32.350 --> 00:48:33.160
<v Speaker 0>that value.

NOTE CONF {"raw":[100,100]}

00:48:33.160 --> 00:48:35.920
<v Speaker 0>So obviously that's the same as just doing m.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:48:36.880 --> 00:48:40.480
<v Speaker 0>And finally here are two different things where only the

NOTE CONF {"raw":[100,100,100,100,100,100,100,99,100,100]}

00:48:40.480 --> 00:48:42.700
<v Speaker 0>parentheses change and they mean the same thing.

NOTE CONF {"raw":[100,76,100,100,100,100,100,100]}

00:48:42.700 --> 00:48:46.180
<v Speaker 0>So it says do m bind the result to x,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:46.180 --> 00:48:51.700
<v Speaker 0>do n bind the result to y, and then do

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:51.700 --> 00:48:52.240
<v Speaker 0>oh.

NOTE CONF {"raw":[54]}

00:48:52.570 --> 00:48:55.600
<v Speaker 0>And this is do m bind the result to x,

NOTE CONF {"raw":[93,100,100,100,100,100,100,100,100,100]}

00:48:55.600 --> 00:48:58.930
<v Speaker 0>do n bind the result to y and then do

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:58.930 --> 00:48:59.200
<v Speaker 0>oh.

NOTE CONF {"raw":[61]}

00:49:00.130 --> 00:49:03.220
<v Speaker 0>So it just says both ways of grouping it have

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:03.220 --> 00:49:03.940
<v Speaker 0>the same effect.

NOTE CONF {"raw":[100,100,100]}

00:49:03.940 --> 00:49:06.340
<v Speaker 0>They do what M does, they bind the result to

NOTE CONF {"raw":[100,100,100,48,100,100,100,100,100,100]}

00:49:06.340 --> 00:49:08.560
<v Speaker 0>X, they do what n does, they bind the result

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:08.560 --> 00:49:10.240
<v Speaker 0>to y, and then they do.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:49:10.240 --> 00:49:10.630
<v Speaker 0>Oh.

NOTE CONF {"raw":[72]}

00:49:12.790 --> 00:49:13.060
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:49:13.060 --> 00:49:15.490
<v Speaker 0>So it doesn't matter where you put the parentheses.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:49:18.490 --> 00:49:21.940
<v Speaker 0>And that is a monad.

NOTE CONF {"raw":[100,100,100,100,100]}

00:49:23.350 --> 00:49:27.460
<v Speaker 0>So I have a, a colleague that says, you know,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:27.460 --> 00:49:30.550
<v Speaker 0>there's only one thing we did wrong with monads.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:49:31.870 --> 00:49:34.030
<v Speaker 0>We shouldn't have called the monads.

NOTE CONF {"raw":[100,100,100,100,69,100]}

00:49:34.900 --> 00:49:36.100
<v Speaker 0>This is Simon Peyton Jones.

NOTE CONF {"raw":[100,100,100,100,99]}

00:49:36.100 --> 00:49:36.430
<v Speaker 0>It's time.

NOTE CONF {"raw":[50,94]}

00:49:36.430 --> 00:49:39.040
<v Speaker 0>Peyton Jones is the main editor of the Haskell Report.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:39.040 --> 00:49:43.450
<v Speaker 0>He's still the main maintainer of GHC of the version

NOTE CONF {"raw":[98,100,100,100,100,100,100,100,100,100]}

00:49:43.450 --> 00:49:44.620
<v Speaker 0>of Haskell that you use.

NOTE CONF {"raw":[100,100,100,100,100]}

00:49:44.620 --> 00:49:48.730
<v Speaker 0>It's called GHC because he and John Hughes and I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:48.760 --> 00:49:53.290
<v Speaker 0>were all professors at Glasgow University at the time that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:53.290 --> 00:49:57.700
<v Speaker 0>this was done, so it's still the GHC Glasgow Haskell

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:57.700 --> 00:49:58.480
<v Speaker 0>Compiler.

NOTE CONF {"raw":[100]}

00:49:58.960 --> 00:50:03.230
<v Speaker 0>Sometimes people say Glorious Haskell compiler, but it's really Glasgow.

NOTE CONF {"raw":[100,100,100,100,100,100,100,98,100,100]}

00:50:03.440 --> 00:50:05.870
<v Speaker 0>I hate to say that to people in Edinburgh, but

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:50:05.870 --> 00:50:07.130
<v Speaker 0>it's really Glasgow.

NOTE CONF {"raw":[100,100,100]}

00:50:08.960 --> 00:50:12.860
<v Speaker 0>So anyhow, Simon says, you know, there's only one thing

NOTE CONF {"raw":[100,100,100,100,58,58,100,100,100,100]}

00:50:12.860 --> 00:50:14.300
<v Speaker 0>wrong with monads.

NOTE CONF {"raw":[100,100,100]}

00:50:14.420 --> 00:50:15.620
<v Speaker 0>It's a very simple idea.

NOTE CONF {"raw":[100,100,100,100,100]}

00:50:15.620 --> 00:50:17.150
<v Speaker 0>You just have two operators.

NOTE CONF {"raw":[100,100,100,100,100]}

00:50:17.150 --> 00:50:20.570
<v Speaker 0>They satisfy these three simple laws, but we shouldn't have

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:50:20.570 --> 00:50:21.410
<v Speaker 0>called it monad.

NOTE CONF {"raw":[100,100,100]}

00:50:21.440 --> 00:50:23.540
<v Speaker 0>Everybody gets scared by monad.

NOTE CONF {"raw":[100,100,100,100,100]}

00:50:23.570 --> 00:50:26.210
<v Speaker 0>We should have called it warm fuzzy thing.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:50:28.910 --> 00:50:31.370
<v Speaker 0>So I will stop there and can tell you more

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:50:31.370 --> 00:50:32.720
<v Speaker 0>about monads tomorrow.

NOTE CONF {"raw":[100,100,100]}

00:50:32.750 --> 00:50:33.980
<v Speaker 0>Thank you very much.

NOTE CONF {"raw":[100,100,100,100]}

00:50:51.320 --> 00:50:52.550
<v Speaker 3>You got clap every time.

NOTE CONF {"raw":[100,100,100,100,100]}

00:50:52.910 --> 00:50:53.420
<v Speaker 3>Sorry.

NOTE CONF {"raw":[100]}

00:50:53.420 --> 00:50:55.670
<v Speaker 6>You got a clap every time.

NOTE CONF {"raw":[86,87,100,100,100,100]}

00:50:57.050 --> 00:50:58.040
<v Speaker 6>You're doing something right.

NOTE CONF {"raw":[41,100,100,100]}

00:53:57.130 --> 00:53:57.880
<v Speaker 7>Life.

NOTE CONF {"raw":[100]}

00:53:57.880 --> 00:54:00.610
<v Speaker 7>There are memories that will never leave us.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:54:19.570 --> 00:54:25.660
<v Unknown>Oh, come on, come on, come on, come on.

NOTE CONF {"raw":[72,100,100,100,100,100,100,100,100]}

00:54:26.350 --> 00:54:33.250
<v Unknown>I'll make you feel like you on my own.

NOTE CONF {"raw":[100,100,100,100,100,98,87,95,100]}

00:54:33.250 --> 00:54:34.330
<v Unknown>And make.

NOTE CONF {"raw":[56,68]}

00:54:36.490 --> 00:54:37.720
<v Unknown>Yeah.

NOTE CONF {"raw":[87]}

00:54:37.720 --> 00:54:41.800
<v Unknown>I do not give you everything that a woman possibly

NOTE CONF {"raw":[97,54,85,93,52,100,99,100,100,100]}

00:54:41.800 --> 00:54:42.280
<v Unknown>can.

NOTE CONF {"raw":[100]}

00:54:42.580 --> 00:54:44.050
<v Unknown>Honey, you know I did.

NOTE CONF {"raw":[88,100,100,100,96]}

00:54:44.410 --> 00:54:48.130
<v Unknown>And each time I tell myself that I don't think

NOTE CONF {"raw":[100,100,100,100,100,100,92,94,36,100]}

00:54:48.130 --> 00:54:48.880
<v Unknown>I've had enough.

NOTE CONF {"raw":[100,100,100]}

00:54:49.510 --> 00:54:49.930
<v Unknown>Come on.

NOTE CONF {"raw":[76,76]}

00:54:49.930 --> 00:54:54.130
<v Unknown>I want to show you, baby, that a woman can

NOTE CONF {"raw":[71,54,54,100,100,99,84,90,100,62]}

00:54:54.130 --> 00:54:54.760
<v Unknown>be tough.

NOTE CONF {"raw":[92,74]}

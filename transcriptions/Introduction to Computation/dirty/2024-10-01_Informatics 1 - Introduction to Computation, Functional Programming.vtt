WEBVTT

00:00:03.000 --> 00:00:03.180
<v Unknown>All.

NOTE CONF {"raw":[75]}

00:00:05.460 --> 00:00:07.530
<v Unknown>Right, let's let's start.

NOTE CONF {"raw":[100,100,100,100]}

00:00:07.530 --> 00:00:08.520
<v Speaker 0>Please sit down.

NOTE CONF {"raw":[100,100,100]}

00:00:17.220 --> 00:00:19.950
<v Speaker 0>So I've been asked to again remind you of this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:00:19.950 --> 00:00:22.440
<v Speaker 0>event that's happening today.

NOTE CONF {"raw":[100,100,100,100]}

00:00:22.440 --> 00:00:28.560
<v Speaker 0>Tomorrow Thursday careers event with employers coming to, um, meet

NOTE CONF {"raw":[100,100,100,97,100,100,100,100,99,100]}

00:00:28.560 --> 00:00:33.750
<v Speaker 0>students, uh, with um, it's in McEwan's Hall, McEwan Hall,

NOTE CONF {"raw":[100,86,100,100,100,100,35,98,80,100]}

00:00:33.750 --> 00:00:35.250
<v Speaker 0>which is in George Square.

NOTE CONF {"raw":[100,100,100,100,100]}

00:00:35.250 --> 00:00:42.000
<v Speaker 0>And, um, uh, opportunities include things like, uh, internships, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,65,100,100]}

00:00:42.780 --> 00:00:46.770
<v Speaker 0>uh, which are also available sometimes for students in the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:00:46.770 --> 00:00:48.090
<v Speaker 0>summer of their first year.

NOTE CONF {"raw":[100,100,100,100,100]}

00:00:48.090 --> 00:00:48.750
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:00:48.750 --> 00:00:50.700
<v Speaker 0>So might be of interest.

NOTE CONF {"raw":[100,100,100,100,100]}

00:00:51.090 --> 00:00:53.070
<v Speaker 0>Um, or if you want to see who might be

NOTE CONF {"raw":[100,100,100,100,96,100,100,100,100,100]}

00:00:53.070 --> 00:00:56.190
<v Speaker 0>wanting to employ you in four years when you're finished.

NOTE CONF {"raw":[100,100,100,100,100,79,100,100,100,100]}

00:00:57.240 --> 00:00:57.930
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:00:59.250 --> 00:01:03.390
<v Speaker 0>Um So for today, we have, uh, this music here.

NOTE CONF {"raw":[100,100,100,100,100,100,89,100,100,100]}

00:01:03.390 --> 00:01:04.260
<v Speaker 0>This is, um.

NOTE CONF {"raw":[100,100,100]}

00:01:04.530 --> 00:01:06.270
<v Speaker 0>Sorry, I wanted to explain this.

NOTE CONF {"raw":[100,100,61,100,100,100]}

00:01:06.270 --> 00:01:10.380
<v Speaker 0>This is, um, uh, an eight year old singing, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,84]}

00:01:10.380 --> 00:01:13.350
<v Speaker 0>the Queen of the night aria from Magic Flute, which

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:13.350 --> 00:01:14.850
<v Speaker 0>is a famous, uh, piece of music.

NOTE CONF {"raw":[100,100,100,73,100,100,100]}

00:01:14.850 --> 00:01:16.020
<v Speaker 0>Very difficult to sing.

NOTE CONF {"raw":[100,100,100,100]}

00:01:16.020 --> 00:01:19.560
<v Speaker 0>And, um, and it's funny to watch her as she

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:19.560 --> 00:01:20.430
<v Speaker 0>does this.

NOTE CONF {"raw":[100,100]}

00:01:20.460 --> 00:01:22.380
<v Speaker 0>Um, so I'll just play.

NOTE CONF {"raw":[100,100,100,100,100]}

00:01:22.380 --> 00:01:23.340
<v Unknown>This for a couple of minutes.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:01:24.780 --> 00:01:34.350
<v Unknown>It was a powerful thought for the end of the

NOTE CONF {"raw":[95,96,96,95,90,71,52,47,61,100]}

00:01:34.350 --> 00:01:35.070
<v Unknown>film.

NOTE CONF {"raw":[90]}

00:01:36.630 --> 00:01:39.120
<v Speaker 1>Which is firstly.

NOTE CONF {"raw":[98,99,99]}

00:01:39.390 --> 00:01:48.120
<v Unknown>So that although these truths are the reference for her

NOTE CONF {"raw":[100,100,83,100,71,100,92,92,100,100]}

00:01:48.120 --> 00:01:58.350
<v Unknown>father to have a new birth mother with the problem

NOTE CONF {"raw":[100,100,94,94,91,91,68,77,70,71]}

00:01:58.350 --> 00:01:58.590
<v Unknown>of.

NOTE CONF {"raw":[68]}

00:02:03.100 --> 00:02:06.820
<v Unknown>000.

NOTE CONF {"raw":[81]}

00:02:13.060 --> 00:02:13.720
<v Unknown>Oh.

NOTE CONF {"raw":[100]}

00:02:17.020 --> 00:02:25.660
<v Unknown>000000.

NOTE CONF {"raw":[100]}

00:02:31.900 --> 00:02:37.120
<v Unknown>To die for me.

NOTE CONF {"raw":[45,45,100,100]}

00:02:37.720 --> 00:02:40.690
<v Speaker 0>All right.

NOTE CONF {"raw":[93,100]}

00:02:40.690 --> 00:02:42.640
<v Speaker 0>So that's the queen of the night.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:02:42.940 --> 00:02:45.670
<v Speaker 0>So the queen of the night is, uh, is singing

NOTE CONF {"raw":[100,100,100,100,100,100,100,85,100,100]}

00:02:45.670 --> 00:02:48.400
<v Speaker 0>this song to her daughter to say, you better do

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:48.400 --> 00:02:49.780
<v Speaker 0>what I say or else.

NOTE CONF {"raw":[100,100,100,100,100]}

00:02:50.200 --> 00:02:54.190
<v Speaker 0>Um, so, uh, that's with all the correct facial expressions

NOTE CONF {"raw":[100,100,81,100,100,100,100,100,100,100]}

00:02:54.190 --> 00:02:55.120
<v Speaker 0>and so forth.

NOTE CONF {"raw":[100,100,100]}

00:02:55.510 --> 00:02:56.590
<v Speaker 0>Um, right.

NOTE CONF {"raw":[100,100]}

00:02:59.950 --> 00:03:02.560
<v Speaker 0>But what you really want to know about is select,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:02.560 --> 00:03:06.310
<v Speaker 0>take and drop, which is what this lecture is about.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:06.910 --> 00:03:11.830
<v Speaker 0>So these are three functions that are built into Haskell.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:11.830 --> 00:03:15.100
<v Speaker 0>And again I'm showing you the code for these to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:15.370 --> 00:03:19.390
<v Speaker 0>to show you some other patterns of recursive functions okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,88]}

00:03:19.600 --> 00:03:22.660
<v Speaker 0>Um so this is a sequence of three, the third

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:22.660 --> 00:03:24.820
<v Speaker 0>in a sequence of three lectures about recursion.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:03:25.000 --> 00:03:27.760
<v Speaker 0>Um, because recursion is such an important topic, you need

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:27.760 --> 00:03:29.200
<v Speaker 0>to see lots of examples.

NOTE CONF {"raw":[100,100,100,100,100]}

00:03:29.230 --> 00:03:33.790
<v Speaker 0>Next tutorial exercise, the one for next week, due to

NOTE CONF {"raw":[100,100,98,100,100,100,100,100,100,100]}

00:03:34.180 --> 00:03:36.190
<v Speaker 0>do today in a week is going to be a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:36.190 --> 00:03:39.490
<v Speaker 0>bunch of, um, exercises with recursion, so you'll get lots

NOTE CONF {"raw":[100,100,96,100,100,100,100,61,100,100]}

00:03:39.490 --> 00:03:40.300
<v Speaker 0>of practice.

NOTE CONF {"raw":[100,100]}

00:03:42.730 --> 00:03:43.450
<v Speaker 0>Okay.

NOTE CONF {"raw":[87]}

00:03:43.600 --> 00:03:48.070
<v Speaker 0>And apart from being, um, interesting examples of recursive function

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:48.070 --> 00:03:51.730
<v Speaker 0>definitions, these are also things that are useful, um, in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:51.730 --> 00:03:54.700
<v Speaker 0>your daily life in Haskell programming.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:03:54.700 --> 00:03:57.410
<v Speaker 0>So first, uh, what what these are for.

NOTE CONF {"raw":[100,100,52,100,100,100,100,100]}

00:03:57.830 --> 00:04:03.410
<v Speaker 0>Okay, so, um, this first one, uh, I'm calling it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:03.410 --> 00:04:07.250
<v Speaker 0>select, but it's written with two exclamation marks as an

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:07.250 --> 00:04:08.510
<v Speaker 0>infix function.

NOTE CONF {"raw":[100,100]}

00:04:08.510 --> 00:04:14.750
<v Speaker 0>So this selects, um, a particular position within a list.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:15.530 --> 00:04:16.280
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:04:16.519 --> 00:04:19.640
<v Speaker 0>Um, it's um, uh, okay.

NOTE CONF {"raw":[100,97,100,100,100]}

00:04:19.640 --> 00:04:21.560
<v Speaker 0>You give it a list like this.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:04:21.560 --> 00:04:22.220
<v Speaker 0>String words.

NOTE CONF {"raw":[100,100]}

00:04:22.220 --> 00:04:25.430
<v Speaker 0>This is remember, a string is a list of characters.

NOTE CONF {"raw":[100,98,100,100,100,100,100,100,100,100]}

00:04:25.430 --> 00:04:31.640
<v Speaker 0>Seems not to have, uh, you know, penetrated everybody's brains,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:32.030 --> 00:04:32.630
<v Speaker 0>uh, so far.

NOTE CONF {"raw":[73,100,100]}

00:04:32.630 --> 00:04:33.590
<v Speaker 0>But anyway, that's what it is.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:04:33.590 --> 00:04:35.690
<v Speaker 0>It's a list is a sequence of a string of.

NOTE CONF {"raw":[100,100,100,97,100,100,100,100,100,100]}

00:04:36.050 --> 00:04:39.710
<v Speaker 0>Sorry, a string is a list of characters.

NOTE CONF {"raw":[100,100,100,100,98,100,100,100]}

00:04:39.710 --> 00:04:44.030
<v Speaker 0>And, uh, so this is five characters W, o, R,

NOTE CONF {"raw":[100,92,100,100,100,100,100,100,100,85]}

00:04:44.030 --> 00:04:48.920
<v Speaker 0>D and s, and the third one in this, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,90]}

00:04:48.920 --> 00:04:53.030
<v Speaker 0>in this list, starting with zero W is position zero,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,70]}

00:04:53.030 --> 00:04:57.110
<v Speaker 0>zero is position one, ah is position two and D

NOTE CONF {"raw":[100,100,100,100,64,99,100,100,100,95]}

00:04:57.110 --> 00:04:58.190
<v Speaker 0>is position three.

NOTE CONF {"raw":[98,100,100]}

00:04:58.190 --> 00:05:01.250
<v Speaker 0>So if you ask for the thing in position three,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:01.250 --> 00:05:03.890
<v Speaker 0>you get a d the letter D the character D.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:06.170 --> 00:05:06.770
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:05:06.770 --> 00:05:07.940
<v Speaker 0>That is select.

NOTE CONF {"raw":[100,100,100]}

00:05:07.940 --> 00:05:11.150
<v Speaker 0>And now those of you who are used to writing

NOTE CONF {"raw":[100,100,100,100,100,96,100,100,100,100]}

00:05:11.390 --> 00:05:15.260
<v Speaker 0>programs in in C or Java or something like this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:15.260 --> 00:05:16.160
<v Speaker 0>will say, great.

NOTE CONF {"raw":[98,100,100]}

00:05:16.160 --> 00:05:21.830
<v Speaker 0>Finally, I've discovered the most important function in Haskell because

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:21.830 --> 00:05:25.160
<v Speaker 0>you will be used to writing programs that have things

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:25.160 --> 00:05:26.150
<v Speaker 0>like, uh.

NOTE CONF {"raw":[100,100]}

00:05:29.750 --> 00:05:34.070
<v Speaker 0>Uh, I don't know, you know, whatever it is this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:34.070 --> 00:05:38.000
<v Speaker 0>is this is kind of array indexing, at least in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:38.000 --> 00:05:38.900
<v Speaker 0>some languages.

NOTE CONF {"raw":[100,100]}

00:05:38.900 --> 00:05:40.550
<v Speaker 0>Okay, uh, you've got an array.

NOTE CONF {"raw":[100,54,100,100,100,100]}

00:05:40.550 --> 00:05:42.680
<v Speaker 0>You want to find out what's in position number n,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:42.680 --> 00:05:44.420
<v Speaker 0>and that's how you do it.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:05:44.420 --> 00:05:47.090
<v Speaker 0>You you, uh, you address it that way.

NOTE CONF {"raw":[81,100,100,100,100,100,100,100]}

00:05:47.090 --> 00:05:47.900
<v Speaker 0>Array indexing.

NOTE CONF {"raw":[100,100]}

00:05:47.900 --> 00:05:50.990
<v Speaker 0>So this is kind of like array indexing, except it's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,96]}

00:05:50.990 --> 00:05:52.490
<v Speaker 0>indexing into lists.

NOTE CONF {"raw":[100,100,100]}

00:05:52.490 --> 00:05:55.020
<v Speaker 0>And you will think, great, I know this now.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:05:55.020 --> 00:05:55.920
<v Speaker 0>It's so important.

NOTE CONF {"raw":[100,100,100]}

00:05:55.920 --> 00:05:58.530
<v Speaker 0>I'm going to be using this all the time, okay?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:58.530 --> 00:06:01.050
<v Speaker 0>Because that's what I do when I write programs in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:01.050 --> 00:06:01.980
<v Speaker 0>Java or C.

NOTE CONF {"raw":[100,100,100]}

00:06:02.460 --> 00:06:06.690
<v Speaker 0>Um, but you would be wrong because in, in, in,

NOTE CONF {"raw":[100,100,100,100,100,100,100,95,100,100]}

00:06:06.690 --> 00:06:10.800
<v Speaker 0>in Haskell and functional programming, this is a, this is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:10.800 --> 00:06:12.570
<v Speaker 0>a function that's available.

NOTE CONF {"raw":[100,100,100,100]}

00:06:12.600 --> 00:06:15.480
<v Speaker 0>But, um, you know, instead of writing that you write

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:15.480 --> 00:06:15.990
<v Speaker 0>this.

NOTE CONF {"raw":[100]}

00:06:19.020 --> 00:06:19.920
<v Speaker 0>It's available.

NOTE CONF {"raw":[100,100]}

00:06:19.920 --> 00:06:20.880
<v Speaker 0>You can use it.

NOTE CONF {"raw":[100,100,100,100]}

00:06:20.880 --> 00:06:25.260
<v Speaker 0>Sometimes it's handy, but it's actually very rarely used in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:25.260 --> 00:06:28.050
<v Speaker 0>the sense that if you find yourself using it, probably

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:28.050 --> 00:06:30.120
<v Speaker 0>there's a better way to do whatever it is that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:30.120 --> 00:06:31.200
<v Speaker 0>you wanted to do.

NOTE CONF {"raw":[100,100,100,100]}

00:06:31.470 --> 00:06:34.920
<v Speaker 0>Okay, so but anyway, it's one of the things I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:34.920 --> 00:06:36.390
<v Speaker 0>want to tell you about in this lecture.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:06:37.770 --> 00:06:38.490
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:06:39.150 --> 00:06:43.650
<v Speaker 0>Um, uh, next one, the the function take.

NOTE CONF {"raw":[99,89,100,100,100,100,100,100]}

00:06:44.400 --> 00:06:44.760
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:06:44.760 --> 00:06:45.270
<v Speaker 0>Take.

NOTE CONF {"raw":[100]}

00:06:45.270 --> 00:06:46.860
<v Speaker 0>You give it a number and you give it a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:46.860 --> 00:06:49.680
<v Speaker 0>list, and it gives you, uh, the first of that

NOTE CONF {"raw":[100,100,100,100,100,83,100,100,65,100]}

00:06:49.680 --> 00:06:53.130
<v Speaker 0>many, um, items from the list.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:06:53.130 --> 00:06:53.640
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:06:53.640 --> 00:06:57.090
<v Speaker 0>so take three of words it gives you.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:06:57.480 --> 00:07:02.640
<v Speaker 0>The first three letters were okay take and drop.

NOTE CONF {"raw":[100,100,100,100,45,100,100,100,100]}

00:07:02.640 --> 00:07:08.370
<v Speaker 0>Drop gives you everything after the first however many it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:08.370 --> 00:07:09.450
<v Speaker 0>is items.

NOTE CONF {"raw":[100,100]}

00:07:09.450 --> 00:07:12.510
<v Speaker 0>So these are shown here working on strings.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:07:12.510 --> 00:07:15.030
<v Speaker 0>But strings are just an example of lists.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:07:15.030 --> 00:07:17.160
<v Speaker 0>So it will work just as well on lists of

NOTE CONF {"raw":[100,64,64,100,100,100,100,100,100,100]}

00:07:17.160 --> 00:07:17.760
<v Speaker 0>any kind.

NOTE CONF {"raw":[100,100]}

00:07:17.760 --> 00:07:20.730
<v Speaker 0>Okay so those are the three functions I want to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:20.730 --> 00:07:22.380
<v Speaker 0>talk about in today's lecture.

NOTE CONF {"raw":[100,100,100,100,100]}

00:07:24.150 --> 00:07:29.310
<v Speaker 0>Um, they're handy, but um, mainly I wanted to show

NOTE CONF {"raw":[100,97,100,100,100,100,100,100,100,100]}

00:07:29.310 --> 00:07:32.130
<v Speaker 0>you examples of recursive function definitions.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:07:32.130 --> 00:07:32.850
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:07:32.970 --> 00:07:34.230
<v Speaker 0>Got it so far.

NOTE CONF {"raw":[100,100,100,100]}

00:07:34.230 --> 00:07:35.970
<v Speaker 0>So remember those three functions.

NOTE CONF {"raw":[100,100,100,100,100]}

00:07:35.970 --> 00:07:38.250
<v Speaker 0>What they do okay.

NOTE CONF {"raw":[100,100,100,100]}

00:07:38.250 --> 00:07:40.440
<v Speaker 0>Because they're going to keep coming up throughout the lecture.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:40.440 --> 00:07:43.140
<v Speaker 0>So take and drop and select.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:07:45.300 --> 00:07:46.050
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:07:47.250 --> 00:07:52.440
<v Speaker 0>So um I'm frequently going to be showing you.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:07:53.920 --> 00:07:56.290
<v Speaker 0>uh, different ways of defining the same function.

NOTE CONF {"raw":[91,100,100,100,100,100,100,100]}

00:07:56.290 --> 00:07:59.140
<v Speaker 0>So here are, here are the, um, a way to

NOTE CONF {"raw":[100,100,100,93,51,45,51,100,100,100]}

00:07:59.140 --> 00:08:03.640
<v Speaker 0>define these three functions, uh, using comprehensions, list comprehensions.

NOTE CONF {"raw":[100,100,100,100,95,100,100,95,100]}

00:08:03.640 --> 00:08:06.100
<v Speaker 0>And in a minute I'm going to show you how

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:06.100 --> 00:08:08.500
<v Speaker 0>to define these three function using recursion.

NOTE CONF {"raw":[100,100,100,100,49,100,100]}

00:08:08.650 --> 00:08:09.070
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:08:09.070 --> 00:08:12.340
<v Speaker 0>But first comprehensions because we learned that a few weeks

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:12.340 --> 00:08:17.230
<v Speaker 0>ago or well, like last week I guess, um, and

NOTE CONF {"raw":[100,100,100,74,100,100,100,100,100,100]}

00:08:17.230 --> 00:08:18.760
<v Speaker 0>these definitions.

NOTE CONF {"raw":[100,100]}

00:08:19.000 --> 00:08:21.460
<v Speaker 0>So this is select take and drop.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:08:21.460 --> 00:08:25.870
<v Speaker 0>And I'm using this name uh select comp and take

NOTE CONF {"raw":[100,100,100,100,100,69,100,100,100,100]}

00:08:25.870 --> 00:08:27.970
<v Speaker 0>comp and drop comp.

NOTE CONF {"raw":[100,100,100,100]}

00:08:28.330 --> 00:08:31.720
<v Speaker 0>Uh, not because I need to use the word comp

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:31.720 --> 00:08:35.169
<v Speaker 0>in a definition using comprehensions, but just because I'm about

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:35.169 --> 00:08:38.530
<v Speaker 0>to define, uh, select and take and drop and I

NOTE CONF {"raw":[100,100,98,100,100,100,100,100,100,100]}

00:08:38.530 --> 00:08:42.099
<v Speaker 0>want to avoid, um, you know, name clashes.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:08:42.640 --> 00:08:43.300
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:08:43.510 --> 00:08:49.840
<v Speaker 0>So all three of these are using, um, a kind

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:49.840 --> 00:08:53.680
<v Speaker 0>of programming idiom that I mentioned in the last lecture,

NOTE CONF {"raw":[100,98,100,100,100,100,100,100,100,100]}

00:08:53.680 --> 00:08:58.720
<v Speaker 0>which is unzipping, you say no.

NOTE CONF {"raw":[100,100,92,86,68,78]}

00:09:01.420 --> 00:09:03.280
<v Speaker 0>I used to be able to highlight that.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:09:03.280 --> 00:09:06.370
<v Speaker 0>This seems to have taken that away from these displays.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:06.400 --> 00:09:06.670
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:09:06.670 --> 00:09:11.320
<v Speaker 0>So so this thing here, zip the list from, you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:11.320 --> 00:09:16.630
<v Speaker 0>know, of numbers starting from zero going off forever and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:16.750 --> 00:09:17.950
<v Speaker 0>and a list.

NOTE CONF {"raw":[100,100,100]}

00:09:18.940 --> 00:09:19.150
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:09:19.150 --> 00:09:19.630
<v Speaker 0>We've got it.

NOTE CONF {"raw":[100,100,100]}

00:09:19.660 --> 00:09:20.800
<v Speaker 0>We've got it here.

NOTE CONF {"raw":[100,100,100,100]}

00:09:21.100 --> 00:09:23.710
<v Speaker 0>We've got it here and we've got it here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:09:23.710 --> 00:09:26.170
<v Speaker 0>And as I explained last time, what you get from

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:26.170 --> 00:09:28.630
<v Speaker 0>this is a list of pairs.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:09:29.920 --> 00:09:32.950
<v Speaker 0>So here are the pairs okay.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:09:32.950 --> 00:09:35.320
<v Speaker 0>And the first item in the pair is a position.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:35.320 --> 00:09:37.510
<v Speaker 0>And the second item is the thing that's in that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:37.510 --> 00:09:39.250
<v Speaker 0>position okay.

NOTE CONF {"raw":[100,100]}

00:09:39.250 --> 00:09:43.030
<v Speaker 0>You're um, you know, if you start counting from zero

NOTE CONF {"raw":[93,100,100,100,100,100,100,100,100,100]}

00:09:43.240 --> 00:09:46.360
<v Speaker 0>and, you know, zero, one, two, three, four, five, the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:46.360 --> 00:09:49.330
<v Speaker 0>thing in this position, zero is going to be, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:49.330 --> 00:09:52.100
<v Speaker 0>it's going to result in a pair of the form

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:52.100 --> 00:09:54.230
<v Speaker 0>zero comma, whatever it is.

NOTE CONF {"raw":[100,100,100,100,100]}

00:09:54.860 --> 00:09:59.390
<v Speaker 0>Okay, next one pair, one comma, whatever is in that

NOTE CONF {"raw":[100,100,100,100,100,100,90,90,100,100]}

00:09:59.390 --> 00:10:00.290
<v Speaker 0>position and so forth.

NOTE CONF {"raw":[100,100,100,100]}

00:10:00.290 --> 00:10:03.170
<v Speaker 0>So this is going to give you a list of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:03.170 --> 00:10:06.260
<v Speaker 0>uh, of, of positions paired with the thing that's in

NOTE CONF {"raw":[74,100,100,100,100,100,100,100,100,100]}

00:10:06.290 --> 00:10:07.130
<v Speaker 0>that position.

NOTE CONF {"raw":[100,100]}

00:10:07.970 --> 00:10:08.330
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:10:08.330 --> 00:10:10.100
<v Speaker 0>So that happens here.

NOTE CONF {"raw":[100,100,100,100]}

00:10:10.280 --> 00:10:12.830
<v Speaker 0>It happens here and it happens here.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:10:12.830 --> 00:10:16.160
<v Speaker 0>And then what we do with that is uh, is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,72,100]}

00:10:16.160 --> 00:10:18.140
<v Speaker 0>gives us the result of these functions.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:10:18.140 --> 00:10:18.560
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:10:18.560 --> 00:10:21.710
<v Speaker 0>So if we've got a list of pairs of positions

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:21.710 --> 00:10:24.410
<v Speaker 0>and things in that position and we want to find

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:24.410 --> 00:10:25.940
<v Speaker 0>the ith thing.

NOTE CONF {"raw":[100,94,100]}

00:10:25.940 --> 00:10:28.730
<v Speaker 0>So all we need to do is pick the one

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:28.730 --> 00:10:30.230
<v Speaker 0>where the position is I.

NOTE CONF {"raw":[100,100,100,100,58]}

00:10:32.210 --> 00:10:32.690
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:10:32.690 --> 00:10:38.960
<v Speaker 0>So we're looking through the list that's formed here.

NOTE CONF {"raw":[100,100,100,100,100,98,100,100,100]}

00:10:38.960 --> 00:10:42.980
<v Speaker 0>And we want the one okay is select X is

NOTE CONF {"raw":[100,100,100,100,100,100,58,100,79,43]}

00:10:42.980 --> 00:10:44.450
<v Speaker 0>I okay.

NOTE CONF {"raw":[86,100]}

00:10:44.450 --> 00:10:45.980
<v Speaker 0>So we want the thing in the ith position.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:10:45.980 --> 00:10:49.730
<v Speaker 0>So we look for the case where j the position

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:49.730 --> 00:10:51.650
<v Speaker 0>we get here is equal to I.

NOTE CONF {"raw":[100,100,100,100,100,100,89]}

00:10:53.390 --> 00:10:54.140
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:10:54.860 --> 00:10:57.710
<v Speaker 0>So that selects that gives us a list of all

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:57.710 --> 00:10:59.990
<v Speaker 0>the things in position I.

NOTE CONF {"raw":[100,100,100,100,93]}

00:11:01.760 --> 00:11:02.000
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:11:02.000 --> 00:11:05.150
<v Speaker 0>There's only going to be one or actually at most

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,69,100]}

00:11:05.150 --> 00:11:07.310
<v Speaker 0>one okay.

NOTE CONF {"raw":[100,100]}

00:11:07.310 --> 00:11:09.980
<v Speaker 0>Because I might be minus one or something.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:11:09.980 --> 00:11:10.520
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:11:10.940 --> 00:11:13.220
<v Speaker 0>Um okay.

NOTE CONF {"raw":[100,100]}

00:11:13.220 --> 00:11:14.000
<v Speaker 0>At most one.

NOTE CONF {"raw":[100,100,100]}

00:11:14.000 --> 00:11:17.000
<v Speaker 0>And uh and so it's going to be a list

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,96,100]}

00:11:17.000 --> 00:11:20.030
<v Speaker 0>containing one thing, let's say usually one thing.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:11:20.030 --> 00:11:23.420
<v Speaker 0>And so we need to actually extract that thing, whatever

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:23.420 --> 00:11:25.100
<v Speaker 0>it is from the list okay.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:11:25.100 --> 00:11:27.590
<v Speaker 0>And so I'm going to define a helper function called

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:27.590 --> 00:11:31.250
<v Speaker 0>the the takes the list and gives you the only

NOTE CONF {"raw":[100,100,100,88,100,100,100,100,100,100]}

00:11:31.250 --> 00:11:33.110
<v Speaker 0>thing in the list okay.

NOTE CONF {"raw":[100,100,100,100,100]}

00:11:33.110 --> 00:11:34.520
<v Speaker 0>It's the thing in the list.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:11:34.520 --> 00:11:35.180
<v Speaker 0>All right.

NOTE CONF {"raw":[97,97]}

00:11:35.180 --> 00:11:39.260
<v Speaker 0>So um, uh, so that's what this does okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:11:39.260 --> 00:11:42.050
<v Speaker 0>It gives you the unique thing which is in position

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:42.050 --> 00:11:42.620
<v Speaker 0>I.

NOTE CONF {"raw":[61]}

00:11:44.780 --> 00:11:45.200
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:11:45.200 --> 00:11:46.130
<v Speaker 0>Is that clear?

NOTE CONF {"raw":[100,100,100]}

00:11:46.130 --> 00:11:48.170
<v Speaker 0>Anybody have a problem with that?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:11:50.070 --> 00:11:50.460
<v Speaker 0>No.

NOTE CONF {"raw":[52]}

00:11:50.940 --> 00:11:51.570
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:11:51.810 --> 00:11:57.480
<v Speaker 0>Um, take and drop are, uh, similar, except that the

NOTE CONF {"raw":[99,100,100,100,100,100,100,100,100,100]}

00:11:57.480 --> 00:11:59.490
<v Speaker 0>the guard here at the end is different.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:11:59.490 --> 00:12:02.100
<v Speaker 0>Okay, so this is looking in the thing, looking for

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:02.100 --> 00:12:03.630
<v Speaker 0>the thing that's in position I.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:12:03.990 --> 00:12:06.060
<v Speaker 0>And this is looking for all the things that are

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:06.060 --> 00:12:10.590
<v Speaker 0>in position, uh, less than I this is for take.

NOTE CONF {"raw":[100,100,88,100,100,100,100,100,100,100]}

00:12:10.830 --> 00:12:13.110
<v Speaker 0>And this is all the things that are in position,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:13.710 --> 00:12:15.780
<v Speaker 0>um, greater than or equal to I.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:12:17.280 --> 00:12:17.790
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:12:17.790 --> 00:12:19.800
<v Speaker 0>Remembering we're indexing from zero.

NOTE CONF {"raw":[100,100,100,100,100]}

00:12:19.800 --> 00:12:27.030
<v Speaker 0>So, um, take comp apply to three and list will

NOTE CONF {"raw":[100,100,100,100,65,100,100,100,100,100]}

00:12:27.030 --> 00:12:28.860
<v Speaker 0>give you the first three things.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:12:28.860 --> 00:12:31.230
<v Speaker 0>That is the ones in position zero one and two.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:32.130 --> 00:12:32.610
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:12:32.610 --> 00:12:34.980
<v Speaker 0>And drop will give you all the things after that.

NOTE CONF {"raw":[100,100,95,100,100,100,100,100,100,100]}

00:12:34.980 --> 00:12:38.670
<v Speaker 0>So positions uh 3456 etc..

NOTE CONF {"raw":[100,100,91,100,100]}

00:12:39.060 --> 00:12:39.780
<v Speaker 0>All right.

NOTE CONF {"raw":[100,100]}

00:12:42.240 --> 00:12:42.870
<v Speaker 0>Okay.

NOTE CONF {"raw":[98]}

00:12:42.870 --> 00:12:44.010
<v Speaker 0>You understand those.

NOTE CONF {"raw":[74,100,100]}

00:12:44.430 --> 00:12:47.400
<v Speaker 0>So it's using this trick or this this this idea

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:47.400 --> 00:12:53.310
<v Speaker 0>that you use zip to pair positions with things in

NOTE CONF {"raw":[100,100,100,92,100,100,100,100,100,100]}

00:12:53.340 --> 00:12:54.270
<v Speaker 0>that position.

NOTE CONF {"raw":[100,100]}

00:12:57.900 --> 00:12:59.970
<v Speaker 0>So just showing you how that works.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:13:01.410 --> 00:13:04.110
<v Speaker 0>Um, for, for the function take.

NOTE CONF {"raw":[99,100,100,100,100,100]}

00:13:04.710 --> 00:13:07.950
<v Speaker 0>Um, just I don't think I want to go through

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:07.950 --> 00:13:10.140
<v Speaker 0>this in detail, but you can kind of do the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:10.140 --> 00:13:14.940
<v Speaker 0>computation sequence where you take, for example, the the list

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:14.940 --> 00:13:17.400
<v Speaker 0>of characters words here.

NOTE CONF {"raw":[100,94,100,100]}

00:13:17.400 --> 00:13:21.360
<v Speaker 0>Here is the list of pairs of positions of, you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:21.360 --> 00:13:24.990
<v Speaker 0>know, position zero, one, two, three, etc. for those for

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:24.990 --> 00:13:27.930
<v Speaker 0>the for that list, we've got list of pairs here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:29.940 --> 00:13:32.940
<v Speaker 0>We're looking for the the ones where J is less

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:32.940 --> 00:13:36.210
<v Speaker 0>than three which are the first the first three of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:36.210 --> 00:13:37.350
<v Speaker 0>those pairs.

NOTE CONF {"raw":[100,100]}

00:13:38.430 --> 00:13:42.210
<v Speaker 0>And we're picking out uh x sorry, I should have

NOTE CONF {"raw":[100,100,100,100,100,95,98,100,100,100]}

00:13:42.210 --> 00:13:43.290
<v Speaker 0>said that before.

NOTE CONF {"raw":[100,100,100]}

00:13:43.590 --> 00:13:48.520
<v Speaker 0>We're picking out X for the positions that are less

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:48.520 --> 00:13:49.870
<v Speaker 0>than I hear.

NOTE CONF {"raw":[100,100,77]}

00:13:49.870 --> 00:13:50.170
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:13:50.170 --> 00:13:50.830
<v Speaker 0>So.

NOTE CONF {"raw":[100]}

00:13:51.040 --> 00:13:54.820
<v Speaker 0>So we pick out w we pick out um oh.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,80]}

00:13:54.820 --> 00:13:57.820
<v Speaker 0>And we pick out R but not D and S

NOTE CONF {"raw":[72,100,100,100,79,100,100,100,100,100]}

00:13:57.820 --> 00:14:00.580
<v Speaker 0>because the guard is not true for those for those

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:00.580 --> 00:14:01.180
<v Speaker 0>two cases.

NOTE CONF {"raw":[100,100]}

00:14:01.180 --> 00:14:04.570
<v Speaker 0>So this war and that's the answer.

NOTE CONF {"raw":[100,71,67,100,100,100,100]}

00:14:08.830 --> 00:14:09.010
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:14:09.010 --> 00:14:12.580
<v Speaker 0>These computation sequences are useful to kind of understand really

NOTE CONF {"raw":[100,82,100,100,100,100,100,100,100,100]}

00:14:12.580 --> 00:14:13.750
<v Speaker 0>what's going on.

NOTE CONF {"raw":[100,100,100]}

00:14:13.750 --> 00:14:16.900
<v Speaker 0>But um, you know, after you've done enough of them,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:16.900 --> 00:14:20.080
<v Speaker 0>they should be, should be kind of quite clear, I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:20.080 --> 00:14:22.510
<v Speaker 0>hope, um, how to do that if you write it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:22.510 --> 00:14:24.700
<v Speaker 0>out all in detail, it takes a lot of writing.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:24.700 --> 00:14:29.830
<v Speaker 0>So, um, a little boring, but, um, getting the steps

NOTE CONF {"raw":[100,98,67,100,100,100,100,100,100,100]}

00:14:30.310 --> 00:14:31.420
<v Speaker 0>is worthwhile.

NOTE CONF {"raw":[100,100]}

00:14:32.230 --> 00:14:35.560
<v Speaker 0>Okay, so before I go into the recursive definitions, I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:35.560 --> 00:14:36.880
<v Speaker 0>just want to, um.

NOTE CONF {"raw":[100,100,100,100]}

00:14:40.570 --> 00:14:45.310
<v Speaker 0>Remind you about recursive definitions of lists and recursive definitions

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:45.310 --> 00:14:48.160
<v Speaker 0>of, of numbers, of natural numbers.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:14:48.160 --> 00:14:48.460
<v Speaker 0>Okay.

NOTE CONF {"raw":[99]}

00:14:48.460 --> 00:14:51.580
<v Speaker 0>So as I said, you know, every list can be

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:51.580 --> 00:14:56.470
<v Speaker 0>using written using only this constructor or this, this function

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:56.470 --> 00:14:58.840
<v Speaker 0>cons and the empty list.

NOTE CONF {"raw":[100,100,100,100,100]}

00:14:58.840 --> 00:15:00.610
<v Speaker 0>And we saw how that worked.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:15:00.880 --> 00:15:01.690
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:15:01.690 --> 00:15:04.600
<v Speaker 0>There's that list written using those things.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:15:04.600 --> 00:15:07.780
<v Speaker 0>And and here is this list of characters written using

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:07.780 --> 00:15:08.680
<v Speaker 0>those things.

NOTE CONF {"raw":[100,100]}

00:15:08.980 --> 00:15:12.610
<v Speaker 0>And that came from the recursive definition of what a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:12.610 --> 00:15:13.540
<v Speaker 0>list is.

NOTE CONF {"raw":[100,100]}

00:15:13.540 --> 00:15:16.000
<v Speaker 0>And as I said, a list is either, you know,

NOTE CONF {"raw":[100,100,100,100,87,100,100,100,100,100]}

00:15:16.000 --> 00:15:17.020
<v Speaker 0>the empty list.

NOTE CONF {"raw":[100,100,100]}

00:15:19.570 --> 00:15:21.400
<v Speaker 0>I said, I say null here, but it should be

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:21.400 --> 00:15:22.030
<v Speaker 0>nil.

NOTE CONF {"raw":[100]}

00:15:23.170 --> 00:15:23.650
<v Speaker 0>Oh, sorry.

NOTE CONF {"raw":[100,100]}

00:15:23.650 --> 00:15:27.370
<v Speaker 0>No, no it's either it's either null written like this,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:27.370 --> 00:15:30.550
<v Speaker 0>which I pronounced nil, or it's a constructed list written

NOTE CONF {"raw":[100,100,71,100,100,100,100,100,100,100]}

00:15:30.550 --> 00:15:33.130
<v Speaker 0>like that which has a head x and a tail

NOTE CONF {"raw":[100,100,100,100,100,100,95,100,100,100]}

00:15:33.130 --> 00:15:33.730
<v Speaker 0>x.

NOTE CONF {"raw":[42]}

00:15:33.730 --> 00:15:34.690
<v Speaker 0>That's what I meant to say.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:15:34.690 --> 00:15:37.120
<v Speaker 0>Okay, okay.

NOTE CONF {"raw":[100,100]}

00:15:37.120 --> 00:15:39.820
<v Speaker 0>And then similarly, and I don't think I showed you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:39.820 --> 00:15:41.830
<v Speaker 0>this last time or maybe, maybe I did, but I

NOTE CONF {"raw":[100,100,100,100,56,100,100,100,100,100]}

00:15:41.830 --> 00:15:42.790
<v Speaker 0>don't think so.

NOTE CONF {"raw":[100,100,100]}

00:15:43.030 --> 00:15:50.330
<v Speaker 0>Um, we can define natural numbers recursively, um, by saying

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:50.330 --> 00:15:51.620
<v Speaker 0>how you can build them.

NOTE CONF {"raw":[100,100,100,100,100]}

00:15:52.040 --> 00:15:52.520
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:15:52.520 --> 00:15:54.380
<v Speaker 0>So a natural number.

NOTE CONF {"raw":[100,100,100,100]}

00:15:54.740 --> 00:15:55.070
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:15:55.070 --> 00:15:55.730
<v Speaker 0>Natural number.

NOTE CONF {"raw":[100,100]}

00:15:55.760 --> 00:16:00.920
<v Speaker 0>That's the terminology in mathematics for numbers 0123 and so

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:00.920 --> 00:16:01.160
<v Speaker 0>on.

NOTE CONF {"raw":[100]}

00:16:01.160 --> 00:16:02.330
<v Speaker 0>So no negative numbers.

NOTE CONF {"raw":[100,100,100,100]}

00:16:02.330 --> 00:16:04.730
<v Speaker 0>Just the just the ones from zero onwards.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:16:05.330 --> 00:16:05.870
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:16:05.870 --> 00:16:11.540
<v Speaker 0>So a natural number is either zero or it's the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:11.540 --> 00:16:14.210
<v Speaker 0>successor of a natural number.

NOTE CONF {"raw":[100,100,100,100,100]}

00:16:14.210 --> 00:16:17.210
<v Speaker 0>Successor is a number plus one.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:16:20.300 --> 00:16:20.870
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:16:20.870 --> 00:16:22.850
<v Speaker 0>So we can take zero.

NOTE CONF {"raw":[100,100,100,100,100]}

00:16:22.850 --> 00:16:24.410
<v Speaker 0>We can take zero plus one.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:16:24.410 --> 00:16:25.340
<v Speaker 0>That's one.

NOTE CONF {"raw":[100,100]}

00:16:25.340 --> 00:16:27.590
<v Speaker 0>We can take zero plus one plus one.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:16:27.590 --> 00:16:30.890
<v Speaker 0>That's two zero plus one plus one plus one is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:30.890 --> 00:16:31.850
<v Speaker 0>three and so forth.

NOTE CONF {"raw":[100,100,100,100]}

00:16:31.850 --> 00:16:35.660
<v Speaker 0>All of the numbers we can get that way okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:36.230 --> 00:16:39.800
<v Speaker 0>All generated by this recursive definition.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:16:39.800 --> 00:16:40.370
<v Speaker 0>Recursive.

NOTE CONF {"raw":[100]}

00:16:40.370 --> 00:16:45.320
<v Speaker 0>Because I'm defining a natural number and I'm using, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,99]}

00:16:45.320 --> 00:16:47.450
<v Speaker 0>what it is to be a natural number in the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:47.450 --> 00:16:48.290
<v Speaker 0>definition.

NOTE CONF {"raw":[100]}

00:16:52.850 --> 00:16:53.570
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:16:53.570 --> 00:16:57.980
<v Speaker 0>In Haskell, when I write recursive functions on lists, I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:57.980 --> 00:17:01.910
<v Speaker 0>use exactly the definition, the recursive definition of lists.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:17:02.060 --> 00:17:07.760
<v Speaker 0>I write cases which have, you know, patterns like like

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:07.760 --> 00:17:12.890
<v Speaker 0>nil and x cons x's as patterns for the cases.

NOTE CONF {"raw":[93,100,100,100,100,100,100,100,100,100]}

00:17:14.180 --> 00:17:19.670
<v Speaker 0>Um, in Haskell, uh, we don't have patterns for, for

NOTE CONF {"raw":[100,100,100,81,100,100,100,100,100,100]}

00:17:19.670 --> 00:17:23.540
<v Speaker 0>natural numbers, but we, we do something kind of similar,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:23.839 --> 00:17:28.400
<v Speaker 0>um, like as, as seen in this definition here instead

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:28.400 --> 00:17:32.750
<v Speaker 0>of, instead of, uh, zero and uh, n plus one,

NOTE CONF {"raw":[100,100,100,94,100,100,75,100,100,100]}

00:17:32.750 --> 00:17:37.580
<v Speaker 0>we use zero, and we and we are use subtraction

NOTE CONF {"raw":[100,100,100,100,100,100,100,91,100,100]}

00:17:37.580 --> 00:17:38.240
<v Speaker 0>of one.

NOTE CONF {"raw":[100,100]}

00:17:38.570 --> 00:17:39.140
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:17:39.140 --> 00:17:43.470
<v Speaker 0>So, uh, kind of same idea, but without having a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:43.470 --> 00:17:44.100
<v Speaker 0>pattern.

NOTE CONF {"raw":[100]}

00:17:44.100 --> 00:17:46.440
<v Speaker 0>So we have here for example zero.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:17:46.440 --> 00:17:50.220
<v Speaker 0>And then we have another pattern I, which is it

NOTE CONF {"raw":[100,100,100,100,100,100,86,100,100,100]}

00:17:50.220 --> 00:17:53.100
<v Speaker 0>has to be something plus one because it's not zero.

NOTE CONF {"raw":[100,100,100,100,100,100,100,93,100,100]}

00:17:55.680 --> 00:17:55.890
<v Speaker 0>Okay.

NOTE CONF {"raw":[97]}

00:17:55.890 --> 00:17:59.790
<v Speaker 0>So here is here is code for select.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:17:59.790 --> 00:18:03.630
<v Speaker 0>This is this function that indexes into a list and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:03.990 --> 00:18:07.140
<v Speaker 0>picks out the thing that's in the position, um, that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,85,100]}

00:18:07.140 --> 00:18:08.070
<v Speaker 0>you're asking for.

NOTE CONF {"raw":[100,100,100]}

00:18:08.070 --> 00:18:11.910
<v Speaker 0>So um the ith position okay.

NOTE CONF {"raw":[100,100,100,80,100,100]}

00:18:11.910 --> 00:18:13.860
<v Speaker 0>So okay.

NOTE CONF {"raw":[100,100]}

00:18:13.860 --> 00:18:17.070
<v Speaker 0>You give it a list, you give an integer and

NOTE CONF {"raw":[100,100,100,100,100,100,100,88,100,100]}

00:18:17.070 --> 00:18:19.050
<v Speaker 0>it gives you the thing in that position.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:18:19.950 --> 00:18:23.130
<v Speaker 0>And there are two cases recursive definition, two cases, the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:23.130 --> 00:18:26.520
<v Speaker 0>base case where you're looking for the thing in position

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,97,100]}

00:18:26.520 --> 00:18:26.940
<v Speaker 0>zero.

NOTE CONF {"raw":[100]}

00:18:26.940 --> 00:18:31.800
<v Speaker 0>Remember we're indexing starting from position zero the first the

NOTE CONF {"raw":[100,93,100,100,100,100,100,100,100,100]}

00:18:31.800 --> 00:18:32.760
<v Speaker 0>one at the beginning.

NOTE CONF {"raw":[100,100,100,100]}

00:18:32.760 --> 00:18:35.520
<v Speaker 0>And so if you've got a list first of all,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:35.520 --> 00:18:38.730
<v Speaker 0>if you've got a list that's just empty, you can't

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:38.970 --> 00:18:42.510
<v Speaker 0>select the thing in position, in any position, because there

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:42.510 --> 00:18:43.740
<v Speaker 0>isn't anything, right?

NOTE CONF {"raw":[100,100,100]}

00:18:44.490 --> 00:18:45.030
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:18:45.030 --> 00:18:48.000
<v Speaker 0>So we don't have a case for that because there

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:48.000 --> 00:18:51.240
<v Speaker 0>isn't anything you can write for that case.

NOTE CONF {"raw":[100,100,100,100,92,100,100,100]}

00:18:51.840 --> 00:18:52.290
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:18:52.290 --> 00:18:55.560
<v Speaker 0>Haskell will, uh, will will give an error in that

NOTE CONF {"raw":[100,100,100,100,98,100,100,100,100,100]}

00:18:55.560 --> 00:18:56.190
<v Speaker 0>case.

NOTE CONF {"raw":[100]}

00:18:56.280 --> 00:18:56.610
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:18:56.610 --> 00:18:59.940
<v Speaker 0>But if there is something in the list, then you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:59.940 --> 00:19:01.770
<v Speaker 0>can index and try to find something in a certain

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:01.770 --> 00:19:02.280
<v Speaker 0>position.

NOTE CONF {"raw":[100]}

00:19:02.280 --> 00:19:05.730
<v Speaker 0>And if it's if it's position zero and the list

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:05.730 --> 00:19:10.320
<v Speaker 0>is x cons x, then of course the answer is

NOTE CONF {"raw":[100,73,85,49,100,100,100,100,100,100]}

00:19:10.320 --> 00:19:11.070
<v Speaker 0>is x.

NOTE CONF {"raw":[100,100]}

00:19:11.070 --> 00:19:14.160
<v Speaker 0>It's the first thing in the list okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:19:14.160 --> 00:19:15.300
<v Speaker 0>Position zero.

NOTE CONF {"raw":[100,100]}

00:19:15.750 --> 00:19:16.770
<v Speaker 0>The first thing.

NOTE CONF {"raw":[100,100,100]}

00:19:18.510 --> 00:19:18.990
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:19:18.990 --> 00:19:19.710
<v Speaker 0>Is that clear.

NOTE CONF {"raw":[100,100,100]}

00:19:19.710 --> 00:19:20.970
<v Speaker 0>That's the base case.

NOTE CONF {"raw":[100,100,100,100]}

00:19:22.770 --> 00:19:23.370
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:19:23.370 --> 00:19:26.160
<v Speaker 0>If if uh if you're not looking for the thing

NOTE CONF {"raw":[100,100,97,100,100,100,100,100,100,100]}

00:19:26.160 --> 00:19:28.710
<v Speaker 0>in positions zero, then you're looking for the thing in

NOTE CONF {"raw":[100,88,100,100,100,100,100,100,100,100]}

00:19:28.710 --> 00:19:29.580
<v Speaker 0>some other positions.

NOTE CONF {"raw":[100,100,51]}

00:19:29.580 --> 00:19:30.750
<v Speaker 0>So let's call it I.

NOTE CONF {"raw":[100,100,100,100,96]}

00:19:30.750 --> 00:19:32.490
<v Speaker 0>So I is not equal to zero.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:19:32.490 --> 00:19:33.930
<v Speaker 0>It's at least one.

NOTE CONF {"raw":[100,100,100,100]}

00:19:35.460 --> 00:19:35.880
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:19:35.880 --> 00:19:37.920
<v Speaker 0>So the thing that you're looking for is not x

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:37.920 --> 00:19:39.420
<v Speaker 0>because x is in position zero.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:19:39.420 --> 00:19:41.530
<v Speaker 0>It has to be something in XS.

NOTE CONF {"raw":[100,100,100,100,100,100,61]}

00:19:42.670 --> 00:19:47.500
<v Speaker 0>Okay, so what we do is we we select from

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:47.500 --> 00:19:51.010
<v Speaker 0>X is not the thing in position I but the

NOTE CONF {"raw":[91,91,100,100,100,100,100,56,100,100]}

00:19:51.010 --> 00:19:53.200
<v Speaker 0>thing in position I minus one okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:19:53.200 --> 00:19:54.820
<v Speaker 0>We thrown away the first thing.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:19:54.820 --> 00:19:58.870
<v Speaker 0>And so uh what we're looking for now is the

NOTE CONF {"raw":[100,100,95,100,100,100,100,100,100,100]}

00:19:58.870 --> 00:20:01.780
<v Speaker 0>thing in X is at position I minus one.

NOTE CONF {"raw":[100,100,60,57,100,100,100,100,100]}

00:20:01.780 --> 00:20:04.750
<v Speaker 0>So we subtract one from the index okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:20:04.750 --> 00:20:08.260
<v Speaker 0>If we're looking at the thing in position one then

NOTE CONF {"raw":[100,100,100,78,73,100,100,100,100,100]}

00:20:08.260 --> 00:20:11.740
<v Speaker 0>um then you know I would be one here and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:11.740 --> 00:20:14.200
<v Speaker 0>we'd be looking for the thing in, in XS at

NOTE CONF {"raw":[100,100,100,100,100,100,93,95,54,100]}

00:20:14.200 --> 00:20:15.580
<v Speaker 0>position zero.

NOTE CONF {"raw":[100,100]}

00:20:15.580 --> 00:20:16.090
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:20:16.090 --> 00:20:17.530
<v Speaker 0>Which would be the first thing.

NOTE CONF {"raw":[100,91,100,100,100,100]}

00:20:17.710 --> 00:20:20.170
<v Speaker 0>It's kind of confusing talking about position zero.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:20:20.170 --> 00:20:22.000
<v Speaker 0>And then it's the first thing, but that's.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:20:23.320 --> 00:20:25.180
<v Speaker 0>Yeah, that's what it is.

NOTE CONF {"raw":[100,100,100,100,100]}

00:20:28.000 --> 00:20:28.720
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:20:30.580 --> 00:20:33.850
<v Speaker 0>Is that definition reasonably clear.

NOTE CONF {"raw":[100,100,100,100,100]}

00:20:33.850 --> 00:20:40.120
<v Speaker 0>This is doing recursion simultaneously On a list.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:20:40.810 --> 00:20:44.650
<v Speaker 0>The first argument is a list and on natural number,

NOTE CONF {"raw":[100,100,100,100,98,100,100,100,100,100]}

00:20:44.650 --> 00:20:46.180
<v Speaker 0>which is the second argument.

NOTE CONF {"raw":[100,100,80,100,100]}

00:20:46.210 --> 00:20:51.940
<v Speaker 0>Okay, so we've got, we've got um, a base case.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:52.360 --> 00:20:55.000
<v Speaker 0>So we have a base case for uh, for the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:55.000 --> 00:20:56.080
<v Speaker 0>natural number.

NOTE CONF {"raw":[100,100]}

00:20:56.500 --> 00:21:00.400
<v Speaker 0>Uh, we could have a base case for the empty

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:00.400 --> 00:21:04.450
<v Speaker 0>list as well, but that's just going to produce an

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:04.450 --> 00:21:04.720
<v Speaker 0>error.

NOTE CONF {"raw":[100]}

00:21:04.720 --> 00:21:07.270
<v Speaker 0>And so we let Haskell do that by itself.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:21:07.270 --> 00:21:08.710
<v Speaker 0>We don't have to write it down.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:21:09.010 --> 00:21:11.020
<v Speaker 0>Um, if you want it to be tidy, you might

NOTE CONF {"raw":[100,100,100,52,52,100,100,100,100,100]}

00:21:11.020 --> 00:21:14.830
<v Speaker 0>write, um, you might write, you know, empty list.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:21:15.820 --> 00:21:21.310
<v Speaker 0>Uh, select I is equal to, um, in Haskell, there's

NOTE CONF {"raw":[100,100,80,100,100,100,100,100,100,100]}

00:21:21.310 --> 00:21:22.720
<v Speaker 0>a function called error.

NOTE CONF {"raw":[100,100,100,100]}

00:21:25.510 --> 00:21:28.360
<v Speaker 0>Um, well, I'll do it on the laptop.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:21:31.540 --> 00:21:32.470
<v Speaker 0>Function called error.

NOTE CONF {"raw":[100,100,100]}

00:21:32.470 --> 00:21:35.260
<v Speaker 0>You can call, um.

NOTE CONF {"raw":[100,100,100,100]}

00:21:37.630 --> 00:21:38.720
<v Speaker 0>Just a second.

NOTE CONF {"raw":[100,100,100]}

00:21:39.020 --> 00:21:41.240
<v Speaker 0>Um, no.

NOTE CONF {"raw":[100,100]}

00:21:49.550 --> 00:21:50.090
<v Speaker 0>Error.

NOTE CONF {"raw":[100]}

00:21:50.690 --> 00:21:52.580
<v Speaker 0>Okay, first of all, what type does it have?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:21:53.450 --> 00:21:55.430
<v Speaker 0>You can always, uh, you want to find out about

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:55.430 --> 00:21:55.880
<v Speaker 0>a function.

NOTE CONF {"raw":[100,100]}

00:21:55.880 --> 00:21:57.500
<v Speaker 0>You can you can ask what type it is.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:21:57.500 --> 00:21:59.900
<v Speaker 0>So there's, uh, that's how you do that.

NOTE CONF {"raw":[100,100,68,100,100,100,100,100]}

00:21:59.900 --> 00:22:02.540
<v Speaker 0>So it takes a, a list of a list of

NOTE CONF {"raw":[100,100,100,60,100,100,100,100,100,100]}

00:22:02.540 --> 00:22:05.750
<v Speaker 0>characters that is a string, and it produces, um, a,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:05.750 --> 00:22:08.210
<v Speaker 0>which means it can produce anything, which means you can

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:08.210 --> 00:22:09.740
<v Speaker 0>put it in any context.

NOTE CONF {"raw":[100,100,100,100,100]}

00:22:09.890 --> 00:22:10.700
<v Speaker 2>You can't see.

NOTE CONF {"raw":[99,72,100]}

00:22:11.120 --> 00:22:12.260
<v Speaker 0>Oh, you can't see.

NOTE CONF {"raw":[100,100,100,100]}

00:22:12.740 --> 00:22:13.010
<v Speaker 0>Uh.

NOTE CONF {"raw":[46]}

00:22:13.010 --> 00:22:13.820
<v Speaker 0>Thank you.

NOTE CONF {"raw":[100,100]}

00:22:14.180 --> 00:22:16.520
<v Speaker 0>I pushed the button, but it didn't work.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:22:19.970 --> 00:22:22.190
<v Speaker 0>Okay, thanks.

NOTE CONF {"raw":[100,95]}

00:22:24.410 --> 00:22:26.840
<v Speaker 0>You can ask for the type of a function, and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:26.840 --> 00:22:27.560
<v Speaker 0>you get it.

NOTE CONF {"raw":[100,100,100]}

00:22:28.670 --> 00:22:33.080
<v Speaker 0>The fact that this produces a value of type of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:33.080 --> 00:22:34.610
<v Speaker 0>type A, meaning any type.

NOTE CONF {"raw":[100,100,100,100,100]}

00:22:34.610 --> 00:22:36.350
<v Speaker 0>That's rather unusual.

NOTE CONF {"raw":[100,100,100]}

00:22:36.500 --> 00:22:37.970
<v Speaker 0>Uh, what it means is you can put this in

NOTE CONF {"raw":[85,100,100,100,100,100,100,100,100,100]}

00:22:37.970 --> 00:22:39.080
<v Speaker 0>any context.

NOTE CONF {"raw":[100,100]}

00:22:39.200 --> 00:22:39.830
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:22:39.830 --> 00:22:44.990
<v Speaker 0>And, um, uh, you can, um, supply it with an

NOTE CONF {"raw":[100,100,100,100,100,79,100,100,100,100]}

00:22:44.990 --> 00:22:49.490
<v Speaker 0>error message and it will produce, um, it'll produce an

NOTE CONF {"raw":[100,100,100,100,100,100,100,93,100,100]}

00:22:49.490 --> 00:22:51.770
<v Speaker 0>exception containing your error message.

NOTE CONF {"raw":[100,100,100,100,100]}

00:22:51.770 --> 00:22:52.400
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:22:52.400 --> 00:22:56.000
<v Speaker 0>So I could have written, um, a third case here

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:56.000 --> 00:22:57.890
<v Speaker 0>with an error message if I wanted to.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:22:58.070 --> 00:22:58.340
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:22:58.340 --> 00:22:59.570
<v Speaker 0>That's how you would do it.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:23:02.030 --> 00:23:05.420
<v Speaker 0>Anyway, there's a code.

NOTE CONF {"raw":[100,100,100,100]}

00:23:06.170 --> 00:23:09.470
<v Speaker 0>Uh, could you take a minute or two and try

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:09.470 --> 00:23:14.240
<v Speaker 0>to write the code for, um, take and drop recursive

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:14.240 --> 00:23:15.710
<v Speaker 0>code for take and drop?

NOTE CONF {"raw":[100,100,100,100,100]}

00:23:16.040 --> 00:23:16.340
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:23:16.340 --> 00:23:19.190
<v Speaker 0>Could you please do that right now?

NOTE CONF {"raw":[96,100,100,100,100,100,100]}

00:23:19.730 --> 00:23:20.390
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:23:22.100 --> 00:23:26.960
<v Speaker 0>And they are not so much different from from these

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:26.960 --> 00:23:27.560
<v Speaker 0>here.

NOTE CONF {"raw":[100]}

00:23:27.620 --> 00:23:31.220
<v Speaker 0>You're going to need three cases for for each of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:31.220 --> 00:23:34.220
<v Speaker 0>them okay.

NOTE CONF {"raw":[100,100]}

00:23:34.220 --> 00:23:38.520
<v Speaker 0>One for the case where the the number zero and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,82,57]}

00:23:38.520 --> 00:23:40.350
<v Speaker 0>one for the case where you've got the empty list

NOTE CONF {"raw":[97,100,100,100,100,86,100,100,100,100]}

00:23:40.350 --> 00:23:43.620
<v Speaker 0>and one for the case where, um, yeah, the other

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:43.620 --> 00:23:44.160
<v Speaker 0>case.

NOTE CONF {"raw":[100]}

00:24:34.800 --> 00:24:37.530
<v Unknown>Introducing the world's first certified of.

NOTE CONF {"raw":[100,100,100,100,100,47]}

00:24:53.580 --> 00:24:54.420
<v Speaker 0>Lessons from jeopardy!

NOTE CONF {"raw":[30,100,100]}

00:24:54.420 --> 00:24:55.350
<v Speaker 0>If you know the.

NOTE CONF {"raw":[100,100,100,93]}

00:25:45.340 --> 00:25:47.980
<v Speaker 0>Okay, uh, maybe you've managed to do that.

NOTE CONF {"raw":[100,90,100,100,100,100,100,100]}

00:25:47.980 --> 00:25:50.590
<v Speaker 0>Or maybe you were distracted by me playing silly music,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:50.590 --> 00:25:51.520
<v Speaker 0>but, um.

NOTE CONF {"raw":[100,100]}

00:25:51.520 --> 00:25:53.230
<v Speaker 0>Anyway, uh.

NOTE CONF {"raw":[100,100]}

00:25:56.980 --> 00:25:58.990
<v Speaker 0>Uh, here's here's the answer.

NOTE CONF {"raw":[100,100,100,100,100]}

00:26:00.550 --> 00:26:01.930
<v Speaker 0>Or an answer.

NOTE CONF {"raw":[100,100,100]}

00:26:02.800 --> 00:26:03.520
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:26:03.850 --> 00:26:04.210
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:26:06.400 --> 00:26:06.790
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:26:06.790 --> 00:26:09.130
<v Speaker 0>So, um, the code for take.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:26:09.520 --> 00:26:11.500
<v Speaker 0>You know, as I said, there are three cases for

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:11.500 --> 00:26:12.100
<v Speaker 0>each of these.

NOTE CONF {"raw":[100,100,100]}

00:26:12.100 --> 00:26:15.010
<v Speaker 0>You've got the case where where where the number is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:15.010 --> 00:26:15.730
<v Speaker 0>zero.

NOTE CONF {"raw":[100]}

00:26:16.600 --> 00:26:18.730
<v Speaker 0>Uh, you've got the case where the list is empty,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:18.730 --> 00:26:20.830
<v Speaker 0>and then you've got the case where the number is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:20.830 --> 00:26:23.050
<v Speaker 0>non-zero and the list is non-empty.

NOTE CONF {"raw":[91,100,100,100,100,86]}

00:26:23.050 --> 00:26:23.290
<v Speaker 0>Okay.

NOTE CONF {"raw":[99]}

00:26:23.290 --> 00:26:24.550
<v Speaker 0>The recursive case.

NOTE CONF {"raw":[100,100,100]}

00:26:25.150 --> 00:26:25.570
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:26:25.570 --> 00:26:29.470
<v Speaker 0>So um, so we want to take zero zero items

NOTE CONF {"raw":[100,98,100,100,100,100,100,100,100,100]}

00:26:29.470 --> 00:26:31.000
<v Speaker 0>from a list XZ okay.

NOTE CONF {"raw":[100,92,100,87,100]}

00:26:31.000 --> 00:26:33.400
<v Speaker 0>Obviously the result is the empty list.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:26:33.400 --> 00:26:34.210
<v Speaker 0>Okay.

NOTE CONF {"raw":[98]}

00:26:37.570 --> 00:26:39.940
<v Speaker 0>If, um, if you want to take any number of

NOTE CONF {"raw":[100,60,100,100,100,100,100,100,100,100]}

00:26:39.940 --> 00:26:42.850
<v Speaker 0>items from the empty list, well, there aren't any, so

NOTE CONF {"raw":[100,100,100,100,100,94,100,100,100,100]}

00:26:42.850 --> 00:26:45.760
<v Speaker 0>you're out of luck, so you've got to return the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:45.760 --> 00:26:46.180
<v Speaker 0>empty list.

NOTE CONF {"raw":[100,100]}

00:26:46.210 --> 00:26:48.040
<v Speaker 0>You could return an error if you wanted.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:26:48.370 --> 00:26:51.970
<v Speaker 0>But the way take is defined in Haskell, it'll give

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,75,100]}

00:26:51.970 --> 00:26:52.810
<v Speaker 0>you the empty list.

NOTE CONF {"raw":[100,100,100,100]}

00:26:52.810 --> 00:26:55.960
<v Speaker 0>So if you ask for the first, you know, n

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:55.960 --> 00:26:58.300
<v Speaker 0>items of a list, that's that's shorter than that.

NOTE CONF {"raw":[100,100,98,100,100,100,100,100,100]}

00:26:58.300 --> 00:27:01.540
<v Speaker 0>It'll it'll just give you what's in the list and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:01.540 --> 00:27:02.350
<v Speaker 0>nothing more.

NOTE CONF {"raw":[100,100]}

00:27:04.330 --> 00:27:05.050
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:27:05.170 --> 00:27:08.830
<v Speaker 0>Um, but if you want the ith item from a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:08.830 --> 00:27:12.310
<v Speaker 0>list x cons xs and I is greater than zero.

NOTE CONF {"raw":[100,68,100,96,100,58,100,100,100,100]}

00:27:12.310 --> 00:27:12.970
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:27:12.970 --> 00:27:17.140
<v Speaker 0>So, um, so that means that the that the item

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:17.140 --> 00:27:20.200
<v Speaker 0>x, the first item has to be included because you're

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:20.200 --> 00:27:25.510
<v Speaker 0>taking the first I and um, and that includes x

NOTE CONF {"raw":[100,100,100,85,100,96,100,100,100,100]}

00:27:25.510 --> 00:27:26.020
<v Speaker 0>here.

NOTE CONF {"raw":[100]}

00:27:26.050 --> 00:27:26.410
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:27:26.410 --> 00:27:30.460
<v Speaker 0>So ex cons and then you want all of the

NOTE CONF {"raw":[100,62,100,100,100,100,100,100,100,100]}

00:27:30.460 --> 00:27:31.420
<v Speaker 0>other ones.

NOTE CONF {"raw":[100,100]}

00:27:32.780 --> 00:27:33.170
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:27:33.170 --> 00:27:36.230
<v Speaker 0>All of the remaining ones which are, that is to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:36.230 --> 00:27:42.050
<v Speaker 0>say, the I minus one, uh, number of items from

NOTE CONF {"raw":[100,100,98,100,100,100,100,100,100,100]}

00:27:42.050 --> 00:27:45.890
<v Speaker 0>the list XZ, which is the, uh, what you have

NOTE CONF {"raw":[100,100,58,100,100,100,80,100,100,100]}

00:27:45.890 --> 00:27:50.120
<v Speaker 0>left when you remove X or when you ignore x.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:50.120 --> 00:27:50.840
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:27:51.140 --> 00:27:54.620
<v Speaker 0>So we take, you know, take I of x cons

NOTE CONF {"raw":[100,100,100,100,100,100,52,100,100,100]}

00:27:54.620 --> 00:27:58.580
<v Speaker 0>x is its x cons take I minus one of

NOTE CONF {"raw":[92,92,55,89,100,100,100,100,100,100]}

00:27:58.580 --> 00:28:00.830
<v Speaker 0>x is okay.

NOTE CONF {"raw":[84,81,100]}

00:28:01.550 --> 00:28:05.030
<v Speaker 0>Did did did some of you get that or something

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:05.030 --> 00:28:07.790
<v Speaker 0>similar to that okay.

NOTE CONF {"raw":[100,100,100,100]}

00:28:07.790 --> 00:28:08.870
<v Speaker 0>It's some.

NOTE CONF {"raw":[100,84]}

00:28:11.360 --> 00:28:13.940
<v Speaker 0>It's not too different from what's here I mean at

NOTE CONF {"raw":[100,100,100,100,100,96,100,100,100,100]}

00:28:13.940 --> 00:28:17.090
<v Speaker 0>least the recursive the recursive case.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:28:18.650 --> 00:28:20.960
<v Speaker 0>You know you're you're doing a similar sort of thing.

NOTE CONF {"raw":[100,100,96,100,100,100,100,100,100,100]}

00:28:20.960 --> 00:28:24.440
<v Speaker 0>There's an I minus one here and you're, you're applying

NOTE CONF {"raw":[100,100,100,100,100,100,100,81,100,100]}

00:28:24.440 --> 00:28:24.860
<v Speaker 0>it.

NOTE CONF {"raw":[100]}

00:28:25.250 --> 00:28:27.470
<v Speaker 0>Um, you're applying the recursive call.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:28:27.680 --> 00:28:31.220
<v Speaker 0>The recursive call is to I minus one and XZ,

NOTE CONF {"raw":[73,100,100,100,100,100,100,100,100,58]}

00:28:31.220 --> 00:28:34.700
<v Speaker 0>which is the the tail of this of this list

NOTE CONF {"raw":[100,100,100,100,98,100,100,100,100,100]}

00:28:34.700 --> 00:28:39.800
<v Speaker 0>and and the the drop case is the same except

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:39.800 --> 00:28:44.600
<v Speaker 0>that um, except your your returning the rest.

NOTE CONF {"raw":[100,100,99,100,88,100,100,98]}

00:28:44.600 --> 00:28:47.030
<v Speaker 0>So if you drop zero from xz, the result is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:47.030 --> 00:28:47.570
<v Speaker 0>XZ.

NOTE CONF {"raw":[87]}

00:28:47.570 --> 00:28:51.080
<v Speaker 0>If you're dropping, um, some number other than zero from

NOTE CONF {"raw":[100,100,100,76,100,100,100,100,100,100]}

00:28:51.080 --> 00:28:52.790
<v Speaker 0>the empty list, the result is the empty list.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:28:52.790 --> 00:28:56.180
<v Speaker 0>And if you're dropping I from x axis, it's the

NOTE CONF {"raw":[100,100,100,100,66,100,88,100,100,100]}

00:28:56.180 --> 00:28:58.640
<v Speaker 0>same as dropping I minus one from XZ.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:28:58.640 --> 00:28:58.910
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:28:58.910 --> 00:29:00.590
<v Speaker 0>So you drop the first one and then you drop

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:00.590 --> 00:29:03.650
<v Speaker 0>all of the I minus one other ones after that.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:04.340 --> 00:29:05.000
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:29:05.120 --> 00:29:12.080
<v Speaker 0>So simultaneous recursion on uh the A number and a

NOTE CONF {"raw":[100,100,100,100,86,100,100,100,100,100]}

00:29:12.080 --> 00:29:12.710
<v Speaker 0>list.

NOTE CONF {"raw":[100]}

00:29:13.940 --> 00:29:19.190
<v Speaker 0>So we need two base cases except here where I

NOTE CONF {"raw":[100,100,100,91,99,100,100,100,100,100]}

00:29:19.190 --> 00:29:20.960
<v Speaker 0>didn't write it down because it would just be an

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:20.960 --> 00:29:21.350
<v Speaker 0>error.

NOTE CONF {"raw":[100]}

00:29:22.850 --> 00:29:23.420
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:29:23.420 --> 00:29:25.010
<v Speaker 0>Any questions about that.

NOTE CONF {"raw":[100,100,100,100]}

00:29:27.860 --> 00:29:28.850
<v Speaker 0>Is that a question.

NOTE CONF {"raw":[100,100,100,100]}

00:29:29.120 --> 00:29:29.630
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:29:29.790 --> 00:29:32.400
<v Speaker 0>You have to be a little more assertive.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:29:36.390 --> 00:29:38.280
<v Speaker 0>You don't need the first down function definition.

NOTE CONF {"raw":[100,100,100,100,100,69,100,100]}

00:29:38.280 --> 00:29:38.850
<v Speaker 0>For what?

NOTE CONF {"raw":[100,100]}

00:29:40.740 --> 00:29:41.700
<v Speaker 3>Zero access.

NOTE CONF {"raw":[88,42]}

00:29:42.510 --> 00:29:44.430
<v Speaker 0>You don't need the first definition.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:29:44.460 --> 00:29:45.480
<v Speaker 0>Ah, yes.

NOTE CONF {"raw":[99,100]}

00:29:45.480 --> 00:29:46.410
<v Speaker 0>That's a good point.

NOTE CONF {"raw":[85,100,100,100]}

00:29:46.410 --> 00:29:46.740
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:29:46.740 --> 00:29:46.980
<v Speaker 0>Good.

NOTE CONF {"raw":[100]}

00:29:46.980 --> 00:29:47.520
<v Speaker 0>Good point.

NOTE CONF {"raw":[100,100]}

00:29:47.520 --> 00:29:48.090
<v Speaker 0>Yes.

NOTE CONF {"raw":[100]}

00:29:48.330 --> 00:29:49.230
<v Speaker 0>Uh, exactly.

NOTE CONF {"raw":[98,100]}

00:29:49.230 --> 00:29:49.710
<v Speaker 0>Yes.

NOTE CONF {"raw":[100]}

00:29:49.710 --> 00:29:54.870
<v Speaker 0>These, um, uh, actually, you don't need two here because

NOTE CONF {"raw":[100,100,100,100,100,100,100,98,100,100]}

00:29:54.870 --> 00:29:56.490
<v Speaker 0>the second one.

NOTE CONF {"raw":[100,100,100]}

00:29:57.150 --> 00:29:58.740
<v Speaker 0>Uh, wait a minute.

NOTE CONF {"raw":[100,100,100,100]}

00:30:01.800 --> 00:30:02.970
<v Speaker 0>No, you do need it.

NOTE CONF {"raw":[88,100,100,100,100]}

00:30:05.790 --> 00:30:06.540
<v Speaker 0>Wait a minute.

NOTE CONF {"raw":[100,100,100]}

00:30:08.310 --> 00:30:09.240
<v Speaker 0>Yeah, you need it.

NOTE CONF {"raw":[100,100,100,100]}

00:30:09.240 --> 00:30:09.570
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:30:09.570 --> 00:30:11.820
<v Speaker 0>So if the if the first argument you were saying

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:11.820 --> 00:30:13.590
<v Speaker 0>you don't need both of these, right?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:30:13.680 --> 00:30:14.400
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:30:18.540 --> 00:30:18.870
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:30:18.870 --> 00:30:20.220
<v Speaker 0>You say we just need the first one.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:30:20.220 --> 00:30:20.580
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:30:20.580 --> 00:30:22.050
<v Speaker 0>Well, um.

NOTE CONF {"raw":[100,100]}

00:30:26.550 --> 00:30:27.270
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:30:27.330 --> 00:30:31.560
<v Speaker 0>If you only had the first case this would work,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:31.560 --> 00:30:34.800
<v Speaker 0>provided you don't want this behaviour that you get in

NOTE CONF {"raw":[100,100,100,100,100,87,100,100,100,100]}

00:30:34.800 --> 00:30:39.690
<v Speaker 0>Haskell that taking the first n items in the list,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:39.690 --> 00:30:43.680
<v Speaker 0>which is of length less than n, gives you just

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:43.680 --> 00:30:45.480
<v Speaker 0>what's in the list and nothing more.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:30:45.720 --> 00:30:47.580
<v Speaker 0>Okay, what you would get if you left out.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:30:47.580 --> 00:30:49.050
<v Speaker 0>The second case is you.

NOTE CONF {"raw":[100,100,100,100,89]}

00:30:49.050 --> 00:30:50.730
<v Speaker 0>You'd get an error on that case.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:30:50.730 --> 00:30:52.380
<v Speaker 0>Okay, so, um.

NOTE CONF {"raw":[100,100,95]}

00:30:52.380 --> 00:30:52.680
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:30:52.710 --> 00:30:53.130
<v Speaker 0>No, sorry.

NOTE CONF {"raw":[54,100]}

00:30:53.130 --> 00:30:53.850
<v Speaker 0>I thought you were.

NOTE CONF {"raw":[100,100,100,100]}

00:30:53.850 --> 00:30:55.860
<v Speaker 0>I thought you were pointing out correctly that something is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,98,80]}

00:30:55.860 --> 00:30:56.850
<v Speaker 0>redundant, but it isn't.

NOTE CONF {"raw":[100,100,100,100]}

00:30:56.850 --> 00:30:57.630
<v Speaker 0>It isn't redundant.

NOTE CONF {"raw":[100,100,100]}

00:30:57.630 --> 00:30:59.460
<v Speaker 0>You'd get a different function that way.

NOTE CONF {"raw":[94,100,100,100,100,100,100]}

00:31:00.060 --> 00:31:00.720
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:31:00.720 --> 00:31:02.520
<v Speaker 0>Anybody else have a question?

NOTE CONF {"raw":[100,100,100,100,100]}

00:31:02.610 --> 00:31:03.090
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:31:05.820 --> 00:31:06.510
<v Speaker 0>Wait a second.

NOTE CONF {"raw":[100,100,100]}

00:31:06.510 --> 00:31:06.930
<v Speaker 0>I can't.

NOTE CONF {"raw":[100,100]}

00:31:06.930 --> 00:31:07.620
<v Speaker 0>I can't hear you.

NOTE CONF {"raw":[100,100,100,100]}

00:31:07.620 --> 00:31:10.680
<v Speaker 0>Let me try throwing you a this red thing.

NOTE CONF {"raw":[100,100,100,100,97,51,100,100,100]}

00:31:12.300 --> 00:31:14.160
<v Speaker 4>Do you always have to start from the beginning of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:14.160 --> 00:31:14.760
<v Speaker 4>the list.

NOTE CONF {"raw":[100,100]}

00:31:14.760 --> 00:31:15.360
<v Speaker 2>Or you always.

NOTE CONF {"raw":[93,100,100]}

00:31:15.360 --> 00:31:15.600
<v Speaker 0>Have?

NOTE CONF {"raw":[100]}

00:31:15.600 --> 00:31:16.950
<v Speaker 0>Sorry, I can't even do.

NOTE CONF {"raw":[100,100,100,100,45]}

00:31:16.950 --> 00:31:18.810
<v Speaker 4>You have to start from the beginning of the list.

NOTE CONF {"raw":[82,89,99,100,100,100,100,100,100,100]}

00:31:18.810 --> 00:31:21.120
<v Speaker 4>If you're taking or dropping, do you have to start

NOTE CONF {"raw":[100,100,99,88,100,94,100,100,100,100]}

00:31:21.120 --> 00:31:22.680
<v Speaker 4>from the beginning of the list, or can you start

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:22.680 --> 00:31:23.700
<v Speaker 4>like partway for it?

NOTE CONF {"raw":[97,100,96,100]}

00:31:24.150 --> 00:31:25.320
<v Speaker 0>Do you have to start at the beginning of the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:25.320 --> 00:31:25.530
<v Speaker 0>list?

NOTE CONF {"raw":[100]}

00:31:25.530 --> 00:31:26.400
<v Speaker 0>Is that what you're asking?

NOTE CONF {"raw":[100,100,100,100,100]}

00:31:26.550 --> 00:31:29.500
<v Speaker 0>You're always going, um, uh, let's see.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:31:29.500 --> 00:31:30.400
<v Speaker 0>Left to right.

NOTE CONF {"raw":[100,100,100]}

00:31:30.700 --> 00:31:31.120
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:31:31.120 --> 00:31:34.870
<v Speaker 0>Because because the list is built using cons and that's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:34.870 --> 00:31:38.290
<v Speaker 0>and that is, um, always putting things on the left

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:38.290 --> 00:31:38.980
<v Speaker 0>at the beginning.

NOTE CONF {"raw":[100,100,100]}

00:31:38.980 --> 00:31:39.490
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:31:40.750 --> 00:31:42.490
<v Speaker 0>Sorry I didn't catch you at the beginning.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:31:42.490 --> 00:31:46.150
<v Speaker 0>Anybody else want to try with the red cube?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:31:47.440 --> 00:31:47.800
<v Speaker 0>No.

NOTE CONF {"raw":[49]}

00:31:52.000 --> 00:31:52.600
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:31:53.980 --> 00:31:57.370
<v Speaker 0>Um, I'll skip this.

NOTE CONF {"raw":[100,100,100,100]}

00:31:57.370 --> 00:31:59.560
<v Speaker 0>This is just explaining pattern matching.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:32:00.100 --> 00:32:01.990
<v Speaker 0>Um, again.

NOTE CONF {"raw":[100,100]}

00:32:07.090 --> 00:32:10.120
<v Speaker 0>Yeah, this was explaining pattern matching in terms of conditionals.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,83]}

00:32:10.360 --> 00:32:12.160
<v Speaker 0>Uh, I don't think I need to explain that.

NOTE CONF {"raw":[58,100,100,100,100,100,100,100,100]}

00:32:12.430 --> 00:32:15.280
<v Speaker 0>Um, I let me see.

NOTE CONF {"raw":[100,100,100,100,100]}

00:32:17.890 --> 00:32:18.370
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:32:18.370 --> 00:32:18.910
<v Speaker 0>You can.

NOTE CONF {"raw":[100,100]}

00:32:19.030 --> 00:32:20.980
<v Speaker 0>There are different ways of writing these things.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:32:20.980 --> 00:32:24.490
<v Speaker 0>So this is just showing that, um, uh, if you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:24.490 --> 00:32:27.070
<v Speaker 0>wanted to make this a little bit clearer.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:32:27.070 --> 00:32:30.160
<v Speaker 0>You might in the last case add a guard.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:32:30.160 --> 00:32:33.790
<v Speaker 0>So this is a this is this is making explicit

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:33.790 --> 00:32:37.210
<v Speaker 0>in the last case here that it only applies if

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:37.210 --> 00:32:40.000
<v Speaker 0>I is greater than zero okay.

NOTE CONF {"raw":[76,100,100,100,100,100]}

00:32:40.000 --> 00:32:43.780
<v Speaker 0>The code is otherwise the same okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:32:43.780 --> 00:32:46.270
<v Speaker 0>You know it's going to be greater than zero because

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:46.270 --> 00:32:49.060
<v Speaker 0>you've already checked for the case where I is equal

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:49.060 --> 00:32:50.560
<v Speaker 0>to zero okay.

NOTE CONF {"raw":[100,100,100]}

00:32:50.560 --> 00:32:52.300
<v Speaker 0>Because you do this in sequence.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:32:52.300 --> 00:32:56.650
<v Speaker 0>But it is actually nicer to make that explicit by

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:56.650 --> 00:32:57.820
<v Speaker 0>putting it in the code.

NOTE CONF {"raw":[100,100,100,100,100]}

00:32:57.820 --> 00:33:00.550
<v Speaker 0>So, um, you know, here we've got three cases that

NOTE CONF {"raw":[100,84,100,100,100,100,100,100,100,64]}

00:33:00.550 --> 00:33:01.600
<v Speaker 0>are quite simple.

NOTE CONF {"raw":[64,100,100]}

00:33:01.600 --> 00:33:04.690
<v Speaker 0>You could imagine in some much more complicated program.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:33:04.690 --> 00:33:06.760
<v Speaker 0>It might be that by the time you've got to

NOTE CONF {"raw":[100,100,100,100,100,100,100,70,100,100]}

00:33:06.760 --> 00:33:10.360
<v Speaker 0>this case, you've forgotten that it's, um, that you've already

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:10.360 --> 00:33:11.230
<v Speaker 0>checked this.

NOTE CONF {"raw":[100,100]}

00:33:11.230 --> 00:33:11.530
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:33:11.530 --> 00:33:13.240
<v Speaker 0>So this is just making it explicit.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:33:18.880 --> 00:33:19.570
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:33:19.570 --> 00:33:23.170
<v Speaker 0>So here is just showing how take works for a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:23.170 --> 00:33:24.520
<v Speaker 0>particular example.

NOTE CONF {"raw":[100,100]}

00:33:27.260 --> 00:33:31.490
<v Speaker 0>Um, so take three of words.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:33:31.670 --> 00:33:33.650
<v Speaker 0>This string, this list words.

NOTE CONF {"raw":[100,100,100,100,100]}

00:33:34.040 --> 00:33:36.980
<v Speaker 0>Um, so applying the third, the third case.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:33:36.980 --> 00:33:42.110
<v Speaker 0>The third case, um, uh, several times we get w

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:42.110 --> 00:33:45.440
<v Speaker 0>and then O and then R, so we're where we're

NOTE CONF {"raw":[100,100,86,100,100,49,100,89,96,100]}

00:33:45.440 --> 00:33:47.870
<v Speaker 0>going from three to 2 to 1.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:33:48.980 --> 00:33:52.400
<v Speaker 0>We've got W O and R the first three um

NOTE CONF {"raw":[100,100,100,100,100,87,100,100,100,100]}

00:33:52.400 --> 00:33:53.210
<v Speaker 0>items.

NOTE CONF {"raw":[100]}

00:33:53.210 --> 00:33:58.160
<v Speaker 0>And then uh, and then at the end of that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:58.160 --> 00:34:01.400
<v Speaker 0>we take, take zero of, of DZ the last, the

NOTE CONF {"raw":[100,81,100,100,100,100,37,100,100,100]}

00:34:01.400 --> 00:34:02.120
<v Speaker 0>last bit.

NOTE CONF {"raw":[100,100]}

00:34:02.120 --> 00:34:02.540
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:34:02.540 --> 00:34:07.280
<v Speaker 0>And that applying the, the first case here gives us

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:07.280 --> 00:34:08.360
<v Speaker 0>the empty list.

NOTE CONF {"raw":[100,100,100]}

00:34:08.360 --> 00:34:08.659
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:34:08.659 --> 00:34:11.149
<v Speaker 0>So there we produce from here the empty list.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:34:11.149 --> 00:34:14.899
<v Speaker 0>And the result is w o and r okay.

NOTE CONF {"raw":[100,100,100,100,97,94,100,88,100]}

00:34:15.290 --> 00:34:19.820
<v Speaker 0>Is that clear I hope right.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:34:21.500 --> 00:34:25.760
<v Speaker 0>Um so I just want to now, uh, uh, spend

NOTE CONF {"raw":[100,100,100,100,100,100,100,63,85,100]}

00:34:25.760 --> 00:34:28.730
<v Speaker 0>a little bit of time looking at what happens when

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:28.730 --> 00:34:30.800
<v Speaker 0>you take infinite lists.

NOTE CONF {"raw":[100,100,100,100]}

00:34:32.030 --> 00:34:34.580
<v Speaker 0>Okay, so I said, in Haskell, you can compute with

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:34.580 --> 00:34:35.300
<v Speaker 0>infinite lists.

NOTE CONF {"raw":[100,100]}

00:34:35.300 --> 00:34:36.500
<v Speaker 0>And that's and that's true.

NOTE CONF {"raw":[100,100,100,100,100]}

00:34:36.500 --> 00:34:38.300
<v Speaker 0>You get you get results.

NOTE CONF {"raw":[100,100,100,100,100]}

00:34:38.690 --> 00:34:41.810
<v Speaker 0>Um, uh, for, um, for programs on infinite lists, I

NOTE CONF {"raw":[94,65,100,90,100,100,100,100,63,100]}

00:34:41.810 --> 00:34:43.879
<v Speaker 0>showed you the infinite list of prime numbers.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:34:43.879 --> 00:34:48.139
<v Speaker 0>I mean, that was maybe I showed you the computing

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,52,100]}

00:34:48.139 --> 00:34:50.750
<v Speaker 0>forever, which is what you expect for something that's infinite.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:51.080 --> 00:34:53.690
<v Speaker 0>Um, if I'd if I'd written a little, um, I

NOTE CONF {"raw":[100,100,55,100,58,100,100,100,87,100]}

00:34:53.690 --> 00:34:56.419
<v Speaker 0>could have applied a function to it that took the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:56.419 --> 00:34:58.430
<v Speaker 0>nth number in a list.

NOTE CONF {"raw":[100,100,100,98,100]}

00:34:58.430 --> 00:35:02.000
<v Speaker 0>And then you could ask something like, what's the 374th

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:02.000 --> 00:35:02.870
<v Speaker 0>prime number?

NOTE CONF {"raw":[100,100]}

00:35:02.870 --> 00:35:05.510
<v Speaker 0>And it would just compute that many prime numbers and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:05.510 --> 00:35:09.620
<v Speaker 0>then give you the 374th one would be more, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,75]}

00:35:09.620 --> 00:35:13.820
<v Speaker 0>a more kind of, uh, appropriate way of demonstrating that.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:13.820 --> 00:35:15.770
<v Speaker 0>But the point is, you can compute with these infinite

NOTE CONF {"raw":[100,87,100,100,100,100,100,100,100,100]}

00:35:15.770 --> 00:35:20.570
<v Speaker 0>lists and then and then produce finite, uh, results from

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:20.570 --> 00:35:21.020
<v Speaker 0>them.

NOTE CONF {"raw":[100]}

00:35:21.020 --> 00:35:21.290
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:35:21.290 --> 00:35:23.180
<v Speaker 0>You have to take some care doing this.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:35:23.180 --> 00:35:26.940
<v Speaker 0>And here's an example of of not taking enough care.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:26.970 --> 00:35:32.550
<v Speaker 0>I've explained how, um, how I'm going to show you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:32.550 --> 00:35:34.530
<v Speaker 0>this actually working.

NOTE CONF {"raw":[100,100,100]}

00:35:35.070 --> 00:35:35.490
<v Speaker 0>Uh.

NOTE CONF {"raw":[100]}

00:35:39.210 --> 00:35:44.310
<v Speaker 0>I've, uh, I've explained how you can define take, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:44.310 --> 00:35:45.540
<v Speaker 0>in two ways.

NOTE CONF {"raw":[100,100,100]}

00:35:46.560 --> 00:35:47.340
<v Speaker 0>There we go.

NOTE CONF {"raw":[100,100,100]}

00:35:47.340 --> 00:35:52.350
<v Speaker 0>Up there, the the with a comprehension first and with

NOTE CONF {"raw":[79,100,100,100,100,64,100,100,100,100]}

00:35:52.350 --> 00:35:55.800
<v Speaker 0>no sorry recursion first, comprehension second.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:35:55.920 --> 00:35:56.670
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:35:56.670 --> 00:35:59.940
<v Speaker 0>But, um, they actually produce so they produce the same

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:59.940 --> 00:36:04.950
<v Speaker 0>answers for finite lists, but for infinite lists, the, um

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,82]}

00:36:04.950 --> 00:36:06.300
<v Speaker 0>the result is different.

NOTE CONF {"raw":[100,100,100,100]}

00:36:09.180 --> 00:36:09.540
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:36:09.540 --> 00:36:11.160
<v Speaker 0>It's on the slide, but I'll just show it to

NOTE CONF {"raw":[100,100,88,100,100,100,100,100,100,100]}

00:36:11.160 --> 00:36:13.830
<v Speaker 0>you in actual, uh, actually running.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:36:13.830 --> 00:36:15.030
<v Speaker 0>So you believe me.

NOTE CONF {"raw":[100,91,100,100]}

00:36:15.030 --> 00:36:19.860
<v Speaker 0>So if I do, um, take take of, um, what

NOTE CONF {"raw":[100,100,100,100,92,100,100,100,98,100]}

00:36:19.860 --> 00:36:21.000
<v Speaker 0>was the example there?

NOTE CONF {"raw":[100,100,100,95]}

00:36:21.000 --> 00:36:24.090
<v Speaker 0>Three Of the list.

NOTE CONF {"raw":[100,100,100,100]}

00:36:24.600 --> 00:36:26.100
<v Speaker 0>From ten on up.

NOTE CONF {"raw":[100,100,100,100]}

00:36:26.340 --> 00:36:30.660
<v Speaker 0>I'll get, as I would expect, um, lists containing ten,

NOTE CONF {"raw":[100,100,100,100,100,100,93,87,100,100]}

00:36:30.660 --> 00:36:31.770
<v Speaker 0>11 and 12.

NOTE CONF {"raw":[100,100,100]}

00:36:31.770 --> 00:36:34.260
<v Speaker 0>So that's the first three things in this list.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:36:34.920 --> 00:36:39.540
<v Speaker 0>Okay, but if I do take comp of three, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:40.140 --> 00:36:46.440
<v Speaker 0>ten on up, what I'll get is, um, I'll get

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:46.680 --> 00:36:49.770
<v Speaker 0>Haskell telling me that the, the list that I want

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:49.770 --> 00:36:54.090
<v Speaker 0>contains ten, 11 and 12, and then it it doesn't

NOTE CONF {"raw":[100,100,100,100,100,100,100,94,100,100]}

00:36:54.090 --> 00:36:55.470
<v Speaker 0>end the computation.

NOTE CONF {"raw":[100,100,100]}

00:36:55.560 --> 00:36:56.670
<v Speaker 0>Uh, here we are.

NOTE CONF {"raw":[90,100,100,100]}

00:36:56.700 --> 00:36:57.240
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:36:57.660 --> 00:36:59.010
<v Speaker 0>The computation hasn't ended yet.

NOTE CONF {"raw":[100,100,100,100,100]}

00:36:59.010 --> 00:37:00.090
<v Speaker 0>It's still looking.

NOTE CONF {"raw":[100,100,100]}

00:37:00.240 --> 00:37:03.690
<v Speaker 0>It's still looking for some other item that might be

NOTE CONF {"raw":[97,100,100,100,100,100,100,100,100,100]}

00:37:03.690 --> 00:37:04.650
<v Speaker 0>in that list.

NOTE CONF {"raw":[100,100,100]}

00:37:05.760 --> 00:37:06.180
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:37:06.180 --> 00:37:07.140
<v Speaker 0>Why is that?

NOTE CONF {"raw":[100,100,100]}

00:37:09.990 --> 00:37:11.280
<v Speaker 0>I have to interrupt it.

NOTE CONF {"raw":[100,100,100,100,100]}

00:37:11.280 --> 00:37:11.580
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:37:11.580 --> 00:37:12.630
<v Speaker 0>Why is that?

NOTE CONF {"raw":[100,100,100]}

00:37:15.000 --> 00:37:15.810
<v Speaker 0>Okay.

NOTE CONF {"raw":[78]}

00:37:16.380 --> 00:37:18.060
<v Speaker 0>Um, it's because of the code here.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:37:19.200 --> 00:37:19.380
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:37:19.380 --> 00:37:21.850
<v Speaker 0>If you look at this code, you, um, you know,

NOTE CONF {"raw":[100,100,100,100,100,100,100,95,100,100]}

00:37:21.850 --> 00:37:22.330
<v Speaker 0>you take.

NOTE CONF {"raw":[100,100]}

00:37:22.330 --> 00:37:23.650
<v Speaker 0>Maybe I have this on a slide.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:37:23.650 --> 00:37:24.430
<v Speaker 0>Let me see.

NOTE CONF {"raw":[100,100,100]}

00:37:28.990 --> 00:37:29.500
<v Speaker 2>Um.

NOTE CONF {"raw":[100]}

00:37:34.240 --> 00:37:35.350
<v Speaker 0>This is too complicated.

NOTE CONF {"raw":[100,100,100,100]}

00:37:35.350 --> 00:37:36.340
<v Speaker 0>I'm not going to go into this.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:37:36.340 --> 00:37:39.100
<v Speaker 0>But if you look at the recursive one, if you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:39.100 --> 00:37:42.640
<v Speaker 0>look at the recursive one, it's, uh, it's counting down,

NOTE CONF {"raw":[100,100,100,100,100,75,61,100,100,100]}

00:37:42.730 --> 00:37:44.860
<v Speaker 0>and then eventually it gets to zero.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:37:45.430 --> 00:37:47.410
<v Speaker 0>Um, and the answer is the empty list.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:37:47.410 --> 00:37:47.980
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:37:47.980 --> 00:37:50.380
<v Speaker 0>But the, um.

NOTE CONF {"raw":[100,100,100]}

00:37:50.710 --> 00:37:51.130
<v Speaker 0>Oh, sorry.

NOTE CONF {"raw":[100,100]}

00:37:51.130 --> 00:37:52.420
<v Speaker 0>This is the one I wanted to show you.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:37:52.420 --> 00:37:56.470
<v Speaker 0>This is this is also not very helpful.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:37:56.650 --> 00:37:56.950
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:37:57.580 --> 00:37:58.150
<v Speaker 0>Uh.

NOTE CONF {"raw":[100]}

00:38:02.830 --> 00:38:03.250
<v Speaker 5>Well.

NOTE CONF {"raw":[81]}

00:38:04.270 --> 00:38:05.650
<v Speaker 0>Let me do this on paper.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:38:22.840 --> 00:38:23.320
<v Speaker 0>Uh.

NOTE CONF {"raw":[43]}

00:38:27.790 --> 00:38:29.500
<v Speaker 0>Okay, so what have we got here?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:38:29.500 --> 00:38:30.850
<v Speaker 0>We've got the code up.

NOTE CONF {"raw":[100,100,100,100,100]}

00:38:31.480 --> 00:38:32.200
<v Speaker 0>Let me show you the.

NOTE CONF {"raw":[100,100,100,100,100]}

00:38:32.200 --> 00:38:32.800
<v Speaker 2>Code.

NOTE CONF {"raw":[100]}

00:38:34.090 --> 00:38:34.720
<v Speaker 0>There.

NOTE CONF {"raw":[100]}

00:38:34.720 --> 00:38:35.110
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:38:35.110 --> 00:38:36.010
<v Speaker 0>Take comp.

NOTE CONF {"raw":[100,76]}

00:38:36.940 --> 00:38:38.470
<v Speaker 0>So, what's going on here?

NOTE CONF {"raw":[100,100,100,100,100]}

00:38:39.640 --> 00:38:43.480
<v Speaker 0>We're going through the items in zip.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:38:46.840 --> 00:38:48.280
<v Speaker 0>0...

NOTE CONF {"raw":[100]}

00:38:49.150 --> 00:38:52.030
<v Speaker 0>And, uh, and x is so X is in this

NOTE CONF {"raw":[100,98,100,100,100,100,100,100,100,100]}

00:38:52.030 --> 00:38:55.690
<v Speaker 0>case is um, is ten, 1112.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:39:04.510 --> 00:39:05.650
<v Speaker 0>Actually, wait a minute.

NOTE CONF {"raw":[100,100,100,100]}

00:39:07.750 --> 00:39:08.530
<v Speaker 0>Excuse me.

NOTE CONF {"raw":[100,100]}

00:39:08.890 --> 00:39:09.220
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:39:10.540 --> 00:39:11.290
<v Speaker 0>It's ten.

NOTE CONF {"raw":[100,100]}

00:39:11.290 --> 00:39:11.530
<v Speaker 0>It's.

NOTE CONF {"raw":[100]}

00:39:11.530 --> 00:39:12.010
<v Speaker 0>Yeah, ten.

NOTE CONF {"raw":[100,100]}

00:39:12.010 --> 00:39:13.000
<v Speaker 0>It's ten.

NOTE CONF {"raw":[100,100]}

00:39:13.000 --> 00:39:13.390
<v Speaker 0>11.

NOTE CONF {"raw":[100]}

00:39:13.390 --> 00:39:14.680
<v Speaker 0>12 going on forever.

NOTE CONF {"raw":[100,100,100,100]}

00:39:14.950 --> 00:39:15.250
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:39:15.250 --> 00:39:16.660
<v Speaker 0>So what do I get from that?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:39:17.050 --> 00:39:19.670
<v Speaker 0>I get zero ten.

NOTE CONF {"raw":[100,100,100,100]}

00:39:20.180 --> 00:39:20.840
<v Speaker 0>It's a list.

NOTE CONF {"raw":[100,100,100]}

00:39:20.870 --> 00:39:21.920
<v Speaker 0>Zero ten.

NOTE CONF {"raw":[100,100]}

00:39:22.190 --> 00:39:23.750
<v Speaker 0>111.

NOTE CONF {"raw":[100]}

00:39:24.830 --> 00:39:25.430
<v Speaker 0>Two.

NOTE CONF {"raw":[100]}

00:39:25.430 --> 00:39:26.300
<v Speaker 0>12.

NOTE CONF {"raw":[100]}

00:39:26.840 --> 00:39:27.770
<v Speaker 0>Three.

NOTE CONF {"raw":[100]}

00:39:27.800 --> 00:39:28.850
<v Speaker 0>13.

NOTE CONF {"raw":[99]}

00:39:33.830 --> 00:39:34.460
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:39:34.460 --> 00:39:35.660
<v Speaker 0>Going on forever.

NOTE CONF {"raw":[100,100,100]}

00:39:38.540 --> 00:39:40.220
<v Speaker 0>And so looking at the code.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:39:40.220 --> 00:39:43.790
<v Speaker 0>So this is what's computed by by this bit.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:39:46.520 --> 00:39:46.880
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:39:46.880 --> 00:39:49.940
<v Speaker 0>And it's looking for a cases where the first thing

NOTE CONF {"raw":[100,100,100,100,95,100,100,100,100,100]}

00:39:49.940 --> 00:39:53.360
<v Speaker 0>in the pair is less than I, I in this

NOTE CONF {"raw":[100,100,100,100,100,100,95,100,100,100]}

00:39:53.360 --> 00:39:56.090
<v Speaker 0>case is um three.

NOTE CONF {"raw":[100,100,100,100]}

00:39:59.840 --> 00:40:00.230
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:40:00.230 --> 00:40:04.580
<v Speaker 0>So it looks at this, it says yes zero is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:04.580 --> 00:40:05.420
<v Speaker 0>less than three.

NOTE CONF {"raw":[84,84,100]}

00:40:06.320 --> 00:40:07.970
<v Speaker 0>Uh, part of the answer should be ten.

NOTE CONF {"raw":[97,100,100,100,91,100,100,100]}

00:40:08.000 --> 00:40:09.020
<v Speaker 0>Next item.

NOTE CONF {"raw":[100,100]}

00:40:09.020 --> 00:40:11.090
<v Speaker 0>Yes one is less than three.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:40:11.420 --> 00:40:13.490
<v Speaker 0>So the next bit of the answer is 11.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:40:13.880 --> 00:40:14.930
<v Speaker 0>Uh okay.

NOTE CONF {"raw":[100,100]}

00:40:14.930 --> 00:40:17.120
<v Speaker 0>Here two is less than three.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:40:17.120 --> 00:40:19.160
<v Speaker 0>The third item should be 12.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:40:19.160 --> 00:40:20.630
<v Speaker 0>And then it looks at this.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:40:20.900 --> 00:40:21.680
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:40:21.860 --> 00:40:24.500
<v Speaker 0>Um, well, no, three is not less than three.

NOTE CONF {"raw":[92,100,96,100,100,100,100,100,100]}

00:40:24.890 --> 00:40:27.380
<v Speaker 0>Don't include that one looks at that one.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:40:27.380 --> 00:40:29.150
<v Speaker 0>Four is not less than three.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:40:29.330 --> 00:40:30.560
<v Speaker 0>Don't include that one.

NOTE CONF {"raw":[100,100,100,100]}

00:40:30.560 --> 00:40:31.940
<v Speaker 0>It keeps on going.

NOTE CONF {"raw":[100,100,100,100]}

00:40:32.210 --> 00:40:34.820
<v Speaker 0>Looking faithfully.

NOTE CONF {"raw":[100,100]}

00:40:35.090 --> 00:40:36.710
<v Speaker 0>Uh, one after the other.

NOTE CONF {"raw":[100,100,100,100,100]}

00:40:36.710 --> 00:40:40.760
<v Speaker 0>For an item where the first thing in the in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:40.760 --> 00:40:43.310
<v Speaker 0>the pair is less than three, it will of course,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:43.310 --> 00:40:44.510
<v Speaker 0>never find one.

NOTE CONF {"raw":[100,100,100]}

00:40:44.660 --> 00:40:45.170
<v Speaker 0>Okay?

NOTE CONF {"raw":[100]}

00:40:45.170 --> 00:40:48.740
<v Speaker 0>Because the the indices are increasing, but Haskell doesn't know

NOTE CONF {"raw":[100,91,100,100,100,100,100,100,100,100]}

00:40:48.740 --> 00:40:49.280
<v Speaker 0>that.

NOTE CONF {"raw":[100]}

00:40:49.820 --> 00:40:51.470
<v Speaker 0>So it'll keep looking.

NOTE CONF {"raw":[100,81,100,100]}

00:40:53.600 --> 00:40:55.070
<v Speaker 0>Never finding anything.

NOTE CONF {"raw":[100,100,100]}

00:40:55.070 --> 00:40:59.810
<v Speaker 0>And so that's why after you know, producing ten 1112,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:59.840 --> 00:41:02.930
<v Speaker 0>it'll just sit there and and not and not stop

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:02.930 --> 00:41:03.470
<v Speaker 0>okay.

NOTE CONF {"raw":[100]}

00:41:03.470 --> 00:41:05.450
<v Speaker 0>It's just looking forever.

NOTE CONF {"raw":[100,100,100,100]}

00:41:06.830 --> 00:41:09.050
<v Speaker 0>So this is an example of how you have to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:09.050 --> 00:41:13.130
<v Speaker 0>be a little careful with infinite lists and, um, you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,73,100]}

00:41:13.130 --> 00:41:15.290
<v Speaker 0>know, lazy computation works.

NOTE CONF {"raw":[100,100,100,100]}

00:41:15.590 --> 00:41:18.030
<v Speaker 0>Um, depending on how you mean.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:41:18.030 --> 00:41:21.840
<v Speaker 0>Depending on how you you use it, it'll it'll work

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:21.840 --> 00:41:23.310
<v Speaker 0>and give you answers that you want.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:41:23.310 --> 00:41:25.620
<v Speaker 0>And sometimes you have to be careful.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:41:25.800 --> 00:41:26.610
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:41:26.610 --> 00:41:27.690
<v Speaker 0>Where am I?

NOTE CONF {"raw":[99,100,100]}

00:41:27.690 --> 00:41:28.170
<v Speaker 2>Here.

NOTE CONF {"raw":[100]}

00:41:28.440 --> 00:41:28.950
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:41:28.950 --> 00:41:29.850
<v Speaker 0>Have a few more minutes.

NOTE CONF {"raw":[100,100,100,100,100]}

00:41:29.850 --> 00:41:32.580
<v Speaker 0>I just want to, um, talk to you a little

NOTE CONF {"raw":[100,100,100,100,89,100,100,100,100,100]}

00:41:32.580 --> 00:41:36.690
<v Speaker 0>bit more about arithmetic, because the way that the recursive

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:36.690 --> 00:41:42.300
<v Speaker 0>definition of natural numbers is, um, is given, uh, the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,80,100]}

00:41:42.300 --> 00:41:45.540
<v Speaker 0>way that you can write functions on natural numbers.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:41:46.110 --> 00:41:51.840
<v Speaker 0>This is, um, from mathematics, uh, about 130, 140 years

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:51.840 --> 00:41:52.470
<v Speaker 0>ago.

NOTE CONF {"raw":[100]}

00:41:52.680 --> 00:41:55.470
<v Speaker 0>Um, it's something called piano arithmetic.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:41:55.470 --> 00:42:00.090
<v Speaker 0>Piano is spelled piano, which is not like the thing

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:00.090 --> 00:42:02.940
<v Speaker 0>that you play with 88 keys.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:42:03.060 --> 00:42:05.250
<v Speaker 0>Um, um, musical instrument.

NOTE CONF {"raw":[100,100,100,100]}

00:42:05.250 --> 00:42:07.560
<v Speaker 0>It's, um, the man, uh, Giuseppe.

NOTE CONF {"raw":[97,100,100,100,100,100]}

00:42:07.560 --> 00:42:08.280
<v Speaker 0>Piano.

NOTE CONF {"raw":[100]}

00:42:08.970 --> 00:42:09.360
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:42:09.360 --> 00:42:12.000
<v Speaker 0>And he was the first one to, um, to write

NOTE CONF {"raw":[100,100,100,100,100,100,100,69,100,100]}

00:42:12.000 --> 00:42:15.690
<v Speaker 0>this down and to understand how induction works.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:42:15.990 --> 00:42:17.550
<v Speaker 0>Um, mathematical induction.

NOTE CONF {"raw":[83,100,100]}

00:42:17.550 --> 00:42:17.820
<v Speaker 0>Okay.

NOTE CONF {"raw":[94]}

00:42:17.820 --> 00:42:21.180
<v Speaker 0>And so here is, uh, piano arithmetic used.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:42:21.180 --> 00:42:25.020
<v Speaker 0>Suppose you had that you, that you didn't have addition

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:25.020 --> 00:42:28.350
<v Speaker 0>multiplication and uh, exponentiation.

NOTE CONF {"raw":[100,100,52,100]}

00:42:28.710 --> 00:42:31.620
<v Speaker 0>So here is how you could define these three things

NOTE CONF {"raw":[100,97,97,100,100,100,100,100,100,100]}

00:42:32.370 --> 00:42:32.940
<v Speaker 0>okay.

NOTE CONF {"raw":[100]}

00:42:32.940 --> 00:42:36.000
<v Speaker 0>On on natural numbers okay.

NOTE CONF {"raw":[100,100,100,100,100]}

00:42:36.000 --> 00:42:38.070
<v Speaker 0>Numbers zero and greater.

NOTE CONF {"raw":[97,100,100,100]}

00:42:38.070 --> 00:42:38.550
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:42:38.550 --> 00:42:43.350
<v Speaker 0>So plus uh it takes two integers, produces an integer

NOTE CONF {"raw":[100,100,89,100,100,100,100,100,100,100]}

00:42:43.590 --> 00:42:45.450
<v Speaker 0>and is defined by recursion.

NOTE CONF {"raw":[100,71,100,100,100]}

00:42:45.930 --> 00:42:49.530
<v Speaker 0>So m number m plus zero.

NOTE CONF {"raw":[100,100,100,67,100,100]}

00:42:49.800 --> 00:42:54.480
<v Speaker 0>It's recursion on the second argument okay m plus zero

NOTE CONF {"raw":[87,100,100,100,100,100,100,92,100,100]}

00:42:54.480 --> 00:43:00.330
<v Speaker 0>is m and n plus n for m greater than

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:00.330 --> 00:43:01.050
<v Speaker 0>zero.

NOTE CONF {"raw":[100]}

00:43:02.040 --> 00:43:02.490
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:43:02.490 --> 00:43:07.830
<v Speaker 0>Well uh that's recursively you look at m plus n

NOTE CONF {"raw":[100,64,100,100,100,100,100,100,100,100]}

00:43:07.830 --> 00:43:10.110
<v Speaker 0>minus one whatever that is.

NOTE CONF {"raw":[100,100,100,100,100]}

00:43:10.110 --> 00:43:11.760
<v Speaker 0>And then you add one to it.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:43:14.100 --> 00:43:14.520
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:43:14.520 --> 00:43:19.840
<v Speaker 0>So for example three plus two is three plus one

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:20.590 --> 00:43:21.610
<v Speaker 0>plus one.

NOTE CONF {"raw":[100,100]}

00:43:24.010 --> 00:43:24.730
<v Speaker 0>You know.

NOTE CONF {"raw":[100,100]}

00:43:26.500 --> 00:43:32.260
<v Speaker 0>You know four plus 72 is four plus 71 plus

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:32.260 --> 00:43:33.520
<v Speaker 0>one okay.

NOTE CONF {"raw":[100,100]}

00:43:33.520 --> 00:43:34.060
<v Speaker 0>And so forth.

NOTE CONF {"raw":[100,100,100]}

00:43:34.060 --> 00:43:36.820
<v Speaker 0>So this is a recursive definition of plus if you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:36.820 --> 00:43:39.130
<v Speaker 0>didn't have plus if all you had that is to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:39.130 --> 00:43:41.920
<v Speaker 0>say if all you had was plus one, you didn't

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:41.920 --> 00:43:44.920
<v Speaker 0>have anything except plus one and zero.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:43:46.150 --> 00:43:46.390
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:43:46.390 --> 00:43:49.930
<v Speaker 0>The plus here is not actually a recursive invocation of

NOTE CONF {"raw":[100,100,100,100,100,100,55,100,100,100]}

00:43:49.930 --> 00:43:50.110
<v Speaker 0>this.

NOTE CONF {"raw":[100]}

00:43:50.110 --> 00:43:53.710
<v Speaker 0>Plus it's a it's a separate, separate operation.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:43:54.370 --> 00:43:55.060
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:43:55.360 --> 00:43:56.740
<v Speaker 0>Um bit confusing okay.

NOTE CONF {"raw":[91,100,100,100]}

00:43:56.740 --> 00:43:57.910
<v Speaker 0>Let's look at times.

NOTE CONF {"raw":[100,100,100,100]}

00:43:57.910 --> 00:44:01.510
<v Speaker 0>So so how would you define times recursively.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:44:01.510 --> 00:44:01.930
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:44:01.930 --> 00:44:05.080
<v Speaker 0>Well as m times zero is zero okay.

NOTE CONF {"raw":[100,100,100,98,100,100,100,100]}

00:44:05.080 --> 00:44:07.420
<v Speaker 0>And any things times zero is zero.

NOTE CONF {"raw":[47,46,46,100,100,100,100]}

00:44:08.410 --> 00:44:09.220
<v Speaker 0>All right.

NOTE CONF {"raw":[84,84]}

00:44:09.220 --> 00:44:13.780
<v Speaker 0>And m times n it's like uh, n copies of

NOTE CONF {"raw":[100,100,100,100,100,100,93,100,100,100]}

00:44:13.780 --> 00:44:15.460
<v Speaker 0>em added together.

NOTE CONF {"raw":[100,100,100]}

00:44:15.460 --> 00:44:18.760
<v Speaker 0>So em plus em, plus em plus m n times

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:18.760 --> 00:44:19.360
<v Speaker 0>added together.

NOTE CONF {"raw":[100,100]}

00:44:19.360 --> 00:44:20.980
<v Speaker 0>And this is what this is doing here.

NOTE CONF {"raw":[93,100,100,100,100,100,100,100]}

00:44:20.980 --> 00:44:24.250
<v Speaker 0>You take, um, to get em copies of N, you

NOTE CONF {"raw":[100,100,96,100,100,79,100,100,100,100]}

00:44:24.250 --> 00:44:28.030
<v Speaker 0>get n minus one copies of em, and then you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:28.030 --> 00:44:30.220
<v Speaker 0>put another copy of em onto it, and you add

NOTE CONF {"raw":[100,100,100,100,100,80,100,100,100,100]}

00:44:30.220 --> 00:44:31.180
<v Speaker 0>them all together.

NOTE CONF {"raw":[100,100,100]}

00:44:32.710 --> 00:44:34.120
<v Speaker 0>That's what's happening here.

NOTE CONF {"raw":[100,100,100,100]}

00:44:35.890 --> 00:44:36.550
<v Speaker 0>All right.

NOTE CONF {"raw":[74,74]}

00:44:41.800 --> 00:44:44.290
<v Speaker 0>And similarly for exponentiation.

NOTE CONF {"raw":[100,100,100,100]}

00:44:45.220 --> 00:44:45.940
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:44:45.940 --> 00:44:50.200
<v Speaker 0>M to the power of zero is one m.

NOTE CONF {"raw":[97,100,100,100,100,100,100,100,61]}

00:44:50.200 --> 00:44:52.420
<v Speaker 0>Anything to the power of zero is one and m

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:52.420 --> 00:44:53.530
<v Speaker 0>to the power of n.

NOTE CONF {"raw":[100,100,100,100,100]}

00:44:53.530 --> 00:44:56.260
<v Speaker 0>It's like you take n copies of em and you

NOTE CONF {"raw":[100,100,100,100,100,100,100,97,100,100]}

00:44:56.260 --> 00:44:57.610
<v Speaker 0>multiply them together.

NOTE CONF {"raw":[100,100,100]}

00:44:57.610 --> 00:45:00.610
<v Speaker 0>So similar pattern is what we had here just now.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:00.610 --> 00:45:05.350
<v Speaker 0>Except we're using multiplication to put together the the the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:05.350 --> 00:45:06.070
<v Speaker 0>things.

NOTE CONF {"raw":[100]}

00:45:06.310 --> 00:45:06.880
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:45:06.880 --> 00:45:10.810
<v Speaker 0>So m times, m times m times m etc. however

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:10.810 --> 00:45:11.560
<v Speaker 0>many you need.

NOTE CONF {"raw":[100,100,100]}

00:45:15.830 --> 00:45:16.670
<v Speaker 2>Okay.

NOTE CONF {"raw":[100]}

00:45:17.030 --> 00:45:19.250
<v Speaker 0>And, um, just showing that working.

NOTE CONF {"raw":[90,51,100,100,100,100]}

00:45:19.250 --> 00:45:23.240
<v Speaker 0>This is, this is two plus three computation sequence.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:45:23.690 --> 00:45:26.030
<v Speaker 0>Um, you know, you eventually work your way down to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:26.030 --> 00:45:28.790
<v Speaker 0>two plus zero, and then you add one a bunch

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:28.790 --> 00:45:30.500
<v Speaker 0>of times to get five.

NOTE CONF {"raw":[100,100,100,100,100]}

00:45:36.890 --> 00:45:37.670
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:45:37.670 --> 00:45:41.510
<v Speaker 0>So that's just a kind of perhaps curiosity for those

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:41.510 --> 00:45:44.480
<v Speaker 0>of you who are doing maybe computer science and mathematics,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:44.480 --> 00:45:46.670
<v Speaker 0>this is something you might learn about in mathematics is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:46.670 --> 00:45:50.060
<v Speaker 0>kind of the foundations of mathematics include like how do

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:50.060 --> 00:45:52.100
<v Speaker 0>you define what the numbers are?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:45:52.490 --> 00:45:55.040
<v Speaker 0>Um, and here's a picture of Giuseppe Piano.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:45:55.370 --> 00:45:58.310
<v Speaker 0>Um, and, uh, slightly funny looking man.

NOTE CONF {"raw":[100,100,86,100,100,100,100]}

00:45:58.490 --> 00:46:01.400
<v Speaker 0>Uh, but anyway, he invented piano arithmetic.

NOTE CONF {"raw":[65,100,100,100,100,100,100]}

00:46:01.850 --> 00:46:03.320
<v Speaker 0>Um, and, um.

NOTE CONF {"raw":[100,100,100]}

00:46:05.330 --> 00:46:08.000
<v Speaker 0>That's that's all I wanted to say, but I want

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:08.000 --> 00:46:09.770
<v Speaker 0>to give you some time to ask questions.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:46:09.770 --> 00:46:11.660
<v Speaker 0>So are there any questions at this point?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:46:12.020 --> 00:46:14.180
<v Speaker 0>Um, before I finish the lecture.

NOTE CONF {"raw":[100,100,100,96,100,100]}

00:46:16.940 --> 00:46:20.870
<v Speaker 0>Any hands or maybe you've got you've had enough of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:20.870 --> 00:46:23.660
<v Speaker 0>recursion and you just want to go away.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:46:24.050 --> 00:46:25.640
<v Speaker 0>Uh, perhaps.

NOTE CONF {"raw":[100,100]}

00:46:25.640 --> 00:46:27.920
<v Speaker 0>Okay, you can come up afterwards and ask.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:46:27.920 --> 00:46:30.440
<v Speaker 0>So next time, thank you for your attention.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:46:30.440 --> 00:46:34.190
<v Speaker 0>Next time we're going to have higher order functions okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:34.190 --> 00:46:35.150
<v Speaker 0>Next lecture.

NOTE CONF {"raw":[100,100]}

00:46:35.150 --> 00:46:36.710
<v Speaker 0>So thank you.

NOTE CONF {"raw":[100,100,100]}

00:46:57.950 --> 00:46:58.250
<v Speaker 6>Yeah.

NOTE CONF {"raw":[100]}

00:46:58.250 --> 00:46:59.840
<v Speaker 6>And uh last.

NOTE CONF {"raw":[100,100,100]}

00:46:59.840 --> 00:47:01.910
<v Speaker 7>Slide you define slide matrix for.

NOTE CONF {"raw":[98,99,99,78,76,95]}

00:47:02.630 --> 00:47:05.540
<v Speaker 0>For some uh, wait a minute.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:47:08.420 --> 00:47:09.770
<v Speaker 0>Uh, you mean wait a minute.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:47:09.770 --> 00:47:10.610
<v Speaker 0>Let me just get to it.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:47:10.800 --> 00:47:11.190
<v Speaker 0>That one.

NOTE CONF {"raw":[100,100]}

00:47:11.190 --> 00:47:11.370
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:47:12.690 --> 00:47:13.050
<v Speaker 0>Yes.

NOTE CONF {"raw":[93]}

00:47:13.350 --> 00:47:13.470
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:47:13.470 --> 00:47:14.370
<v Speaker 0>I was trying to explain.

NOTE CONF {"raw":[100,100,100,100,100]}

00:47:14.370 --> 00:47:16.290
<v Speaker 0>This is kind of a this is kind of a,

NOTE CONF {"raw":[100,71,100,100,100,100,100,100,100,100]}

00:47:16.710 --> 00:47:20.820
<v Speaker 0>uh, unfortunate way that I wrote this down.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:47:20.820 --> 00:47:24.840
<v Speaker 0>The way this was done in mathematics is actually you

NOTE CONF {"raw":[100,100,100,80,100,90,100,100,100,100]}

00:47:24.840 --> 00:47:28.260
<v Speaker 0>define, um, you don't use zero and plus one, you

NOTE CONF {"raw":[100,100,100,100,100,100,94,95,100,100]}

00:47:28.260 --> 00:47:32.370
<v Speaker 0>use zero, and you use a function called sometimes succ

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,95]}

00:47:32.370 --> 00:47:34.710
<v Speaker 0>for successor or s for successor.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:47:35.220 --> 00:47:38.340
<v Speaker 0>Um, and it's applied to a, you know, a number.

NOTE CONF {"raw":[100,100,100,100,100,90,100,100,100,100]}

00:47:38.340 --> 00:47:40.650
<v Speaker 0>And so and so instead of writing, instead of writing

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:40.650 --> 00:47:43.620
<v Speaker 0>zero plus one plus one plus one, I would write

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:43.620 --> 00:47:47.190
<v Speaker 0>successor of successor of successor of zero.

NOTE CONF {"raw":[100,96,100,100,100,100,100]}

00:47:48.090 --> 00:47:52.980
<v Speaker 0>And instead of writing this I would write m uh

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,93,100]}

00:47:52.980 --> 00:48:00.000
<v Speaker 0>plus zero equals m and m plus successor uh, of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:00.000 --> 00:48:03.570
<v Speaker 0>n equals um m plus n.

NOTE CONF {"raw":[89,100,69,100,100,60]}

00:48:04.230 --> 00:48:05.460
<v Speaker 0>I would write successor of that.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:48:05.970 --> 00:48:06.180
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:48:06.180 --> 00:48:08.430
<v Speaker 0>So that's really what I'm trying to do.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:48:08.430 --> 00:48:09.420
<v Unknown>When I write that.

NOTE CONF {"raw":[100,100,100,58]}

00:48:09.990 --> 00:48:10.290
<v Unknown>Um.

NOTE CONF {"raw":[100]}

WEBVTT

00:00:10.560 --> 00:00:13.290
<v Unknown>It might seem crazy what I'm about to say.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:00:16.260 --> 00:00:17.790
<v Unknown>So sure she's here.

NOTE CONF {"raw":[49,40,100,100]}

00:00:17.820 --> 00:00:19.680
<v Unknown>You can take a break.

NOTE CONF {"raw":[100,100,100,100,100]}

00:00:21.690 --> 00:00:23.970
<v Unknown>From a hot air balloon.

NOTE CONF {"raw":[35,92,100,100,100]}

00:00:24.000 --> 00:00:25.290
<v Unknown>I could go to space.

NOTE CONF {"raw":[100,100,100,100,100]}

00:00:27.390 --> 00:00:28.380
<v Unknown>With the air.

NOTE CONF {"raw":[100,100,100]}

00:00:28.560 --> 00:00:30.240
<v Unknown>Like I don't care, baby.

NOTE CONF {"raw":[100,100,100,100,99]}

00:00:30.240 --> 00:00:31.830
<v Unknown>By the way.

NOTE CONF {"raw":[100,100,100]}

00:00:32.700 --> 00:00:32.910
<v Unknown>Huh?

NOTE CONF {"raw":[75]}

00:00:33.060 --> 00:00:34.380
<v Unknown>Because I'm happy.

NOTE CONF {"raw":[100,100,100]}

00:00:34.410 --> 00:00:38.340
<v Unknown>Clap along if you feel like a room without a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,97]}

00:00:38.340 --> 00:00:38.850
<v Unknown>roof.

NOTE CONF {"raw":[100]}

00:00:39.090 --> 00:00:40.350
<v Unknown>Because I'm happy.

NOTE CONF {"raw":[87,100,100]}

00:00:40.350 --> 00:00:44.850
<v Unknown>Clap along if you feel like happiness is the truth.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,97,100]}

00:00:45.090 --> 00:00:46.380
<v Unknown>Because I'm happy.

NOTE CONF {"raw":[100,100,100]}

00:00:46.380 --> 00:00:50.790
<v Unknown>Clap along if you know what happiness is to you.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,47,100]}

00:00:51.120 --> 00:00:52.440
<v Unknown>Because I'm happy.

NOTE CONF {"raw":[77,100,100]}

00:00:52.440 --> 00:00:56.250
<v Unknown>Clap along if you feel like that's what you want

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,74]}

00:00:56.250 --> 00:00:56.850
<v Unknown>to do.

NOTE CONF {"raw":[74,100]}

00:00:58.530 --> 00:00:59.340
<v Unknown>Here come bad back.

NOTE CONF {"raw":[90,73,90,45]}

00:00:59.460 --> 00:01:00.330
<v Unknown>Who's talking?

NOTE CONF {"raw":[48,90]}

00:01:00.330 --> 00:01:01.350
<v Unknown>Listen, man.

NOTE CONF {"raw":[26,48]}

00:01:03.720 --> 00:01:05.790
<v Unknown>Yeah, well, give me all you got.

NOTE CONF {"raw":[85,64,100,100,82,99,100]}

00:01:05.790 --> 00:01:07.320
<v Unknown>No holding back.

NOTE CONF {"raw":[100,100,100]}

00:01:09.720 --> 00:01:11.940
<v Unknown>Yeah, well, I should probably warn you.

NOTE CONF {"raw":[99,63,100,100,100,100,100]}

00:01:11.940 --> 00:01:13.290
<v Unknown>I'll be just fine.

NOTE CONF {"raw":[100,100,100,100]}

00:01:15.690 --> 00:01:17.940
<v Unknown>Yeah, no offence to you.

NOTE CONF {"raw":[100,100,93,100,100]}

00:01:17.940 --> 00:01:19.140
<v Unknown>Don't waste your time.

NOTE CONF {"raw":[100,100,100,100]}

00:01:20.010 --> 00:01:20.790
<v Unknown>Here's why.

NOTE CONF {"raw":[100,100]}

00:01:21.090 --> 00:01:22.440
<v Unknown>Because I'm happy.

NOTE CONF {"raw":[100,100,100]}

00:01:22.470 --> 00:01:26.340
<v Unknown>Clap along if you feel like a room without a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,93]}

00:01:26.340 --> 00:01:26.910
<v Unknown>roof.

NOTE CONF {"raw":[100]}

00:01:27.150 --> 00:01:28.380
<v Unknown>Because I'm happy.

NOTE CONF {"raw":[90,100,100]}

00:01:28.380 --> 00:01:32.880
<v Unknown>Clap along if you feel like happiness is the truth.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:33.120 --> 00:01:34.410
<v Unknown>Because I'm happy.

NOTE CONF {"raw":[100,100,100]}

00:01:34.410 --> 00:01:38.850
<v Unknown>Clap along if you know what happiness is to you.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,93,100]}

00:01:39.180 --> 00:01:40.500
<v Unknown>Because I'm happy.

NOTE CONF {"raw":[87,100,100]}

00:01:40.500 --> 00:01:44.310
<v Unknown>Clap along if you feel like that's what you want

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,82]}

00:01:44.310 --> 00:01:44.790
<v Unknown>to do.

NOTE CONF {"raw":[82,93]}

00:01:46.800 --> 00:01:47.640
<v Unknown>Bring me down.

NOTE CONF {"raw":[100,100,97]}

00:02:00.100 --> 00:02:00.850
<v Speaker 0>It's working.

NOTE CONF {"raw":[100,100]}

00:02:01.120 --> 00:02:01.780
<v Speaker 0>Oh, there it goes.

NOTE CONF {"raw":[94,100,100,100]}

00:02:01.930 --> 00:02:03.640
<v Speaker 0>Okay, I forgot my microphone.

NOTE CONF {"raw":[100,100,100,100,100]}

00:02:03.940 --> 00:02:04.780
<v Speaker 0>Um, yeah.

NOTE CONF {"raw":[100,100]}

00:02:05.860 --> 00:02:07.930
<v Speaker 0>Uh, I just realised this is ten years old.

NOTE CONF {"raw":[69,100,100,86,100,100,100,100,100]}

00:02:07.990 --> 00:02:13.300
<v Speaker 0>Uh, so much for my up to date, uh, music.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:15.760 --> 00:02:21.580
<v Speaker 0>Okay, so today, uh, expression trees as an algebraic data

NOTE CONF {"raw":[100,100,100,93,100,91,100,100,100,82]}

00:02:21.580 --> 00:02:21.880
<v Speaker 0>type.

NOTE CONF {"raw":[82]}

00:02:21.880 --> 00:02:25.780
<v Speaker 0>You had the first half of this on Tuesday.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:02:26.620 --> 00:02:31.240
<v Speaker 0>Um, and I showed you, um, this was about representing

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:31.240 --> 00:02:36.340
<v Speaker 0>syntax of languages, um, using Haskell algebraic data types.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:02:36.340 --> 00:02:40.300
<v Speaker 0>And I showed you, uh, first example was arithmetic expressions

NOTE CONF {"raw":[100,100,100,100,95,100,100,100,100,100]}

00:02:40.300 --> 00:02:45.370
<v Speaker 0>with uh, with um, uh, integers, addition and multiplication.

NOTE CONF {"raw":[100,100,100,98,97,100,100,100,100]}

00:02:46.030 --> 00:02:48.760
<v Speaker 0>Um, so we went through that how to represent them

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:48.760 --> 00:02:50.080
<v Speaker 0>with three cases.

NOTE CONF {"raw":[100,100,100]}

00:02:50.500 --> 00:02:53.440
<v Speaker 0>Um, how to evaluate them.

NOTE CONF {"raw":[100,100,100,100,100]}

00:02:54.370 --> 00:02:59.320
<v Speaker 0>Uh, with a function with uh, you know, usual, usual

NOTE CONF {"raw":[100,100,100,100,100,70,100,100,100,100]}

00:02:59.320 --> 00:03:03.250
<v Speaker 0>pattern matching function definition with three cases.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:03:03.550 --> 00:03:10.120
<v Speaker 0>Um, there were variations for um infix expression, infix constructors

NOTE CONF {"raw":[100,100,100,100,100,100,100,62,100,100]}

00:03:10.120 --> 00:03:11.980
<v Speaker 0>and symbolic constructors.

NOTE CONF {"raw":[100,100,100]}

00:03:11.980 --> 00:03:14.410
<v Speaker 0>Anyway, so that was my first example.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:03:14.410 --> 00:03:18.940
<v Speaker 0>And then I moved on to propositions which is logical

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:18.940 --> 00:03:25.300
<v Speaker 0>propositions with uh propositional variables which are strings, uh false

NOTE CONF {"raw":[100,100,81,100,100,100,100,100,86,100]}

00:03:25.300 --> 00:03:29.410
<v Speaker 0>true negation, uh disjunction and conjunction.

NOTE CONF {"raw":[100,100,100,100,76,100]}

00:03:30.130 --> 00:03:30.520
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:03:30.520 --> 00:03:35.290
<v Speaker 0>So similar to the arithmetic expressions, except more complicated because

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:35.290 --> 00:03:40.060
<v Speaker 0>there are six cases, um, uh, and there were variables

NOTE CONF {"raw":[73,73,100,100,100,100,100,100,100,100]}

00:03:40.420 --> 00:03:42.580
<v Speaker 0>in there, not just constants.

NOTE CONF {"raw":[100,100,100,100,100]}

00:03:42.790 --> 00:03:43.780
<v Speaker 0>True and false.

NOTE CONF {"raw":[100,100,100]}

00:03:45.490 --> 00:03:49.000
<v Speaker 0>And so we had examples like, like this is the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:49.000 --> 00:03:58.550
<v Speaker 0>um, uh, the prop, uh, you know, variable a conjunction

NOTE CONF {"raw":[79,100,100,100,100,100,100,100,100,100]}

00:03:58.550 --> 00:04:01.100
<v Speaker 0>negation of the variable a okay.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:04:01.100 --> 00:04:01.910
<v Speaker 0>Written.

NOTE CONF {"raw":[100]}

00:04:01.910 --> 00:04:02.510
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:04:03.860 --> 00:04:04.460
<v Speaker 0>Well.

NOTE CONF {"raw":[100]}

00:04:11.690 --> 00:04:12.740
<v Speaker 0>Written like that.

NOTE CONF {"raw":[100,100,100]}

00:04:14.390 --> 00:04:16.760
<v Speaker 0>Um, in normal logical notation.

NOTE CONF {"raw":[100,100,100,100,100]}

00:04:16.760 --> 00:04:17.090
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:04:17.090 --> 00:04:18.709
<v Speaker 0>So you remember that, right?

NOTE CONF {"raw":[100,100,100,100,100]}

00:04:19.489 --> 00:04:20.180
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:04:20.450 --> 00:04:27.560
<v Speaker 0>Um, now, uh, I stopped at that point, and now

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:27.560 --> 00:04:29.720
<v Speaker 0>I want to talk about evaluation.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:04:29.900 --> 00:04:30.350
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:04:30.350 --> 00:04:32.780
<v Speaker 0>How do we evaluate a proposition like that?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:04:34.340 --> 00:04:35.270
<v Speaker 0>Um, okay.

NOTE CONF {"raw":[100,100]}

00:04:35.270 --> 00:04:38.660
<v Speaker 0>Well, here's six lines of, uh, well, six lines plus,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:38.660 --> 00:04:43.280
<v Speaker 0>uh, type signature, um, for an evaluation function.

NOTE CONF {"raw":[95,100,100,100,100,100,100,100]}

00:04:43.280 --> 00:04:43.730
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:04:43.730 --> 00:04:46.670
<v Speaker 0>And the evaluation function takes a proposition and turns it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:46.670 --> 00:04:47.720
<v Speaker 0>into a boolean.

NOTE CONF {"raw":[100,100,100]}

00:04:47.720 --> 00:04:51.830
<v Speaker 0>But we can't do that for a proposition with variables

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:51.830 --> 00:04:54.050
<v Speaker 0>in it without having more information.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:04:54.050 --> 00:04:54.380
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:04:54.380 --> 00:04:57.290
<v Speaker 0>So if I, if I ask you like, what is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:57.290 --> 00:04:57.710
<v Speaker 0>that?

NOTE CONF {"raw":[100]}

00:04:57.710 --> 00:04:59.660
<v Speaker 0>What is the value of this expression.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:05:00.110 --> 00:05:02.420
<v Speaker 0>Well, for this case you can actually say it's false.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:02.420 --> 00:05:02.720
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:05:02.720 --> 00:05:06.080
<v Speaker 0>Because uh, whether A is true or whether A is

NOTE CONF {"raw":[100,82,100,100,100,100,100,100,100,100]}

00:05:06.080 --> 00:05:08.780
<v Speaker 0>false, you'll still get false out of this.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:05:08.780 --> 00:05:14.270
<v Speaker 0>But, um, you know, uh, taking a, uh, taking something

NOTE CONF {"raw":[100,100,100,100,50,100,100,93,100,100]}

00:05:14.270 --> 00:05:15.410
<v Speaker 0>more complicated.

NOTE CONF {"raw":[100,100]}

00:05:18.440 --> 00:05:18.950
<v Speaker 0>Uh.

NOTE CONF {"raw":[100]}

00:05:22.880 --> 00:05:28.700
<v Speaker 0>Let's know, taking something more complicated.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:05:28.700 --> 00:05:28.940
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:05:28.940 --> 00:05:31.220
<v Speaker 0>So whether or not this is true or false depends

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:31.220 --> 00:05:32.180
<v Speaker 0>on the value of a.

NOTE CONF {"raw":[100,100,100,100,100]}

00:05:33.770 --> 00:05:36.920
<v Speaker 0>Okay, uh, this will always be false.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:05:36.920 --> 00:05:39.890
<v Speaker 0>But then whether A is true or false determines the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:39.890 --> 00:05:40.460
<v Speaker 0>value of that.

NOTE CONF {"raw":[100,100,100]}

00:05:40.460 --> 00:05:40.730
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:05:40.730 --> 00:05:45.530
<v Speaker 0>So in order to in order to evaluate a proposition,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:45.530 --> 00:05:48.170
<v Speaker 0>I need to know what the values of the variables

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:48.170 --> 00:05:48.410
<v Speaker 0>are.

NOTE CONF {"raw":[100]}

00:05:48.410 --> 00:05:54.990
<v Speaker 0>And so this evaluation function, uh requires an extra parameter.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:56.400 --> 00:05:57.060
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:05:57.060 --> 00:05:59.340
<v Speaker 0>It's the valuation.

NOTE CONF {"raw":[100,100,100]}

00:06:00.090 --> 00:06:01.680
<v Speaker 0>What's the valuation?

NOTE CONF {"raw":[100,77,100]}

00:06:01.980 --> 00:06:06.510
<v Speaker 0>It's a function taking variable names to their values.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:06:08.970 --> 00:06:10.950
<v Speaker 0>Okay I define it to be that.

NOTE CONF {"raw":[100,100,96,100,100,100,100]}

00:06:11.760 --> 00:06:12.510
<v Speaker 0>All right.

NOTE CONF {"raw":[99,99]}

00:06:15.540 --> 00:06:19.230
<v Speaker 0>And then the the the cases here there's one case

NOTE CONF {"raw":[100,100,100,100,83,91,100,100,100,100]}

00:06:19.230 --> 00:06:20.730
<v Speaker 0>for every constructor okay.

NOTE CONF {"raw":[100,100,100,100]}

00:06:20.730 --> 00:06:28.830
<v Speaker 0>Just reminding you six constructors variables false true negation conjunction

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:29.070 --> 00:06:30.510
<v Speaker 0>sorry disjunction conjunction.

NOTE CONF {"raw":[100,100,100]}

00:06:30.510 --> 00:06:34.560
<v Speaker 0>So one for each case I'll start with the second

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:34.560 --> 00:06:36.690
<v Speaker 0>case okay.

NOTE CONF {"raw":[100,100]}

00:06:36.690 --> 00:06:41.250
<v Speaker 0>And remember that on the left hand side where these

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,79,100]}

00:06:41.250 --> 00:06:45.300
<v Speaker 0>are the constructors for propositions.

NOTE CONF {"raw":[100,100,100,100,100]}

00:06:45.420 --> 00:06:45.810
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:06:45.810 --> 00:06:47.370
<v Speaker 0>So this is syntax.

NOTE CONF {"raw":[100,100,100,100]}

00:06:47.370 --> 00:06:50.760
<v Speaker 0>This is building up expressions like you know that I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:50.760 --> 00:06:55.350
<v Speaker 0>might have written like this uh, in logic, okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:06:55.350 --> 00:06:58.200
<v Speaker 0>They're expressed using these constructors.

NOTE CONF {"raw":[100,100,100,100,100]}

00:06:58.200 --> 00:06:59.490
<v Speaker 0>So slightly different notation.

NOTE CONF {"raw":[100,100,100,100]}

00:06:59.490 --> 00:07:04.440
<v Speaker 0>But anyway, taking syntax and coming up with the value

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:04.440 --> 00:07:10.260
<v Speaker 0>of that given a uh, an interpretation of the variables.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:10.260 --> 00:07:10.680
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:07:10.680 --> 00:07:13.170
<v Speaker 0>And so what you get on the right hand side

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:13.170 --> 00:07:16.830
<v Speaker 0>is boolean expressions okay.

NOTE CONF {"raw":[100,100,100,100]}

00:07:16.830 --> 00:07:20.760
<v Speaker 0>Things like false value of of f is false value

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:20.760 --> 00:07:24.900
<v Speaker 0>of t is true value of negation of p.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:07:25.590 --> 00:07:28.620
<v Speaker 0>You evaluate p and you negate it.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:07:29.580 --> 00:07:30.270
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:07:30.270 --> 00:07:35.580
<v Speaker 0>And uh evaluating uh p or q and p and

NOTE CONF {"raw":[100,100,100,62,100,100,100,100,100,100]}

00:07:35.580 --> 00:07:39.690
<v Speaker 0>q you evaluate P, you evaluate Q, and then you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:39.690 --> 00:07:43.890
<v Speaker 0>do the appropriate, um, thing in Haskell, uh, you know,

NOTE CONF {"raw":[100,100,100,73,100,100,100,100,100,100]}

00:07:44.070 --> 00:07:47.220
<v Speaker 0>uh, disjunction or conjunction with those two values.

NOTE CONF {"raw":[71,100,100,100,100,100,100,100]}

00:07:47.910 --> 00:07:48.480
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:07:51.160 --> 00:07:56.440
<v Speaker 0>So, um, I made the remark when I was talking

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:56.440 --> 00:08:01.810
<v Speaker 0>about evaluating arithmetic expressions that this definition is so is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:01.810 --> 00:08:04.300
<v Speaker 0>so, uh, kind of simple.

NOTE CONF {"raw":[100,96,100,100,100]}

00:08:04.300 --> 00:08:08.530
<v Speaker 0>And it's hard to see that it's actually doing anything.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:09.460 --> 00:08:10.210
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:08:10.450 --> 00:08:14.560
<v Speaker 0>Uh, you know, uh, but it is doing something.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:08:14.560 --> 00:08:14.830
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:08:14.830 --> 00:08:16.990
<v Speaker 0>The stuff on the left hand side is proposition.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:08:16.990 --> 00:08:20.230
<v Speaker 0>The stuff on the right hand side is, is Boolean

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:20.230 --> 00:08:20.860
<v Speaker 0>value.

NOTE CONF {"raw":[100]}

00:08:20.860 --> 00:08:28.330
<v Speaker 0>And it's basically mapping the syntactic, uh, um, syntactic constructs

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:28.330 --> 00:08:29.200
<v Speaker 0>over here.

NOTE CONF {"raw":[100,100]}

00:08:29.590 --> 00:08:33.729
<v Speaker 0>Uh, the, uh, to, to like they're, they're meaning in,

NOTE CONF {"raw":[100,100,86,100,100,100,75,77,100,100]}

00:08:33.729 --> 00:08:34.900
<v Speaker 0>in whoops.

NOTE CONF {"raw":[100,88]}

00:08:35.080 --> 00:08:38.409
<v Speaker 0>They're meaning in um in the booleans.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:08:38.409 --> 00:08:38.740
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:08:38.740 --> 00:08:39.760
<v Speaker 0>The truth values.

NOTE CONF {"raw":[100,100,100]}

00:08:41.500 --> 00:08:41.979
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:08:44.560 --> 00:08:47.140
<v Speaker 0>Um, this first case here, okay.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:08:47.140 --> 00:08:50.440
<v Speaker 0>That that's the one where we're using the um, the

NOTE CONF {"raw":[93,100,100,100,100,100,100,100,96,100]}

00:08:50.440 --> 00:08:53.080
<v Speaker 0>valuation, the only one we're using, the valuation, the other

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:53.080 --> 00:08:56.380
<v Speaker 0>cases, we're just passing the valuation on to be able

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:56.380 --> 00:08:58.090
<v Speaker 0>to evaluate the subexpressions.

NOTE CONF {"raw":[100,100,100,100]}

00:08:59.590 --> 00:08:59.890
<v Speaker 0>Okay.

NOTE CONF {"raw":[99]}

00:08:59.890 --> 00:09:03.130
<v Speaker 0>But in this first case, um, if we've got a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:03.130 --> 00:09:07.330
<v Speaker 0>variable called x, then to get the value we simply

NOTE CONF {"raw":[100,100,94,100,100,100,100,100,100,100]}

00:09:07.330 --> 00:09:09.880
<v Speaker 0>look it up in the valuation.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:09:09.880 --> 00:09:10.150
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:09:10.150 --> 00:09:14.320
<v Speaker 0>Valuation is the um is the first parameter here.

NOTE CONF {"raw":[100,100,100,69,100,100,100,100,100]}

00:09:16.360 --> 00:09:16.960
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:09:16.960 --> 00:09:18.130
<v Speaker 0>So we just look it up.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:09:28.720 --> 00:09:29.440
<v Speaker 0>Have you got that.

NOTE CONF {"raw":[100,100,100,100]}

00:09:31.720 --> 00:09:33.760
<v Speaker 0>Sort of questions.

NOTE CONF {"raw":[100,100,100]}

00:09:39.580 --> 00:09:40.690
<v Speaker 0>Here's an example.

NOTE CONF {"raw":[100,100,100]}

00:09:41.860 --> 00:09:42.370
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:09:50.350 --> 00:09:51.670
<v Speaker 0>Oh, no, I'll do I'll do it on the on

NOTE CONF {"raw":[100,100,92,100,100,100,100,100,100,100]}

00:09:51.670 --> 00:09:52.990
<v Speaker 0>the paper.

NOTE CONF {"raw":[100,100]}

00:10:02.800 --> 00:10:07.600
<v Speaker 0>Okay, so, um, this is a lot like truth tables.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:08.590 --> 00:10:09.040
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:10:09.040 --> 00:10:10.150
<v Speaker 0>So, um.

NOTE CONF {"raw":[100,100]}

00:10:16.150 --> 00:10:19.030
<v Speaker 0>The value of a can be, uh, false or.

NOTE CONF {"raw":[100,100,100,100,100,100,96,100,100]}

00:10:19.150 --> 00:10:21.070
<v Speaker 0>I mean, this is a truth table for this, for

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:21.070 --> 00:10:26.680
<v Speaker 0>this expression, the expression being, um, a and not a.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:30.640 --> 00:10:31.150
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:10:31.150 --> 00:10:34.570
<v Speaker 0>So I don't know how much Julian went through on

NOTE CONF {"raw":[100,100,100,100,100,100,98,100,100,100]}

00:10:34.570 --> 00:10:38.500
<v Speaker 0>this or whether he sort of, um, assumed that you

NOTE CONF {"raw":[100,100,100,100,100,100,100,83,100,100]}

00:10:38.500 --> 00:10:39.580
<v Speaker 0>knew how to do it.

NOTE CONF {"raw":[100,100,100,100,100]}

00:10:39.580 --> 00:10:41.020
<v Speaker 0>Anyway, it's in the book.

NOTE CONF {"raw":[100,100,100,100,100]}

00:10:41.020 --> 00:10:47.290
<v Speaker 0>Okay, to evaluate this expression a and not a.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:10:48.470 --> 00:10:48.950
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:10:48.950 --> 00:10:51.890
<v Speaker 0>You, uh, I mean, for all the possible values of

NOTE CONF {"raw":[100,93,100,100,100,100,100,100,100,100]}

00:10:51.890 --> 00:10:55.370
<v Speaker 0>a, um, uh, you can write the possible values of

NOTE CONF {"raw":[100,100,95,100,100,100,100,100,100,100]}

00:10:55.370 --> 00:10:59.750
<v Speaker 0>a in this column, and then the kind of subexpressions.

NOTE CONF {"raw":[100,69,100,100,100,100,100,100,100,98]}

00:10:59.930 --> 00:11:02.630
<v Speaker 0>You break it down into subexpressions and quickly, I'll just

NOTE CONF {"raw":[100,100,100,100,100,96,100,100,100,100]}

00:11:02.630 --> 00:11:05.810
<v Speaker 0>write down the value of the negation of a, and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:05.810 --> 00:11:09.320
<v Speaker 0>then the value of the conjunction of those two things

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:09.320 --> 00:11:12.260
<v Speaker 0>is written down here as the result.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:11:12.260 --> 00:11:12.860
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:11:12.950 --> 00:11:15.620
<v Speaker 0>So this is familiar right.

NOTE CONF {"raw":[100,100,100,100,81]}

00:11:15.650 --> 00:11:16.730
<v Speaker 0>Truth tables.

NOTE CONF {"raw":[100,100]}

00:11:17.300 --> 00:11:17.750
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:11:18.500 --> 00:11:23.120
<v Speaker 0>No I think I think it should be um, okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:23.120 --> 00:11:26.450
<v Speaker 0>And um, so given.

NOTE CONF {"raw":[100,100,100,100]}

00:11:28.580 --> 00:11:35.750
<v Speaker 0>An evaluation of variables is picking out a row here.

NOTE CONF {"raw":[88,100,100,100,100,100,100,100,100,100]}

00:11:36.650 --> 00:11:36.980
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:11:36.980 --> 00:11:38.390
<v Speaker 0>In this case it's one variable.

NOTE CONF {"raw":[100,100,100,91,100,100]}

00:11:38.390 --> 00:11:40.160
<v Speaker 0>So it's either true or false.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:11:42.920 --> 00:11:43.400
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:11:43.400 --> 00:11:48.770
<v Speaker 0>And the the value produced using eval prop is giving

NOTE CONF {"raw":[100,100,100,100,100,100,94,100,100,100]}

00:11:48.770 --> 00:11:53.840
<v Speaker 0>you, you know, the corresponding value in the um in

NOTE CONF {"raw":[98,100,98,100,100,100,100,100,100,100]}

00:11:53.840 --> 00:11:54.710
<v Speaker 0>the final column.

NOTE CONF {"raw":[100,100,100]}

00:11:54.710 --> 00:11:54.980
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:11:54.980 --> 00:11:57.920
<v Speaker 0>So if if the valuation says that a is true,

NOTE CONF {"raw":[100,100,100,100,72,100,100,100,100,100]}

00:11:57.920 --> 00:12:01.130
<v Speaker 0>then the value of the expression is going to be

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:01.130 --> 00:12:01.910
<v Speaker 0>false.

NOTE CONF {"raw":[100]}

00:12:01.910 --> 00:12:07.160
<v Speaker 0>And the kind of writing it down in columns like

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:07.160 --> 00:12:11.210
<v Speaker 0>this is kind of like, uh, the I mean, the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:11.210 --> 00:12:15.410
<v Speaker 0>evaluation of this proceeds by breaking the, um, the expression

NOTE CONF {"raw":[100,100,100,94,100,100,100,96,100,100]}

00:12:15.410 --> 00:12:18.170
<v Speaker 0>down into subexpressions and, and recursively.

NOTE CONF {"raw":[100,100,96,100,100,100]}

00:12:18.440 --> 00:12:20.210
<v Speaker 0>Um, so if it was a bigger expression, then there

NOTE CONF {"raw":[77,100,100,100,100,100,100,100,96,84]}

00:12:20.210 --> 00:12:21.950
<v Speaker 0>would be more, more columns here.

NOTE CONF {"raw":[84,100,100,100,100,100]}

00:12:21.950 --> 00:12:23.810
<v Speaker 0>Anyway, uh, this is just to show you kind of

NOTE CONF {"raw":[100,74,100,100,100,100,100,100,100,100]}

00:12:23.810 --> 00:12:25.610
<v Speaker 0>informally what's happening here.

NOTE CONF {"raw":[100,100,100,100]}

00:12:25.940 --> 00:12:30.290
<v Speaker 0>Um, so in my example, I'd write it not like.

NOTE CONF {"raw":[100,100,100,100,100,87,100,100,100,100]}

00:12:32.540 --> 00:12:36.410
<v Speaker 0>You know, not using normal logical notation, but using this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:36.410 --> 00:12:38.510
<v Speaker 0>notation here that I've just defined.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:12:38.510 --> 00:12:38.930
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:12:38.930 --> 00:12:44.930
<v Speaker 0>So we've got a variable, a uh, conjunction negation of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:44.930 --> 00:12:46.140
<v Speaker 0>that variable, eh?

NOTE CONF {"raw":[100,100,47]}

00:12:48.450 --> 00:12:49.170
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:12:49.530 --> 00:12:53.820
<v Speaker 0>Um, I said evaluation is a is a function from,

NOTE CONF {"raw":[100,100,100,98,100,100,100,100,100,100]}

00:12:53.820 --> 00:12:59.700
<v Speaker 0>um, from variable names to, um, boolean values.

NOTE CONF {"raw":[100,100,100,100,100,69,100,100]}

00:12:59.700 --> 00:13:02.310
<v Speaker 0>So here is an example of one okay.

NOTE CONF {"raw":[100,83,83,100,100,100,100,100]}

00:13:02.310 --> 00:13:03.930
<v Speaker 0>It has four variables in it.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:13:03.930 --> 00:13:08.250
<v Speaker 0>Just in order to make sure I have enough okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:08.250 --> 00:13:10.710
<v Speaker 0>And so I'm saying a is true B is false

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:10.710 --> 00:13:12.750
<v Speaker 0>C is false and D is true.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:13:13.020 --> 00:13:17.940
<v Speaker 0>And then applying you know, let me just uh well

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,83,100]}

00:13:18.330 --> 00:13:19.680
<v Speaker 0>I didn't I didn't go through it.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:13:19.680 --> 00:13:22.650
<v Speaker 0>But there's a function I also had on my slides

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:22.650 --> 00:13:27.450
<v Speaker 0>for, for turning a proposition into a string, which would

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:27.450 --> 00:13:28.350
<v Speaker 0>give that result.

NOTE CONF {"raw":[100,100,100]}

00:13:28.350 --> 00:13:34.140
<v Speaker 0>But evaluating the proposition with that evaluation would produce the

NOTE CONF {"raw":[100,100,100,100,100,100,93,100,100,100]}

00:13:34.140 --> 00:13:35.220
<v Speaker 0>result false.

NOTE CONF {"raw":[100,100]}

00:13:35.220 --> 00:13:35.820
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:13:35.820 --> 00:13:39.540
<v Speaker 0>And it's exactly like I said, the second row of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:39.540 --> 00:13:42.270
<v Speaker 0>this truth table is what's happening there.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:13:44.490 --> 00:13:45.270
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:13:48.510 --> 00:13:52.140
<v Speaker 0>And the way it works is step by step explained

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:52.140 --> 00:13:53.730
<v Speaker 0>right up there.

NOTE CONF {"raw":[97,100,100]}

00:13:53.790 --> 00:13:54.450
<v Speaker 0>Let me just.

NOTE CONF {"raw":[100,100,100]}

00:13:55.470 --> 00:13:57.780
<v Speaker 0>It's it's step by step here.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:13:57.780 --> 00:14:00.030
<v Speaker 0>And, um, for example.

NOTE CONF {"raw":[100,99,100,100]}

00:14:00.960 --> 00:14:03.720
<v Speaker 0>Um, okay.

NOTE CONF {"raw":[100,89]}

00:14:04.230 --> 00:14:07.770
<v Speaker 0>Uh, evaluation with that, with that, with that evaluation of

NOTE CONF {"raw":[100,100,100,100,100,100,58,100,79,100]}

00:14:07.770 --> 00:14:09.000
<v Speaker 0>that whole expression.

NOTE CONF {"raw":[100,100,100]}

00:14:09.000 --> 00:14:09.330
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:14:09.330 --> 00:14:10.710
<v Speaker 0>It breaks it down into pieces.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:14:10.710 --> 00:14:13.050
<v Speaker 0>And then, for example, one of the things that it's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:13.050 --> 00:14:18.120
<v Speaker 0>doing is um, is, uh, looking at, uh, wait a

NOTE CONF {"raw":[100,100,100,100,100,100,100,87,100,100]}

00:14:18.120 --> 00:14:21.540
<v Speaker 0>minute, this is what I wanted to say.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:14:21.540 --> 00:14:28.050
<v Speaker 0>So, uh, evaluating that involves, for example, evaluating, uh, the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,97,100]}

00:14:28.050 --> 00:14:34.440
<v Speaker 0>variable a, which according to the first case, um, is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:34.440 --> 00:14:38.610
<v Speaker 0>a matter of, uh, applying the evaluation to a that's

NOTE CONF {"raw":[100,100,100,91,100,100,67,100,100,100]}

00:14:38.610 --> 00:14:39.960
<v Speaker 0>this first case here.

NOTE CONF {"raw":[100,100,100,100]}

00:14:42.970 --> 00:14:43.660
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:14:43.660 --> 00:14:48.100
<v Speaker 0>And, uh, on my previous slide, the value of a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:48.100 --> 00:14:50.290
<v Speaker 0>the valuation applied to A gives true.

NOTE CONF {"raw":[100,100,60,100,100,100,100]}

00:14:50.320 --> 00:14:53.590
<v Speaker 0>So the result of that is is true.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:14:54.820 --> 00:14:55.360
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:14:55.360 --> 00:14:57.640
<v Speaker 0>And then the other bits get evaluated.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:14:57.640 --> 00:14:59.260
<v Speaker 0>In the end you end up with false.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:15:00.850 --> 00:15:01.570
<v Speaker 0>All right.

NOTE CONF {"raw":[100,100]}

00:15:03.880 --> 00:15:04.990
<v Speaker 0>I hope that's.

NOTE CONF {"raw":[100,100,100]}

00:15:08.860 --> 00:15:10.030
<v Speaker 0>Clear enough.

NOTE CONF {"raw":[100,100]}

00:15:11.380 --> 00:15:12.130
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:15:16.420 --> 00:15:20.020
<v Speaker 0>Looking at another example is more complicated.

NOTE CONF {"raw":[100,100,100,100,97,100,100]}

00:15:21.910 --> 00:15:22.270
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:15:22.270 --> 00:15:24.250
<v Speaker 0>This one, this one, uh.

NOTE CONF {"raw":[100,100,100,100,100]}

00:15:29.890 --> 00:15:33.280
<v Speaker 0>This one was kind of boring because it, uh.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:15:35.590 --> 00:15:36.940
<v Speaker 0>The result was false.

NOTE CONF {"raw":[100,100,100,100]}

00:15:36.940 --> 00:15:40.390
<v Speaker 0>No matter what the variable a what, no matter what

NOTE CONF {"raw":[100,100,100,100,100,100,94,100,100,100]}

00:15:40.390 --> 00:15:41.470
<v Speaker 0>the value of A was.

NOTE CONF {"raw":[100,100,100,100,100]}

00:15:41.470 --> 00:15:43.840
<v Speaker 0>Okay, let's take a little bit more complicated one.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:15:43.840 --> 00:15:47.170
<v Speaker 0>So um, let's take one with two variables.

NOTE CONF {"raw":[100,91,100,100,100,100,100,100]}

00:15:47.170 --> 00:15:49.090
<v Speaker 0>So um.

NOTE CONF {"raw":[100,100]}

00:15:51.580 --> 00:15:55.000
<v Speaker 0>I'm going to write it in, in normal, uh, logical

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:55.000 --> 00:15:58.240
<v Speaker 0>notation here to make it easier to read.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:16:11.770 --> 00:16:12.520
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:16:12.520 --> 00:16:14.800
<v Speaker 0>Um, okay.

NOTE CONF {"raw":[100,100]}

00:16:14.800 --> 00:16:17.020
<v Speaker 0>This is this is this P1 here.

NOTE CONF {"raw":[100,100,100,100,100,76,100]}

00:16:17.020 --> 00:16:21.370
<v Speaker 0>So, um, A and B or not a and not

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:21.370 --> 00:16:22.660
<v Speaker 0>be okay.

NOTE CONF {"raw":[100,100]}

00:16:22.660 --> 00:16:25.390
<v Speaker 0>Here it is written using normal logical notation.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:16:29.440 --> 00:16:29.830
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:16:29.830 --> 00:16:34.990
<v Speaker 0>If I want to, um, evaluate that, uh, it's handy

NOTE CONF {"raw":[100,100,100,100,100,100,100,98,100,100]}

00:16:34.990 --> 00:16:40.090
<v Speaker 0>to, um, break it down into subexpressions.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:16:40.090 --> 00:16:41.180
<v Speaker 0>Let me do that.

NOTE CONF {"raw":[100,100,100,100]}

00:16:57.410 --> 00:16:58.130
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:16:58.460 --> 00:16:59.690
<v Speaker 0>That would be a truth table.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:16:59.690 --> 00:17:03.320
<v Speaker 0>And, uh, possible values here are, uh.

NOTE CONF {"raw":[100,93,100,100,100,99,100]}

00:17:11.390 --> 00:17:12.199
<v Speaker 0>Are those four.

NOTE CONF {"raw":[100,100,52]}

00:17:12.199 --> 00:17:12.740
<v Speaker 0>Right.

NOTE CONF {"raw":[98]}

00:17:12.740 --> 00:17:16.550
<v Speaker 0>Two variables for four possible valuations.

NOTE CONF {"raw":[100,100,100,74,100,88]}

00:17:16.550 --> 00:17:19.160
<v Speaker 0>And then I can I can work out the values

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:19.160 --> 00:17:20.000
<v Speaker 0>for these.

NOTE CONF {"raw":[100,100]}

00:17:20.030 --> 00:17:27.290
<v Speaker 0>Um, uh, so, um, you know, t t I'll do

NOTE CONF {"raw":[100,100,100,100,100,100,65,100,100,100]}

00:17:27.290 --> 00:17:28.130
<v Speaker 0>it quickly.

NOTE CONF {"raw":[100,100]}

00:17:28.550 --> 00:17:28.880
<v Speaker 0>Uh.

NOTE CONF {"raw":[100]}

00:17:36.950 --> 00:17:39.710
<v Speaker 0>Uh, k a and b, that's false.

NOTE CONF {"raw":[75,62,100,100,100,100,100]}

00:17:39.980 --> 00:17:41.060
<v Speaker 0>False.

NOTE CONF {"raw":[100]}

00:17:41.060 --> 00:17:42.140
<v Speaker 0>False.

NOTE CONF {"raw":[100]}

00:17:42.140 --> 00:17:43.070
<v Speaker 0>True.

NOTE CONF {"raw":[96]}

00:17:43.280 --> 00:17:44.480
<v Speaker 0>This is, um.

NOTE CONF {"raw":[100,100,100]}

00:17:44.960 --> 00:17:45.950
<v Speaker 0>True.

NOTE CONF {"raw":[100]}

00:17:46.220 --> 00:17:47.150
<v Speaker 0>False.

NOTE CONF {"raw":[100]}

00:17:47.150 --> 00:17:48.110
<v Speaker 0>False.

NOTE CONF {"raw":[100]}

00:17:48.110 --> 00:17:48.920
<v Speaker 0>False.

NOTE CONF {"raw":[100]}

00:17:48.920 --> 00:17:49.940
<v Speaker 0>And this is true.

NOTE CONF {"raw":[100,100,100,100]}

00:17:49.940 --> 00:17:50.600
<v Speaker 0>False.

NOTE CONF {"raw":[100]}

00:17:50.600 --> 00:17:51.260
<v Speaker 0>False.

NOTE CONF {"raw":[100]}

00:17:51.260 --> 00:17:51.590
<v Speaker 0>True.

NOTE CONF {"raw":[100]}

00:17:51.620 --> 00:17:51.950
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:17:51.950 --> 00:17:52.550
<v Speaker 0>You could.

NOTE CONF {"raw":[100,100]}

00:17:53.120 --> 00:17:53.360
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:17:53.360 --> 00:17:57.980
<v Speaker 0>So, um, so here's a case where the value depends

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:57.980 --> 00:17:59.510
<v Speaker 0>on the values of the variables.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:18:00.320 --> 00:18:00.920
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:18:00.920 --> 00:18:04.580
<v Speaker 0>And so if I take for example, um, the valuation

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,78]}

00:18:04.580 --> 00:18:08.240
<v Speaker 0>where uh a is true and b is true.

NOTE CONF {"raw":[100,94,100,100,100,100,100,100,100]}

00:18:08.720 --> 00:18:11.690
<v Speaker 0>So that was the last line here.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:18:11.690 --> 00:18:12.950
<v Speaker 0>The result should be true.

NOTE CONF {"raw":[100,80,100,100,100]}

00:18:12.950 --> 00:18:14.480
<v Speaker 0>And that's that's what I get.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:18:16.820 --> 00:18:17.570
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:18:17.960 --> 00:18:20.630
<v Speaker 0>So now you know, how do you evaluate a proposition

NOTE CONF {"raw":[100,100,100,100,100,95,95,100,100,100]}

00:18:22.340 --> 00:18:25.490
<v Speaker 0>uh, when it's represented in Haskell like this.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:18:25.640 --> 00:18:26.420
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:18:26.600 --> 00:18:30.740
<v Speaker 0>Um, uh, do you remember what it's, uh, I mean,

NOTE CONF {"raw":[100,100,100,100,100,100,96,100,100,100]}

00:18:30.740 --> 00:18:32.990
<v Speaker 0>so this is is this a tautology?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:18:35.030 --> 00:18:38.750
<v Speaker 0>No, it's not a tautology, because because the, um, there's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:38.750 --> 00:18:41.210
<v Speaker 0>there's both truth and, uh, true and false in this

NOTE CONF {"raw":[100,100,100,100,58,100,100,100,100,100]}

00:18:41.210 --> 00:18:41.810
<v Speaker 0>column.

NOTE CONF {"raw":[100]}

00:18:41.810 --> 00:18:42.380
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:18:42.380 --> 00:18:43.790
<v Speaker 0>But it's satisfiable.

NOTE CONF {"raw":[100,97,100]}

00:18:43.790 --> 00:18:44.090
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:18:44.090 --> 00:18:46.160
<v Speaker 0>There's at least one t here.

NOTE CONF {"raw":[100,100,100,100,94,100]}

00:18:46.160 --> 00:18:47.750
<v Speaker 0>My previous example.

NOTE CONF {"raw":[100,100,100]}

00:18:47.750 --> 00:18:50.480
<v Speaker 0>This was not a tautology.

NOTE CONF {"raw":[100,100,86,86,100]}

00:18:50.480 --> 00:18:50.870
<v Speaker 0>Obviously.

NOTE CONF {"raw":[100]}

00:18:50.870 --> 00:18:53.990
<v Speaker 0>It's also not satisfiable okay.

NOTE CONF {"raw":[100,100,100,100,100]}

00:18:53.990 --> 00:18:55.430
<v Speaker 0>It's called a contradiction.

NOTE CONF {"raw":[100,100,100,100]}

00:18:55.880 --> 00:18:56.300
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:18:56.300 --> 00:19:00.320
<v Speaker 0>So given a formula, uh, propositional formula.

NOTE CONF {"raw":[100,100,100,100,51,100,100]}

00:19:00.320 --> 00:19:03.740
<v Speaker 0>Like like like that one or this one, um, you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:03.740 --> 00:19:06.140
<v Speaker 0>might be interested in, in working out.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:19:06.140 --> 00:19:08.780
<v Speaker 0>Is it a is it a tautology.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:19:08.780 --> 00:19:10.520
<v Speaker 0>Is it satisfiable?

NOTE CONF {"raw":[100,100,100]}

00:19:10.880 --> 00:19:12.080
<v Speaker 0>Um, okay.

NOTE CONF {"raw":[100,100]}

00:19:12.080 --> 00:19:15.710
<v Speaker 0>And, um, you know, now that I've given you code

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:15.710 --> 00:19:22.280
<v Speaker 0>for evaluating, uh, propositions, given certain valuations, you could imagine,

NOTE CONF {"raw":[100,100,58,100,100,100,79,100,100,100]}

00:19:22.280 --> 00:19:26.510
<v Speaker 0>like computing the right hand column in this table and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:26.510 --> 00:19:28.460
<v Speaker 0>then looking at it and deciding whether or not that's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:28.460 --> 00:19:30.620
<v Speaker 0>a tautology or whether it's satisfiable.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:19:31.130 --> 00:19:31.880
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:19:32.030 --> 00:19:35.660
<v Speaker 0>So I'm going to quickly, uh, go through some code

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:35.660 --> 00:19:36.770
<v Speaker 0>for doing that.

NOTE CONF {"raw":[100,100,100]}

00:19:39.180 --> 00:19:39.810
<v Speaker 0>Um.

NOTE CONF {"raw":[93]}

00:19:42.150 --> 00:19:44.880
<v Speaker 0>Being careful not to run out of time.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:19:45.120 --> 00:19:45.900
<v Speaker 0>Okay.

NOTE CONF {"raw":[85]}

00:19:46.110 --> 00:19:47.880
<v Speaker 0>Um, if I want to do that.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:19:48.090 --> 00:19:51.840
<v Speaker 0>So suppose I want to work out whether whether or

NOTE CONF {"raw":[99,100,100,100,100,100,100,100,100,100]}

00:19:51.840 --> 00:19:54.150
<v Speaker 0>not a given proposition is satisfiable.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:19:54.150 --> 00:19:56.940
<v Speaker 0>Meaning I need to compute this column and then look

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:56.940 --> 00:19:59.160
<v Speaker 0>to see if there's a the value true in it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,96,87]}

00:19:59.160 --> 00:19:59.910
<v Speaker 0>somewhere.

NOTE CONF {"raw":[100]}

00:20:00.690 --> 00:20:01.440
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:20:01.890 --> 00:20:03.030
<v Speaker 0>So that's what we're going to do now.

NOTE CONF {"raw":[52,100,100,67,100,100,100,100]}

00:20:03.030 --> 00:20:07.980
<v Speaker 0>So the first step is to um we need to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:07.980 --> 00:20:11.130
<v Speaker 0>work out whether it's what the value is for each

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:11.130 --> 00:20:12.930
<v Speaker 0>of the values of the variables.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:20:12.930 --> 00:20:14.880
<v Speaker 0>So the first thing we need to do is to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:14.880 --> 00:20:16.890
<v Speaker 0>know what all the variables are in the proposition.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:20:16.890 --> 00:20:17.160
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:20:17.160 --> 00:20:19.590
<v Speaker 0>We don't know uh, ahead of time.

NOTE CONF {"raw":[100,100,100,87,100,100,100]}

00:20:19.890 --> 00:20:23.940
<v Speaker 0>Um, so um, this particular example that I just had

NOTE CONF {"raw":[100,84,50,100,100,100,100,100,100,100]}

00:20:23.940 --> 00:20:25.920
<v Speaker 0>there had two variables.

NOTE CONF {"raw":[100,100,100,100]}

00:20:26.160 --> 00:20:26.550
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:20:26.550 --> 00:20:27.990
<v Speaker 0>My first example had one variable.

NOTE CONF {"raw":[100,100,100,100,100,99]}

00:20:27.990 --> 00:20:29.460
<v Speaker 0>The second example had two variables.

NOTE CONF {"raw":[58,100,100,100,100,100]}

00:20:29.460 --> 00:20:32.130
<v Speaker 0>And so this is a little program that goes through

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:32.130 --> 00:20:35.940
<v Speaker 0>all of these six cases and computes the variables in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:35.970 --> 00:20:37.110
<v Speaker 0>that proposition.

NOTE CONF {"raw":[100,100]}

00:20:37.110 --> 00:20:38.730
<v Speaker 0>Whatever, whatever it was.

NOTE CONF {"raw":[100,100,100,100]}

00:20:38.730 --> 00:20:39.330
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:20:39.600 --> 00:20:44.790
<v Speaker 0>So, um, very quickly, uh, uh, okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:20:44.790 --> 00:20:47.220
<v Speaker 0>If you've got a variable, then the variables in that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:47.220 --> 00:20:50.310
<v Speaker 0>proposition are obviously that one variable.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:20:50.310 --> 00:20:50.640
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:20:50.640 --> 00:20:51.540
<v Speaker 0>So the list.

NOTE CONF {"raw":[100,100,98]}

00:20:51.540 --> 00:20:54.720
<v Speaker 0>Sorry, sorry, I should have started by telling you, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:54.720 --> 00:20:56.880
<v Speaker 0>I've got a a type definition.

NOTE CONF {"raw":[100,100,96,100,100,100]}

00:20:56.880 --> 00:20:58.620
<v Speaker 0>Names is a list of name.

NOTE CONF {"raw":[96,100,90,100,100,100]}

00:20:59.430 --> 00:21:00.000
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:21:00.000 --> 00:21:03.780
<v Speaker 0>So this function names takes a proposition and gives you

NOTE CONF {"raw":[100,100,100,100,100,100,100,97,100,100]}

00:21:03.780 --> 00:21:05.640
<v Speaker 0>a list of names okay.

NOTE CONF {"raw":[100,100,100,100,100]}

00:21:05.640 --> 00:21:09.720
<v Speaker 0>And so if the variable if there's a variable x

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:09.720 --> 00:21:13.680
<v Speaker 0>then the list of names there is the list containing

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:13.680 --> 00:21:14.550
<v Speaker 0>just x.

NOTE CONF {"raw":[100,100]}

00:21:14.760 --> 00:21:15.390
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:21:16.590 --> 00:21:17.310
<v Speaker 0>That's.

NOTE CONF {"raw":[100]}

00:21:19.620 --> 00:21:20.340
<v Speaker 0>Uh oops.

NOTE CONF {"raw":[100,82]}

00:21:21.060 --> 00:21:22.740
<v Speaker 0>That's the first case okay.

NOTE CONF {"raw":[100,100,100,100,100]}

00:21:22.740 --> 00:21:24.900
<v Speaker 0>False and true have no variables in them.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:21:24.900 --> 00:21:27.030
<v Speaker 0>So we've got the empty list there.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:21:27.720 --> 00:21:30.540
<v Speaker 0>Um, if we've got a negated proposition, it's the same

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:30.540 --> 00:21:32.700
<v Speaker 0>list of names as you have in the proposition without

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:32.700 --> 00:21:39.100
<v Speaker 0>the negation And then finally the two cases, um, disjunction

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:39.100 --> 00:21:40.420
<v Speaker 0>and conjunction.

NOTE CONF {"raw":[100,100]}

00:21:40.420 --> 00:21:42.250
<v Speaker 0>You compute the names and p.

NOTE CONF {"raw":[100,100,100,100,85,100]}

00:21:45.040 --> 00:21:46.690
<v Speaker 0>And the names and q.

NOTE CONF {"raw":[100,100,100,69,100]}

00:21:49.300 --> 00:21:52.390
<v Speaker 0>And you, um, append them.

NOTE CONF {"raw":[100,100,97,100,100]}

00:21:52.390 --> 00:21:56.860
<v Speaker 0>So you take these two lists, append them, and then

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:57.130 --> 00:22:00.730
<v Speaker 0>um, this is a function in Haskell nub which um,

NOTE CONF {"raw":[85,100,100,100,100,100,100,100,100,100]}

00:22:00.850 --> 00:22:04.300
<v Speaker 0>it's built in, it's well, it's in the library data

NOTE CONF {"raw":[99,100,100,100,100,100,100,100,100,100]}

00:22:04.300 --> 00:22:05.170
<v Speaker 0>dot list.

NOTE CONF {"raw":[90,100]}

00:22:05.170 --> 00:22:10.210
<v Speaker 0>It um, it takes a list and removes duplicates, okay.

NOTE CONF {"raw":[100,93,100,100,100,100,100,100,100,100]}

00:22:10.210 --> 00:22:14.560
<v Speaker 0>Because, uh, we, we only want one, one copy of

NOTE CONF {"raw":[100,100,95,100,100,100,100,100,100,100]}

00:22:14.560 --> 00:22:16.270
<v Speaker 0>each of the names of the variables.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:22:16.270 --> 00:22:16.540
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:22:16.540 --> 00:22:18.580
<v Speaker 0>So, um, so that's what that does.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:22:18.580 --> 00:22:20.260
<v Speaker 0>It just removes the duplicates.

NOTE CONF {"raw":[100,100,100,100,100]}

00:22:20.380 --> 00:22:25.600
<v Speaker 0>And so for example uh names of P1, you get

NOTE CONF {"raw":[100,100,100,100,92,100,100,54,100,100]}

00:22:25.600 --> 00:22:29.050
<v Speaker 0>a and B okay.

NOTE CONF {"raw":[100,100,100,100]}

00:22:29.050 --> 00:22:31.180
<v Speaker 0>P1 was this was this thing.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:22:34.870 --> 00:22:35.320
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:22:35.320 --> 00:22:36.580
<v Speaker 0>And it's why is it a B?

NOTE CONF {"raw":[100,74,100,100,100,100,67]}

00:22:36.610 --> 00:22:42.160
<v Speaker 0>It's because the first, you know, a list of variables.

NOTE CONF {"raw":[100,100,100,100,100,100,66,100,100,100]}

00:22:42.160 --> 00:22:44.500
<v Speaker 0>There is a list of variables.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:22:44.500 --> 00:22:47.800
<v Speaker 0>Here is B the list of variables for this whole

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:47.800 --> 00:22:49.840
<v Speaker 0>subexpression is a and b.

NOTE CONF {"raw":[97,100,100,100,100]}

00:22:52.870 --> 00:22:53.440
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:22:53.440 --> 00:22:54.010
<v Speaker 0>Oops.

NOTE CONF {"raw":[99]}

00:22:55.630 --> 00:23:00.700
<v Speaker 0>Now the list of variables for the second subexpression is

NOTE CONF {"raw":[66,100,100,100,100,100,100,100,100,100]}

00:23:00.700 --> 00:23:01.750
<v Speaker 0>also a and b.

NOTE CONF {"raw":[100,100,100,100]}

00:23:03.910 --> 00:23:07.180
<v Speaker 0>Okay, the list of variables for the whole expressions you've

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:07.180 --> 00:23:11.110
<v Speaker 0>got a and b, sorry a and b, and you've

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:11.110 --> 00:23:11.980
<v Speaker 0>got a and b.

NOTE CONF {"raw":[100,100,100,100]}

00:23:12.010 --> 00:23:15.400
<v Speaker 0>You take the the append of those two, you get

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:15.400 --> 00:23:17.560
<v Speaker 0>a, b, ab and then nub.

NOTE CONF {"raw":[100,100,57,100,100,100]}

00:23:19.870 --> 00:23:23.560
<v Speaker 0>Nub uh removes duplicates and you just end up with

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:23.560 --> 00:23:24.160
<v Speaker 0>A and B.

NOTE CONF {"raw":[100,100,100]}

00:23:27.040 --> 00:23:27.370
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:23:27.370 --> 00:23:31.870
<v Speaker 0>Which is why the answer is is like that okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:35.270 --> 00:23:36.230
<v Speaker 0>So.

NOTE CONF {"raw":[100]}

00:23:38.930 --> 00:23:41.690
<v Speaker 0>That's how I get the list of variables in a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:41.690 --> 00:23:43.310
<v Speaker 0>in a in a proposition.

NOTE CONF {"raw":[100,100,100,100,100]}

00:23:43.310 --> 00:23:44.240
<v Speaker 0>Now.

NOTE CONF {"raw":[76]}

00:23:44.690 --> 00:23:47.030
<v Speaker 0>Um, once I've got the list of variables in a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,69]}

00:23:47.030 --> 00:23:52.040
<v Speaker 0>proposition, I want to have the list of possible valuations

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:52.040 --> 00:23:56.570
<v Speaker 0>over, um, over that list of variables.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:23:58.580 --> 00:23:59.300
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:24:00.050 --> 00:24:04.460
<v Speaker 0>So going back to my example here with the truth

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:04.460 --> 00:24:07.220
<v Speaker 0>table given this expression here.

NOTE CONF {"raw":[100,100,100,100,100]}

00:24:09.290 --> 00:24:15.710
<v Speaker 0>I've worked out how many columns I need, you know,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:15.830 --> 00:24:17.990
<v Speaker 0>and the names of the variables A and B.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:24:18.710 --> 00:24:22.160
<v Speaker 0>And what I want to now compute is all of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:22.160 --> 00:24:25.700
<v Speaker 0>the possible valuations.

NOTE CONF {"raw":[100,100,100]}

00:24:26.690 --> 00:24:27.440
<v Speaker 0>Okay.

NOTE CONF {"raw":[92]}

00:24:27.890 --> 00:24:31.190
<v Speaker 0>Um, if there are two variables there's going to be

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:31.190 --> 00:24:31.760
<v Speaker 0>two.

NOTE CONF {"raw":[100]}

00:24:31.790 --> 00:24:34.730
<v Speaker 0>There's going to be four evaluations.

NOTE CONF {"raw":[100,100,100,100,100,56]}

00:24:34.970 --> 00:24:36.500
<v Speaker 0>How many variables?

NOTE CONF {"raw":[100,100,100]}

00:24:36.500 --> 00:24:39.230
<v Speaker 0>How many valuations are there if there are n variables.

NOTE CONF {"raw":[100,100,100,100,100,100,94,61,100,100]}

00:24:41.660 --> 00:24:42.380
<v Speaker 0>Two to the n.

NOTE CONF {"raw":[100,100,100,89]}

00:24:42.380 --> 00:24:42.650
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:24:42.650 --> 00:24:43.310
<v Speaker 0>Thanks.

NOTE CONF {"raw":[100]}

00:24:43.730 --> 00:24:44.240
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:24:44.240 --> 00:24:48.230
<v Speaker 0>So um if n equals two that's four.

NOTE CONF {"raw":[100,100,100,100,100,100,100,99]}

00:24:48.440 --> 00:24:50.300
<v Speaker 0>Uh, what if there's zero variables.

NOTE CONF {"raw":[99,100,100,52,100,100]}

00:24:53.750 --> 00:24:54.500
<v Speaker 0>There's one.

NOTE CONF {"raw":[100,100]}

00:24:54.500 --> 00:24:55.130
<v Speaker 0>Yeah okay.

NOTE CONF {"raw":[100,100]}

00:24:55.130 --> 00:24:55.820
<v Speaker 0>There's one variable.

NOTE CONF {"raw":[100,100,87]}

00:24:55.880 --> 00:24:58.160
<v Speaker 0>There's one valuation for zero variables.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:24:58.160 --> 00:24:59.330
<v Speaker 0>What is it.

NOTE CONF {"raw":[100,100,100]}

00:24:59.330 --> 00:25:00.110
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:25:00.440 --> 00:25:03.350
<v Speaker 0>Um, you know, uh, it's a function.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:25:03.350 --> 00:25:04.490
<v Speaker 0>It's the function.

NOTE CONF {"raw":[100,100,100]}

00:25:04.490 --> 00:25:07.610
<v Speaker 0>It has type name arrow bool.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:25:08.240 --> 00:25:08.510
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:25:08.510 --> 00:25:09.680
<v Speaker 0>But what that what is that.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:25:09.680 --> 00:25:11.990
<v Speaker 0>What is that one function in the case where there's

NOTE CONF {"raw":[100,99,100,100,100,100,100,100,100,100]}

00:25:11.990 --> 00:25:13.640
<v Speaker 0>no variables.

NOTE CONF {"raw":[100,100]}

00:25:17.570 --> 00:25:17.780
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:25:17.780 --> 00:25:24.650
<v Speaker 0>It's a function which takes a variable name and says

NOTE CONF {"raw":[48,88,100,100,100,100,100,100,100,100]}

00:25:24.650 --> 00:25:27.140
<v Speaker 0>that it's undefined because there aren't any variables.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:25:27.140 --> 00:25:29.510
<v Speaker 0>And so and so any variable you give it, it's

NOTE CONF {"raw":[100,100,100,100,100,100,94,100,100,96]}

00:25:29.510 --> 00:25:31.440
<v Speaker 0>going to say no, I don't know the variable value

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,96,100]}

00:25:31.440 --> 00:25:32.340
<v Speaker 0>of that variable.

NOTE CONF {"raw":[100,100,100]}

00:25:32.340 --> 00:25:32.610
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:25:32.610 --> 00:25:34.140
<v Speaker 0>This is what this is.

NOTE CONF {"raw":[100,100,100,100,100]}

00:25:34.140 --> 00:25:35.760
<v Speaker 0>This is what I've got here.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:25:35.790 --> 00:25:37.530
<v Speaker 0>The empty valuation.

NOTE CONF {"raw":[100,100,100]}

00:25:37.530 --> 00:25:38.190
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:25:38.910 --> 00:25:42.360
<v Speaker 0>Um, I apply it I apply it to a, to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,94,100]}

00:25:42.360 --> 00:25:43.140
<v Speaker 0>a, um.

NOTE CONF {"raw":[100,100]}

00:25:45.390 --> 00:25:46.920
<v Speaker 0>Actually, I could have written that differently.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:25:46.920 --> 00:25:50.370
<v Speaker 0>Anyway, um, I apply it to a variable name, and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:50.370 --> 00:25:51.060
<v Speaker 0>it just tells me.

NOTE CONF {"raw":[100,100,100,100]}

00:25:51.060 --> 00:25:52.260
<v Speaker 0>No, I don't know.

NOTE CONF {"raw":[100,100,100,100]}

00:25:52.320 --> 00:25:52.860
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:25:52.860 --> 00:25:55.800
<v Speaker 0>But more interestingly is if there are variables.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:25:56.220 --> 00:26:00.750
<v Speaker 0>Um, so this is a little, uh, a little program,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:01.320 --> 00:26:03.330
<v Speaker 0>uh, called Valens.

NOTE CONF {"raw":[100,100,100]}

00:26:03.660 --> 00:26:07.140
<v Speaker 0>It's a list of valuations over, uh, a list of

NOTE CONF {"raw":[100,100,100,100,93,100,67,100,100,100]}

00:26:07.140 --> 00:26:07.890
<v Speaker 0>names.

NOTE CONF {"raw":[100]}

00:26:09.270 --> 00:26:09.660
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:26:09.660 --> 00:26:11.700
<v Speaker 0>You give it, you give it a list of names

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:11.700 --> 00:26:14.130
<v Speaker 0>and it gives you a list of valuations.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:26:15.270 --> 00:26:15.630
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:26:15.630 --> 00:26:18.390
<v Speaker 0>And those are all the possible valuations for that list

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:18.390 --> 00:26:18.810
<v Speaker 0>of names.

NOTE CONF {"raw":[100,100]}

00:26:18.810 --> 00:26:22.680
<v Speaker 0>So if I'd given it the list a B it

NOTE CONF {"raw":[100,100,100,100,100,100,100,73,73,100]}

00:26:22.680 --> 00:26:27.420
<v Speaker 0>would give me a list of four functions corresponding to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:27.420 --> 00:26:28.590
<v Speaker 0>these four rows.

NOTE CONF {"raw":[100,100,100]}

00:26:30.210 --> 00:26:30.870
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:26:30.870 --> 00:26:36.030
<v Speaker 0>First function might say, um, a, uh, the value of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:36.030 --> 00:26:38.340
<v Speaker 0>a is f, the value of b is f.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:26:39.000 --> 00:26:41.460
<v Speaker 0>Second one might say value of a is f and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:41.460 --> 00:26:44.430
<v Speaker 0>the value of b is is is, is is t

NOTE CONF {"raw":[100,100,100,100,85,100,100,100,100,100]}

00:26:44.850 --> 00:26:46.230
<v Speaker 0>okay and so forth.

NOTE CONF {"raw":[100,100,100,100]}

00:26:47.700 --> 00:26:48.420
<v Speaker 0>All right.

NOTE CONF {"raw":[100,100]}

00:26:49.140 --> 00:26:54.330
<v Speaker 0>And so this this computes that uh for any list

NOTE CONF {"raw":[100,100,100,100,100,100,93,100,100,100]}

00:26:54.330 --> 00:26:57.210
<v Speaker 0>of variable names okay.

NOTE CONF {"raw":[100,100,100,100]}

00:26:57.210 --> 00:27:02.490
<v Speaker 0>This code is a little bit tricky to understand okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:02.490 --> 00:27:06.600
<v Speaker 0>There's been some questions on Piazza people reading ahead about

NOTE CONF {"raw":[100,100,100,100,100,100,90,100,100,100]}

00:27:06.600 --> 00:27:08.940
<v Speaker 0>this function definition okay.

NOTE CONF {"raw":[100,100,100,100]}

00:27:08.940 --> 00:27:11.280
<v Speaker 0>So let me just briefly explain this.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:27:11.280 --> 00:27:13.800
<v Speaker 0>I don't have a lot of time.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:27:14.220 --> 00:27:16.740
<v Speaker 0>Um, uh, the idea of this.

NOTE CONF {"raw":[98,52,100,100,100,100]}

00:27:16.740 --> 00:27:18.540
<v Speaker 0>Let's look at this one down here first.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:27:18.540 --> 00:27:19.110
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:27:22.290 --> 00:27:22.590
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:27:22.590 --> 00:27:26.850
<v Speaker 0>First case is if we've got no variables, then as

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:26.850 --> 00:27:31.660
<v Speaker 0>as we've just discussed, there's only one valuation.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:27:31.660 --> 00:27:32.980
<v Speaker 0>It's the empty valuation.

NOTE CONF {"raw":[93,100,100,100]}

00:27:32.980 --> 00:27:34.840
<v Speaker 0>This is the one where none of the variables are

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:34.840 --> 00:27:35.590
<v Speaker 0>defined.

NOTE CONF {"raw":[100]}

00:27:36.130 --> 00:27:36.910
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:27:37.690 --> 00:27:40.270
<v Speaker 0>But in the case we have at least one variable

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:40.720 --> 00:27:41.620
<v Speaker 0>x.

NOTE CONF {"raw":[100]}

00:27:44.890 --> 00:27:45.640
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:27:45.910 --> 00:27:48.550
<v Speaker 0>Uh, then we compute okay.

NOTE CONF {"raw":[90,100,100,100,100]}

00:27:48.550 --> 00:27:50.620
<v Speaker 0>We've got at least one variable and then some more

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:50.620 --> 00:27:54.400
<v Speaker 0>variable x is possibly zero of them okay.

NOTE CONF {"raw":[100,88,88,100,100,100,100,100]}

00:27:54.400 --> 00:27:57.850
<v Speaker 0>We compute the all the possible valuations for x is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,60,58]}

00:27:57.850 --> 00:27:59.650
<v Speaker 0>this is the recursive call.

NOTE CONF {"raw":[100,100,100,100,100]}

00:28:01.510 --> 00:28:05.800
<v Speaker 0>And then for each one of those valuations we consider

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:05.800 --> 00:28:10.720
<v Speaker 0>the extension of it by adding that the value of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:10.720 --> 00:28:11.920
<v Speaker 0>x is true.

NOTE CONF {"raw":[100,100,100]}

00:28:13.210 --> 00:28:17.050
<v Speaker 0>And the case where adding the value um the value

NOTE CONF {"raw":[100,100,100,100,100,100,100,97,100,100]}

00:28:17.050 --> 00:28:18.250
<v Speaker 0>of x is false.

NOTE CONF {"raw":[100,100,100,100]}

00:28:18.370 --> 00:28:18.970
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:28:18.970 --> 00:28:23.050
<v Speaker 0>So we're looking at uh, this is using this other

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:23.050 --> 00:28:24.640
<v Speaker 0>function which I'll come to in a second.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:28:24.670 --> 00:28:29.380
<v Speaker 0>We, we take the extension of that valuation by the

NOTE CONF {"raw":[100,100,100,100,100,100,100,81,100,100]}

00:28:29.380 --> 00:28:37.810
<v Speaker 0>association of the name X to values?

NOTE CONF {"raw":[100,100,100,100,100,79,100]}

00:28:38.800 --> 00:28:40.810
<v Speaker 0>Uh, true and false.

NOTE CONF {"raw":[99,100,100,100]}

00:28:42.850 --> 00:28:43.360
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:28:43.360 --> 00:28:44.410
<v Speaker 0>Two choices.

NOTE CONF {"raw":[100,100]}

00:28:44.890 --> 00:28:48.910
<v Speaker 0>So for each, for each valuation of X and for

NOTE CONF {"raw":[100,100,100,100,100,100,100,48,100,100]}

00:28:48.910 --> 00:28:50.170
<v Speaker 0>each choice of B.

NOTE CONF {"raw":[100,100,100,100]}

00:28:52.210 --> 00:28:56.200
<v Speaker 0>We get a valuation produced by this function call here

NOTE CONF {"raw":[100,100,93,93,100,100,100,100,100,100]}

00:28:57.040 --> 00:28:57.460
<v Speaker 0>okay.

NOTE CONF {"raw":[100]}

00:28:57.460 --> 00:29:03.880
<v Speaker 0>And informally this is extending the valuation uh even by

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,93,100]}

00:29:03.880 --> 00:29:07.300
<v Speaker 0>the association where x gets the value b.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:29:10.210 --> 00:29:10.900
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:29:10.900 --> 00:29:17.020
<v Speaker 0>And um that's what this function does okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:29:17.020 --> 00:29:20.020
<v Speaker 0>You give it a valuation, you give it a name,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:20.020 --> 00:29:21.850
<v Speaker 0>you give it a value for that name.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:29:21.850 --> 00:29:25.120
<v Speaker 0>And it computes a valuation, which is the extension of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:25.150 --> 00:29:27.790
<v Speaker 0>that evaluation by that association.

NOTE CONF {"raw":[100,77,100,100,100]}

00:29:28.630 --> 00:29:29.470
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:29:30.040 --> 00:29:30.430
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:29:32.740 --> 00:29:34.750
<v Speaker 0>And there were some questions about this code.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:29:34.750 --> 00:29:38.140
<v Speaker 0>Let me write an alternative way of I mean, this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:38.140 --> 00:29:40.870
<v Speaker 0>is, this is this is defining what that does.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:29:40.900 --> 00:29:41.770
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:29:42.010 --> 00:29:45.850
<v Speaker 0>Um, you might understand it better if I would write

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:45.850 --> 00:29:46.870
<v Speaker 0>it differently.

NOTE CONF {"raw":[100,100]}

00:29:49.660 --> 00:29:49.990
<v Speaker 0>Uh.

NOTE CONF {"raw":[100]}

00:29:54.730 --> 00:29:55.030
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:29:55.030 --> 00:30:00.640
<v Speaker 0>Given a valuation, a variable and a, um, and a

NOTE CONF {"raw":[100,100,100,97,100,100,100,100,100,96]}

00:30:00.640 --> 00:30:02.980
<v Speaker 0>value for that variable I need.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:30:02.980 --> 00:30:04.690
<v Speaker 0>So this is a this is a name.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:30:07.600 --> 00:30:08.950
<v Speaker 0>This is a.

NOTE CONF {"raw":[100,100,100]}

00:30:09.130 --> 00:30:09.370
<v Speaker 0>Sorry.

NOTE CONF {"raw":[100]}

00:30:09.370 --> 00:30:10.540
<v Speaker 0>No, this is not a name.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:30:10.540 --> 00:30:12.010
<v Speaker 0>This is a valuation.

NOTE CONF {"raw":[100,100,100,100]}

00:30:12.670 --> 00:30:13.870
<v Speaker 0>This is a name.

NOTE CONF {"raw":[100,100,100,100]}

00:30:16.570 --> 00:30:17.860
<v Speaker 0>And this is a bull.

NOTE CONF {"raw":[100,100,100,100,58]}

00:30:20.830 --> 00:30:21.580
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:30:21.940 --> 00:30:25.160
<v Speaker 0>And given those three things I need to compute.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:30:25.550 --> 00:30:26.540
<v Speaker 0>Evaluation.

NOTE CONF {"raw":[67]}

00:30:26.540 --> 00:30:26.930
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:30:26.930 --> 00:30:29.510
<v Speaker 0>The thing on this side is a is evaluation.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:30:30.380 --> 00:30:31.370
<v Speaker 0>What's evaluation?

NOTE CONF {"raw":[100,98]}

00:30:31.370 --> 00:30:34.190
<v Speaker 0>It's a function from name to bool.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:30:34.850 --> 00:30:35.300
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:30:35.300 --> 00:30:38.120
<v Speaker 0>So I'll write this as a lambda expression.

NOTE CONF {"raw":[100,100,100,100,91,100,100,100]}

00:30:43.130 --> 00:30:43.430
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:30:43.430 --> 00:30:44.600
<v Speaker 0>This is a evaluation.

NOTE CONF {"raw":[100,100,63,100]}

00:30:44.600 --> 00:30:47.180
<v Speaker 0>So given a name why.

NOTE CONF {"raw":[100,100,100,100,77]}

00:30:49.850 --> 00:30:53.300
<v Speaker 0>Then I check to see is uh is x equal

NOTE CONF {"raw":[100,100,97,100,100,100,80,100,100,100]}

00:30:53.300 --> 00:30:54.380
<v Speaker 0>to y or not.

NOTE CONF {"raw":[100,100,100,100]}

00:30:56.990 --> 00:30:59.360
<v Speaker 0>If so the answer is b.

NOTE CONF {"raw":[100,100,100,100,100,98]}

00:31:00.920 --> 00:31:07.550
<v Speaker 0>Otherwise the answer is um is uh, whatever it was

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:07.550 --> 00:31:10.820
<v Speaker 0>for the evaluation that I, that I started with here,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:11.180 --> 00:31:13.580
<v Speaker 0>um, applied to Y.

NOTE CONF {"raw":[100,95,100,100]}

00:31:16.610 --> 00:31:17.300
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:31:18.530 --> 00:31:19.670
<v Speaker 0>So that's a.

NOTE CONF {"raw":[100,100,98]}

00:31:22.070 --> 00:31:23.270
<v Speaker 0>That's a boolean.

NOTE CONF {"raw":[100,100,100]}

00:31:25.190 --> 00:31:25.580
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:31:25.580 --> 00:31:28.250
<v Speaker 0>So this has the type name arrow bool which is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:28.250 --> 00:31:29.630
<v Speaker 0>what valuation is.

NOTE CONF {"raw":[100,91,100]}

00:31:30.560 --> 00:31:31.250
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:31:34.520 --> 00:31:39.200
<v Speaker 0>That's kind of fast, but I hope it's at least

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:39.200 --> 00:31:42.590
<v Speaker 0>gives you enough of a feeling for this to be

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:42.590 --> 00:31:45.200
<v Speaker 0>able to look at it and understand it.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:31:45.560 --> 00:31:47.810
<v Speaker 0>Um, if you haven't understand it already, to understand it,

NOTE CONF {"raw":[49,100,100,100,72,86,100,100,100,100]}

00:31:47.810 --> 00:31:50.300
<v Speaker 0>looking at home, um, it's the same.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:31:50.300 --> 00:31:51.680
<v Speaker 0>It's actually the same definition.

NOTE CONF {"raw":[100,100,100,100,100]}

00:31:51.680 --> 00:31:54.350
<v Speaker 0>Is that all I've done is to is to take,

NOTE CONF {"raw":[70,100,100,100,100,100,100,100,100,100]}

00:31:54.590 --> 00:31:57.050
<v Speaker 0>um, this part of it and make it into a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:57.050 --> 00:31:58.220
<v Speaker 0>lambda expression.

NOTE CONF {"raw":[100,100]}

00:32:00.560 --> 00:32:01.100
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:32:09.050 --> 00:32:09.380
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:32:09.380 --> 00:32:11.630
<v Speaker 0>And what I get out of this is, you know,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:11.630 --> 00:32:17.150
<v Speaker 0>for example, um, for the value for the, um, for

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,91,100]}

00:32:17.150 --> 00:32:19.520
<v Speaker 0>the variable names A and B, I get a list

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:19.520 --> 00:32:22.500
<v Speaker 0>of four, um, functions out of it.

NOTE CONF {"raw":[100,58,100,100,100,100,100]}

00:32:22.500 --> 00:32:25.260
<v Speaker 0>You can't print out functions in in Haskell.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:32:25.260 --> 00:32:29.640
<v Speaker 0>So this is kind of informal, uh, notation for what

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:29.640 --> 00:32:30.300
<v Speaker 0>you get.

NOTE CONF {"raw":[100,100]}

00:32:30.300 --> 00:32:30.840
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:32:30.840 --> 00:32:32.940
<v Speaker 0>You get a function which takes a to false and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:32.940 --> 00:32:33.870
<v Speaker 0>b to false.

NOTE CONF {"raw":[100,100,100]}

00:32:33.900 --> 00:32:36.120
<v Speaker 0>Another function which takes a to false and b to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:36.120 --> 00:32:37.590
<v Speaker 0>true and so forth.

NOTE CONF {"raw":[100,100,100,100]}

00:32:37.590 --> 00:32:40.830
<v Speaker 0>All four of these cases okay.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:32:42.660 --> 00:32:45.420
<v Speaker 0>Each of these functions of course they start off with

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:45.420 --> 00:32:46.860
<v Speaker 0>the empty valuation.

NOTE CONF {"raw":[100,100,66]}

00:32:48.030 --> 00:32:50.760
<v Speaker 0>And so each one of these, each one of these

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:50.760 --> 00:32:55.230
<v Speaker 0>functions also takes any other variable name to uh, to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,81,100]}

00:32:55.230 --> 00:32:56.640
<v Speaker 0>an error message.

NOTE CONF {"raw":[100,100,100]}

00:32:58.830 --> 00:32:59.580
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:33:03.000 --> 00:33:03.510
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:33:03.510 --> 00:33:06.180
<v Speaker 0>I'll just point out here that this base case is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:06.180 --> 00:33:07.050
<v Speaker 0>important.

NOTE CONF {"raw":[100]}

00:33:07.380 --> 00:33:11.010
<v Speaker 0>Uh, if we would I mean, the the thing that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:11.010 --> 00:33:12.960
<v Speaker 0>you might be tempted to write here.

NOTE CONF {"raw":[100,100,100,100,100,74,100]}

00:33:15.510 --> 00:33:20.250
<v Speaker 0>Is, um, is evaluations over the empty list of names

NOTE CONF {"raw":[100,100,100,83,100,100,100,100,100,100]}

00:33:20.250 --> 00:33:22.380
<v Speaker 0>is the empty list of valuations.

NOTE CONF {"raw":[100,100,100,100,94,89]}

00:33:22.380 --> 00:33:24.450
<v Speaker 0>Okay, that would be wrong.

NOTE CONF {"raw":[100,100,100,100,100]}

00:33:24.450 --> 00:33:27.270
<v Speaker 0>First of all, because two to the zero is one,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:27.270 --> 00:33:29.280
<v Speaker 0>we know we must have one valuation.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:33:29.280 --> 00:33:31.950
<v Speaker 0>And the other reason is that if that was the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:31.950 --> 00:33:37.170
<v Speaker 0>empty list, then, um, the result of this for every

NOTE CONF {"raw":[100,100,100,91,100,100,100,100,100,100]}

00:33:37.170 --> 00:33:39.840
<v Speaker 0>list of, of variable names would be the empty list,

NOTE CONF {"raw":[100,96,100,100,100,100,100,100,100,100]}

00:33:39.840 --> 00:33:47.130
<v Speaker 0>because you're always doing a, um, you're generating values from

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:47.550 --> 00:33:53.490
<v Speaker 0>the recursive call of this function applied to the smaller

NOTE CONF {"raw":[100,100,100,100,100,100,87,100,100,100]}

00:33:53.490 --> 00:33:54.150
<v Speaker 0>list of variables.

NOTE CONF {"raw":[100,100,100]}

00:33:54.150 --> 00:33:55.680
<v Speaker 0>And it would always be empty, okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:33:55.680 --> 00:33:58.290
<v Speaker 0>Would always be empty, would you never you'd never get

NOTE CONF {"raw":[100,100,100,100,58,100,100,100,100,100]}

00:33:58.290 --> 00:33:58.890
<v Speaker 0>anywhere.

NOTE CONF {"raw":[100]}

00:33:58.890 --> 00:34:03.810
<v Speaker 0>So you need you need this to be here like

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:03.810 --> 00:34:04.350
<v Speaker 0>that.

NOTE CONF {"raw":[100]}

00:34:08.610 --> 00:34:09.090
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:34:10.500 --> 00:34:11.879
<v Speaker 0>Stunned silence.

NOTE CONF {"raw":[100,100]}

00:34:13.409 --> 00:34:13.860
<v Speaker 0>All right.

NOTE CONF {"raw":[100,100]}

00:34:13.860 --> 00:34:14.340
<v Speaker 0>Yep.

NOTE CONF {"raw":[91]}

00:34:20.649 --> 00:34:24.129
<v Speaker 0>How does the partial application of extend work?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:34:24.610 --> 00:34:25.120
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:34:28.810 --> 00:34:29.649
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:34:30.129 --> 00:34:30.550
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:34:34.149 --> 00:34:35.830
<v Speaker 0>Are you referring to the piazza?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:34:37.389 --> 00:34:39.340
<v Speaker 0>Because it takes in.

NOTE CONF {"raw":[95,100,100,99]}

00:34:40.210 --> 00:34:40.540
<v Speaker 0>Ah.

NOTE CONF {"raw":[45]}

00:34:40.570 --> 00:34:41.470
<v Speaker 0>You mean here?

NOTE CONF {"raw":[100,100,100]}

00:34:41.470 --> 00:34:41.980
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:34:41.980 --> 00:34:42.490
<v Speaker 0>Right?

NOTE CONF {"raw":[100]}

00:34:42.490 --> 00:34:42.820
<v Speaker 0>Yeah.

NOTE CONF {"raw":[95]}

00:34:42.850 --> 00:34:43.360
<v Speaker 0>Extend.

NOTE CONF {"raw":[100]}

00:34:43.360 --> 00:34:43.659
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:34:43.659 --> 00:34:44.050
<v Speaker 0>So.

NOTE CONF {"raw":[100]}

00:34:44.050 --> 00:34:44.379
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:34:44.379 --> 00:34:45.010
<v Speaker 0>Extend.

NOTE CONF {"raw":[100]}

00:34:45.129 --> 00:34:45.429
<v Speaker 0>Uh.

NOTE CONF {"raw":[98]}

00:34:48.070 --> 00:34:50.320
<v Speaker 0>I would like to get all my colours away, but

NOTE CONF {"raw":[100,100,100,100,100,100,100,95,100,100]}

00:34:50.320 --> 00:34:51.040
<v Speaker 0>it's, uh.

NOTE CONF {"raw":[100,86]}

00:34:51.310 --> 00:34:51.639
<v Speaker 0>Uh.

NOTE CONF {"raw":[99]}

00:34:51.639 --> 00:34:52.330
<v Speaker 0>Anyway.

NOTE CONF {"raw":[100]}

00:34:52.330 --> 00:34:53.080
<v Speaker 0>Extend.

NOTE CONF {"raw":[100]}

00:34:53.500 --> 00:34:54.129
<v Speaker 0>Oops.

NOTE CONF {"raw":[89]}

00:34:58.000 --> 00:34:58.870
<v Speaker 0>It's just.

NOTE CONF {"raw":[69,100]}

00:34:59.290 --> 00:35:00.610
<v Speaker 0>What's going on here?

NOTE CONF {"raw":[100,100,100,100]}

00:35:01.720 --> 00:35:02.740
<v Speaker 0>Yeah, that's that's where I was.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:35:02.740 --> 00:35:03.220
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:35:03.220 --> 00:35:03.790
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:35:03.790 --> 00:35:04.660
<v Speaker 0>Extend.

NOTE CONF {"raw":[100]}

00:35:05.200 --> 00:35:09.280
<v Speaker 0>Um, it takes, uh, three, three, three values and gives

NOTE CONF {"raw":[100,100,100,98,100,100,100,100,100,100]}

00:35:09.280 --> 00:35:10.000
<v Speaker 0>you a value.

NOTE CONF {"raw":[100,100,100]}

00:35:10.000 --> 00:35:10.540
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:35:11.200 --> 00:35:14.680
<v Speaker 0>Um, so evaluation a name and a boolean, and it

NOTE CONF {"raw":[100,100,100,93,100,100,100,100,100,58]}

00:35:14.680 --> 00:35:17.170
<v Speaker 0>gives you and it gives you a valuation.

NOTE CONF {"raw":[100,100,56,97,100,100,94,85]}

00:35:17.290 --> 00:35:17.830
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:35:17.830 --> 00:35:20.320
<v Speaker 0>So you were you were talking about partial application.

NOTE CONF {"raw":[100,100,65,70,70,100,100,100,100]}

00:35:20.320 --> 00:35:24.640
<v Speaker 0>You mean, um, that I mean, looking at the definition,

NOTE CONF {"raw":[100,100,89,100,100,100,100,100,100,100]}

00:35:24.640 --> 00:35:28.300
<v Speaker 0>it looks like I'm giving it four values and getting

NOTE CONF {"raw":[100,100,100,100,100,100,98,100,100,100]}

00:35:28.300 --> 00:35:29.110
<v Speaker 0>a boolean.

NOTE CONF {"raw":[100,100]}

00:35:29.770 --> 00:35:30.370
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:35:30.370 --> 00:35:34.570
<v Speaker 0>But that's because the part that's highlighted is, is actually

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:34.570 --> 00:35:39.310
<v Speaker 0>corresponding to this to this type.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:35:39.310 --> 00:35:39.640
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:35:39.640 --> 00:35:42.310
<v Speaker 0>So this is a function from this is the part

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:42.310 --> 00:35:43.990
<v Speaker 0>that's tricky about this definition.

NOTE CONF {"raw":[100,100,100,100,100]}

00:35:43.990 --> 00:35:44.920
<v Speaker 0>This is the function.

NOTE CONF {"raw":[100,100,100,100]}

00:35:44.920 --> 00:35:48.220
<v Speaker 0>This is a function from um a name to a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,94]}

00:35:48.220 --> 00:35:48.970
<v Speaker 0>boolean.

NOTE CONF {"raw":[100]}

00:35:49.540 --> 00:35:51.700
<v Speaker 0>And the way that I've written it, and Haskell allows

NOTE CONF {"raw":[100,100,100,100,100,100,100,52,100,100]}

00:35:51.700 --> 00:35:57.310
<v Speaker 0>me to do this is to um, is to take

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:59.140 --> 00:36:02.470
<v Speaker 0>it's, it's exactly like this definition here.

NOTE CONF {"raw":[66,97,100,100,100,100,100]}

00:36:03.010 --> 00:36:03.580
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:36:03.580 --> 00:36:05.620
<v Speaker 0>Where I've taken the Y and put it on the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:05.620 --> 00:36:08.110
<v Speaker 0>left hand side of the equal sign in order to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:08.110 --> 00:36:10.990
<v Speaker 0>avoid writing the lambda out explicitly.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:36:11.980 --> 00:36:12.670
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:36:15.280 --> 00:36:17.840
<v Speaker 0>So I hope that answers the question.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:36:18.170 --> 00:36:21.560
<v Speaker 0>Um, you can talk about partial application if you're talking

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:21.560 --> 00:36:23.630
<v Speaker 0>about like, this definition.

NOTE CONF {"raw":[100,100,100,100]}

00:36:25.400 --> 00:36:28.880
<v Speaker 0>Uh, but the thing that you're defining here is evaluation.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:28.880 --> 00:36:30.380
<v Speaker 0>Any other questions?

NOTE CONF {"raw":[100,100,100]}

00:36:33.710 --> 00:36:34.010
<v Speaker 0>Right.

NOTE CONF {"raw":[90]}

00:36:35.600 --> 00:36:38.180
<v Speaker 0>Your tutorial next week is actually going to be working

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:38.180 --> 00:36:41.210
<v Speaker 0>with this stuff and, um, extending it a bit.

NOTE CONF {"raw":[100,100,100,100,82,100,100,100,100]}

00:36:41.570 --> 00:36:42.260
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:36:42.410 --> 00:36:45.200
<v Speaker 0>Um, given given these definitions.

NOTE CONF {"raw":[100,100,100,100,100]}

00:36:45.890 --> 00:36:46.610
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:36:46.610 --> 00:36:49.130
<v Speaker 0>And going back to this, I was saying we're going

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:49.130 --> 00:36:52.820
<v Speaker 0>to work out whether or not, um, a proposition is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:52.820 --> 00:36:58.940
<v Speaker 0>satisfiable by computing the list of um, of values for

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:58.940 --> 00:37:03.740
<v Speaker 0>each of the valuations of the variables and checking to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:03.740 --> 00:37:07.310
<v Speaker 0>see if there's at least one T in here.

NOTE CONF {"raw":[100,100,100,100,100,100,87,100,100]}

00:37:07.400 --> 00:37:07.970
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:37:07.970 --> 00:37:09.980
<v Speaker 0>And that's what this code does.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:37:10.010 --> 00:37:10.250
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:37:10.340 --> 00:37:11.480
<v Speaker 0>This is one line.

NOTE CONF {"raw":[100,100,100,100]}

00:37:11.960 --> 00:37:15.830
<v Speaker 0>One line definition of what it means for a proposition

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:15.830 --> 00:37:18.650
<v Speaker 0>to be satisfiable based on the definitions that I've just

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,96,100]}

00:37:18.650 --> 00:37:19.430
<v Speaker 0>given you.

NOTE CONF {"raw":[100,100]}

00:37:19.790 --> 00:37:20.450
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:37:20.450 --> 00:37:23.390
<v Speaker 0>So we compute all of the value we, you know,

NOTE CONF {"raw":[100,100,100,100,100,100,93,99,93,93]}

00:37:23.390 --> 00:37:27.200
<v Speaker 0>given a proposition P, we compute the valuations, all the

NOTE CONF {"raw":[100,52,100,100,100,100,100,100,100,100]}

00:37:27.200 --> 00:37:31.340
<v Speaker 0>possible valuations over all the names of variables that are

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:31.340 --> 00:37:31.820
<v Speaker 0>in P.

NOTE CONF {"raw":[100,95]}

00:37:33.890 --> 00:37:37.400
<v Speaker 0>And then for each one of those we evaluate p.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:40.640 --> 00:37:40.970
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:37:40.970 --> 00:37:44.540
<v Speaker 0>And this gives us a list of all of the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:44.540 --> 00:37:47.420
<v Speaker 0>values of p for all of the valuations.

NOTE CONF {"raw":[100,100,100,100,100,100,100,91]}

00:37:47.420 --> 00:37:50.870
<v Speaker 0>So that's exactly this list here that's written in the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:50.870 --> 00:37:54.980
<v Speaker 0>last column here okay.

NOTE CONF {"raw":[100,100,100,100]}

00:37:55.520 --> 00:37:59.210
<v Speaker 0>And P is satisfiable if at least one of those

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:59.210 --> 00:38:00.080
<v Speaker 0>is true.

NOTE CONF {"raw":[100,100]}

00:38:00.080 --> 00:38:02.270
<v Speaker 0>And so we take the disjunction.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:38:02.270 --> 00:38:04.070
<v Speaker 0>And that's the answer right.

NOTE CONF {"raw":[100,100,100,100,100]}

00:38:07.760 --> 00:38:08.150
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:38:08.150 --> 00:38:09.800
<v Speaker 0>When is the proposition satisfiable.

NOTE CONF {"raw":[100,100,100,100,100]}

00:38:09.800 --> 00:38:12.170
<v Speaker 0>It's when there's at least one valuation that makes it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:12.170 --> 00:38:14.360
<v Speaker 0>true okay.

NOTE CONF {"raw":[100,100]}

00:38:14.390 --> 00:38:18.200
<v Speaker 0>And the code that we've written up until now is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:18.200 --> 00:38:21.890
<v Speaker 0>enough to give us, uh, that we can write this

NOTE CONF {"raw":[100,100,100,100,88,100,100,100,100,100]}

00:38:21.890 --> 00:38:23.150
<v Speaker 0>definition like that.

NOTE CONF {"raw":[100,100,100]}

00:38:25.400 --> 00:38:25.970
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:38:25.970 --> 00:38:28.010
<v Speaker 0>And this is, this is kind of interesting.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:38:28.010 --> 00:38:28.310
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:38:28.310 --> 00:38:33.410
<v Speaker 0>Because, uh, we've I mean, I've written the definition of

NOTE CONF {"raw":[99,61,100,100,100,100,100,100,100,100]}

00:38:33.410 --> 00:38:37.550
<v Speaker 0>the of propositions that was six lines, the names of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:37.550 --> 00:38:38.540
<v Speaker 0>the functions.

NOTE CONF {"raw":[100,100]}

00:38:38.540 --> 00:38:42.020
<v Speaker 0>I'm sorry, the the evaluation of propositions.

NOTE CONF {"raw":[40,100,100,100,100,100,100]}

00:38:42.020 --> 00:38:43.490
<v Speaker 0>That was another six lines.

NOTE CONF {"raw":[100,100,100,100,100]}

00:38:43.700 --> 00:38:50.030
<v Speaker 0>The, the list of names of, uh, uh, the list

NOTE CONF {"raw":[100,100,100,100,100,100,100,98,100,100]}

00:38:50.030 --> 00:38:51.890
<v Speaker 0>of variable names in a, in a proposition that was

NOTE CONF {"raw":[100,100,100,100,63,95,85,100,100,100]}

00:38:51.890 --> 00:38:52.670
<v Speaker 0>in the sixth line.

NOTE CONF {"raw":[100,100,82,100]}

00:38:52.670 --> 00:38:54.320
<v Speaker 0>So that's 18 lines so far.

NOTE CONF {"raw":[100,100,100,96,100,100]}

00:38:54.350 --> 00:38:59.360
<v Speaker 0>The, um, the, uh, code for producing all the possible

NOTE CONF {"raw":[100,100,100,88,100,100,100,100,100,100]}

00:38:59.360 --> 00:39:01.070
<v Speaker 0>evaluations over a list of variables.

NOTE CONF {"raw":[92,100,95,100,100,100]}

00:39:01.070 --> 00:39:02.450
<v Speaker 0>That was another four.

NOTE CONF {"raw":[100,100,100,100]}

00:39:02.450 --> 00:39:03.440
<v Speaker 0>So lines.

NOTE CONF {"raw":[100,100]}

00:39:03.440 --> 00:39:04.820
<v Speaker 0>22 lines.

NOTE CONF {"raw":[100,100]}

00:39:05.090 --> 00:39:07.280
<v Speaker 0>Um, I might have left out some.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:39:07.280 --> 00:39:09.800
<v Speaker 0>And then in this line here is another one line.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:09.800 --> 00:39:10.220
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:39:10.220 --> 00:39:14.850
<v Speaker 0>So anyway, it's about 30 lines of code, let's say

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,99,100]}

00:39:14.850 --> 00:39:15.510
<v Speaker 0>ish.

NOTE CONF {"raw":[94]}

00:39:15.540 --> 00:39:15.990
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:39:15.990 --> 00:39:17.460
<v Speaker 0>So that's about a page of code.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:39:17.460 --> 00:39:22.620
<v Speaker 0>Page of code to define the syntax of propositions, evaluating

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:22.620 --> 00:39:26.460
<v Speaker 0>propositions and working out whether a proposition is satisfiable or

NOTE CONF {"raw":[100,100,100,100,100,92,100,100,100,100]}

00:39:26.460 --> 00:39:26.760
<v Speaker 0>not.

NOTE CONF {"raw":[100]}

00:39:26.760 --> 00:39:27.240
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:39:27.240 --> 00:39:32.820
<v Speaker 0>So that's a quite compact, uh, uh, program for doing

NOTE CONF {"raw":[100,100,100,100,100,95,100,97,100,100]}

00:39:32.820 --> 00:39:37.230
<v Speaker 0>this, this, um, implementing logic and uh, computing whether or

NOTE CONF {"raw":[100,100,100,100,100,100,68,100,100,100]}

00:39:37.230 --> 00:39:39.360
<v Speaker 0>not a proposition is satisfiable or not.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:39:41.460 --> 00:39:41.820
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:39:41.820 --> 00:39:44.580
<v Speaker 0>So that's, uh, that's kind of nice that you can

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:44.580 --> 00:39:45.750
<v Speaker 0>do that in Haskell.

NOTE CONF {"raw":[100,100,100,100]}

00:39:46.710 --> 00:39:50.610
<v Speaker 0>Um, here's just an here's just my example.

NOTE CONF {"raw":[100,100,100,92,100,100,100,100]}

00:39:50.640 --> 00:39:55.710
<v Speaker 0>P1 basically, um, uh, doing what's in this truth table,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:55.710 --> 00:39:57.600
<v Speaker 0>this kind of thing, which is now a mess.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:39:57.600 --> 00:39:58.080
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:39:58.080 --> 00:40:00.000
<v Speaker 0>So here's the valuations.

NOTE CONF {"raw":[100,100,100,97]}

00:40:00.210 --> 00:40:03.390
<v Speaker 0>Uh, so here's the, the names of, of this proposition.

NOTE CONF {"raw":[97,100,100,100,100,100,100,100,100,100]}

00:40:03.390 --> 00:40:07.080
<v Speaker 0>Here's the valuations over the list of names.

NOTE CONF {"raw":[96,100,100,100,100,100,100,100]}

00:40:07.230 --> 00:40:10.740
<v Speaker 0>Here is the, uh, list of values for each one

NOTE CONF {"raw":[100,100,100,98,100,100,100,100,100,100]}

00:40:10.740 --> 00:40:13.230
<v Speaker 0>of those Evaluations, you know.

NOTE CONF {"raw":[100,100,93,100,100]}

00:40:13.830 --> 00:40:14.250
<v Speaker 0>True.

NOTE CONF {"raw":[100]}

00:40:14.250 --> 00:40:14.730
<v Speaker 0>False.

NOTE CONF {"raw":[100]}

00:40:14.730 --> 00:40:15.180
<v Speaker 0>False.

NOTE CONF {"raw":[100]}

00:40:15.180 --> 00:40:15.870
<v Speaker 0>True.

NOTE CONF {"raw":[100]}

00:40:16.500 --> 00:40:18.690
<v Speaker 0>And here is the disjunction.

NOTE CONF {"raw":[100,100,100,100,100]}

00:40:25.260 --> 00:40:25.860
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:40:26.730 --> 00:40:27.960
<v Speaker 0>Any questions about that?

NOTE CONF {"raw":[100,100,100,100]}

00:40:27.960 --> 00:40:29.820
<v Speaker 0>I have something I want to talk about in the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:29.820 --> 00:40:33.390
<v Speaker 0>last ten minutes, which is which is different.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:40:34.830 --> 00:40:35.400
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:40:39.000 --> 00:40:39.240
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:40:39.270 --> 00:40:40.410
<v Speaker 0>No questions okay.

NOTE CONF {"raw":[100,100,84]}

00:40:40.440 --> 00:40:43.440
<v Speaker 0>I'm going to talk about uh, uh, two.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:40:43.800 --> 00:40:46.710
<v Speaker 0>Um, this is, this is not to do with expression

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:46.710 --> 00:40:47.520
<v Speaker 0>trees.

NOTE CONF {"raw":[97]}

00:40:48.030 --> 00:40:52.230
<v Speaker 0>Um, but it's two, um, uh, algebraic data types that

NOTE CONF {"raw":[100,100,100,74,100,100,100,100,100,100]}

00:40:52.230 --> 00:40:53.850
<v Speaker 0>you might find useful.

NOTE CONF {"raw":[100,100,100,100]}

00:40:53.850 --> 00:40:54.630
<v Speaker 0>Okay.

NOTE CONF {"raw":[98]}

00:40:54.840 --> 00:40:59.130
<v Speaker 0>Um, and, um, the first one is a data type

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:59.130 --> 00:41:03.330
<v Speaker 0>that's useful for a situation where you have optional data.

NOTE CONF {"raw":[100,100,100,49,67,100,100,100,100,100]}

00:41:04.050 --> 00:41:04.440
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:41:04.440 --> 00:41:06.000
<v Speaker 0>And it's called the maybe type.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:41:06.660 --> 00:41:09.870
<v Speaker 0>So you can use this for, um, for example, a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:09.870 --> 00:41:12.970
<v Speaker 0>function that takes an optional argument, or a function which

NOTE CONF {"raw":[100,100,100,100,100,100,100,89,100,100]}

00:41:12.970 --> 00:41:14.560
<v Speaker 0>delivers an optional result.

NOTE CONF {"raw":[100,100,100,100]}

00:41:14.560 --> 00:41:16.600
<v Speaker 0>And I'll just show you this.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:41:16.690 --> 00:41:17.860
<v Speaker 0>First of all, I'll show you the type, and then

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:17.860 --> 00:41:20.770
<v Speaker 0>I'll show you one example of each of those things.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:21.100 --> 00:41:21.400
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:41:21.400 --> 00:41:26.110
<v Speaker 0>So this type the type of optional values.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:41:26.620 --> 00:41:26.980
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:41:26.980 --> 00:41:28.930
<v Speaker 0>So if you if you've got an optional value of

NOTE CONF {"raw":[100,100,83,100,100,100,100,100,100,100]}

00:41:28.930 --> 00:41:32.590
<v Speaker 0>type A, um the type we use for that and

NOTE CONF {"raw":[100,100,95,100,100,100,97,100,100,100]}

00:41:32.590 --> 00:41:36.730
<v Speaker 0>this is built in in Haskell is maybe a okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,98,100,100]}

00:41:36.730 --> 00:41:39.400
<v Speaker 0>So it's, it's maybe there and it's maybe not there.

NOTE CONF {"raw":[100,100,100,100,99,100,100,100,100,100]}

00:41:39.610 --> 00:41:39.970
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:41:39.970 --> 00:41:40.930
<v Speaker 0>It's optional.

NOTE CONF {"raw":[100,100]}

00:41:41.050 --> 00:41:45.370
<v Speaker 0>So if it's not there then the value is nothing.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:46.210 --> 00:41:47.470
<v Speaker 0>That's a constructor.

NOTE CONF {"raw":[100,96,100]}

00:41:48.520 --> 00:41:49.180
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:41:49.180 --> 00:41:50.440
<v Speaker 0>So it's a value.

NOTE CONF {"raw":[100,100,100,100]}

00:41:50.440 --> 00:41:52.990
<v Speaker 0>It's a it's a non-existent value of type A.

NOTE CONF {"raw":[100,100,100,100,92,100,100,100,100]}

00:41:52.990 --> 00:41:54.670
<v Speaker 0>Let's let's say okay.

NOTE CONF {"raw":[100,100,100,100]}

00:41:54.670 --> 00:41:55.390
<v Speaker 0>It's a type.

NOTE CONF {"raw":[100,100,100]}

00:41:55.390 --> 00:41:59.140
<v Speaker 0>It's a value of type maybe a um so it's

NOTE CONF {"raw":[100,100,100,100,100,100,100,98,100,100]}

00:41:59.140 --> 00:42:01.120
<v Speaker 0>a, it's a value that's not there.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:42:01.390 --> 00:42:01.720
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:42:01.720 --> 00:42:04.150
<v Speaker 0>Suppose that you do have a value of type A.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:06.250 --> 00:42:08.740
<v Speaker 0>Uh, then you wrap it up in a constructor, you

NOTE CONF {"raw":[82,100,100,100,100,100,100,100,100,100]}

00:42:08.740 --> 00:42:12.820
<v Speaker 0>always need a constructor and you use constructor just so.

NOTE CONF {"raw":[100,100,86,100,100,100,100,100,100,100]}

00:42:12.820 --> 00:42:16.900
<v Speaker 0>It's just a so so uh uh, an optional integer

NOTE CONF {"raw":[100,100,100,100,100,90,99,100,100,100]}

00:42:16.900 --> 00:42:20.800
<v Speaker 0>would be maybe int, and the values would be nothing

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:21.040 --> 00:42:25.090
<v Speaker 0>or uh, or all of the possible, you know, just

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:25.090 --> 00:42:25.600
<v Speaker 0>three.

NOTE CONF {"raw":[100]}

00:42:25.600 --> 00:42:27.880
<v Speaker 0>Just seven okay.

NOTE CONF {"raw":[100,100,100]}

00:42:28.120 --> 00:42:32.590
<v Speaker 0>So a value that's present for this optional type is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:32.590 --> 00:42:34.960
<v Speaker 0>just of a of a value.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:42:34.960 --> 00:42:37.330
<v Speaker 0>And a value that's absent is nothing.

NOTE CONF {"raw":[100,54,100,100,100,100,100]}

00:42:37.330 --> 00:42:38.410
<v Speaker 0>There is no value.

NOTE CONF {"raw":[100,100,100,100]}

00:42:39.070 --> 00:42:39.790
<v Speaker 0>You got that.

NOTE CONF {"raw":[45,100,100]}

00:42:40.930 --> 00:42:44.710
<v Speaker 0>And so for example here's a here's an example of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:44.710 --> 00:42:47.050
<v Speaker 0>an optional argument okay.

NOTE CONF {"raw":[100,100,100,100]}

00:42:47.050 --> 00:42:50.710
<v Speaker 0>So let's suppose that we want to exponentiate um we

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:50.710 --> 00:42:54.400
<v Speaker 0>take you know m to the N and we're lazy.

NOTE CONF {"raw":[100,100,100,100,100,100,94,100,100,100]}

00:42:54.400 --> 00:42:57.700
<v Speaker 0>And so if M is two where we can't be

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:57.700 --> 00:43:00.040
<v Speaker 0>bothered to say that m is two, we just say,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:00.040 --> 00:43:02.830
<v Speaker 0>well the default value of m is two.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:43:02.950 --> 00:43:05.590
<v Speaker 0>So if I don't give you a value, then assume

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:05.590 --> 00:43:06.400
<v Speaker 0>it's two.

NOTE CONF {"raw":[100,100]}

00:43:06.490 --> 00:43:06.820
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:43:06.820 --> 00:43:08.780
<v Speaker 0>That's what I mean by default value.

NOTE CONF {"raw":[100,100,98,100,100,100,100]}

00:43:09.560 --> 00:43:09.890
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:43:09.890 --> 00:43:12.860
<v Speaker 0>So this function power instead of being int arrow int

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:12.860 --> 00:43:16.880
<v Speaker 0>arrow int the first argument is a maybe in.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,85]}

00:43:16.880 --> 00:43:19.610
<v Speaker 0>So it's an optional value of type int.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:43:22.250 --> 00:43:23.720
<v Speaker 0>And there's two cases.

NOTE CONF {"raw":[100,100,100,100]}

00:43:23.720 --> 00:43:26.000
<v Speaker 0>If I don't supply a value then the value is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:26.000 --> 00:43:26.810
<v Speaker 0>nothing.

NOTE CONF {"raw":[100]}

00:43:28.610 --> 00:43:29.300
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:43:29.300 --> 00:43:31.880
<v Speaker 0>Then I take two to the end.

NOTE CONF {"raw":[100,100,100,100,100,100,42]}

00:43:31.910 --> 00:43:32.540
<v Speaker 0>That's the second.

NOTE CONF {"raw":[100,90,100]}

00:43:32.570 --> 00:43:34.790
<v Speaker 0>The second argument is n okay I take two to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:34.790 --> 00:43:36.350
<v Speaker 0>the n two is the default.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:43:39.350 --> 00:43:42.770
<v Speaker 0>But if I supply a value like I do here

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:43.310 --> 00:43:43.700
<v Speaker 0>okay.

NOTE CONF {"raw":[100]}

00:43:43.700 --> 00:43:48.740
<v Speaker 0>If it's just m whatever m is, then I take

NOTE CONF {"raw":[100,100,100,100,100,96,100,100,100,100]}

00:43:48.740 --> 00:43:52.010
<v Speaker 0>um m to the n okay.

NOTE CONF {"raw":[97,100,100,100,100,100]}

00:43:52.010 --> 00:43:53.750
<v Speaker 0>So default value of two.

NOTE CONF {"raw":[100,100,100,100,100]}

00:43:53.990 --> 00:43:57.440
<v Speaker 0>If I supply a value I use that value okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:57.440 --> 00:44:00.410
<v Speaker 0>It's the one that I've supplied here.

NOTE CONF {"raw":[100,100,100,100,98,100,100]}

00:44:02.420 --> 00:44:03.110
<v Speaker 0>All right.

NOTE CONF {"raw":[100,100]}

00:44:05.600 --> 00:44:07.250
<v Speaker 0>And then optional Actual results.

NOTE CONF {"raw":[100,100,100,75,100]}

00:44:08.450 --> 00:44:12.050
<v Speaker 0>Uh, if I, if I, um, you know, you know

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:12.050 --> 00:44:14.330
<v Speaker 0>that if you divide by zero, you get an error,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:14.330 --> 00:44:14.660
<v Speaker 0>right?

NOTE CONF {"raw":[100]}

00:44:14.660 --> 00:44:16.430
<v Speaker 0>So that's kind of inconvenient.

NOTE CONF {"raw":[100,100,100,100,100]}

00:44:16.820 --> 00:44:20.120
<v Speaker 0>Um, if I, if I try to do division like

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:20.120 --> 00:44:23.600
<v Speaker 0>this and m is zero, then it will give me

NOTE CONF {"raw":[100,100,96,100,100,100,100,100,100,100]}

00:44:23.600 --> 00:44:24.140
<v Speaker 0>an error.

NOTE CONF {"raw":[100,100]}

00:44:24.560 --> 00:44:28.280
<v Speaker 0>So this is a a version of division integer division

NOTE CONF {"raw":[100,100,100,86,100,100,100,100,100,100]}

00:44:28.280 --> 00:44:29.870
<v Speaker 0>which doesn't give an error.

NOTE CONF {"raw":[100,100,100,100,100]}

00:44:30.020 --> 00:44:32.840
<v Speaker 0>What it gives is a is an optional result.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:44:32.840 --> 00:44:36.230
<v Speaker 0>So in case in case the numbers are are not

NOTE CONF {"raw":[100,100,100,100,100,100,100,60,82,42]}

00:44:36.230 --> 00:44:41.600
<v Speaker 0>in case that the um denominator or the divisor is

NOTE CONF {"raw":[100,100,76,100,100,100,100,100,100,100]}

00:44:41.600 --> 00:44:44.120
<v Speaker 0>is zero, it won't give you an error.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:44:44.120 --> 00:44:48.080
<v Speaker 0>It will give you, um, an optional result, which is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:48.350 --> 00:44:50.210
<v Speaker 0>uh, no, no value.

NOTE CONF {"raw":[100,100,100,100]}

00:44:50.210 --> 00:44:50.570
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:44:50.570 --> 00:44:54.440
<v Speaker 0>So dividing n by zero with this function I define

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:54.440 --> 00:44:56.000
<v Speaker 0>it to give me the value.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:44:56.000 --> 00:44:56.780
<v Speaker 0>Nothing.

NOTE CONF {"raw":[100]}

00:44:57.620 --> 00:44:58.070
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:44:58.070 --> 00:45:00.320
<v Speaker 0>This would be the case that would normally give you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:00.320 --> 00:45:00.980
<v Speaker 0>an error.

NOTE CONF {"raw":[100,100]}

00:45:02.750 --> 00:45:07.110
<v Speaker 0>And um, if, if, if you've got a non-zero second

NOTE CONF {"raw":[100,100,82,100,100,100,100,100,83,100]}

00:45:07.110 --> 00:45:08.220
<v Speaker 0>argument here.

NOTE CONF {"raw":[100,100]}

00:45:08.970 --> 00:45:09.420
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:45:09.420 --> 00:45:15.450
<v Speaker 0>Then you, uh, you do the normal division and you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:15.450 --> 00:45:18.420
<v Speaker 0>have to wrap it up in a constructor like this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:18.420 --> 00:45:21.840
<v Speaker 0>to get a value that matches the, uh, the type

NOTE CONF {"raw":[100,100,100,100,100,100,100,51,100,100]}

00:45:21.840 --> 00:45:22.890
<v Speaker 0>that you've defined here.

NOTE CONF {"raw":[100,100,100,100]}

00:45:22.890 --> 00:45:23.130
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:45:23.130 --> 00:45:25.950
<v Speaker 0>So these are the two values that you can get

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:25.950 --> 00:45:28.230
<v Speaker 0>out of this either no value if you try to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:28.230 --> 00:45:31.980
<v Speaker 0>divide by zero or a value wrapped up of the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:32.010 --> 00:45:33.750
<v Speaker 0>of the division.

NOTE CONF {"raw":[100,100,100]}

00:45:37.050 --> 00:45:37.860
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:45:38.520 --> 00:45:39.180
<v Speaker 1>Um.

NOTE CONF {"raw":[100]}

00:45:41.400 --> 00:45:46.140
<v Speaker 0>Now using an optional result requires a little bit of,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:46.140 --> 00:45:48.930
<v Speaker 0>uh, a little bit of, uh, unwrapping.

NOTE CONF {"raw":[98,100,100,100,100,91,100]}

00:45:49.770 --> 00:45:50.340
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:45:50.340 --> 00:45:54.030
<v Speaker 0>So here's the function that I just defined for dividing,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:54.630 --> 00:45:58.080
<v Speaker 0>um, which, um, which produces a maybe int as a

NOTE CONF {"raw":[97,100,100,100,100,100,100,100,100,100]}

00:45:58.080 --> 00:45:58.530
<v Speaker 0>result.

NOTE CONF {"raw":[100]}

00:45:58.530 --> 00:45:58.800
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:45:58.800 --> 00:45:59.850
<v Speaker 0>So look at that type.

NOTE CONF {"raw":[100,100,100,100,100]}

00:45:59.850 --> 00:46:00.060
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:46:00.060 --> 00:46:03.180
<v Speaker 0>So it's producing not an integer result but a but

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,95]}

00:46:03.180 --> 00:46:05.070
<v Speaker 0>a maybe int as a result.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:46:05.070 --> 00:46:07.740
<v Speaker 0>And now suppose I want to write a function which

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:07.740 --> 00:46:09.390
<v Speaker 0>uses that to do something.

NOTE CONF {"raw":[100,100,100,100,100]}

00:46:10.050 --> 00:46:10.890
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:46:10.890 --> 00:46:15.180
<v Speaker 0>Um, so this requires a little bit of, uh, unwrapping.

NOTE CONF {"raw":[52,100,100,100,100,100,100,100,100,100]}

00:46:15.180 --> 00:46:15.660
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:46:15.660 --> 00:46:18.930
<v Speaker 0>Suppose that I want to write a function which for

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:18.930 --> 00:46:21.960
<v Speaker 0>every reason it takes the result of dividing n by

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:21.960 --> 00:46:23.340
<v Speaker 0>m and adds three to it.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:46:24.750 --> 00:46:25.230
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:46:25.230 --> 00:46:28.680
<v Speaker 0>And suppose I just decide that for the case where

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:28.680 --> 00:46:31.500
<v Speaker 0>m is zero, I should produce the result three.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:46:33.660 --> 00:46:35.310
<v Speaker 0>Because there's nothing else.

NOTE CONF {"raw":[100,100,100,100]}

00:46:35.850 --> 00:46:37.680
<v Speaker 0>I mean, I don't have anything.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:46:38.100 --> 00:46:38.940
<v Speaker 0>Uh, yeah.

NOTE CONF {"raw":[100,98]}

00:46:38.940 --> 00:46:39.750
<v Speaker 0>Any better idea?

NOTE CONF {"raw":[100,100,100]}

00:46:39.750 --> 00:46:42.360
<v Speaker 0>Okay, so this is a wrong way to do this.

NOTE CONF {"raw":[100,100,100,100,96,100,100,100,100,100]}

00:46:42.690 --> 00:46:42.990
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:46:42.990 --> 00:46:46.920
<v Speaker 0>This will give you a typeerror because divide divide n

NOTE CONF {"raw":[100,100,100,100,100,73,100,100,100,68]}

00:46:46.920 --> 00:46:47.460
<v Speaker 0>m.

NOTE CONF {"raw":[95]}

00:46:48.540 --> 00:46:54.480
<v Speaker 0>This has type maybe int and maybe int plus int

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:54.510 --> 00:46:55.590
<v Speaker 0>is a type error.

NOTE CONF {"raw":[100,100,95,95]}

00:46:58.260 --> 00:46:58.680
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:46:58.680 --> 00:47:00.270
<v Speaker 0>So that's the wrong way to do it.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:47:00.270 --> 00:47:04.020
<v Speaker 0>The right way to do it is down here Okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:04.020 --> 00:47:08.400
<v Speaker 0>Divide n of m has type maybe int.

NOTE CONF {"raw":[100,98,100,93,100,100,100,100]}

00:47:08.400 --> 00:47:09.990
<v Speaker 0>And so there are two cases.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:47:09.990 --> 00:47:15.840
<v Speaker 0>It's either nothing and then the result is three or

NOTE CONF {"raw":[94,100,100,100,100,100,100,100,100,100]}

00:47:15.840 --> 00:47:19.710
<v Speaker 0>it's um a result wrapped up with this constructor.

NOTE CONF {"raw":[97,93,100,100,100,100,100,100,100]}

00:47:19.710 --> 00:47:23.160
<v Speaker 0>Just and then the result is R plus three.

NOTE CONF {"raw":[100,100,100,100,100,100,91,100,100]}

00:47:23.160 --> 00:47:26.880
<v Speaker 0>So I've unwrapped the value and added three to it.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:27.510 --> 00:47:29.760
<v Speaker 0>Um this syntax by the way I think this is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:29.760 --> 00:47:31.950
<v Speaker 0>the first time that you've seen this.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:47:31.950 --> 00:47:33.960
<v Speaker 0>It's just a yeah case.

NOTE CONF {"raw":[100,100,100,90,100]}

00:47:33.960 --> 00:47:36.120
<v Speaker 0>Case analysis.

NOTE CONF {"raw":[100,100]}

00:47:36.510 --> 00:47:36.870
<v Speaker 0>Um.

NOTE CONF {"raw":[100]}

00:47:41.070 --> 00:47:42.180
<v Speaker 2>Okay.

NOTE CONF {"raw":[100]}

00:47:42.180 --> 00:47:46.590
<v Speaker 0>So that's optional values and results may be type.

NOTE CONF {"raw":[100,100,100,100,100,100,77,77,100]}

00:47:46.710 --> 00:47:50.340
<v Speaker 0>And I have just enough time to show you, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,86]}

00:47:50.340 --> 00:47:52.290
<v Speaker 0>disjoint union of two types.

NOTE CONF {"raw":[100,100,100,100,100]}

00:47:52.290 --> 00:47:57.360
<v Speaker 0>So remember that the, uh, that a list always has

NOTE CONF {"raw":[100,100,100,100,87,100,100,100,100,100]}

00:47:57.360 --> 00:47:58.800
<v Speaker 0>types of the same value in it.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:47:58.800 --> 00:47:59.100
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:47:59.220 --> 00:47:59.670
<v Speaker 0>Sorry.

NOTE CONF {"raw":[100]}

00:48:00.090 --> 00:48:01.920
<v Speaker 0>The values of the same type.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:48:01.920 --> 00:48:04.300
<v Speaker 0>You get a list of integers, a list of booleans,

NOTE CONF {"raw":[95,95,100,100,100,100,61,100,100,100]}

00:48:04.300 --> 00:48:06.940
<v Speaker 0>a list of functions from into booleans, whatever.

NOTE CONF {"raw":[71,100,100,100,100,100,100,100]}

00:48:06.940 --> 00:48:08.230
<v Speaker 0>It's always the same type.

NOTE CONF {"raw":[100,100,100,100,100]}

00:48:08.230 --> 00:48:11.260
<v Speaker 0>So here is a way to get a list of

NOTE CONF {"raw":[100,97,97,100,100,100,100,100,100,100]}

00:48:11.500 --> 00:48:13.360
<v Speaker 0>values of different types.

NOTE CONF {"raw":[100,100,100,100]}

00:48:13.690 --> 00:48:16.660
<v Speaker 0>Okay, but I'm not lying by saying that the list

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:16.660 --> 00:48:19.360
<v Speaker 0>always has to have the values of the same type,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:19.360 --> 00:48:22.510
<v Speaker 0>it's that the type has to be the type of

NOTE CONF {"raw":[88,100,100,100,100,100,100,100,100,100]}

00:48:22.510 --> 00:48:25.840
<v Speaker 0>values which are either one type or the other type.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:27.400 --> 00:48:30.100
<v Speaker 0>Okay, so this is a type of values which is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:30.100 --> 00:48:33.580
<v Speaker 0>either a or b okay.

NOTE CONF {"raw":[100,100,100,100,91]}

00:48:33.580 --> 00:48:36.220
<v Speaker 0>It's called either a b again built into Haskell.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:48:36.670 --> 00:48:37.330
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:48:37.330 --> 00:48:40.840
<v Speaker 0>So you've either got it's a this is kind of

NOTE CONF {"raw":[100,100,100,100,86,80,100,100,100,100]}

00:48:40.840 --> 00:48:43.120
<v Speaker 0>union or in fact disjoint union.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:48:43.510 --> 00:48:46.930
<v Speaker 0>Uh, so um here's a just looking down at this

NOTE CONF {"raw":[90,99,93,100,90,100,100,100,86,100]}

00:48:46.930 --> 00:48:47.650
<v Speaker 0>example.

NOTE CONF {"raw":[100]}

00:48:47.650 --> 00:48:50.200
<v Speaker 0>I think I'm going to run out of time here

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:50.200 --> 00:48:51.100
<v Speaker 0>probably.

NOTE CONF {"raw":[97]}

00:48:51.370 --> 00:48:55.330
<v Speaker 0>Um, here is a list of values where some of

NOTE CONF {"raw":[100,95,95,100,100,100,100,100,100,100]}

00:48:55.330 --> 00:48:57.670
<v Speaker 0>them are numbers and some of them are strings.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:48:59.110 --> 00:48:59.770
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:48:59.770 --> 00:49:02.080
<v Speaker 0>But They're not.

NOTE CONF {"raw":[100,100,100]}

00:49:02.080 --> 00:49:04.510
<v Speaker 0>They're not numbers or strings on their own.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:49:04.510 --> 00:49:08.770
<v Speaker 0>They're numbers or strings wrapped up with constructors which say,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:08.770 --> 00:49:13.330
<v Speaker 0>if I'm talking about kind of the left component of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:13.330 --> 00:49:16.390
<v Speaker 0>this union or the right component of this union.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:49:16.660 --> 00:49:17.080
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:49:17.080 --> 00:49:21.070
<v Speaker 0>So either in string, so all of the integers are

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:21.070 --> 00:49:24.730
<v Speaker 0>going to be tagged to say that there are, you

NOTE CONF {"raw":[100,100,100,100,100,100,100,96,96,100]}

00:49:24.730 --> 00:49:26.920
<v Speaker 0>know, the left component of this.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:49:26.920 --> 00:49:30.310
<v Speaker 0>So left a left one left to left 17.

NOTE CONF {"raw":[100,100,100,100,100,100,81,100,100]}

00:49:30.310 --> 00:49:33.280
<v Speaker 0>And all of the strings are tagged as being from

NOTE CONF {"raw":[100,100,94,100,100,100,100,100,100,100]}

00:49:33.280 --> 00:49:37.540
<v Speaker 0>the right, uh union components.

NOTE CONF {"raw":[100,100,100,100,93]}

00:49:37.540 --> 00:49:37.960
<v Speaker 0>So.

NOTE CONF {"raw":[100]}

00:49:37.960 --> 00:49:38.380
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:49:38.380 --> 00:49:38.860
<v Speaker 0>Hello.

NOTE CONF {"raw":[100]}

00:49:38.860 --> 00:49:39.310
<v Speaker 0>And right.

NOTE CONF {"raw":[100,100]}

00:49:39.310 --> 00:49:43.480
<v Speaker 0>Empty empty string or no, uh, space and right world.

NOTE CONF {"raw":[87,100,100,100,100,75,100,100,100,100]}

00:49:43.480 --> 00:49:46.390
<v Speaker 0>And so um, okay, so you can build strings like,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,96]}

00:49:46.390 --> 00:49:50.710
<v Speaker 0>you can build, um, list like this and you can

NOTE CONF {"raw":[100,100,100,100,60,100,100,100,100,100]}

00:49:50.710 --> 00:49:53.950
<v Speaker 0>write functions which, for example, add together all the integers

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:53.950 --> 00:49:57.970
<v Speaker 0>in, in such a list or um, take.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:49:58.300 --> 00:49:59.950
<v Speaker 0>Yeah, that's, that's that function.

NOTE CONF {"raw":[100,100,100,100,100]}

00:49:59.960 --> 00:50:04.100
<v Speaker 0>And here's a function that concatenates all the strings in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:50:04.100 --> 00:50:05.000
<v Speaker 0>such a list.

NOTE CONF {"raw":[100,100,100]}

00:50:05.900 --> 00:50:06.890
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:50:06.890 --> 00:50:08.270
<v Speaker 0>And I'm out of time.

NOTE CONF {"raw":[100,100,100,100,100]}

00:50:08.270 --> 00:50:11.120
<v Speaker 0>I will just say for those who are interested, there's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:50:11.360 --> 00:50:13.220
<v Speaker 0>some code at the end of this lecture that you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:50:13.220 --> 00:50:15.050
<v Speaker 0>can look at and play with if you want.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:50:15.050 --> 00:50:18.650
<v Speaker 0>And it's a, it's, it's, it's an interpreter for Haskell

NOTE CONF {"raw":[100,100,100,72,92,100,98,100,100,100]}

00:50:18.650 --> 00:50:21.710
<v Speaker 0>written in, uh, this much code.

NOTE CONF {"raw":[100,100,67,100,100,100]}

00:50:21.830 --> 00:50:22.550
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:50:22.550 --> 00:50:26.450
<v Speaker 0>So this is a representation of Haskell syntax, very simple

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:50:26.450 --> 00:50:27.740
<v Speaker 0>subset of Haskell.

NOTE CONF {"raw":[100,100,100]}

00:50:27.950 --> 00:50:32.450
<v Speaker 0>Uh, and um, a definition of evaluation of such programs.

NOTE CONF {"raw":[100,100,92,100,100,100,100,100,100,100]}

00:50:32.450 --> 00:50:32.750
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:50:32.750 --> 00:50:36.020
<v Speaker 0>So that's how much space it writes takes to implement

NOTE CONF {"raw":[100,100,100,100,100,100,52,100,100,100]}

00:50:36.020 --> 00:50:36.710
<v Speaker 0>Haskell.

NOTE CONF {"raw":[100]}

00:50:36.710 --> 00:50:38.720
<v Speaker 0>If you, uh, if you do it in Haskell.

NOTE CONF {"raw":[100,100,75,100,100,100,100,100,100]}

00:50:39.770 --> 00:50:40.430
<v Speaker 0>Thank you.

NOTE CONF {"raw":[100,100]}

00:50:43.640 --> 00:50:45.230
<v Speaker 0>Sorry, that was a bit fast.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:50:56.480 --> 00:50:56.750
<v Speaker 2>Hi.

NOTE CONF {"raw":[100]}

00:50:57.200 --> 00:51:00.290
<v Speaker 3>Um, I was reading for, uh, the, uh, with the

NOTE CONF {"raw":[64,81,81,100,100,90,100,79,100,100]}

00:51:00.290 --> 00:51:01.400
<v Speaker 3>trees for next week.

NOTE CONF {"raw":[100,100,100,100]}

00:51:01.400 --> 00:51:01.700
<v Speaker 3>The.

NOTE CONF {"raw":[100]}

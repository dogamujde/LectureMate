WEBVTT

00:00:36.510 --> 00:00:39.150
<v Unknown>Just come outside for the night.

NOTE CONF {"raw":[100,91,63,100,100,100]}

00:00:39.870 --> 00:00:40.740
<v Unknown>Take your time.

NOTE CONF {"raw":[100,100,100]}

00:00:41.460 --> 00:00:43.560
<v Unknown>Get your knife dirty.

NOTE CONF {"raw":[100,98,52,71]}

00:00:43.590 --> 00:00:45.510
<v Unknown>Thank me.

NOTE CONF {"raw":[42,46]}

00:00:46.470 --> 00:00:46.800
<v Unknown>Have you.

NOTE CONF {"raw":[100,100]}

00:00:49.740 --> 00:00:57.000
<v Unknown>Been keeping p p p p p p p p

NOTE CONF {"raw":[97,23,60,93,93,93,93,93,93,93]}

00:00:57.390 --> 00:01:02.580
<v Unknown>p p p We need to get a feel for.

NOTE CONF {"raw":[93,93,93,92,92,92,100,100,100,100]}

00:01:05.040 --> 00:01:07.860
<v Speaker 0>The charisma estate where you win your prize.

NOTE CONF {"raw":[100,38,97,37,100,52,100,47]}

00:01:08.220 --> 00:01:09.450
<v Speaker 0>Fuck that paper, baby.

NOTE CONF {"raw":[100,100,100,100]}

00:01:09.450 --> 00:01:11.130
<v Speaker 0>My face on the dotted line.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:01:11.370 --> 00:01:13.920
<v Speaker 0>I've been flying out of town for some peace of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:13.920 --> 00:01:14.400
<v Speaker 0>mind.

NOTE CONF {"raw":[100]}

00:01:14.760 --> 00:01:15.990
<v Speaker 0>It's like always.

NOTE CONF {"raw":[100,100,100]}

00:01:15.990 --> 00:01:17.550
<v Speaker 0>They just want a peace of mind.

NOTE CONF {"raw":[100,100,94,91,91,100,94]}

00:01:17.910 --> 00:01:19.590
<v Speaker 0>I've been focussed on the future.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:01:19.590 --> 00:01:20.760
<v Speaker 0>Never right now.

NOTE CONF {"raw":[100,82,84]}

00:01:21.150 --> 00:01:24.030
<v Speaker 0>What I'm sippin I can butchie the pick up around.

NOTE CONF {"raw":[100,100,99,100,100,33,97,54,36,21]}

00:01:24.390 --> 00:01:26.340
<v Speaker 0>I'm the one that introduce you to.

NOTE CONF {"raw":[100,100,100,100,56,100,100]}

00:01:26.340 --> 00:01:27.270
<v Unknown>To you right now.

NOTE CONF {"raw":[58,100,100,100]}

00:01:28.590 --> 00:01:32.640
<v Unknown>Oh my God, that be baby, baby when I right.

NOTE CONF {"raw":[100,100,100,80,95,100,94,62,55,56]}

00:01:33.390 --> 00:01:35.880
<v Unknown>Try to fight in the night.

NOTE CONF {"raw":[52,78,34,100,100,100]}

00:01:36.690 --> 00:01:39.060
<v Unknown>Though my life ain't a sneak.

NOTE CONF {"raw":[80,100,100,100,77,77]}

00:01:39.960 --> 00:01:40.320
<v Unknown>Ain't it?

NOTE CONF {"raw":[100,100]}

00:01:40.710 --> 00:01:42.360
<v Unknown>Ain't it ain't 18.

NOTE CONF {"raw":[100,100,100,100]}

00:01:43.620 --> 00:01:50.460
<v Unknown>P p p p p p p p p p

NOTE CONF {"raw":[93,93,70,100,100,100,100,100,100,100]}

00:01:50.910 --> 00:01:58.110
<v Unknown>p p p p p p p p p p.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,99]}

00:01:59.650 --> 00:02:00.100
<v Unknown>Sir.

NOTE CONF {"raw":[90]}

00:02:02.920 --> 00:02:03.490
<v Unknown>Wait.

NOTE CONF {"raw":[91]}

00:02:06.160 --> 00:02:06.640
<v Unknown>Wait.

NOTE CONF {"raw":[99]}

00:02:10.270 --> 00:02:10.660
<v Unknown>Wait.

NOTE CONF {"raw":[100]}

00:02:15.910 --> 00:02:18.610
<v Unknown>He asked.

NOTE CONF {"raw":[100,99]}

00:02:18.610 --> 00:02:19.480
<v Speaker 1>Me my sheet.

NOTE CONF {"raw":[100,47,32]}

00:02:19.990 --> 00:02:21.430
<v Unknown>Last year.

NOTE CONF {"raw":[49,37]}

00:02:21.490 --> 00:02:23.650
<v Unknown>You try to confirm if I mean your time.

NOTE CONF {"raw":[97,96,100,32,99,93,83,100,20]}

00:02:23.680 --> 00:02:24.430
<v Unknown>Holy shit.

NOTE CONF {"raw":[92,98]}

00:02:24.790 --> 00:02:28.330
<v Unknown>I hung around Philly like I'm on a plane.

NOTE CONF {"raw":[93,99,100,40,100,100,88,45,50]}

00:02:28.480 --> 00:02:28.930
<v Unknown>Sorry.

NOTE CONF {"raw":[76]}

00:02:29.680 --> 00:02:30.880
<v Speaker 1>Shout out to your friends.

NOTE CONF {"raw":[98,98,58,100,83]}

00:02:31.390 --> 00:02:32.530
<v Speaker 2>I'm goin crazy.

NOTE CONF {"raw":[88,33,96]}

00:02:32.890 --> 00:02:34.060
<v Speaker 1>How can it be?

NOTE CONF {"raw":[10,10,10,10]}

00:02:34.510 --> 00:02:35.740
<v Speaker 1>She's not innocent.

NOTE CONF {"raw":[100,100,34]}

00:02:36.070 --> 00:02:39.550
<v Speaker 1>She's trying to go right.

NOTE CONF {"raw":[100,100,100,100,91]}

00:02:40.090 --> 00:02:44.860
<v Speaker 3>So, uh, one of your classmates recommended that I play

NOTE CONF {"raw":[100,99,100,100,100,100,100,100,100,100]}

00:02:44.860 --> 00:02:46.300
<v Speaker 3>this, uh, this music.

NOTE CONF {"raw":[100,72,100,100]}

00:02:46.720 --> 00:02:46.930
<v Speaker 3>Uh.

NOTE CONF {"raw":[100]}

00:02:49.420 --> 00:02:53.830
<v Speaker 3>Um, I guess more up to date than my usual

NOTE CONF {"raw":[99,100,100,100,100,100,100,100,100,100]}

00:02:53.830 --> 00:02:55.120
<v Speaker 3>selections, but, uh.

NOTE CONF {"raw":[100,100,87]}

00:02:55.120 --> 00:02:55.570
<v Speaker 3>Yeah.

NOTE CONF {"raw":[100]}

00:02:55.570 --> 00:02:58.360
<v Speaker 3>Makes me a little dizzy to watch this graphics actually,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:58.360 --> 00:02:59.680
<v Speaker 3>but never mind.

NOTE CONF {"raw":[100,100,100]}

00:03:00.010 --> 00:03:01.420
<v Speaker 3>Um, yes.

NOTE CONF {"raw":[100,100]}

00:03:01.420 --> 00:03:05.740
<v Speaker 3>So, um, today I'm going to, uh, uh, give a

NOTE CONF {"raw":[100,100,100,100,100,100,100,90,100,100]}

00:03:05.740 --> 00:03:09.850
<v Speaker 3>lecture on, um, data representation.

NOTE CONF {"raw":[100,100,100,100,100]}

00:03:09.850 --> 00:03:13.180
<v Speaker 3>And data abstraction today is data representation.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:03:14.410 --> 00:03:18.700
<v Speaker 3>And, um, on Monday I'll carry on with this and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:18.700 --> 00:03:20.530
<v Speaker 3>then talk about data abstraction.

NOTE CONF {"raw":[100,100,100,100,100]}

00:03:20.530 --> 00:03:25.120
<v Speaker 3>So, um, we've now finished with the most important, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:25.120 --> 00:03:28.240
<v Speaker 3>elements of functional programming in Haskell.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:03:28.240 --> 00:03:32.650
<v Speaker 3>You know, you've learned about, uh, lists and comprehensions, recursion,

NOTE CONF {"raw":[100,100,100,100,100,83,100,100,100,100]}

00:03:32.920 --> 00:03:38.440
<v Speaker 3>uh, higher order functions, algebraic data types, um, and so

NOTE CONF {"raw":[71,100,100,100,100,87,87,100,100,100]}

00:03:38.440 --> 00:03:41.380
<v Speaker 3>forth, pattern matching, function definitions, all these things.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:03:41.380 --> 00:03:44.080
<v Speaker 3>And now I'm going to be talking about an idea,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:44.560 --> 00:03:48.130
<v Speaker 3>um, of programming, which is not specific to Haskell.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:03:48.490 --> 00:03:52.150
<v Speaker 3>Um, uh, it's uh, the, the topic of data abstraction.

NOTE CONF {"raw":[100,96,100,92,98,100,100,100,100,100]}

00:03:52.150 --> 00:03:55.070
<v Speaker 3>And so one of the, I would say top 3

NOTE CONF {"raw":[94,94,100,100,100,100,100,100,100,100]}

00:03:55.070 --> 00:03:57.310
<v Speaker 3>or 4 for ideas in programming.

NOTE CONF {"raw":[100,100,100,100,92,100]}

00:03:57.760 --> 00:04:01.840
<v Speaker 3>Um, uh, and the the the what it allows you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:01.840 --> 00:04:05.890
<v Speaker 3>to do is to separate getting things right from making

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:05.890 --> 00:04:07.300
<v Speaker 3>things go fast.

NOTE CONF {"raw":[100,100,100]}

00:04:07.300 --> 00:04:10.210
<v Speaker 3>And so you can deal with those two things separately

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:10.210 --> 00:04:13.120
<v Speaker 3>and, and in that way deal with them better.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:04:13.120 --> 00:04:17.680
<v Speaker 3>But first, I want to announce the, uh, the 2024,

NOTE CONF {"raw":[100,100,100,100,100,100,100,83,100,48]}

00:04:17.709 --> 00:04:21.190
<v Speaker 3>um, Informatics one eight programming competition.

NOTE CONF {"raw":[69,100,100,100,100,100]}

00:04:21.700 --> 00:04:26.950
<v Speaker 3>Um, so there's a competition for this course with prizes,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:27.670 --> 00:04:29.410
<v Speaker 3>uh, which are Amazon vouchers.

NOTE CONF {"raw":[100,100,100,100,100]}

00:04:29.410 --> 00:04:33.310
<v Speaker 3>But the most important prize is the is, is that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:33.310 --> 00:04:36.580
<v Speaker 3>you'll become famous and and you'll have something to put

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:36.580 --> 00:04:39.250
<v Speaker 3>on your CV that you won the, you know, first

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:39.250 --> 00:04:41.470
<v Speaker 3>or second prize or whatever for this course.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:04:41.470 --> 00:04:42.070
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:04:42.070 --> 00:04:44.710
<v Speaker 3>The Amazon vouchers, I have to say, are not for

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,98]}

00:04:44.710 --> 00:04:47.350
<v Speaker 3>a very large amount of money, but it's the thought

NOTE CONF {"raw":[98,100,100,100,100,100,100,100,100,100]}

00:04:47.350 --> 00:04:48.280
<v Speaker 3>that counts.

NOTE CONF {"raw":[100,100]}

00:04:48.850 --> 00:04:53.830
<v Speaker 3>Um, uh, they're sponsored by this company, Galois here.

NOTE CONF {"raw":[89,80,99,100,100,100,100,99,100]}

00:04:53.830 --> 00:04:56.450
<v Speaker 3>This is an American company that uses a lot of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:56.450 --> 00:04:57.230
<v Speaker 3>Haskell.

NOTE CONF {"raw":[100]}

00:04:58.310 --> 00:04:59.870
<v Speaker 3>Um, they do a lot of work for the US

NOTE CONF {"raw":[99,100,100,100,100,100,100,100,100,100]}

00:04:59.870 --> 00:05:04.850
<v Speaker 3>government, and, um, uh, they use Haskell, uh, to, to

NOTE CONF {"raw":[100,100,100,95,100,100,100,100,100,100]}

00:05:04.850 --> 00:05:06.710
<v Speaker 3>do almost all of their programming.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:05:07.100 --> 00:05:13.760
<v Speaker 3>Um, so, um, the competition is, uh, you have to

NOTE CONF {"raw":[100,100,100,100,100,100,98,100,100,100]}

00:05:13.760 --> 00:05:17.000
<v Speaker 3>write a Haskell program with interesting graphics.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:05:17.930 --> 00:05:18.680
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:05:18.740 --> 00:05:22.400
<v Speaker 3>Um, there are some graphics libraries in Haskell.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:05:22.400 --> 00:05:24.800
<v Speaker 3>I'm not the right person to ask about them, but

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:24.800 --> 00:05:27.350
<v Speaker 3>you have to find about find out about them yourself,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:27.350 --> 00:05:29.630
<v Speaker 3>and you can use them to to make a nice

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:29.630 --> 00:05:32.000
<v Speaker 3>picture or an animation or something like that.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:05:32.000 --> 00:05:35.000
<v Speaker 3>And, uh, there are some entries from a previous year

NOTE CONF {"raw":[100,91,100,100,100,100,100,100,100,100]}

00:05:35.000 --> 00:05:37.040
<v Speaker 3>online at this website.

NOTE CONF {"raw":[100,100,100,100]}

00:05:37.220 --> 00:05:39.530
<v Speaker 3>Um, I'll show you these in a second.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:05:40.190 --> 00:05:43.370
<v Speaker 3>Uh, anyway, uh, this is of course, of course, optional,

NOTE CONF {"raw":[93,100,97,100,100,100,100,100,100,100]}

00:05:43.370 --> 00:05:45.950
<v Speaker 3>but it's fun, and I do encourage you to give

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:45.950 --> 00:05:46.820
<v Speaker 3>it a try.

NOTE CONF {"raw":[100,100,100]}

00:05:47.210 --> 00:05:51.470
<v Speaker 3>Um, the prizes will be awarded in the last FP

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,87]}

00:05:51.470 --> 00:05:53.720
<v Speaker 3>lecture of this semester.

NOTE CONF {"raw":[100,100,100,100]}

00:05:55.340 --> 00:05:55.820
<v Speaker 3>Um.

NOTE CONF {"raw":[100]}

00:05:56.180 --> 00:05:58.340
<v Speaker 3>Uh, the submission is about a week before that.

NOTE CONF {"raw":[96,100,100,100,100,100,100,100,100]}

00:05:58.340 --> 00:05:59.060
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:05:59.060 --> 00:06:03.770
<v Speaker 3>So, um, uh, something to do if you feel motivated.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:03.770 --> 00:06:07.160
<v Speaker 3>Uh, let me just show you some pictures from a

NOTE CONF {"raw":[61,100,100,100,100,100,100,100,100,100]}

00:06:07.160 --> 00:06:08.390
<v Speaker 3>previous year.

NOTE CONF {"raw":[100,100]}

00:06:08.420 --> 00:06:11.390
<v Speaker 3>This is actually, I think, 2019.

NOTE CONF {"raw":[100,100,100,100,100,65]}

00:06:11.390 --> 00:06:14.570
<v Speaker 3>So these students will have all graduated by now.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,99]}

00:06:14.600 --> 00:06:15.830
<v Speaker 3>Let me find this.

NOTE CONF {"raw":[100,100,100,100]}

00:06:19.190 --> 00:06:20.180
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:06:20.360 --> 00:06:21.050
<v Speaker 3>Um.

NOTE CONF {"raw":[100]}

00:06:24.740 --> 00:06:26.570
<v Speaker 3>Oh, well, that's that's big enough.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:06:26.570 --> 00:06:28.190
<v Speaker 3>I'm going to turn the lights down because some of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:28.190 --> 00:06:31.010
<v Speaker 3>these are dark and you won't see them.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:06:34.790 --> 00:06:35.360
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:06:35.360 --> 00:06:36.410
<v Speaker 3>So, um.

NOTE CONF {"raw":[100,100]}

00:06:39.140 --> 00:06:39.740
<v Speaker 3>Yeah.

NOTE CONF {"raw":[100]}

00:06:40.040 --> 00:06:44.750
<v Speaker 3>I don't know how to get this is okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:06:44.750 --> 00:06:45.410
<v Speaker 3>Right.

NOTE CONF {"raw":[100]}

00:06:45.740 --> 00:06:46.160
<v Speaker 3>Um.

NOTE CONF {"raw":[100]}

00:06:49.100 --> 00:06:50.780
<v Speaker 3>Uh, so some nice pictures.

NOTE CONF {"raw":[97,100,100,100,100]}

00:06:51.530 --> 00:06:51.890
<v Speaker 3>Um.

NOTE CONF {"raw":[100]}

00:06:54.260 --> 00:06:58.100
<v Speaker 3>You know, they have uh, sometimes, uh, often have reasons

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:58.100 --> 00:06:58.520
<v Speaker 3>behind them.

NOTE CONF {"raw":[100,100]}

00:06:58.520 --> 00:07:00.200
<v Speaker 3>This is a Sierpinski triangle.

NOTE CONF {"raw":[100,100,100,100,100]}

00:07:00.200 --> 00:07:01.460
<v Speaker 3>This, uh, this thing there.

NOTE CONF {"raw":[100,96,100,100,86]}

00:07:01.460 --> 00:07:03.110
<v Speaker 3>Here's an animated one.

NOTE CONF {"raw":[100,100,100,100]}

00:07:04.940 --> 00:07:06.650
<v Speaker 3>Uh, another animated one.

NOTE CONF {"raw":[100,100,100,100]}

00:07:06.650 --> 00:07:08.270
<v Speaker 3>These are all third prizes.

NOTE CONF {"raw":[100,100,100,100,100]}

00:07:08.270 --> 00:07:09.410
<v Speaker 3>There were a lot of, uh, there were a lot

NOTE CONF {"raw":[100,99,100,100,100,62,100,100,100,100]}

00:07:09.410 --> 00:07:10.670
<v Speaker 3>of submissions that year.

NOTE CONF {"raw":[100,100,100,100]}

00:07:11.270 --> 00:07:16.280
<v Speaker 3>Um, okay, I'll just flick through these, um, okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:07:16.280 --> 00:07:20.900
<v Speaker 3>Some some Mandelbrot set, uh, things there.

NOTE CONF {"raw":[100,100,100,100,100,100,97]}

00:07:21.170 --> 00:07:21.620
<v Speaker 3>Uh.

NOTE CONF {"raw":[100]}

00:07:24.980 --> 00:07:25.490
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:07:25.490 --> 00:07:27.290
<v Speaker 3>This is from chaos theory, I think.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:07:27.290 --> 00:07:28.610
<v Speaker 3>Lorenz attractor.

NOTE CONF {"raw":[93,100]}

00:07:29.300 --> 00:07:29.660
<v Speaker 3>Um.

NOTE CONF {"raw":[100]}

00:07:32.990 --> 00:07:34.280
<v Speaker 3>Another animation.

NOTE CONF {"raw":[100,100]}

00:07:34.910 --> 00:07:36.110
<v Speaker 3>Uh, okay.

NOTE CONF {"raw":[100,100]}

00:07:36.110 --> 00:07:38.060
<v Speaker 3>So these are the sort of things some previous students

NOTE CONF {"raw":[100,100,100,100,82,100,100,100,100,100]}

00:07:38.060 --> 00:07:40.220
<v Speaker 3>have have, uh, submitted.

NOTE CONF {"raw":[100,100,93,100]}

00:07:43.040 --> 00:07:46.100
<v Speaker 3>You can click on this yourself and, and, uh, and

NOTE CONF {"raw":[100,100,100,100,100,100,67,100,71,100]}

00:07:46.100 --> 00:07:47.990
<v Speaker 3>look at these, uh, with more time.

NOTE CONF {"raw":[100,100,100,76,100,100,100]}

00:07:47.990 --> 00:07:51.750
<v Speaker 3>I think the code is provided as well for these,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:51.750 --> 00:07:54.030
<v Speaker 3>um, for these if you go into that website.

NOTE CONF {"raw":[70,100,100,100,100,100,98,100,100]}

00:07:55.770 --> 00:07:56.430
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:07:56.430 --> 00:07:59.160
<v Speaker 3>So that's the that's the programming competition.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:07:59.400 --> 00:07:59.790
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:07:59.790 --> 00:08:04.890
<v Speaker 3>But um, we should talk about data representation and data

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:04.890 --> 00:08:06.180
<v Speaker 3>abstraction now.

NOTE CONF {"raw":[100,100]}

00:08:07.620 --> 00:08:09.960
<v Speaker 3>Uh, okay.

NOTE CONF {"raw":[100,100]}

00:08:10.050 --> 00:08:11.640
<v Speaker 3>Any questions about that?

NOTE CONF {"raw":[100,100,100,100]}

00:08:13.140 --> 00:08:17.670
<v Speaker 3>The judging, uh, will be on the basis of, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:17.670 --> 00:08:25.170
<v Speaker 3>aesthetic appeal and, um, uh, how interesting the idea is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:25.170 --> 00:08:26.070
<v Speaker 3>behind it.

NOTE CONF {"raw":[100,100]}

00:08:26.340 --> 00:08:29.670
<v Speaker 3>And, um, maybe the level of ambition.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:08:31.560 --> 00:08:35.490
<v Speaker 3>Okay, that is high ambition is better than low ambition.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:36.270 --> 00:08:39.419
<v Speaker 3>Um, within the context of what you're able to do

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:39.419 --> 00:08:43.110
<v Speaker 3>in a couple of weeks in this course.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:08:43.110 --> 00:08:43.680
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:08:45.720 --> 00:08:46.920
<v Speaker 3>No questions.

NOTE CONF {"raw":[100,100]}

00:08:48.090 --> 00:08:48.750
<v Speaker 3>No.

NOTE CONF {"raw":[97]}

00:08:49.020 --> 00:08:49.350
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:08:49.350 --> 00:08:50.160
<v Speaker 3>I'll carry on.

NOTE CONF {"raw":[100,100,100]}

00:08:50.160 --> 00:08:50.640
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:08:50.640 --> 00:08:53.520
<v Speaker 3>So, um, I'm going to talk about efficiency.

NOTE CONF {"raw":[100,97,100,100,100,100,100,100]}

00:08:55.200 --> 00:08:58.560
<v Speaker 3>Um, so up until now, uh, I've been telling you

NOTE CONF {"raw":[100,100,100,100,100,95,100,100,100,100]}

00:08:58.560 --> 00:09:01.170
<v Speaker 3>not to worry about making your programs run fast.

NOTE CONF {"raw":[100,100,100,100,100,100,98,100,100]}

00:09:01.230 --> 00:09:02.070
<v Speaker 3>Okay?

NOTE CONF {"raw":[97]}

00:09:02.310 --> 00:09:04.620
<v Speaker 3>Uh, worry about whether they're correct or not.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:09:04.770 --> 00:09:06.630
<v Speaker 3>So, you know, get it right.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:09:06.630 --> 00:09:07.590
<v Speaker 3>Keep it simple.

NOTE CONF {"raw":[100,100,100]}

00:09:07.590 --> 00:09:08.760
<v Speaker 3>Make it clear.

NOTE CONF {"raw":[100,100,100]}

00:09:08.880 --> 00:09:10.890
<v Speaker 3>Don't worry about efficiency.

NOTE CONF {"raw":[100,100,100,100]}

00:09:11.370 --> 00:09:12.090
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:09:12.360 --> 00:09:16.680
<v Speaker 3>Um, and this is this is in response to students

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:16.680 --> 00:09:19.590
<v Speaker 3>who come and say, you know, is recursion slower or

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:19.590 --> 00:09:21.960
<v Speaker 3>faster than list comprehension and so forth.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:09:22.230 --> 00:09:23.370
<v Speaker 3>Um, okay.

NOTE CONF {"raw":[100,100]}

00:09:23.610 --> 00:09:29.220
<v Speaker 3>Um, these these things normally don't make that much difference.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:29.220 --> 00:09:29.820
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:09:29.820 --> 00:09:34.830
<v Speaker 3>And Haskell is implemented using lots of clever, uh, optimisations

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:34.830 --> 00:09:35.280
<v Speaker 3>and things.

NOTE CONF {"raw":[100,100]}

00:09:35.280 --> 00:09:38.040
<v Speaker 3>So that often exactly the way you write a program

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:38.040 --> 00:09:39.930
<v Speaker 3>is not going to make any difference to how fast

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:39.930 --> 00:09:40.620
<v Speaker 3>it runs.

NOTE CONF {"raw":[100,100]}

00:09:40.650 --> 00:09:41.340
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:09:41.340 --> 00:09:43.500
<v Speaker 3>So so this is the reason why I've been saying

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:43.500 --> 00:09:45.450
<v Speaker 3>don't worry about efficiency, okay.

NOTE CONF {"raw":[100,100,100,100,100]}

00:09:45.720 --> 00:09:49.120
<v Speaker 3>Um, but sometimes in programming you do need to worry

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:49.120 --> 00:09:53.500
<v Speaker 3>about making things run fast, and that's especially when you're

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:53.500 --> 00:09:56.710
<v Speaker 3>dealing with very large amounts of data, you know?

NOTE CONF {"raw":[100,100,100,100,58,100,100,100,100]}

00:09:56.710 --> 00:10:00.550
<v Speaker 3>So, uh, for example, Google, um, you know, the way

NOTE CONF {"raw":[100,97,100,100,100,100,100,100,100,100]}

00:10:00.550 --> 00:10:03.220
<v Speaker 3>that it gets searched to run, the way that it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:03.220 --> 00:10:06.610
<v Speaker 3>runs is that it does, um, it indexes the entire

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:06.610 --> 00:10:07.360
<v Speaker 3>internet.

NOTE CONF {"raw":[100]}

00:10:07.990 --> 00:10:11.320
<v Speaker 3>Um, you know, well, it used to be overnight.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:10:11.320 --> 00:10:13.270
<v Speaker 3>Now I don't know how long it takes, but anyway,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:13.270 --> 00:10:16.150
<v Speaker 3>it goes through the enormous amounts of data out there

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:16.150 --> 00:10:18.820
<v Speaker 3>in the internet and looks at all of it and,

NOTE CONF {"raw":[94,100,100,100,100,100,100,100,100,100]}

00:10:18.820 --> 00:10:24.220
<v Speaker 3>and compiles an index using, uh, you know, warehouses full

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:24.220 --> 00:10:26.770
<v Speaker 3>of computers to do this concurrently and so forth.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:10:26.980 --> 00:10:31.780
<v Speaker 3>Um, of course, when you're dealing with gazillion, uh, gigabytes

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:31.780 --> 00:10:36.550
<v Speaker 3>of data, um, you have to use good algorithms, okay?

NOTE CONF {"raw":[100,100,90,100,100,100,100,100,100,100]}

00:10:36.550 --> 00:10:39.730
<v Speaker 3>And not and not just, uh, the first thing you

NOTE CONF {"raw":[100,100,100,100,100,90,100,100,100,100]}

00:10:39.730 --> 00:10:40.210
<v Speaker 3>thought of.

NOTE CONF {"raw":[100,100]}

00:10:40.210 --> 00:10:40.660
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:10:40.660 --> 00:10:43.660
<v Speaker 3>So when you're processing lots of data, then of course

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:43.660 --> 00:10:45.100
<v Speaker 3>efficiency is important.

NOTE CONF {"raw":[100,100,100]}

00:10:45.520 --> 00:10:45.850
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:10:45.850 --> 00:10:47.740
<v Speaker 3>So that's what I want to talk about now is,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:47.740 --> 00:10:52.420
<v Speaker 3>is, um, some of these concerns and this is a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:52.420 --> 00:10:55.030
<v Speaker 3>topic called a complexity theory.

NOTE CONF {"raw":[100,100,91,100,100]}

00:10:55.030 --> 00:10:59.470
<v Speaker 3>And there's, uh, you know, some, some material about this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:59.470 --> 00:11:00.460
<v Speaker 3>in the second year.

NOTE CONF {"raw":[100,100,100,100]}

00:11:01.180 --> 00:11:03.220
<v Speaker 3>Um, once you get there.

NOTE CONF {"raw":[100,100,100,100,100]}

00:11:03.220 --> 00:11:03.550
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:11:03.550 --> 00:11:05.470
<v Speaker 3>So this is just a little taste of that.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:11:05.470 --> 00:11:09.970
<v Speaker 3>So, um, this is Donald Knuth, who is, uh, one

NOTE CONF {"raw":[100,61,100,100,100,100,100,100,94,100]}

00:11:09.970 --> 00:11:11.650
<v Speaker 3>of the Turing Award winners.

NOTE CONF {"raw":[100,100,100,100,100]}

00:11:12.130 --> 00:11:16.480
<v Speaker 3>Um, and he said premature optimisation is the root of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:16.480 --> 00:11:17.200
<v Speaker 3>all evil.

NOTE CONF {"raw":[100,100]}

00:11:18.760 --> 00:11:20.470
<v Speaker 3>And this is true.

NOTE CONF {"raw":[100,100,100,100]}

00:11:21.550 --> 00:11:23.200
<v Speaker 3>And I'm going to prove it to you.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:11:26.200 --> 00:11:26.980
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:11:28.030 --> 00:11:29.530
<v Speaker 3>I'm going to write down my proof.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:11:30.790 --> 00:11:31.180
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:11:31.180 --> 00:11:31.600
<v Speaker 3>Ready?

NOTE CONF {"raw":[100]}

00:11:32.410 --> 00:11:32.710
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:11:32.710 --> 00:11:35.530
<v Speaker 3>So we all know that money is the root of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:35.530 --> 00:11:36.910
<v Speaker 3>all evil, right?

NOTE CONF {"raw":[100,100,100]}

00:11:38.590 --> 00:11:39.040
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:11:39.040 --> 00:11:45.520
<v Speaker 3>Actually, uh, that's not the, the correct, um, quotation.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:11:45.520 --> 00:11:50.020
<v Speaker 3>The correct one is the love of money.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:11:54.070 --> 00:11:58.000
<v Speaker 3>Is the root of all evil.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:11:58.450 --> 00:12:02.110
<v Speaker 3>And that's from, um, that's actually in the Bible.

NOTE CONF {"raw":[100,100,100,77,100,100,100,100,100]}

00:12:02.590 --> 00:12:04.420
<v Speaker 3>First book of Timothy.

NOTE CONF {"raw":[100,100,100,100]}

00:12:04.990 --> 00:12:07.990
<v Speaker 3>Uh, there, if you want to look it up.

NOTE CONF {"raw":[100,99,100,100,100,100,100,100,100]}

00:12:07.990 --> 00:12:08.470
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:12:08.470 --> 00:12:10.420
<v Speaker 3>So you can read that, right.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:12:12.160 --> 00:12:12.820
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:12:17.530 --> 00:12:18.040
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:12:18.040 --> 00:12:20.440
<v Speaker 3>But we also know, uh, time is money.

NOTE CONF {"raw":[100,100,100,100,58,100,100,100]}

00:12:23.740 --> 00:12:24.340
<v Speaker 3>Right.

NOTE CONF {"raw":[97]}

00:12:25.270 --> 00:12:26.860
<v Speaker 3>Everybody knows that time is money.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:12:26.860 --> 00:12:28.780
<v Speaker 3>So actually, the love of time.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:12:31.090 --> 00:12:34.660
<v Speaker 3>You know, therefore, the love of time.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:12:36.880 --> 00:12:38.470
<v Speaker 3>Is the root of all evil.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:12:43.270 --> 00:12:44.530
<v Speaker 3>And, um.

NOTE CONF {"raw":[100,100]}

00:12:47.420 --> 00:12:49.010
<v Speaker 3>What's the love of time?

NOTE CONF {"raw":[100,100,100,100,100]}

00:12:49.580 --> 00:12:50.990
<v Speaker 3>Well that's optimisation.

NOTE CONF {"raw":[100,100,88]}

00:12:53.840 --> 00:12:54.110
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:12:54.110 --> 00:12:55.400
<v Speaker 3>Making things fast.

NOTE CONF {"raw":[100,100,100]}

00:12:57.050 --> 00:12:58.820
<v Speaker 3>Okay, so optimisation.

NOTE CONF {"raw":[100,100,100]}

00:12:59.390 --> 00:13:00.950
<v Speaker 3>Optimisation is the root of all evil.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:13:00.950 --> 00:13:04.940
<v Speaker 3>So that's not sequin calculus, but it's an informal, informal

NOTE CONF {"raw":[100,100,100,46,100,100,100,100,100,60]}

00:13:04.940 --> 00:13:07.130
<v Speaker 3>proof that optimisation is the root of all evil.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:13:07.130 --> 00:13:11.060
<v Speaker 3>And um, uh, Donald Knuth says premature optimisation.

NOTE CONF {"raw":[100,100,67,100,100,100,100,100]}

00:13:11.060 --> 00:13:15.740
<v Speaker 3>So that's optimising before uh, you know, as uh, too

NOTE CONF {"raw":[100,100,100,100,100,100,100,93,98,100]}

00:13:15.740 --> 00:13:16.130
<v Speaker 3>early.

NOTE CONF {"raw":[100]}

00:13:16.130 --> 00:13:16.670
<v Speaker 3>All right.

NOTE CONF {"raw":[98,98]}

00:13:16.670 --> 00:13:21.020
<v Speaker 3>So, um, that's my, uh, proof of this fact, and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:21.020 --> 00:13:22.130
<v Speaker 3>nobody laughed.

NOTE CONF {"raw":[100,100]}

00:13:22.220 --> 00:13:23.540
<v Speaker 3>So my joke didn't work.

NOTE CONF {"raw":[100,100,100,100,100]}

00:13:23.540 --> 00:13:24.560
<v Speaker 3>But never mind.

NOTE CONF {"raw":[100,100,100]}

00:13:24.950 --> 00:13:27.560
<v Speaker 3>Um, that's that's better.

NOTE CONF {"raw":[100,100,100,100]}

00:13:27.560 --> 00:13:28.130
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:13:32.840 --> 00:13:37.760
<v Speaker 3>Anyway, um, here's another here's another authority.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:13:37.760 --> 00:13:39.380
<v Speaker 3>This is, uh, Tony Hawk.

NOTE CONF {"raw":[100,100,100,100,100]}

00:13:39.770 --> 00:13:44.450
<v Speaker 3>Sir Tony hawk, um, uh, agreeing with Donald Knuth, And

NOTE CONF {"raw":[54,83,83,100,100,100,100,100,100,100]}

00:13:44.660 --> 00:13:46.220
<v Speaker 3>he's another Turing Award winner.

NOTE CONF {"raw":[100,100,100,100,100]}

00:13:46.670 --> 00:13:47.270
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:13:47.270 --> 00:13:50.780
<v Speaker 3>We're going to look at the difference between good programs

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:50.780 --> 00:13:56.480
<v Speaker 3>and bad programs, not the difference between, um, uh, programs,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:56.630 --> 00:14:01.040
<v Speaker 3>uh, you know, okay programs and slightly better programs going

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:01.040 --> 00:14:03.770
<v Speaker 3>to be talking about dramatic differences between programs.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:14:03.770 --> 00:14:07.430
<v Speaker 3>So it's not about whether, you know, uh, repeating in

NOTE CONF {"raw":[100,100,100,100,100,100,100,98,100,79]}

00:14:07.430 --> 00:14:11.300
<v Speaker 3>addition, somewhere in a computation, rather than storing the value

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:11.300 --> 00:14:14.360
<v Speaker 3>of the addition and then reusing it is, is is,

NOTE CONF {"raw":[100,100,98,100,100,100,100,100,100,100]}

00:14:14.360 --> 00:14:16.610
<v Speaker 3>uh, you know, whether that makes things faster.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:14:16.610 --> 00:14:20.180
<v Speaker 3>But about the difference between different algorithms, okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:14:20.180 --> 00:14:23.450
<v Speaker 3>And sometimes the difference can be huge, but it depends

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:23.450 --> 00:14:25.640
<v Speaker 3>on the amount of data you're dealing with.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:14:25.640 --> 00:14:27.920
<v Speaker 3>And let me show you a little example.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:14:28.430 --> 00:14:31.670
<v Speaker 3>And this is a this is a, a contrived, uh,

NOTE CONF {"raw":[100,100,100,95,100,100,67,100,100,82]}

00:14:31.670 --> 00:14:34.940
<v Speaker 3>simple example just to, just to make a point.

NOTE CONF {"raw":[100,100,100,76,100,100,100,100,100]}

00:14:37.790 --> 00:14:38.300
<v Speaker 3>Um.

NOTE CONF {"raw":[100]}

00:14:40.790 --> 00:14:41.180
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:14:41.180 --> 00:14:44.480
<v Speaker 3>Suppose that we've got a list of lists.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:14:44.960 --> 00:14:45.290
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:14:45.290 --> 00:14:45.650
<v Speaker 3>These are.

NOTE CONF {"raw":[100,100]}

00:14:45.680 --> 00:14:48.320
<v Speaker 3>These are, um, Em lists.

NOTE CONF {"raw":[100,100,100,61,100]}

00:14:48.440 --> 00:14:48.860
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:14:48.860 --> 00:14:52.310
<v Speaker 3>There's, uh, x is one through, x is m, and

NOTE CONF {"raw":[100,93,100,100,100,100,100,100,100,88]}

00:14:52.310 --> 00:14:56.510
<v Speaker 3>each of these lists is of length n okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:14:56.510 --> 00:14:59.900
<v Speaker 3>And we want to, um, concatenate them all together.

NOTE CONF {"raw":[100,100,100,100,61,100,100,100,100]}

00:15:01.250 --> 00:15:01.730
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:15:02.510 --> 00:15:03.650
<v Speaker 3>Join the men to end.

NOTE CONF {"raw":[100,48,48,100,100]}

00:15:03.800 --> 00:15:04.220
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:15:04.220 --> 00:15:05.810
<v Speaker 3>There's two ways that we can do this.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:15:05.900 --> 00:15:08.000
<v Speaker 3>There's more than two ways, but here are two ways.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:08.000 --> 00:15:08.540
<v Speaker 3>There's.

NOTE CONF {"raw":[100]}

00:15:08.810 --> 00:15:11.870
<v Speaker 3>I can do it with a fold L okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:15:11.870 --> 00:15:17.360
<v Speaker 3>This little program here, you know, fold l using using

NOTE CONF {"raw":[100,100,99,100,100,100,100,100,100,100]}

00:15:17.360 --> 00:15:20.840
<v Speaker 3>append, starting with the empty list and taking this, this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:20.840 --> 00:15:22.040
<v Speaker 3>list of lists.

NOTE CONF {"raw":[100,100,100]}

00:15:22.040 --> 00:15:24.410
<v Speaker 3>And I get this computation.

NOTE CONF {"raw":[100,100,100,100,100]}

00:15:26.570 --> 00:15:27.350
<v Speaker 3>Okay.

NOTE CONF {"raw":[83]}

00:15:27.590 --> 00:15:31.700
<v Speaker 3>Um, this is, this is what that that program effectively

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:31.700 --> 00:15:32.090
<v Speaker 3>does.

NOTE CONF {"raw":[100]}

00:15:32.090 --> 00:15:32.720
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:15:32.930 --> 00:15:36.350
<v Speaker 3>Um, now let's look and see what it's doing here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:36.350 --> 00:15:39.470
<v Speaker 3>So, um, I want to count the number of steps

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:39.470 --> 00:15:40.520
<v Speaker 3>that it's taking.

NOTE CONF {"raw":[100,100,100]}

00:15:41.640 --> 00:15:42.030
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:15:42.030 --> 00:15:46.950
<v Speaker 3>Now, um, it's doing a lot of appends and the

NOTE CONF {"raw":[100,99,100,100,100,100,100,100,100,100]}

00:15:46.950 --> 00:15:48.240
<v Speaker 3>code for append.

NOTE CONF {"raw":[100,100,100]}

00:15:48.720 --> 00:15:52.950
<v Speaker 3>Um, if you recall, uh, you probably don't.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:15:52.950 --> 00:15:55.830
<v Speaker 3>But anyway, it does recursion on the left hand argument.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:57.060 --> 00:15:57.540
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:15:57.540 --> 00:16:01.590
<v Speaker 3>So effectively the size of the left hand argument in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:01.590 --> 00:16:03.150
<v Speaker 3>this case it's the empty list.

NOTE CONF {"raw":[100,100,96,100,100,100]}

00:16:03.450 --> 00:16:06.210
<v Speaker 3>The size of this argument is how many steps it's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:06.210 --> 00:16:07.950
<v Speaker 3>going to take to do the append.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:16:07.950 --> 00:16:11.220
<v Speaker 3>So if it's got, you know, an empty list then

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:11.400 --> 00:16:12.750
<v Speaker 3>it gives the answer immediately.

NOTE CONF {"raw":[100,100,100,100,100]}

00:16:12.750 --> 00:16:16.560
<v Speaker 3>It's zero steps, essentially zero steps with some overhead for

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:16.560 --> 00:16:17.820
<v Speaker 3>recursion and so forth.

NOTE CONF {"raw":[100,100,100,100]}

00:16:17.820 --> 00:16:18.420
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:16:18.420 --> 00:16:21.000
<v Speaker 3>If it's a if it's a list with 100 items,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,72,100]}

00:16:21.000 --> 00:16:24.060
<v Speaker 3>it does essentially 100 steps.

NOTE CONF {"raw":[100,100,100,93,100]}

00:16:24.660 --> 00:16:25.470
<v Speaker 3>Okay.

NOTE CONF {"raw":[83]}

00:16:25.740 --> 00:16:27.540
<v Speaker 3>Um, I'm not counting exactly.

NOTE CONF {"raw":[100,100,100,100,100]}

00:16:27.540 --> 00:16:30.930
<v Speaker 3>I'm sort of talking about the ballpark amount of steps

NOTE CONF {"raw":[100,100,100,100,100,47,100,100,100,100]}

00:16:30.930 --> 00:16:31.470
<v Speaker 3>that's taking.

NOTE CONF {"raw":[64,100]}

00:16:31.470 --> 00:16:31.680
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:16:31.680 --> 00:16:34.770
<v Speaker 3>So it's it's the number of steps that the first

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:34.770 --> 00:16:36.030
<v Speaker 3>argument is long.

NOTE CONF {"raw":[100,100,100]}

00:16:36.120 --> 00:16:36.450
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:16:36.450 --> 00:16:39.600
<v Speaker 3>So if we look at this computation, the first the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:39.600 --> 00:16:42.900
<v Speaker 3>first bit Here are.

NOTE CONF {"raw":[100,100,100,100]}

00:16:43.080 --> 00:16:45.930
<v Speaker 3>The first bit is taking zero steps.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:16:45.930 --> 00:16:48.000
<v Speaker 3>Let's say okay.

NOTE CONF {"raw":[97,100,100]}

00:16:48.000 --> 00:16:49.770
<v Speaker 3>And the result of that is a list of length

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:49.770 --> 00:16:50.190
<v Speaker 3>n.

NOTE CONF {"raw":[100]}

00:16:50.190 --> 00:16:53.160
<v Speaker 3>Because each of these lists of length n okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:16:53.160 --> 00:16:56.310
<v Speaker 3>The next the next depend okay.

NOTE CONF {"raw":[100,100,100,100,52,100]}

00:16:56.310 --> 00:17:00.450
<v Speaker 3>The left hand argument has length n, so that takes

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:00.450 --> 00:17:01.500
<v Speaker 3>n steps.

NOTE CONF {"raw":[100,100]}

00:17:02.520 --> 00:17:06.390
<v Speaker 3>The next append the first argument is of length two.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:06.390 --> 00:17:10.890
<v Speaker 3>And so this takes two n steps and so forth

NOTE CONF {"raw":[62,100,100,100,100,100,100,100,100,100]}

00:17:10.890 --> 00:17:12.360
<v Speaker 3>and so forth and so forth.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:17:12.360 --> 00:17:16.800
<v Speaker 3>And we get this number of steps okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:17:16.800 --> 00:17:21.060
<v Speaker 3>It's, it's it's um that's an expression.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:17:21.060 --> 00:17:27.720
<v Speaker 3>And that expression uh, adds up to um, it's um

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:27.720 --> 00:17:31.110
<v Speaker 3>m minus one times m over two times n.

NOTE CONF {"raw":[92,100,100,100,100,100,100,100,100]}

00:17:31.770 --> 00:17:32.280
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:17:32.280 --> 00:17:34.260
<v Speaker 3>I'm going to use a notation that I'm going to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:34.260 --> 00:17:38.010
<v Speaker 3>define in a minute, uh, called O notation.

NOTE CONF {"raw":[100,100,100,100,100,100,89,100]}

00:17:38.490 --> 00:17:40.380
<v Speaker 3>Um, for writing this down.

NOTE CONF {"raw":[100,100,100,100,100]}

00:17:40.380 --> 00:17:44.130
<v Speaker 3>And, uh, the important thing is that it's proportional.

NOTE CONF {"raw":[98,65,100,100,100,100,100,93,100]}

00:17:44.250 --> 00:17:47.640
<v Speaker 3>You can read this, that it's of order or proportional

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:47.640 --> 00:17:49.860
<v Speaker 3>to m squared times n.

NOTE CONF {"raw":[100,100,100,100,100]}

00:17:53.100 --> 00:17:53.760
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:17:54.210 --> 00:17:56.220
<v Speaker 3>So that's, that's the result of doing it that way.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:56.220 --> 00:17:58.020
<v Speaker 3>If I do it, if I do it instead of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:58.020 --> 00:18:02.400
<v Speaker 3>fold l here, if I place that with a fold

NOTE CONF {"raw":[100,100,100,98,96,96,100,100,100,100]}

00:18:02.400 --> 00:18:06.750
<v Speaker 3>r, and I'm not telling you this because I want

NOTE CONF {"raw":[92,100,100,100,100,100,100,100,100,100]}

00:18:06.750 --> 00:18:08.670
<v Speaker 3>you to use fold R instead of fold L is

NOTE CONF {"raw":[100,100,100,100,91,100,100,100,100,58]}

00:18:08.670 --> 00:18:12.450
<v Speaker 3>just this particular computation comparing two ways of doing it.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:12.450 --> 00:18:14.070
<v Speaker 3>If I do it with a fold r, I get

NOTE CONF {"raw":[100,100,100,100,100,100,100,97,100,100]}

00:18:14.070 --> 00:18:17.040
<v Speaker 3>the same answer and the computation looks like.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:18:17.040 --> 00:18:18.480
<v Speaker 3>Now looks like this.

NOTE CONF {"raw":[100,100,100,100]}

00:18:18.480 --> 00:18:21.150
<v Speaker 3>Because the difference between fold l and fold r is

NOTE CONF {"raw":[100,100,100,100,100,100,96,100,100,100]}

00:18:21.150 --> 00:18:23.550
<v Speaker 3>kind of bracketing to the left versus bracketing to the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:23.550 --> 00:18:24.120
<v Speaker 3>right.

NOTE CONF {"raw":[100]}

00:18:25.080 --> 00:18:25.590
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:18:25.590 --> 00:18:29.640
<v Speaker 3>And and looking looking at this computation, I'm doing you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:29.640 --> 00:18:33.000
<v Speaker 3>know the left hand argument here has n uh is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,95]}

00:18:33.000 --> 00:18:33.750
<v Speaker 3>of length n.

NOTE CONF {"raw":[100,100,100]}

00:18:33.750 --> 00:18:35.400
<v Speaker 3>So this takes n steps.

NOTE CONF {"raw":[100,100,100,100,100]}

00:18:36.150 --> 00:18:40.360
<v Speaker 3>And then this append takes n steps and this append

NOTE CONF {"raw":[100,100,100,91,100,100,100,100,100,100]}

00:18:40.360 --> 00:18:42.430
<v Speaker 3>takes n steps and so forth.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:18:43.090 --> 00:18:46.330
<v Speaker 3>Okay, so I end up doing um n times m

NOTE CONF {"raw":[100,100,100,100,100,100,74,100,100,96]}

00:18:46.330 --> 00:18:47.050
<v Speaker 3>steps.

NOTE CONF {"raw":[100]}

00:18:48.940 --> 00:18:49.720
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:18:51.820 --> 00:18:54.640
<v Speaker 3>The result the number of steps is proportional to m

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,98]}

00:18:54.640 --> 00:18:56.620
<v Speaker 3>times n okay.

NOTE CONF {"raw":[100,100,100]}

00:18:56.620 --> 00:18:59.290
<v Speaker 3>And comparing these to these two things there.

NOTE CONF {"raw":[93,100,100,76,100,100,100,90]}

00:19:00.790 --> 00:19:01.600
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:19:01.690 --> 00:19:04.120
<v Speaker 3>Uh, this is, this is m times.

NOTE CONF {"raw":[88,100,100,100,100,100,100]}

00:19:04.510 --> 00:19:07.180
<v Speaker 3>This takes m times longer than this okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:19:07.180 --> 00:19:09.520
<v Speaker 3>If there are if m is a thousand, then it's

NOTE CONF {"raw":[100,100,81,100,100,100,97,97,100,100]}

00:19:09.520 --> 00:19:10.690
<v Speaker 3>a thousand times.

NOTE CONF {"raw":[98,98,100]}

00:19:10.960 --> 00:19:13.120
<v Speaker 3>Uh, it takes a thousand times as long.

NOTE CONF {"raw":[100,97,100,100,100,100,100,100]}

00:19:13.150 --> 00:19:13.900
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:19:13.900 --> 00:19:15.880
<v Speaker 3>And this is the kind of thing I'm talking about

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:15.880 --> 00:19:17.830
<v Speaker 3>with, uh, with efficiency.

NOTE CONF {"raw":[100,98,100,100]}

00:19:17.830 --> 00:19:21.070
<v Speaker 3>Is that, um, a choice of sometimes the order in

NOTE CONF {"raw":[100,100,88,100,100,100,100,100,100,100]}

00:19:21.070 --> 00:19:24.490
<v Speaker 3>which you do things or, um, you know, when it's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:24.490 --> 00:19:27.940
<v Speaker 3>when it's in a recursive program or something, it can

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:27.940 --> 00:19:29.110
<v Speaker 3>make a big difference.

NOTE CONF {"raw":[100,100,100,100]}

00:19:29.110 --> 00:19:33.730
<v Speaker 3>And, and, um, another point here is that the efficiency

NOTE CONF {"raw":[100,100,95,100,100,100,100,100,100,100]}

00:19:33.730 --> 00:19:36.370
<v Speaker 3>or the time that something takes is, of course, dependent

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,94]}

00:19:36.370 --> 00:19:38.200
<v Speaker 3>on the amount of data that you've got.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:19:38.200 --> 00:19:41.020
<v Speaker 3>It makes no sense to talk about how fast a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,93]}

00:19:41.020 --> 00:19:44.830
<v Speaker 3>program is without saying what what size the data is.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:45.070 --> 00:19:48.970
<v Speaker 3>Okay, so we were talking about the the time a

NOTE CONF {"raw":[100,100,100,73,100,100,100,100,100,97]}

00:19:48.970 --> 00:19:52.600
<v Speaker 3>computation takes as a function of how much data we're

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:52.600 --> 00:19:53.770
<v Speaker 3>using as the input.

NOTE CONF {"raw":[100,94,100,100]}

00:19:54.610 --> 00:19:57.340
<v Speaker 3>And so what we're interested in is, is how the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:57.340 --> 00:20:00.670
<v Speaker 3>time grows as a function of the amount of data

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:00.670 --> 00:20:03.340
<v Speaker 3>that we're giving it to to compute with.

NOTE CONF {"raw":[100,92,100,100,100,100,100,100]}

00:20:03.880 --> 00:20:04.480
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:20:04.480 --> 00:20:07.690
<v Speaker 3>So let me show you some pictures.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:20:09.010 --> 00:20:12.550
<v Speaker 3>And this is comparing growth rates of functions okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:20:12.550 --> 00:20:16.180
<v Speaker 3>So the two functions I had here were m squared

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:16.210 --> 00:20:18.520
<v Speaker 3>times n and m times n.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:20:18.520 --> 00:20:20.770
<v Speaker 3>I'll start with slightly simpler examples.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:20:20.890 --> 00:20:25.270
<v Speaker 3>So here here are two curves.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:20:26.500 --> 00:20:27.970
<v Speaker 3>There's a linear one.

NOTE CONF {"raw":[100,100,100,100]}

00:20:27.970 --> 00:20:30.970
<v Speaker 3>So this is this is this is uh okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,91,100]}

00:20:31.030 --> 00:20:34.930
<v Speaker 3>Uh t t is the is the is the y

NOTE CONF {"raw":[77,100,100,100,100,100,100,100,100,100]}

00:20:34.930 --> 00:20:38.840
<v Speaker 3>axis and and n is the the x axis.

NOTE CONF {"raw":[100,100,52,92,100,100,100,100,100]}

00:20:40.040 --> 00:20:40.520
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:20:40.520 --> 00:20:42.830
<v Speaker 3>So here is t equals n.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:20:42.830 --> 00:20:47.780
<v Speaker 3>It's a it's a straight line with uh with slope

NOTE CONF {"raw":[100,58,100,100,100,100,100,84,100,100]}

00:20:47.780 --> 00:20:48.440
<v Speaker 3>one.

NOTE CONF {"raw":[100]}

00:20:49.040 --> 00:20:51.410
<v Speaker 3>And here is t equals n squared.

NOTE CONF {"raw":[100,100,100,100,100,100,84]}

00:20:52.070 --> 00:20:52.580
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:20:52.580 --> 00:20:56.510
<v Speaker 3>Ignore the um well actually the scale here is correct.

NOTE CONF {"raw":[100,100,99,100,100,100,100,100,100,100]}

00:20:56.510 --> 00:20:56.660
<v Speaker 3>Yeah.

NOTE CONF {"raw":[100]}

00:20:56.660 --> 00:20:58.130
<v Speaker 3>The intersection is at one.

NOTE CONF {"raw":[100,100,100,100,100]}

00:20:58.700 --> 00:20:59.060
<v Speaker 3>Um.

NOTE CONF {"raw":[100]}

00:21:02.720 --> 00:21:05.540
<v Speaker 3>Intersection is at x equals one or.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:21:05.540 --> 00:21:05.930
<v Speaker 3>Sorry.

NOTE CONF {"raw":[100]}

00:21:06.110 --> 00:21:07.340
<v Speaker 3>Um n equals one.

NOTE CONF {"raw":[72,100,100,100]}

00:21:07.940 --> 00:21:08.270
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:21:08.270 --> 00:21:11.630
<v Speaker 3>But you see um, the of course the, the linear

NOTE CONF {"raw":[100,100,100,100,100,100,100,81,100,100]}

00:21:11.720 --> 00:21:14.840
<v Speaker 3>uh, the linear one is a straight line like this.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:14.840 --> 00:21:19.820
<v Speaker 3>And the and the, the quadratic one, the parabola is,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:19.820 --> 00:21:24.080
<v Speaker 3>is, uh, growing much faster once you get past this

NOTE CONF {"raw":[100,58,100,100,100,100,100,100,100,100]}

00:21:24.080 --> 00:21:25.100
<v Speaker 3>intersection.

NOTE CONF {"raw":[100]}

00:21:27.110 --> 00:21:28.760
<v Speaker 3>It grows much faster.

NOTE CONF {"raw":[100,100,100,100]}

00:21:29.240 --> 00:21:29.600
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:21:29.600 --> 00:21:32.180
<v Speaker 3>So if you look at something like, um, n equals

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:32.180 --> 00:21:35.960
<v Speaker 3>a thousand, then then you know you'll be way, way,

NOTE CONF {"raw":[94,94,100,100,100,100,100,100,100,100]}

00:21:35.990 --> 00:21:37.640
<v Speaker 3>way up into the ceiling here.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:21:37.640 --> 00:21:40.700
<v Speaker 3>And this one will still be over there somewhere.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:21:40.700 --> 00:21:41.360
<v Speaker 3>Okay.

NOTE CONF {"raw":[82]}

00:21:41.630 --> 00:21:42.020
<v Speaker 3>Um.

NOTE CONF {"raw":[90]}

00:21:45.320 --> 00:21:45.920
<v Speaker 3>Sorry.

NOTE CONF {"raw":[100]}

00:21:45.920 --> 00:21:48.710
<v Speaker 3>That there that that direction.

NOTE CONF {"raw":[87,96,100,98,100]}

00:21:49.910 --> 00:21:51.710
<v Speaker 3>Um, I'm looking at everything.

NOTE CONF {"raw":[100,100,100,100,100]}

00:21:52.100 --> 00:21:54.230
<v Speaker 3>Uh, mirror image of what you're looking at.

NOTE CONF {"raw":[72,100,100,100,100,100,100,100]}

00:21:54.440 --> 00:21:55.190
<v Speaker 3>Okay.

NOTE CONF {"raw":[76]}

00:21:55.760 --> 00:21:59.870
<v Speaker 3>Um, so the point here is that is that, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:59.870 --> 00:22:05.360
<v Speaker 3>if n is is is large, then this function is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:05.360 --> 00:22:09.890
<v Speaker 3>enormously, uh, gives enormously larger values than this function.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:22:09.890 --> 00:22:10.220
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:22:10.220 --> 00:22:11.690
<v Speaker 3>It exceeds that function.

NOTE CONF {"raw":[100,100,100,100]}

00:22:15.140 --> 00:22:15.740
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:22:15.740 --> 00:22:18.230
<v Speaker 3>So this is, this is this is why I would

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:18.230 --> 00:22:21.470
<v Speaker 3>say that a linear function is faster than a quadratic

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:21.470 --> 00:22:21.830
<v Speaker 3>function.

NOTE CONF {"raw":[100]}

00:22:21.830 --> 00:22:25.700
<v Speaker 3>This is the these two specific functions, this specific linear

NOTE CONF {"raw":[100,100,52,100,100,100,100,100,100,100]}

00:22:25.700 --> 00:22:28.220
<v Speaker 3>function and this specific quadratic function.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:22:28.220 --> 00:22:29.510
<v Speaker 3>What if I talk.

NOTE CONF {"raw":[100,100,100,100]}

00:22:29.510 --> 00:22:32.630
<v Speaker 3>What if I look at a fast a fast quadratic

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:32.630 --> 00:22:34.430
<v Speaker 3>function and a slow linear function.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:22:34.430 --> 00:22:38.480
<v Speaker 3>Let's say it's it's half the speed the um or

NOTE CONF {"raw":[100,100,86,88,100,100,100,100,80,100]}

00:22:38.480 --> 00:22:40.280
<v Speaker 3>sorry, it takes half the time.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:22:40.280 --> 00:22:43.700
<v Speaker 3>The fast quadratic function and the linear function takes double

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:43.700 --> 00:22:44.360
<v Speaker 3>the time.

NOTE CONF {"raw":[100,100]}

00:22:44.660 --> 00:22:45.050
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:22:45.050 --> 00:22:47.990
<v Speaker 3>So that means we've got instead of t equals n

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:47.990 --> 00:22:49.580
<v Speaker 3>we've got t equals two n.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:22:49.580 --> 00:22:52.160
<v Speaker 3>And instead of t equals n squared we've got t

NOTE CONF {"raw":[100,100,100,100,100,100,90,100,100,100]}

00:22:52.160 --> 00:22:54.800
<v Speaker 3>equals you know n squared over two or or t

NOTE CONF {"raw":[100,100,100,100,100,100,100,66,100,100]}

00:22:54.800 --> 00:22:56.810
<v Speaker 3>equals one half n squared.

NOTE CONF {"raw":[100,100,100,100,100]}

00:22:56.810 --> 00:22:57.080
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:22:57.080 --> 00:22:59.300
<v Speaker 3>Then the picture looks like this.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:22:59.690 --> 00:23:03.110
<v Speaker 3>So the the the linear function has.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:23:03.110 --> 00:23:06.020
<v Speaker 3>Now uh you know it's gone from a, a slope

NOTE CONF {"raw":[100,98,100,100,100,100,100,100,81,100]}

00:23:06.020 --> 00:23:07.880
<v Speaker 3>like that to a slope like that.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:23:07.880 --> 00:23:11.420
<v Speaker 3>And uh, the uh the quadratic function is a little

NOTE CONF {"raw":[100,89,100,58,100,100,100,100,100,100]}

00:23:11.420 --> 00:23:12.500
<v Speaker 3>bit flatter.

NOTE CONF {"raw":[100,100]}

00:23:12.830 --> 00:23:13.430
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:23:13.430 --> 00:23:17.840
<v Speaker 3>But still once you get to um t n equals

NOTE CONF {"raw":[100,100,100,100,100,100,72,83,100,100]}

00:23:17.840 --> 00:23:21.080
<v Speaker 3>four, which is this intersection, it's still the case that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:21.080 --> 00:23:24.500
<v Speaker 3>the quadratic function is going to always exceed.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:23:24.620 --> 00:23:26.840
<v Speaker 3>The value is always going to exceed the value of

NOTE CONF {"raw":[100,93,93,100,100,100,100,100,100,100]}

00:23:26.840 --> 00:23:29.030
<v Speaker 3>the linear function okay.

NOTE CONF {"raw":[100,100,100,100]}

00:23:29.030 --> 00:23:33.510
<v Speaker 3>So it's better for n greater than for And who

NOTE CONF {"raw":[100,100,100,100,100,100,100,61,100,100]}

00:23:33.510 --> 00:23:37.890
<v Speaker 3>cares about who cares about the the value for and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:37.890 --> 00:23:38.490
<v Speaker 3>less than for?

NOTE CONF {"raw":[100,100,100]}

00:23:38.490 --> 00:23:41.850
<v Speaker 3>I mean, we're talking about about size of problems here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:41.880 --> 00:23:42.270
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:23:42.270 --> 00:23:45.840
<v Speaker 3>If you're computing something and, um, and you've got an

NOTE CONF {"raw":[100,85,100,100,100,75,100,100,100,100]}

00:23:45.840 --> 00:23:49.950
<v Speaker 3>algorithm which is faster but only for inputs of length

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:49.950 --> 00:23:52.290
<v Speaker 3>less than four, who cares?

NOTE CONF {"raw":[100,100,58,100,100]}

00:23:52.290 --> 00:23:52.830
<v Speaker 3>Right.

NOTE CONF {"raw":[100]}

00:23:52.830 --> 00:23:56.640
<v Speaker 3>You're interested in inputs of length 1000 or 1 million,

NOTE CONF {"raw":[100,100,100,100,100,100,98,98,98,98]}

00:23:56.820 --> 00:23:57.690
<v Speaker 3>right?

NOTE CONF {"raw":[100]}

00:23:57.690 --> 00:24:00.090
<v Speaker 3>I don't care about length, for it's fast.

NOTE CONF {"raw":[100,100,100,100,100,72,92,100]}

00:24:00.090 --> 00:24:01.320
<v Speaker 3>Both of them are fast.

NOTE CONF {"raw":[100,100,100,100,100]}

00:24:01.530 --> 00:24:02.280
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:24:02.580 --> 00:24:06.780
<v Speaker 3>Um, okay, so this is about, um, uh, a slow

NOTE CONF {"raw":[100,100,100,100,100,100,100,72,100,100]}

00:24:06.780 --> 00:24:10.020
<v Speaker 3>linear function versus a faster quadratic function.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:24:10.020 --> 00:24:12.270
<v Speaker 3>What if instead of twice as fast, I'm talking about

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:12.270 --> 00:24:14.820
<v Speaker 3>100 times as fast, okay.

NOTE CONF {"raw":[73,100,100,100,100]}

00:24:14.820 --> 00:24:16.500
<v Speaker 3>Or a thousand times as fast?

NOTE CONF {"raw":[100,99,99,100,87,100]}

00:24:17.340 --> 00:24:19.530
<v Speaker 3>Okay, we've got the same picture.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:24:21.960 --> 00:24:27.210
<v Speaker 3>It's just that the intersection point moves in that direction.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:27.210 --> 00:24:27.810
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:24:27.810 --> 00:24:30.930
<v Speaker 3>So, uh, to the to the right.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:24:30.930 --> 00:24:31.590
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:24:31.800 --> 00:24:36.300
<v Speaker 3>Um, and so, uh, the, the, the quadratic function will

NOTE CONF {"raw":[98,100,100,100,100,100,100,100,100,100]}

00:24:36.300 --> 00:24:39.600
<v Speaker 3>be faster for, you know, inputs of length, you know,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:39.600 --> 00:24:41.010
<v Speaker 3>up to a thousand or something like that.

NOTE CONF {"raw":[100,100,93,93,100,100,100,100]}

00:24:41.010 --> 00:24:43.950
<v Speaker 3>But then beyond that, uh, the linear one will still

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:43.950 --> 00:24:44.610
<v Speaker 3>win.

NOTE CONF {"raw":[100]}

00:24:44.610 --> 00:24:48.450
<v Speaker 3>So what I'm trying to argue here is that the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,98,100]}

00:24:48.450 --> 00:24:52.830
<v Speaker 3>shape of the function that matters and not, for example,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:52.830 --> 00:24:55.740
<v Speaker 3>whether it's one n or two n or three n

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:55.740 --> 00:24:58.440
<v Speaker 3>or 17 n or whatever.

NOTE CONF {"raw":[100,100,92,100,100]}

00:24:58.440 --> 00:25:01.260
<v Speaker 3>It's not it's not the it's not the constant factor

NOTE CONF {"raw":[100,100,100,100,60,100,100,100,100,100]}

00:25:01.260 --> 00:25:02.760
<v Speaker 3>here and here.

NOTE CONF {"raw":[100,100,100]}

00:25:02.760 --> 00:25:08.730
<v Speaker 3>It's the fact that it's n versus n squared, okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:08.730 --> 00:25:11.370
<v Speaker 3>It's the shape of these, of these, uh, of these

NOTE CONF {"raw":[100,100,100,100,100,100,100,52,100,100]}

00:25:11.370 --> 00:25:13.230
<v Speaker 3>um, curves here that matter.

NOTE CONF {"raw":[96,100,100,100,100]}

00:25:16.740 --> 00:25:21.270
<v Speaker 3>And we've got a notation that I mentioned already, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,92]}

00:25:21.270 --> 00:25:23.370
<v Speaker 3>called uh, big O notation.

NOTE CONF {"raw":[100,88,100,100,100]}

00:25:23.370 --> 00:25:25.320
<v Speaker 3>And this is a definition of it.

NOTE CONF {"raw":[100,100,100,62,100,100,100]}

00:25:25.320 --> 00:25:27.990
<v Speaker 3>So this is not a, this is like the first

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:27.990 --> 00:25:30.750
<v Speaker 3>time I'm showing you not a Haskell program, but a

NOTE CONF {"raw":[100,100,100,100,100,100,100,97,100,100]}

00:25:30.750 --> 00:25:32.340
<v Speaker 3>mathematical definition.

NOTE CONF {"raw":[100,100]}

00:25:32.490 --> 00:25:34.980
<v Speaker 3>And this is a way of um.

NOTE CONF {"raw":[100,100,100,100,100,100,98]}

00:25:35.670 --> 00:25:41.100
<v Speaker 3>This is a notation for describing growth rates of functions.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,86]}

00:25:42.420 --> 00:25:43.200
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:25:43.200 --> 00:25:45.480
<v Speaker 3>And I'm not going to go into this in a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:45.480 --> 00:25:49.740
<v Speaker 3>lot of detail, but the idea is that, um, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:49.860 --> 00:25:54.990
<v Speaker 3>a function, uh, we say f is Big-O of G

NOTE CONF {"raw":[100,100,97,100,100,100,100,99,100,100]}

00:25:55.530 --> 00:25:58.500
<v Speaker 3>when g is an upper bound for f for big

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:58.500 --> 00:25:59.610
<v Speaker 3>enough inputs.

NOTE CONF {"raw":[100,100]}

00:26:01.620 --> 00:26:01.950
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:26:01.950 --> 00:26:09.480
<v Speaker 3>That means that g is larger than f, provided you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:09.480 --> 00:26:12.870
<v Speaker 3>look at at big inputs and not at small inputs.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:12.870 --> 00:26:18.030
<v Speaker 3>And there's a precise definition of that here, which, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,98]}

00:26:18.030 --> 00:26:22.890
<v Speaker 3>you know, for big enough inputs is um, is captured

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:22.890 --> 00:26:24.720
<v Speaker 3>by this bit here.

NOTE CONF {"raw":[100,100,100,100]}

00:26:25.200 --> 00:26:27.810
<v Speaker 3>Um, you know, you're only looking at, at inputs which

NOTE CONF {"raw":[100,100,100,100,100,100,58,100,100,100]}

00:26:27.810 --> 00:26:30.460
<v Speaker 3>are greater than some, some some value.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:26:30.790 --> 00:26:37.420
<v Speaker 3>Um, and uh, and you ignore constant multiplicative factors, which

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:37.420 --> 00:26:38.920
<v Speaker 3>is what this is doing here.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:26:39.490 --> 00:26:42.010
<v Speaker 3>Um, and, and, and I want to give you an

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,91]}

00:26:42.010 --> 00:26:44.350
<v Speaker 3>intuition for this rather than have you look at the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:44.350 --> 00:26:45.730
<v Speaker 3>definition okay.

NOTE CONF {"raw":[100,100]}

00:26:45.730 --> 00:26:52.300
<v Speaker 3>The intuition is that, um, all linear functions are of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:52.300 --> 00:26:53.710
<v Speaker 3>order n.

NOTE CONF {"raw":[100,100]}

00:26:55.990 --> 00:26:56.590
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:26:56.590 --> 00:27:01.000
<v Speaker 3>And uh, here's the reason, uh, which is related to

NOTE CONF {"raw":[100,75,100,100,100,100,100,100,100,100]}

00:27:01.000 --> 00:27:02.020
<v Speaker 3>this definition here.

NOTE CONF {"raw":[100,100,100]}

00:27:02.020 --> 00:27:02.650
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:27:02.650 --> 00:27:07.480
<v Speaker 3>But um, for now, the thing to remember is linear

NOTE CONF {"raw":[100,98,100,100,100,100,100,100,100,100]}

00:27:07.480 --> 00:27:11.290
<v Speaker 3>functions are of order n no matter what the constant

NOTE CONF {"raw":[100,75,100,100,100,100,100,100,100,100]}

00:27:11.290 --> 00:27:12.280
<v Speaker 3>factors are.

NOTE CONF {"raw":[100,100]}

00:27:12.280 --> 00:27:12.640
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:27:12.640 --> 00:27:15.070
<v Speaker 3>There's a two there and there's a ten here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:27:16.480 --> 00:27:18.040
<v Speaker 3>Doesn't matter the same.

NOTE CONF {"raw":[100,100,100,100]}

00:27:18.040 --> 00:27:22.540
<v Speaker 3>The also 15 n plus 32 would be of order

NOTE CONF {"raw":[97,100,100,100,100,100,100,100,100,100]}

00:27:22.540 --> 00:27:24.070
<v Speaker 3>n okay.

NOTE CONF {"raw":[100,100]}

00:27:24.070 --> 00:27:25.660
<v Speaker 3>Main thing is it's linear.

NOTE CONF {"raw":[100,100,100,98,100]}

00:27:27.130 --> 00:27:27.880
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:27:28.060 --> 00:27:33.160
<v Speaker 3>Um, you know, uh, constant factors don't matter.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:27:33.160 --> 00:27:38.560
<v Speaker 3>So any, any, uh, quadratic function is of order n

NOTE CONF {"raw":[100,100,100,64,100,100,100,100,100,100]}

00:27:38.560 --> 00:27:42.550
<v Speaker 3>squared, no matter what the, um, the coefficients are.

NOTE CONF {"raw":[100,100,100,100,100,91,100,100,100]}

00:27:44.530 --> 00:27:45.220
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:27:46.060 --> 00:27:50.890
<v Speaker 3>Uh, any cubic function is of order n cubed.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:27:51.790 --> 00:27:52.150
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:27:52.150 --> 00:27:56.140
<v Speaker 3>So it's this notation is a way of talking about

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:56.140 --> 00:27:59.860
<v Speaker 3>the shape of the function without looking at the details

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:59.860 --> 00:28:01.810
<v Speaker 3>about, you know, exactly.

NOTE CONF {"raw":[100,100,100,100]}

00:28:01.810 --> 00:28:04.630
<v Speaker 3>You know, is it, is it three n cubed plus

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:04.630 --> 00:28:09.280
<v Speaker 3>two n squared plus whatever or, or you know it's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:09.280 --> 00:28:12.520
<v Speaker 3>just the point that it's n cubed is important here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:12.520 --> 00:28:17.260
<v Speaker 3>And this also applies to things like logarithmic um logarithmic

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:17.260 --> 00:28:18.070
<v Speaker 3>functions.

NOTE CONF {"raw":[100]}

00:28:20.260 --> 00:28:22.480
<v Speaker 3>And here for example, it doesn't matter what the base

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:22.480 --> 00:28:23.800
<v Speaker 3>of the logarithm is.

NOTE CONF {"raw":[100,100,100,100]}

00:28:23.800 --> 00:28:28.420
<v Speaker 3>It uh It's, uh, it doesn't matter for this, um,

NOTE CONF {"raw":[100,100,100,54,100,100,100,100,100,93]}

00:28:28.420 --> 00:28:29.650
<v Speaker 3>for this notation.

NOTE CONF {"raw":[100,100,100]}

00:28:29.680 --> 00:28:33.130
<v Speaker 3>Okay, so this is this is a way of describing,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:33.130 --> 00:28:39.490
<v Speaker 3>um, shapes of functions without without looking to carefully at

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:39.490 --> 00:28:41.050
<v Speaker 3>the details of the functions.

NOTE CONF {"raw":[100,100,100,100,100]}

00:28:41.050 --> 00:28:41.410
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:28:41.410 --> 00:28:45.310
<v Speaker 3>Just whether they're quadratic, cubic, linear or whatever.

NOTE CONF {"raw":[100,100,94,100,100,100,74,100]}

00:28:45.310 --> 00:28:47.980
<v Speaker 3>This is great for lazy people, okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:28:47.980 --> 00:28:50.920
<v Speaker 3>Because it means you don't need you know, these are

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:50.950 --> 00:28:53.440
<v Speaker 3>these are going to be used to describe the runtime

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:53.440 --> 00:28:54.460
<v Speaker 3>of programs.

NOTE CONF {"raw":[100,100]}

00:28:54.460 --> 00:28:57.310
<v Speaker 3>It means you don't have to look too carefully at

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:57.310 --> 00:29:01.660
<v Speaker 3>the details of the program and exactly how long it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:01.660 --> 00:29:05.530
<v Speaker 3>takes to do each step, and exactly how many steps

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:05.530 --> 00:29:06.700
<v Speaker 3>are being done.

NOTE CONF {"raw":[100,100,100]}

00:29:07.240 --> 00:29:10.810
<v Speaker 3>Um, in, you know, in the process of, of doing

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:10.810 --> 00:29:16.240
<v Speaker 3>an append or whatever, what matters is the, um, the,

NOTE CONF {"raw":[91,100,100,100,100,100,100,100,100,100]}

00:29:16.540 --> 00:29:20.740
<v Speaker 3>um, the form of the recursion, for example.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:29:21.670 --> 00:29:26.840
<v Speaker 3>Okay, you can usually read off, uh, these these, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:26.840 --> 00:29:29.420
<v Speaker 3>you know, whether the whether the algorithm is linear or

NOTE CONF {"raw":[100,100,100,100,93,66,100,100,100,100]}

00:29:29.420 --> 00:29:32.150
<v Speaker 3>quadratic or whatever, you can usually read it off by

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:32.150 --> 00:29:36.380
<v Speaker 3>just eyeballing the program and saying, well, uh, it's linear

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:36.380 --> 00:29:40.370
<v Speaker 3>because, for example, it doesn't do any recursion or in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:40.370 --> 00:29:41.810
<v Speaker 3>fact, uh, yeah.

NOTE CONF {"raw":[100,100,100]}

00:29:41.810 --> 00:29:43.370
<v Speaker 3>In fact, it's probably constant time.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:29:43.370 --> 00:29:45.650
<v Speaker 3>If it doesn't do any recursion, it's linear because it

NOTE CONF {"raw":[83,100,100,100,100,100,100,100,100,100]}

00:29:45.650 --> 00:29:46.100
<v Speaker 3>does.

NOTE CONF {"raw":[100]}

00:29:46.100 --> 00:29:47.630
<v Speaker 3>It does this kind of recursion.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:29:47.630 --> 00:29:51.680
<v Speaker 3>It's quadratic because it has um, uh, nested recursion or

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:51.680 --> 00:29:52.460
<v Speaker 3>something like that.

NOTE CONF {"raw":[100,100,100]}

00:29:52.460 --> 00:29:52.730
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:29:52.730 --> 00:29:55.070
<v Speaker 3>So um, so this is the sort of thing that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:55.070 --> 00:29:58.730
<v Speaker 3>I'm going to be interested in is whether programs are

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:58.730 --> 00:30:01.040
<v Speaker 3>linear, quadratic, cubic, whatever.

NOTE CONF {"raw":[100,100,100,100]}

00:30:01.040 --> 00:30:02.510
<v Speaker 3>Here's some more pictures.

NOTE CONF {"raw":[100,100,100,100]}

00:30:06.350 --> 00:30:06.770
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:30:06.770 --> 00:30:14.120
<v Speaker 3>Here's uh, here's linear quadratic cubic and n and uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,95,100,84]}

00:30:14.120 --> 00:30:15.860
<v Speaker 3>to the fourth power.

NOTE CONF {"raw":[100,100,100,100]}

00:30:16.520 --> 00:30:19.250
<v Speaker 3>Um, okay.

NOTE CONF {"raw":[100,100]}

00:30:19.370 --> 00:30:20.720
<v Speaker 3>Um, linear.

NOTE CONF {"raw":[100,100]}

00:30:20.720 --> 00:30:23.090
<v Speaker 3>If you manage to write a program that has linear

NOTE CONF {"raw":[100,100,87,100,100,100,100,100,100,100]}

00:30:23.090 --> 00:30:25.070
<v Speaker 3>runtime, That's great.

NOTE CONF {"raw":[100,100,100]}

00:30:25.970 --> 00:30:32.810
<v Speaker 3>Um, if it's got quadratic runtime that some, that's usually

NOTE CONF {"raw":[100,100,100,100,100,100,100,94,100,100]}

00:30:32.810 --> 00:30:33.740
<v Speaker 3>okay.

NOTE CONF {"raw":[100]}

00:30:34.460 --> 00:30:38.360
<v Speaker 3>Uh uh, cubic or into the fourth is usually too

NOTE CONF {"raw":[88,100,100,100,100,100,100,100,100,97]}

00:30:38.360 --> 00:30:39.110
<v Speaker 3>slow.

NOTE CONF {"raw":[100]}

00:30:39.140 --> 00:30:39.560
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:30:39.560 --> 00:30:42.560
<v Speaker 3>And it depends on what you're doing, whether quadratic is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:42.560 --> 00:30:43.250
<v Speaker 3>okay.

NOTE CONF {"raw":[100]}

00:30:43.250 --> 00:30:46.010
<v Speaker 3>If you need if you're if you're dealing with really

NOTE CONF {"raw":[100,100,100,100,97,100,100,100,100,100]}

00:30:46.010 --> 00:30:50.780
<v Speaker 3>big data sets like, like Google's um, indexing algorithm, actually

NOTE CONF {"raw":[100,100,100,100,100,96,100,100,100,100]}

00:30:50.780 --> 00:30:52.520
<v Speaker 3>linear is too slow.

NOTE CONF {"raw":[100,100,56,100]}

00:30:53.180 --> 00:30:57.230
<v Speaker 3>Um, you need something that's sublinear and it's very hard

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:57.230 --> 00:30:58.100
<v Speaker 3>to get that.

NOTE CONF {"raw":[100,100,100]}

00:31:01.010 --> 00:31:03.740
<v Speaker 3>Um, here's some more curves.

NOTE CONF {"raw":[100,100,100,100,100]}

00:31:03.740 --> 00:31:04.070
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:31:04.070 --> 00:31:08.240
<v Speaker 3>Here's here's, uh, logarithmic along the bottom.

NOTE CONF {"raw":[100,100,65,100,100,100,100]}

00:31:09.800 --> 00:31:10.430
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:31:10.430 --> 00:31:13.190
<v Speaker 3>So so logarithmic.

NOTE CONF {"raw":[100,100,100]}

00:31:13.520 --> 00:31:13.940
<v Speaker 3>Um.

NOTE CONF {"raw":[100]}

00:31:16.070 --> 00:31:17.930
<v Speaker 3>It's really slow growing.

NOTE CONF {"raw":[100,100,100,100]}

00:31:18.200 --> 00:31:20.870
<v Speaker 3>It means you you double the size of the problem,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:20.870 --> 00:31:23.540
<v Speaker 3>and you only increase the runtime by one.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:31:25.760 --> 00:31:26.510
<v Speaker 3>Sorry.

NOTE CONF {"raw":[100]}

00:31:27.740 --> 00:31:29.600
<v Speaker 3>Uh, yes.

NOTE CONF {"raw":[100,100]}

00:31:29.600 --> 00:31:30.950
<v Speaker 3>You only increase the time by one.

NOTE CONF {"raw":[77,100,100,100,100,100,100]}

00:31:30.950 --> 00:31:32.630
<v Speaker 3>Okay, so you double, you double the size of the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:32.630 --> 00:31:32.960
<v Speaker 3>program.

NOTE CONF {"raw":[100]}

00:31:32.960 --> 00:31:34.040
<v Speaker 3>You increase this time by one.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:31:34.040 --> 00:31:36.020
<v Speaker 3>So this is very, very slow growing.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:31:36.020 --> 00:31:41.210
<v Speaker 3>Whereas, um, this this is um exponential two to the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:41.210 --> 00:31:41.660
<v Speaker 3>n.

NOTE CONF {"raw":[100]}

00:31:42.530 --> 00:31:45.440
<v Speaker 3>This means increasing the size of the program of the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:45.440 --> 00:31:48.260
<v Speaker 3>problem by one doubles the time it takes to do

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:48.260 --> 00:31:49.310
<v Speaker 3>the computation.

NOTE CONF {"raw":[100,100]}

00:31:51.590 --> 00:31:55.640
<v Speaker 3>So this is incredibly fast growing okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:31:55.640 --> 00:31:57.950
<v Speaker 3>And in between we've got things like um.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:32:00.920 --> 00:32:01.850
<v Speaker 3>Well linear.

NOTE CONF {"raw":[100,100]}

00:32:01.850 --> 00:32:04.340
<v Speaker 3>And this is n log n n log n turns

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:04.340 --> 00:32:06.920
<v Speaker 3>out to be the time of sorting algorithms.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:32:06.920 --> 00:32:08.420
<v Speaker 3>Good sorting algorithms.

NOTE CONF {"raw":[100,100,100]}

00:32:10.550 --> 00:32:11.210
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:32:11.210 --> 00:32:12.380
<v Speaker 3>So there are these different.

NOTE CONF {"raw":[100,100,100,100,100]}

00:32:12.380 --> 00:32:16.430
<v Speaker 3>There's the different, um, kind of uh, growth rates that

NOTE CONF {"raw":[100,92,100,100,100,100,100,100,100,100]}

00:32:16.430 --> 00:32:18.380
<v Speaker 3>we're going to be coming across.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:32:20.930 --> 00:32:23.580
<v Speaker 3>And so I'm going to be talking about some algorithms

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:23.580 --> 00:32:26.250
<v Speaker 3>and I'm going to be talking about their growth, their

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,96]}

00:32:26.280 --> 00:32:29.610
<v Speaker 3>their time complexity, their growth rate in these terms.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:32:29.700 --> 00:32:32.220
<v Speaker 3>And by the way, you can also talk about space

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:32.220 --> 00:32:33.330
<v Speaker 3>instead of time.

NOTE CONF {"raw":[100,100,100]}

00:32:33.330 --> 00:32:35.760
<v Speaker 3>So the space that that a computation takes up.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:32:35.760 --> 00:32:37.680
<v Speaker 3>But I'm not going to be going into that.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:32:39.420 --> 00:32:39.720
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:32:39.720 --> 00:32:40.740
<v Speaker 3>Are there any questions so far.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:32:40.740 --> 00:32:44.790
<v Speaker 3>This is just sort of general, uh, getting us into

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:44.790 --> 00:32:49.770
<v Speaker 3>the right place where I can talk about efficiency in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:49.770 --> 00:32:53.700
<v Speaker 3>terms that make sense for the examples I'm going to

NOTE CONF {"raw":[100,100,52,100,100,100,100,100,100,100]}

00:32:53.700 --> 00:32:54.360
<v Speaker 3>be showing you.

NOTE CONF {"raw":[100,100,100]}

00:32:54.360 --> 00:32:54.900
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:32:55.500 --> 00:32:58.200
<v Speaker 3>Does that making some sort of some sort of sense.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:58.200 --> 00:32:58.440
<v Speaker 3>Yeah.

NOTE CONF {"raw":[100]}

00:32:58.440 --> 00:32:58.740
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:32:58.740 --> 00:33:00.570
<v Speaker 3>I see some thumbs up in the audience.

NOTE CONF {"raw":[100,100,100,100,100,89,100,100]}

00:33:00.570 --> 00:33:01.380
<v Speaker 3>That's good.

NOTE CONF {"raw":[100,100]}

00:33:01.380 --> 00:33:01.980
<v Speaker 3>Right.

NOTE CONF {"raw":[100]}

00:33:01.980 --> 00:33:04.950
<v Speaker 3>So let me, uh, let me carry on then to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:04.950 --> 00:33:08.790
<v Speaker 3>the next thing that I want to talk about, I'm

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:08.790 --> 00:33:14.430
<v Speaker 3>going to show you, um, uh, a simple example of,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:14.430 --> 00:33:17.490
<v Speaker 3>uh, of implementing sets of integers.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:33:18.840 --> 00:33:20.820
<v Speaker 3>Uh, and I'm going to be showing you how to

NOTE CONF {"raw":[80,100,100,100,100,100,100,100,100,100]}

00:33:20.820 --> 00:33:22.620
<v Speaker 3>do this in four different ways.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:33:28.380 --> 00:33:31.380
<v Speaker 3>Um, so I'm going to be talking about sets with

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:31.380 --> 00:33:34.740
<v Speaker 3>a few operations, always the same operations for each of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:34.740 --> 00:33:38.280
<v Speaker 3>the ways that I'm going to represent sets and the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:38.280 --> 00:33:43.290
<v Speaker 3>operations are, uh, checking membership checking equality.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:33:43.950 --> 00:33:47.520
<v Speaker 3>Um, those are the main ones, actually, uh, you know,

NOTE CONF {"raw":[100,100,100,100,100,100,100,65,100,100]}

00:33:47.520 --> 00:33:52.260
<v Speaker 3>building building sets, uh, from elements and then checking equality

NOTE CONF {"raw":[100,100,100,89,100,100,100,100,100,100]}

00:33:52.260 --> 00:33:55.740
<v Speaker 3>and, and, uh, and membership.

NOTE CONF {"raw":[100,100,93,100,100]}

00:33:56.250 --> 00:33:56.790
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:33:56.790 --> 00:33:58.890
<v Speaker 3>So I'll do this in four different ways.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:33:58.890 --> 00:34:01.650
<v Speaker 3>And then I'm going to compare the efficiency of these

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:01.650 --> 00:34:05.610
<v Speaker 3>four representations in the terms that I've just described.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:34:05.610 --> 00:34:06.270
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:34:06.270 --> 00:34:08.520
<v Speaker 3>So I'm going to start with the simplest.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:34:08.520 --> 00:34:11.129
<v Speaker 3>And now we're into Haskell programs for doing this.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:34:11.129 --> 00:34:11.820
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:34:12.540 --> 00:34:15.450
<v Speaker 3>Um I'll start with the simplest representation that there is,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:15.450 --> 00:34:19.470
<v Speaker 3>which is to represent a set as a list.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:34:20.250 --> 00:34:23.460
<v Speaker 3>And by the way, the code, the code for this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:23.460 --> 00:34:24.510
<v Speaker 3>is all you know.

NOTE CONF {"raw":[100,100,100,100]}

00:34:24.510 --> 00:34:25.320
<v Speaker 3>You can download it.

NOTE CONF {"raw":[98,100,100,100]}

00:34:25.320 --> 00:34:29.550
<v Speaker 3>It's it's it's together with the lecture, uh, slides on

NOTE CONF {"raw":[91,99,100,100,100,100,100,87,100,100]}

00:34:29.550 --> 00:34:32.190
<v Speaker 3>the course's, um, learn page.

NOTE CONF {"raw":[100,93,100,89,100]}

00:34:34.200 --> 00:34:34.860
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:34:36.030 --> 00:34:38.669
<v Speaker 3>Um, and I'll just mention a little bit what's at

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:38.669 --> 00:34:39.720
<v Speaker 3>the beginning here.

NOTE CONF {"raw":[100,100,100]}

00:34:39.720 --> 00:34:44.280
<v Speaker 3>So, uh, I haven't talked about this yet.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:34:45.179 --> 00:34:50.190
<v Speaker 3>So you can structure Haskell programs into modules.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:34:50.879 --> 00:34:56.490
<v Speaker 3>So modules are like, um, components of programs, and you

NOTE CONF {"raw":[100,100,100,100,95,100,100,100,100,100]}

00:34:56.490 --> 00:35:01.140
<v Speaker 3>can build when you start building big programs, you, you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:01.140 --> 00:35:04.200
<v Speaker 3>build them out of self-contained modules, which you then combine.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:04.740 --> 00:35:05.460
<v Speaker 3>All right.

NOTE CONF {"raw":[87,87]}

00:35:05.460 --> 00:35:08.340
<v Speaker 3>And in fact, um, you know, for example, all of

NOTE CONF {"raw":[100,100,100,94,100,100,100,100,100,100]}

00:35:08.340 --> 00:35:11.820
<v Speaker 3>the library, all the stuff in the library is structured

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:11.820 --> 00:35:12.870
<v Speaker 3>into modules.

NOTE CONF {"raw":[100,100]}

00:35:12.870 --> 00:35:16.110
<v Speaker 3>You've got, for example, the data dot list module, which

NOTE CONF {"raw":[100,100,100,100,100,100,86,92,100,100]}

00:35:16.110 --> 00:35:18.610
<v Speaker 3>contains a whole lot of functions to do things with

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:18.610 --> 00:35:19.300
<v Speaker 3>lists.

NOTE CONF {"raw":[100]}

00:35:19.300 --> 00:35:22.870
<v Speaker 3>And, uh, this is the, uh, the quick check module.

NOTE CONF {"raw":[100,88,100,100,100,47,100,86,86,100]}

00:35:24.190 --> 00:35:24.550
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:35:24.550 --> 00:35:28.000
<v Speaker 3>So I'm going to be defining, uh, for each of

NOTE CONF {"raw":[100,100,100,100,100,100,99,100,100,100]}

00:35:28.000 --> 00:35:31.480
<v Speaker 3>my, um, choices of representation.

NOTE CONF {"raw":[100,100,100,100,100]}

00:35:31.480 --> 00:35:33.370
<v Speaker 3>I'm going to be defining it as a module.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:35:33.370 --> 00:35:35.710
<v Speaker 3>And the way you define a module is you give

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:35.710 --> 00:35:36.430
<v Speaker 3>it a name.

NOTE CONF {"raw":[100,100,100]}

00:35:36.430 --> 00:35:38.140
<v Speaker 3>So this is the module list.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:35:39.160 --> 00:35:42.580
<v Speaker 3>And and you say what it is that the module

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:42.850 --> 00:35:45.190
<v Speaker 3>um, exports.

NOTE CONF {"raw":[100,100]}

00:35:45.520 --> 00:35:50.620
<v Speaker 3>That is what it makes available to uh, to other

NOTE CONF {"raw":[100,100,100,100,100,100,100,97,100,100]}

00:35:50.620 --> 00:35:51.820
<v Speaker 3>modules that import it.

NOTE CONF {"raw":[100,100,100,100]}

00:35:53.440 --> 00:35:53.770
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:35:53.770 --> 00:35:56.170
<v Speaker 3>And in each of my modules I'm going to be

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:56.170 --> 00:35:58.330
<v Speaker 3>exporting the same things, okay.

NOTE CONF {"raw":[100,100,100,100,100]}

00:35:58.330 --> 00:36:02.320
<v Speaker 3>The same six things the, the the representation of sets.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:02.860 --> 00:36:06.610
<v Speaker 3>So that's a type called set with a capital S.

NOTE CONF {"raw":[100,100,100,100,100,100,100,72,100,100]}

00:36:06.610 --> 00:36:11.500
<v Speaker 3>And then these six things there's a value empty which

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:11.500 --> 00:36:14.530
<v Speaker 3>is a set a function insert which takes a value

NOTE CONF {"raw":[100,100,100,96,100,100,100,100,100,100]}

00:36:14.530 --> 00:36:17.710
<v Speaker 3>and a set and gives you a set a function

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:17.710 --> 00:36:20.170
<v Speaker 3>set which takes a list and turns it into a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:20.170 --> 00:36:24.820
<v Speaker 3>set, um, a function element which takes an element and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:24.820 --> 00:36:27.010
<v Speaker 3>a set and checks whether that element is in that

NOTE CONF {"raw":[94,100,100,100,100,100,100,100,100,100]}

00:36:27.010 --> 00:36:29.950
<v Speaker 3>set or not, and equal, which takes two sets and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:29.950 --> 00:36:32.500
<v Speaker 3>tells you whether or not they're equal.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:36:32.530 --> 00:36:33.190
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:36:33.430 --> 00:36:38.230
<v Speaker 3>So I'm going to be running through four four modules.

NOTE CONF {"raw":[100,100,100,100,100,100,100,89,100,100]}

00:36:38.230 --> 00:36:40.750
<v Speaker 3>And each one is going to have a different representation

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:40.750 --> 00:36:41.500
<v Speaker 3>of data.

NOTE CONF {"raw":[100,100]}

00:36:42.790 --> 00:36:47.680
<v Speaker 3>And so the first one uh we represent sets.

NOTE CONF {"raw":[100,100,100,100,100,63,100,100,100]}

00:36:48.580 --> 00:36:51.010
<v Speaker 3>And by the way these are going to get these

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,98]}

00:36:51.010 --> 00:36:53.050
<v Speaker 3>going to be of increasing complex.

NOTE CONF {"raw":[100,100,100,100,100,68]}

00:36:53.050 --> 00:36:58.120
<v Speaker 3>Well increasing uh they're going to be more complicated as

NOTE CONF {"raw":[92,100,100,100,100,100,100,100,100,100]}

00:36:58.120 --> 00:37:00.550
<v Speaker 3>I go on, but they're going to be more efficient

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:00.550 --> 00:37:01.240
<v Speaker 3>as I go on.

NOTE CONF {"raw":[100,100,100,100]}

00:37:01.240 --> 00:37:01.750
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:37:01.750 --> 00:37:05.800
<v Speaker 3>So, um, it's often the case that making things efficient

NOTE CONF {"raw":[100,66,100,100,100,100,100,100,100,100]}

00:37:05.800 --> 00:37:10.780
<v Speaker 3>requires making them, uh, uh, making them more complicated, which

NOTE CONF {"raw":[100,100,100,97,100,100,100,100,100,100]}

00:37:10.780 --> 00:37:14.140
<v Speaker 3>is one reason why, uh, premature optimisation is a bad

NOTE CONF {"raw":[100,100,100,100,58,100,98,100,100,100]}

00:37:14.140 --> 00:37:14.500
<v Speaker 3>idea.

NOTE CONF {"raw":[100]}

00:37:14.500 --> 00:37:17.990
<v Speaker 3>Because if you, if you make things complicated, um, they're

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:17.990 --> 00:37:19.430
<v Speaker 3>less likely to be correct.

NOTE CONF {"raw":[100,100,100,100,100]}

00:37:19.430 --> 00:37:21.950
<v Speaker 3>So you should rather get them to be correct and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:21.950 --> 00:37:24.110
<v Speaker 3>then and then worry about whether they're fast or not.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:24.110 --> 00:37:27.470
<v Speaker 3>But, um, anyway, so here's sets implemented as lists.

NOTE CONF {"raw":[100,98,100,100,100,100,100,100,100]}

00:37:27.470 --> 00:37:31.220
<v Speaker 3>So that is to say a set of elements of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:31.220 --> 00:37:33.380
<v Speaker 3>type A, I'm going to represent just as a simple

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:33.380 --> 00:37:36.440
<v Speaker 3>list of, of of values of type A, okay.

NOTE CONF {"raw":[100,96,100,100,100,100,100,100,100]}

00:37:36.440 --> 00:37:39.620
<v Speaker 3>Just, you know, list the elements of the sent.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,92]}

00:37:41.870 --> 00:37:42.290
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:37:42.290 --> 00:37:44.270
<v Speaker 3>And then and then these functions are easy.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:37:44.270 --> 00:37:44.660
<v Speaker 3>Right.

NOTE CONF {"raw":[100]}

00:37:44.660 --> 00:37:47.030
<v Speaker 3>The empty set is the empty list.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:37:49.190 --> 00:37:52.160
<v Speaker 3>Inserting a value into a set is just a matter

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:52.160 --> 00:37:53.060
<v Speaker 3>of using cons.

NOTE CONF {"raw":[100,100,89]}

00:37:53.060 --> 00:37:55.760
<v Speaker 3>So we just put it on the front of the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:55.760 --> 00:37:56.390
<v Speaker 3>list.

NOTE CONF {"raw":[100]}

00:37:56.390 --> 00:38:00.110
<v Speaker 3>So we have a an element and a set represented

NOTE CONF {"raw":[100,100,100,55,100,100,100,100,100,100]}

00:38:00.110 --> 00:38:00.920
<v Speaker 3>as a list.

NOTE CONF {"raw":[100,100,100]}

00:38:02.480 --> 00:38:05.660
<v Speaker 3>And we, we just uh, put the new element onto

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:05.660 --> 00:38:07.820
<v Speaker 3>the front of that list using cons.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:38:08.840 --> 00:38:12.560
<v Speaker 3>Um, this value, this, this function set, the ID is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,74,100]}

00:38:12.560 --> 00:38:14.990
<v Speaker 3>it takes a list and turns it into a set.

NOTE CONF {"raw":[100,100,71,100,100,100,100,100,100,100]}

00:38:15.860 --> 00:38:19.160
<v Speaker 3>And in this case, if the set is a list.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:19.580 --> 00:38:21.920
<v Speaker 3>If that's the representation, I don't have to do anything.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:21.920 --> 00:38:24.500
<v Speaker 3>So this this function doesn't do anything at all.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:38:26.150 --> 00:38:26.870
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:38:28.760 --> 00:38:33.530
<v Speaker 3>And then the two more interesting functions here are are

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,95]}

00:38:33.530 --> 00:38:36.620
<v Speaker 3>membership and equality.

NOTE CONF {"raw":[100,100,100]}

00:38:40.970 --> 00:38:41.720
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:38:41.900 --> 00:38:42.770
<v Speaker 3>Well membership.

NOTE CONF {"raw":[100,100]}

00:38:42.770 --> 00:38:44.780
<v Speaker 3>It's not it's not that interesting because we've got a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:44.780 --> 00:38:48.410
<v Speaker 3>built in function which checks to see whether a value

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:48.410 --> 00:38:51.020
<v Speaker 3>is a, is a is a member of a of

NOTE CONF {"raw":[100,100,100,93,100,100,100,100,100,100]}

00:38:51.020 --> 00:38:51.380
<v Speaker 3>a list.

NOTE CONF {"raw":[100,100]}

00:38:51.380 --> 00:38:52.400
<v Speaker 3>And it's called elem.

NOTE CONF {"raw":[100,100,100,34]}

00:38:53.930 --> 00:38:56.600
<v Speaker 3>And so we're just going to implement element.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:38:56.600 --> 00:39:00.890
<v Speaker 3>That's my function which takes some a value and a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:00.890 --> 00:39:05.060
<v Speaker 3>set representatives a list and gives me a boolean whether

NOTE CONF {"raw":[100,94,86,100,100,100,100,100,100,100]}

00:39:05.060 --> 00:39:08.120
<v Speaker 3>that element is in the list or not in the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:08.120 --> 00:39:09.020
<v Speaker 3>set or not.

NOTE CONF {"raw":[100,100,100]}

00:39:09.050 --> 00:39:09.500
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:39:09.500 --> 00:39:13.370
<v Speaker 3>So um, you know, x element x X is.

NOTE CONF {"raw":[100,100,100,100,100,100,100,91,91]}

00:39:13.370 --> 00:39:16.250
<v Speaker 3>I'm using infix here with back quotes.

NOTE CONF {"raw":[100,100,100,100,100,96,100]}

00:39:16.490 --> 00:39:19.730
<v Speaker 3>That's the same as x lm x.

NOTE CONF {"raw":[100,100,100,100,98,87,85]}

00:39:19.730 --> 00:39:22.160
<v Speaker 3>This is a function that's defined in Haskell for working

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:22.160 --> 00:39:24.500
<v Speaker 3>on um on lists.

NOTE CONF {"raw":[100,98,100,100]}

00:39:28.550 --> 00:39:33.620
<v Speaker 3>Okay, let's stop for a second and think about, uh,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,81]}

00:39:33.620 --> 00:39:36.080
<v Speaker 3>the time it takes to do these, these things.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:39:37.730 --> 00:39:38.570
<v Speaker 3>Okay.

NOTE CONF {"raw":[80]}

00:39:38.780 --> 00:39:40.910
<v Speaker 3>Um, and specifically here.

NOTE CONF {"raw":[100,100,100,100]}

00:39:41.270 --> 00:39:42.680
<v Speaker 3>What's happening here?

NOTE CONF {"raw":[100,100,100]}

00:39:44.030 --> 00:39:44.540
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:39:44.540 --> 00:39:46.850
<v Speaker 3>Well, you can look up the code for, for lm

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,49]}

00:39:46.850 --> 00:39:50.000
<v Speaker 3>in, uh, in the Haskell library and what it does,

NOTE CONF {"raw":[100,67,100,100,100,100,100,100,100,100]}

00:39:50.000 --> 00:39:51.530
<v Speaker 3>I mean, you've got a list here.

NOTE CONF {"raw":[100,100,100,100,55,100,100]}

00:39:51.860 --> 00:39:53.030
<v Speaker 3>Okay, here's my list.

NOTE CONF {"raw":[100,100,100,100]}

00:39:53.030 --> 00:39:55.190
<v Speaker 3>And you're looking to see if an elements in the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:55.190 --> 00:39:56.870
<v Speaker 3>list or not of values in the list.

NOTE CONF {"raw":[100,98,100,54,100,93,100,100]}

00:39:56.870 --> 00:39:57.110
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:39:57.110 --> 00:39:57.770
<v Speaker 3>What does it do?

NOTE CONF {"raw":[100,100,100,100]}

00:39:57.800 --> 00:39:59.030
<v Speaker 3>It does the obvious thing.

NOTE CONF {"raw":[100,100,100,100,100]}

00:39:59.030 --> 00:40:00.590
<v Speaker 3>It starts at the beginning.

NOTE CONF {"raw":[100,100,100,100,100]}

00:40:00.590 --> 00:40:03.560
<v Speaker 3>Compares the value to see if it's if it's at

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:03.560 --> 00:40:04.250
<v Speaker 3>the front.

NOTE CONF {"raw":[100,100]}

00:40:05.030 --> 00:40:07.190
<v Speaker 3>If it's not at the front, then it looks at

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:07.190 --> 00:40:08.180
<v Speaker 3>the next value.

NOTE CONF {"raw":[100,100,100]}

00:40:08.510 --> 00:40:10.100
<v Speaker 3>And if it's not there, then it looks at the

NOTE CONF {"raw":[100,99,100,100,100,100,100,100,100,100]}

00:40:10.100 --> 00:40:11.900
<v Speaker 3>next value and so forth.

NOTE CONF {"raw":[100,100,100,100,100]}

00:40:11.940 --> 00:40:14.430
<v Speaker 3>Going down the list until it gets to the end.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:15.120 --> 00:40:18.030
<v Speaker 3>And if it's not any of those elements, then the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:18.030 --> 00:40:19.050
<v Speaker 3>answer is false.

NOTE CONF {"raw":[100,100,100]}

00:40:19.050 --> 00:40:20.070
<v Speaker 3>It's not there.

NOTE CONF {"raw":[100,100,100]}

00:40:20.220 --> 00:40:20.910
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:40:20.910 --> 00:40:23.340
<v Speaker 3>Otherwise it stops when it finds the element.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:40:24.270 --> 00:40:24.960
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:40:26.940 --> 00:40:29.520
<v Speaker 3>So it's going through the list from the beginning, checking

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:29.790 --> 00:40:32.370
<v Speaker 3>each element in turn until it finds the one that's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,87]}

00:40:32.370 --> 00:40:33.720
<v Speaker 3>looking for it runs out.

NOTE CONF {"raw":[100,100,100,100,100]}

00:40:33.990 --> 00:40:34.500
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:40:34.500 --> 00:40:38.730
<v Speaker 3>So what what is the you know, that's, uh, o

NOTE CONF {"raw":[100,76,100,100,100,100,100,100,88,98]}

00:40:38.730 --> 00:40:39.420
<v Speaker 3>of what?

NOTE CONF {"raw":[100,100]}

00:40:40.110 --> 00:40:41.130
<v Speaker 3>Uh, big o of what?

NOTE CONF {"raw":[99,100,100,100,100]}

00:40:41.130 --> 00:40:43.740
<v Speaker 3>Yeah, o of that big o of n yeah.

NOTE CONF {"raw":[99,100,100,100,100,100,100,95,100]}

00:40:43.740 --> 00:40:44.550
<v Speaker 3>It's linear.

NOTE CONF {"raw":[100,100]}

00:40:44.550 --> 00:40:45.090
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:40:45.090 --> 00:40:47.550
<v Speaker 3>Because it's it's, you know, if the list is of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:47.550 --> 00:40:50.160
<v Speaker 3>length n, it will have to look on average.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:40:50.160 --> 00:40:51.480
<v Speaker 3>It will have to look at half of them.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:40:51.480 --> 00:40:51.840
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:40:51.840 --> 00:40:52.890
<v Speaker 3>And over two.

NOTE CONF {"raw":[100,100,97]}

00:40:53.010 --> 00:40:56.430
<v Speaker 3>But I've said constant factors don't matter.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:40:56.430 --> 00:40:58.950
<v Speaker 3>So the fact that it's n over two rather than

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:58.950 --> 00:41:01.680
<v Speaker 3>n over three or n doesn't matter.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:41:01.800 --> 00:41:03.420
<v Speaker 3>It's o of n okay.

NOTE CONF {"raw":[100,100,100,100,96]}

00:41:04.080 --> 00:41:04.740
<v Speaker 3>Linear.

NOTE CONF {"raw":[100]}

00:41:04.740 --> 00:41:05.820
<v Speaker 3>This one's linear.

NOTE CONF {"raw":[100,93,100]}

00:41:07.320 --> 00:41:07.860
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:41:07.860 --> 00:41:10.440
<v Speaker 3>Let's look at uh at this other function.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:41:10.440 --> 00:41:11.070
<v Speaker 3>equal.

NOTE CONF {"raw":[100]}

00:41:11.790 --> 00:41:15.030
<v Speaker 3>This is testing equality of um.

NOTE CONF {"raw":[100,100,100,100,100,92]}

00:41:17.490 --> 00:41:18.390
<v Speaker 3>Of sets.

NOTE CONF {"raw":[100,96]}

00:41:18.390 --> 00:41:18.870
<v Speaker 3>Sets.

NOTE CONF {"raw":[97]}

00:41:18.870 --> 00:41:19.620
<v Speaker 3>Representatives.

NOTE CONF {"raw":[100]}

00:41:19.620 --> 00:41:20.340
<v Speaker 3>Lists.

NOTE CONF {"raw":[99]}

00:41:20.970 --> 00:41:21.480
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:41:21.480 --> 00:41:25.890
<v Speaker 3>Now how do we check if two sets are equal

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:27.270 --> 00:41:29.220
<v Speaker 3>sets represented as lists?

NOTE CONF {"raw":[100,100,100,100]}

00:41:30.390 --> 00:41:30.780
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:41:30.780 --> 00:41:33.930
<v Speaker 3>Now we have to worry about this representation.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:41:36.960 --> 00:41:41.430
<v Speaker 3>So we can't just compare the lists used to represent

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:41.430 --> 00:41:43.560
<v Speaker 3>the sets using equality.

NOTE CONF {"raw":[100,100,100,100]}

00:41:43.560 --> 00:41:44.730
<v Speaker 3>And why is that?

NOTE CONF {"raw":[100,100,100,100]}

00:41:45.480 --> 00:41:46.590
<v Speaker 3>Okay, so.

NOTE CONF {"raw":[100,100]}

00:41:48.930 --> 00:41:50.910
<v Speaker 3>Um, let's look at a computation.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:41:59.820 --> 00:42:00.540
<v Speaker 3>Okay.

NOTE CONF {"raw":[87]}

00:42:00.900 --> 00:42:06.000
<v Speaker 3>Um, going back a slide, I said insert is cons

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,85]}

00:42:06.000 --> 00:42:07.740
<v Speaker 3>and empty is the empty list.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:42:08.130 --> 00:42:08.580
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:42:08.580 --> 00:42:12.420
<v Speaker 3>So this is going to give me this list.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:42:15.750 --> 00:42:16.110
<v Speaker 3>Right.

NOTE CONF {"raw":[100]}

00:42:16.110 --> 00:42:16.920
<v Speaker 3>You know why.

NOTE CONF {"raw":[100,100,100]}

00:42:18.450 --> 00:42:18.870
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:42:18.870 --> 00:42:22.200
<v Speaker 3>It's it's, you know, cons two onto the empty list

NOTE CONF {"raw":[100,100,100,100,93,52,100,100,100,100]}

00:42:22.200 --> 00:42:23.760
<v Speaker 3>and then cons one onto that.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:42:23.760 --> 00:42:25.050
<v Speaker 3>That gives me this list.

NOTE CONF {"raw":[100,100,100,100,100]}

00:42:26.070 --> 00:42:26.820
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:42:27.960 --> 00:42:30.390
<v Speaker 3>What happens if I do it the other way around?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:36.180 --> 00:42:38.220
<v Speaker 3>Well I get two comma one.

NOTE CONF {"raw":[100,100,100,97,100,100]}

00:42:38.220 --> 00:42:38.760
<v Speaker 3>Right.

NOTE CONF {"raw":[100]}

00:42:42.060 --> 00:42:42.570
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:42:42.570 --> 00:42:45.570
<v Speaker 3>Or if I or if I, um, a little bit

NOTE CONF {"raw":[100,100,100,100,100,100,81,100,100,100]}

00:42:45.570 --> 00:42:50.430
<v Speaker 3>more complicated, suppose I insert one into insert two and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,63]}

00:42:50.430 --> 00:42:53.370
<v Speaker 3>two insert one of empty.

NOTE CONF {"raw":[40,100,100,100,100]}

00:42:55.680 --> 00:42:57.870
<v Speaker 3>Then I get 1 to 1.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:42:59.310 --> 00:43:00.030
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:43:01.170 --> 00:43:04.680
<v Speaker 3>So um, these.

NOTE CONF {"raw":[100,100,100]}

00:43:06.840 --> 00:43:07.440
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:43:07.440 --> 00:43:11.200
<v Speaker 3>What you get with these, with these computations.

NOTE CONF {"raw":[100,100,100,100,98,100,100,89]}

00:43:11.800 --> 00:43:14.530
<v Speaker 3>These sets should all be regarded as equal, okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,98]}

00:43:14.530 --> 00:43:16.870
<v Speaker 3>Because they've all got the same elements in them.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:43:17.050 --> 00:43:19.870
<v Speaker 3>They're just in a different order here.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:43:20.710 --> 00:43:23.680
<v Speaker 3>And in this case you've inserted one twice.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:43:23.680 --> 00:43:26.920
<v Speaker 3>But for sets it doesn't matter how many times something

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:26.920 --> 00:43:29.980
<v Speaker 3>is in a set, it's it's the same the same

NOTE CONF {"raw":[100,100,95,100,97,100,100,100,100,100]}

00:43:29.980 --> 00:43:30.940
<v Speaker 3>set okay.

NOTE CONF {"raw":[100,100]}

00:43:30.940 --> 00:43:36.880
<v Speaker 3>So these should all be regarded as, as equal in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:36.880 --> 00:43:40.390
<v Speaker 3>the sense of uh, of the function that I'm defining

NOTE CONF {"raw":[100,100,100,95,100,100,100,100,100,100]}

00:43:40.390 --> 00:43:40.900
<v Speaker 3>here.

NOTE CONF {"raw":[100]}

00:43:41.260 --> 00:43:41.860
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:43:41.860 --> 00:43:44.950
<v Speaker 3>So in order to, um, you know, if you've got

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:44.950 --> 00:43:47.380
<v Speaker 3>the sets represented like this, you have to do a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:47.380 --> 00:43:50.200
<v Speaker 3>little bit of work to work out whether or not

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:50.200 --> 00:43:51.550
<v Speaker 3>two sets are equal.

NOTE CONF {"raw":[100,100,100,100]}

00:43:51.940 --> 00:43:52.420
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:43:52.420 --> 00:43:55.330
<v Speaker 3>And the way that I've done this here is I've,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:55.330 --> 00:43:58.870
<v Speaker 3>I've, I've used a helper function called subset.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:44:00.130 --> 00:44:00.820
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:44:00.820 --> 00:44:04.450
<v Speaker 3>So um x is is a subset of Ys.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,76]}

00:44:04.450 --> 00:44:09.910
<v Speaker 3>If um if everything is in X appears in Y.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:10.420 --> 00:44:11.050
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:44:11.050 --> 00:44:12.550
<v Speaker 3>So there's a comprehension there.

NOTE CONF {"raw":[100,100,100,100,100]}

00:44:12.580 --> 00:44:15.580
<v Speaker 3>You look at all the x every x in X's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,34]}

00:44:15.580 --> 00:44:17.890
<v Speaker 3>and you check to see whether x is in y's.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,81]}

00:44:19.120 --> 00:44:21.280
<v Speaker 3>And if that's the case for all of those values

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:21.280 --> 00:44:24.310
<v Speaker 3>in xs you do a conjunction.

NOTE CONF {"raw":[93,66,100,100,100,100]}

00:44:24.310 --> 00:44:26.650
<v Speaker 3>Then x is a subset of y's.

NOTE CONF {"raw":[100,54,99,100,100,100,87]}

00:44:27.100 --> 00:44:27.760
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:44:27.760 --> 00:44:33.490
<v Speaker 3>And equality equality xs is equal to ys.

NOTE CONF {"raw":[100,100,100,100,100,100,100,66]}

00:44:33.490 --> 00:44:35.380
<v Speaker 3>If x is a subset of y's.

NOTE CONF {"raw":[100,95,100,100,100,100,97]}

00:44:35.380 --> 00:44:38.260
<v Speaker 3>And also y's is a subset of XS.

NOTE CONF {"raw":[100,100,100,100,100,100,100,90]}

00:44:42.400 --> 00:44:43.210
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:44:44.200 --> 00:44:44.800
<v Speaker 3>Um.

NOTE CONF {"raw":[100]}

00:44:51.910 --> 00:44:52.930
<v Speaker 3>Oh, here we go.

NOTE CONF {"raw":[47,100,100,100]}

00:44:56.320 --> 00:44:58.360
<v Speaker 3>So how fast is equality?

NOTE CONF {"raw":[100,100,100,100,100]}

00:45:01.600 --> 00:45:02.290
<v Speaker 3>Okay.

NOTE CONF {"raw":[73]}

00:45:02.530 --> 00:45:03.460
<v Speaker 3>Um, well.

NOTE CONF {"raw":[100,100]}

00:45:05.500 --> 00:45:12.940
<v Speaker 3>Uh, we are we're doing we're doing element hood, which

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:12.940 --> 00:45:14.230
<v Speaker 3>we've seen is linear.

NOTE CONF {"raw":[84,100,92,100]}

00:45:15.370 --> 00:45:18.790
<v Speaker 3>We're doing that repeatedly here.

NOTE CONF {"raw":[100,100,100,100,100]}

00:45:19.330 --> 00:45:20.140
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:45:20.170 --> 00:45:24.940
<v Speaker 3>So you know this this this x is equal Y's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,78]}

00:45:24.970 --> 00:45:26.590
<v Speaker 3>is defined in terms of subsets.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:45:26.590 --> 00:45:28.960
<v Speaker 3>So let's first look at subset okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:45:28.960 --> 00:45:32.050
<v Speaker 3>And what we're doing here is we're repeatedly doing this

NOTE CONF {"raw":[100,100,100,100,95,100,96,100,100,100]}

00:45:32.170 --> 00:45:33.580
<v Speaker 3>linear computation.

NOTE CONF {"raw":[100,100]}

00:45:33.580 --> 00:45:38.410
<v Speaker 3>And we're doing it the number of times uh that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:38.410 --> 00:45:42.010
<v Speaker 3>x is has elements okay.

NOTE CONF {"raw":[100,100,100,100,100]}

00:45:42.010 --> 00:45:43.360
<v Speaker 3>So what does that give me.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:45:45.130 --> 00:45:45.550
<v Speaker 3>Yeah.

NOTE CONF {"raw":[87]}

00:45:47.980 --> 00:45:48.700
<v Speaker 3>N squared.

NOTE CONF {"raw":[100,100]}

00:45:48.700 --> 00:45:51.010
<v Speaker 3>Yeah n squared quadratic okay.

NOTE CONF {"raw":[100,100,100,100,100]}

00:45:51.310 --> 00:45:54.760
<v Speaker 3>So so if these are both if these are both

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:54.760 --> 00:45:58.750
<v Speaker 3>um of length n then this takes n squared time

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:00.460 --> 00:46:03.100
<v Speaker 3>okay o of n squared okay.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:46:03.100 --> 00:46:05.750
<v Speaker 3>And doing that twice what we're doing here is doing

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:05.750 --> 00:46:11.330
<v Speaker 3>that twice first time and the second time, okay, possibly

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:11.330 --> 00:46:13.850
<v Speaker 3>getting different results because we're doing it one way around,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:13.850 --> 00:46:14.660
<v Speaker 3>then the other way around.

NOTE CONF {"raw":[100,100,100,100,100]}

00:46:14.660 --> 00:46:15.020
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:46:15.020 --> 00:46:19.250
<v Speaker 3>So this is this is twice a quadratic.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:46:19.730 --> 00:46:21.320
<v Speaker 3>So it's the same as quadratic.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:46:21.320 --> 00:46:21.500
<v Speaker 3>Yeah.

NOTE CONF {"raw":[100]}

00:46:21.500 --> 00:46:22.040
<v Speaker 3>What do you have.

NOTE CONF {"raw":[100,100,100,100]}

00:46:25.280 --> 00:46:25.760
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:46:25.760 --> 00:46:29.540
<v Speaker 3>And of course adds uh adds some.

NOTE CONF {"raw":[100,100,100,100,62,96,100]}

00:46:30.170 --> 00:46:32.900
<v Speaker 3>You mean this and yeah okay.

NOTE CONF {"raw":[100,100,100,98,100,100]}

00:46:32.900 --> 00:46:34.550
<v Speaker 3>So that's linear right.

NOTE CONF {"raw":[100,100,100,100]}

00:46:34.550 --> 00:46:39.710
<v Speaker 3>Because it's taking a list of uh, of values and

NOTE CONF {"raw":[100,100,100,100,100,100,76,100,100,100]}

00:46:39.710 --> 00:46:41.870
<v Speaker 3>uh, checking to see if one of them has is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:41.870 --> 00:46:42.800
<v Speaker 3>false or not.

NOTE CONF {"raw":[100,100,100]}

00:46:43.730 --> 00:46:44.150
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:46:44.150 --> 00:46:49.820
<v Speaker 3>So it's, so it's this part is quadratic and this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:49.820 --> 00:46:50.930
<v Speaker 3>part is linear.

NOTE CONF {"raw":[100,100,100]}

00:46:51.830 --> 00:46:55.760
<v Speaker 3>And a quadratic plus linear is quadratic okay.

NOTE CONF {"raw":[100,94,100,100,100,100,100,100]}

00:46:55.760 --> 00:47:01.730
<v Speaker 3>And and two quadratics is a quadratic okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:47:01.730 --> 00:47:03.380
<v Speaker 3>So O of n squared.

NOTE CONF {"raw":[100,100,100,100,100]}

00:47:10.700 --> 00:47:11.240
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:47:11.240 --> 00:47:14.330
<v Speaker 3>So that's my first implementation of of sets.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:47:14.420 --> 00:47:15.710
<v Speaker 3>Sets lists.

NOTE CONF {"raw":[100,98]}

00:47:20.210 --> 00:47:24.620
<v Speaker 3>Um, I'll just have time to introduce the next one.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:26.540 --> 00:47:26.960
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:47:26.960 --> 00:47:27.860
<v Speaker 3>So this.

NOTE CONF {"raw":[100,100]}

00:47:28.910 --> 00:47:34.220
<v Speaker 3>This explanation here motivates a different way of representing of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:34.220 --> 00:47:35.570
<v Speaker 3>representing sets.

NOTE CONF {"raw":[100,100]}

00:47:38.300 --> 00:47:40.970
<v Speaker 3>My idea is going to be to represent them as

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:41.090 --> 00:47:44.330
<v Speaker 3>ordered lists without repetitions.

NOTE CONF {"raw":[100,100,100,100]}

00:47:46.370 --> 00:47:47.000
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:47:47.000 --> 00:47:48.860
<v Speaker 3>So in order to list by an ordered list, I

NOTE CONF {"raw":[100,100,58,58,100,100,83,83,100,100]}

00:47:48.860 --> 00:47:51.800
<v Speaker 3>mean like like like this one's ordered.

NOTE CONF {"raw":[100,100,100,100,100,95,100]}

00:47:51.800 --> 00:47:52.580
<v Speaker 3>Okay.

NOTE CONF {"raw":[95]}

00:47:52.760 --> 00:47:56.360
<v Speaker 3>Uh, increasing order of values one followed by two.

NOTE CONF {"raw":[58,100,100,100,100,100,100,100,100]}

00:47:56.390 --> 00:47:57.260
<v Speaker 3>This is not.

NOTE CONF {"raw":[100,100,100]}

00:47:57.260 --> 00:47:58.850
<v Speaker 3>This is in the wrong order.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:47:58.850 --> 00:47:59.060
<v Speaker 3>Okay?

NOTE CONF {"raw":[100]}

00:47:59.060 --> 00:48:00.710
<v Speaker 3>If I'm talking about increasing order.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:48:00.710 --> 00:48:02.700
<v Speaker 3>Okay, this is in the wrong order.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:48:03.600 --> 00:48:04.980
<v Speaker 3>Okay, so I wouldn't use that.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:48:04.980 --> 00:48:06.120
<v Speaker 3>I would use this.

NOTE CONF {"raw":[100,100,100,100]}

00:48:06.240 --> 00:48:08.520
<v Speaker 3>And this has repetitions okay.

NOTE CONF {"raw":[100,100,100,100,100]}

00:48:08.520 --> 00:48:11.310
<v Speaker 3>There's two two occurrences of one here.

NOTE CONF {"raw":[100,100,86,100,100,100,100]}

00:48:11.310 --> 00:48:15.600
<v Speaker 3>So if I could somehow work out, uh, work the

NOTE CONF {"raw":[100,100,100,100,100,100,100,98,100,100]}

00:48:15.600 --> 00:48:22.050
<v Speaker 3>representation out that all of these deliver an ordered list

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:22.560 --> 00:48:25.770
<v Speaker 3>instead of a unordered list.

NOTE CONF {"raw":[100,100,77,100,100]}

00:48:26.070 --> 00:48:28.800
<v Speaker 3>And if the list doesn't have repetitions.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:48:28.800 --> 00:48:31.800
<v Speaker 3>So I don't want I don't want this, I want,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:31.800 --> 00:48:34.830
<v Speaker 3>I want that okay.

NOTE CONF {"raw":[100,100,100,100]}

00:48:34.830 --> 00:48:37.080
<v Speaker 3>Ordered list of the values in the set.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:48:37.710 --> 00:48:41.490
<v Speaker 3>Then equality testing is easy okay.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:48:41.490 --> 00:48:44.370
<v Speaker 3>Because if I arrange it that these always delivered an

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:44.370 --> 00:48:48.300
<v Speaker 3>ordered list of values, then checking equality is just comparing

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:48.300 --> 00:48:50.520
<v Speaker 3>these lists for equality okay.

NOTE CONF {"raw":[100,100,100,97,100]}

00:48:50.520 --> 00:48:52.890
<v Speaker 3>Which is which is linear okay.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:48:52.890 --> 00:48:55.080
<v Speaker 3>We just run down the lists and compare them elements

NOTE CONF {"raw":[100,100,100,100,100,98,100,100,100,71]}

00:48:55.080 --> 00:48:56.640
<v Speaker 3>at a time okay.

NOTE CONF {"raw":[100,88,100,100]}

00:48:56.640 --> 00:48:58.890
<v Speaker 3>So this is going to be the the way that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:58.890 --> 00:49:00.450
<v Speaker 3>I'm going to do this.

NOTE CONF {"raw":[100,100,100,100,100]}

00:49:00.900 --> 00:49:03.720
<v Speaker 3>Um, and I'll just show you there is some code

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:03.720 --> 00:49:05.340
<v Speaker 3>for this, and I'll come into this.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:49:05.340 --> 00:49:07.590
<v Speaker 3>Uh, I'll explain this next time, okay?

NOTE CONF {"raw":[92,100,100,100,100,100,100]}

00:49:07.590 --> 00:49:10.020
<v Speaker 3>Are there any I have time for, like, one question

NOTE CONF {"raw":[100,100,100,99,100,100,100,100,100,100]}

00:49:10.020 --> 00:49:13.110
<v Speaker 3>or possibly two if they're short.

NOTE CONF {"raw":[100,100,100,100,92,100]}

00:49:13.110 --> 00:49:13.950
<v Speaker 3>Anybody?

NOTE CONF {"raw":[100]}

00:49:15.900 --> 00:49:16.410
<v Speaker 3>Yeah.

NOTE CONF {"raw":[99]}

00:49:18.960 --> 00:49:20.700
<v Speaker 3>Register is there.

NOTE CONF {"raw":[52,91,83]}

00:49:20.700 --> 00:49:21.030
<v Speaker 3>Sorry.

NOTE CONF {"raw":[100]}

00:49:21.030 --> 00:49:21.960
<v Speaker 3>Can you please be quiet?

NOTE CONF {"raw":[100,100,100,100,100]}

00:49:21.960 --> 00:49:23.040
<v Speaker 3>Is there any way of what?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:49:23.460 --> 00:49:24.270
<v Speaker 3>I don't remember you.

NOTE CONF {"raw":[98,73,98,96]}

00:49:25.680 --> 00:49:28.020
<v Speaker 4>Do you have to register for the competition.

NOTE CONF {"raw":[99,100,100,100,100,60,76,79]}

00:49:28.620 --> 00:49:30.210
<v Speaker 3>Or do you have to register for the competition?

NOTE CONF {"raw":[79,100,100,100,100,100,100,100,100]}

00:49:30.360 --> 00:49:34.170
<v Speaker 3>Um, no, no, no, you just have to submit and

NOTE CONF {"raw":[94,100,100,100,100,100,100,100,100,100]}

00:49:34.170 --> 00:49:36.150
<v Speaker 3>there will be instructions about submission.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:49:36.390 --> 00:49:38.910
<v Speaker 3>Uh, you'll get those soon, okay?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:49:39.390 --> 00:49:39.720
<v Speaker 3>Okay.

NOTE CONF {"raw":[100]}

00:49:39.720 --> 00:49:40.710
<v Speaker 3>Thanks, everybody.

NOTE CONF {"raw":[100,100]}

00:49:41.010 --> 00:49:42.240
<v Speaker 3>See you on Monday.

NOTE CONF {"raw":[100,100,100,100]}

00:49:42.570 --> 00:49:42.780
<v Speaker 3>Yeah.

NOTE CONF {"raw":[62]}

WEBVTT

00:00:18.420 --> 00:00:19.830
<v Unknown>Oh.

NOTE CONF {"raw":[97]}

00:00:24.750 --> 00:00:36.030
<v Unknown>Hey oh hey hey hey hey hey.

NOTE CONF {"raw":[96,76,73,91,100,95,99]}

00:00:38.700 --> 00:00:39.750
<v Speaker 0>You don't keep up.

NOTE CONF {"raw":[96,89,30,78]}

00:00:39.780 --> 00:00:40.380
<v Speaker 0>No.

NOTE CONF {"raw":[58]}

00:00:40.650 --> 00:00:44.880
<v Unknown>He's on the road in the red.

NOTE CONF {"raw":[99,98,99,67,70,91,82]}

00:00:58.290 --> 00:00:58.740
<v Speaker 1>Zone?

NOTE CONF {"raw":[93]}

00:00:58.740 --> 00:00:59.310
<v Speaker 1>Yes.

NOTE CONF {"raw":[100]}

00:00:59.310 --> 00:00:59.700
<v Speaker 1>Right.

NOTE CONF {"raw":[100]}

00:00:59.700 --> 00:01:02.700
<v Speaker 1>That was the anchor of the Anvil Chorus from IL

NOTE CONF {"raw":[100,100,100,100,100,100,95,100,100,100]}

00:01:02.700 --> 00:01:03.450
<v Speaker 1>trovatore.

NOTE CONF {"raw":[100]}

00:01:03.480 --> 00:01:07.440
<v Speaker 1>For those of you who are interested in opera, um.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,85]}

00:01:07.860 --> 00:01:10.560
<v Speaker 1>Uh, before I start, I just want to give an

NOTE CONF {"raw":[54,100,100,100,100,100,100,100,100,100]}

00:01:10.560 --> 00:01:13.620
<v Speaker 1>advert for this, um, thing tomorrow.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:01:13.620 --> 00:01:14.730
<v Speaker 1>This is an event.

NOTE CONF {"raw":[100,100,100,100]}

00:01:15.180 --> 00:01:19.530
<v Speaker 1>Uh, I happened to be the exchange coordinator for Informatics,

NOTE CONF {"raw":[90,100,82,100,100,100,100,100,100,100]}

00:01:19.530 --> 00:01:21.420
<v Speaker 1>as well as being your lecturer here.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:01:21.420 --> 00:01:24.000
<v Speaker 1>And, um, and so this is an event that I

NOTE CONF {"raw":[100,79,100,100,100,100,100,100,100,100]}

00:01:24.000 --> 00:01:27.930
<v Speaker 1>do every year to inform students about opportunities for exchanges

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:27.930 --> 00:01:28.680
<v Speaker 1>abroad.

NOTE CONF {"raw":[100]}

00:01:28.680 --> 00:01:31.440
<v Speaker 1>So you can go on an exchange in your third

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:31.440 --> 00:01:35.280
<v Speaker 1>year to a university somewhere else in the world, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:35.280 --> 00:01:37.170
<v Speaker 1>instead of doing your third year here.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:01:37.170 --> 00:01:40.260
<v Speaker 1>So if you want to know about that, uh, what's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:40.260 --> 00:01:42.030
<v Speaker 1>possible, it would be in your third year.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:01:42.030 --> 00:01:44.250
<v Speaker 1>So not, you know, you're in your first year now,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:44.250 --> 00:01:46.740
<v Speaker 1>so you've got time to think about it, but, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,97]}

00:01:46.740 --> 00:01:49.050
<v Speaker 1>it's the event is open to you if you want

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:49.050 --> 00:01:49.440
<v Speaker 1>to go.

NOTE CONF {"raw":[100,100]}

00:01:49.440 --> 00:01:53.010
<v Speaker 1>And it's in, um, in George Square in the psychology

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:53.010 --> 00:01:53.400
<v Speaker 1>building.

NOTE CONF {"raw":[100]}

00:01:53.400 --> 00:01:54.780
<v Speaker 1>There's the location.

NOTE CONF {"raw":[100,100,100]}

00:01:54.780 --> 00:01:55.500
<v Speaker 1>All right.

NOTE CONF {"raw":[100,100]}

00:01:55.500 --> 00:01:59.410
<v Speaker 1>And if you don't feel like dragging yourself up to,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:59.410 --> 00:02:00.700
<v Speaker 1>um, George Square.

NOTE CONF {"raw":[61,100,100]}

00:02:01.540 --> 00:02:07.210
<v Speaker 1>Um, it's going to be recorded and, um, the, the

NOTE CONF {"raw":[100,100,100,100,100,100,100,78,100,100]}

00:02:07.210 --> 00:02:10.720
<v Speaker 1>recording is actually going to be, um, one of the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:10.720 --> 00:02:13.270
<v Speaker 1>recordings for this course.

NOTE CONF {"raw":[100,100,100,100]}

00:02:13.480 --> 00:02:15.700
<v Speaker 1>Um, just because it's a place that I could put

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:15.700 --> 00:02:17.170
<v Speaker 1>it when I set up the recording.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:02:17.170 --> 00:02:18.880
<v Speaker 1>So if you want, you can watch it on live

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:18.880 --> 00:02:23.020
<v Speaker 1>stream, um, or afterwards you can watch the recording.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:02:23.110 --> 00:02:27.400
<v Speaker 1>Um, but it'll be live streamed onto the Informatics one

NOTE CONF {"raw":[100,100,74,100,100,100,82,100,100,100]}

00:02:27.400 --> 00:02:29.590
<v Speaker 1>kind of, um, you know, lecture.

NOTE CONF {"raw":[100,100,98,100,100,100]}

00:02:30.190 --> 00:02:34.210
<v Speaker 1>Uh, yeah, the recordings list.

NOTE CONF {"raw":[100,100,100,100,100]}

00:02:34.210 --> 00:02:35.230
<v Speaker 1>You know, where they are.

NOTE CONF {"raw":[100,100,100,100,100]}

00:02:35.560 --> 00:02:36.160
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:02:36.160 --> 00:02:38.980
<v Speaker 1>So, um, come along if you're interested.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:02:40.090 --> 00:02:42.760
<v Speaker 1>Uh, there'll be a talk from me and then, um,

NOTE CONF {"raw":[95,100,100,100,100,100,100,100,100,52]}

00:02:42.760 --> 00:02:45.850
<v Speaker 1>from some former and current exchange students.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:02:48.970 --> 00:02:49.330
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:02:49.330 --> 00:02:51.100
<v Speaker 1>But what I want to talk about today is expression

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:51.100 --> 00:02:53.680
<v Speaker 1>trees as algebraic data types.

NOTE CONF {"raw":[100,100,100,98,98]}

00:02:54.460 --> 00:03:00.340
<v Speaker 1>Uh, this lecture will probably take, um, two lectures worth

NOTE CONF {"raw":[95,100,100,100,100,100,100,100,100,100]}

00:03:00.340 --> 00:03:00.910
<v Speaker 1>of time.

NOTE CONF {"raw":[100,100]}

00:03:00.910 --> 00:03:02.560
<v Speaker 1>So it will continue on Monday.

NOTE CONF {"raw":[100,88,88,100,100,100]}

00:03:03.520 --> 00:03:07.150
<v Speaker 1>Okay, so I told you about algebraic data types last

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:07.150 --> 00:03:07.780
<v Speaker 1>time.

NOTE CONF {"raw":[100]}

00:03:08.200 --> 00:03:12.820
<v Speaker 1>Um, and how you can, uh, in Haskell, uh, define

NOTE CONF {"raw":[82,100,100,100,100,65,100,100,100,100]}

00:03:12.820 --> 00:03:18.700
<v Speaker 1>types for things like booleans, um, you know, lists.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:03:19.960 --> 00:03:22.390
<v Speaker 1>Um, so those are some types that you've seen already,

NOTE CONF {"raw":[100,100,76,99,100,100,100,100,100,100]}

00:03:22.390 --> 00:03:26.410
<v Speaker 1>and, um, and, uh, today I'm going to talk to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:26.410 --> 00:03:33.250
<v Speaker 1>you about using the same idea to define syntax of,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:33.250 --> 00:03:37.990
<v Speaker 1>um, of languages when I use the word syntax, do

NOTE CONF {"raw":[65,100,100,100,100,100,100,100,100,100]}

00:03:37.990 --> 00:03:39.730
<v Speaker 1>you know what I'm talking about?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:03:39.730 --> 00:03:40.600
<v Speaker 1>Anybody.

NOTE CONF {"raw":[100]}

00:03:40.960 --> 00:03:44.590
<v Speaker 1>Does anybody know what I mean by syntax?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:03:46.060 --> 00:03:46.900
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:03:47.170 --> 00:03:51.760
<v Speaker 1>Uh, does anybody not know what I mean by syntax?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:03:53.410 --> 00:03:54.910
<v Speaker 1>I don't see any hands.

NOTE CONF {"raw":[100,100,100,100,100]}

00:03:54.910 --> 00:03:55.990
<v Speaker 1>But you might be shy.

NOTE CONF {"raw":[100,100,100,100,100]}

00:03:56.000 --> 00:03:56.510
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:03:56.510 --> 00:03:59.600
<v Speaker 1>So, um, you know, syntax is like there's this distinction

NOTE CONF {"raw":[100,94,100,100,100,100,100,100,100,100]}

00:03:59.600 --> 00:04:03.890
<v Speaker 1>between in a language, you've got the, the text of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:03.890 --> 00:04:04.910
<v Speaker 1>the language.

NOTE CONF {"raw":[100,100]}

00:04:04.910 --> 00:04:09.140
<v Speaker 1>And that's so, you know, like the grammar, the, the

NOTE CONF {"raw":[78,100,100,100,100,100,100,100,100,100]}

00:04:09.140 --> 00:04:14.960
<v Speaker 1>words, the level of um, of, of, uh, of what

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:14.960 --> 00:04:15.500
<v Speaker 1>you say.

NOTE CONF {"raw":[100,100]}

00:04:15.500 --> 00:04:17.209
<v Speaker 1>And then there's the level of meaning.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:04:17.209 --> 00:04:21.079
<v Speaker 1>So syntax is this kind of, I sort of say

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:21.079 --> 00:04:23.390
<v Speaker 1>up here is syntax and down here is meaning it's

NOTE CONF {"raw":[100,100,85,100,100,100,100,100,100,100]}

00:04:23.390 --> 00:04:26.150
<v Speaker 1>kind of like, um, you know, there's the, there's the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:26.150 --> 00:04:27.710
<v Speaker 1>text and the grammar and so forth.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:04:27.710 --> 00:04:30.680
<v Speaker 1>And then there's the what it means level down here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:30.680 --> 00:04:33.710
<v Speaker 1>And there's a relationship obviously between these two levels.

NOTE CONF {"raw":[100,100,90,100,100,100,100,100,100]}

00:04:34.100 --> 00:04:34.760
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:04:34.760 --> 00:04:38.330
<v Speaker 1>So um, kind of interpretation of the of the text

NOTE CONF {"raw":[100,81,100,100,100,100,100,100,100,100]}

00:04:38.330 --> 00:04:39.680
<v Speaker 1>goes into the meaning.

NOTE CONF {"raw":[100,100,100,100]}

00:04:41.270 --> 00:04:41.990
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:04:42.290 --> 00:04:45.770
<v Speaker 1>Um, of course going the other direction, if you have

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:45.770 --> 00:04:48.680
<v Speaker 1>some idea and you want to express it, you, you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:48.680 --> 00:04:49.580
<v Speaker 1>turn it into language.

NOTE CONF {"raw":[100,100,100,100]}

00:04:49.580 --> 00:04:49.910
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:04:49.910 --> 00:04:53.450
<v Speaker 1>So in computer languages you've got the same sort of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:53.450 --> 00:04:55.010
<v Speaker 1>thing, except that.

NOTE CONF {"raw":[100,100,100]}

00:04:55.040 --> 00:04:56.720
<v Speaker 1>So bye bye bye syntax.

NOTE CONF {"raw":[100,100,100,100,100]}

00:04:56.720 --> 00:05:00.530
<v Speaker 1>We're talking about things like Haskell text with the rules

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:00.530 --> 00:05:03.050
<v Speaker 1>of Haskell for putting together programs.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:05:03.380 --> 00:05:03.950
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:05:03.950 --> 00:05:05.390
<v Speaker 1>The, um, you know what?

NOTE CONF {"raw":[100,52,100,100,100]}

00:05:05.390 --> 00:05:08.300
<v Speaker 1>What you're allowed to use is variable names and how

NOTE CONF {"raw":[100,100,100,100,100,52,100,100,100,100]}

00:05:08.300 --> 00:05:12.530
<v Speaker 1>you're allowed to build things like list comprehensions out of

NOTE CONF {"raw":[100,100,100,100,100,100,96,100,100,100]}

00:05:12.530 --> 00:05:13.430
<v Speaker 1>the components.

NOTE CONF {"raw":[100,100]}

00:05:13.430 --> 00:05:17.060
<v Speaker 1>So that syntax and then the meaning or the semantics

NOTE CONF {"raw":[100,72,100,100,100,100,100,100,85,100]}

00:05:17.060 --> 00:05:21.200
<v Speaker 1>is, is like what you get when you evaluate those,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:21.230 --> 00:05:22.340
<v Speaker 1>those things.

NOTE CONF {"raw":[100,100]}

00:05:23.090 --> 00:05:23.600
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:05:23.600 --> 00:05:25.730
<v Speaker 1>So um, so what I'm going to be talking about

NOTE CONF {"raw":[100,66,100,100,100,100,100,100,100,100]}

00:05:25.730 --> 00:05:31.520
<v Speaker 1>with in this lecture is about representing the syntax of,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:31.520 --> 00:05:36.410
<v Speaker 1>of, of languages and, and something about the interpretation of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:36.410 --> 00:05:39.560
<v Speaker 1>syntax, um, in terms of meanings.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:05:39.560 --> 00:05:40.130
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:05:40.130 --> 00:05:43.430
<v Speaker 1>And this is something that Haskell is really good at

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:43.580 --> 00:05:44.990
<v Speaker 1>representing.

NOTE CONF {"raw":[100]}

00:05:44.990 --> 00:05:45.620
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:05:45.620 --> 00:05:50.840
<v Speaker 1>It's very, uh, straightforward and simple to, to represent the,

NOTE CONF {"raw":[100,100,97,100,100,100,100,100,100,100]}

00:05:50.840 --> 00:05:54.330
<v Speaker 1>the syntax of languages and to write Programs that do

NOTE CONF {"raw":[100,100,100,100,100,100,100,94,100,100]}

00:05:54.330 --> 00:05:55.890
<v Speaker 1>things on the syntax of languages.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:05:55.890 --> 00:05:57.510
<v Speaker 1>And I'm going to be showing you a couple of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:57.510 --> 00:05:58.320
<v Speaker 1>examples.

NOTE CONF {"raw":[100]}

00:05:58.710 --> 00:06:01.890
<v Speaker 1>By the way, another example of syntax and meaning or

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:01.890 --> 00:06:05.190
<v Speaker 1>semantics is you've been learning in computation and logic.

NOTE CONF {"raw":[100,100,100,100,100,100,88,50,100]}

00:06:05.190 --> 00:06:08.520
<v Speaker 1>There's this kind of logical language, propositional logic.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:06:08.520 --> 00:06:12.900
<v Speaker 1>And you've got propositional variables and you've got some connectives

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,37,100]}

00:06:12.900 --> 00:06:17.100
<v Speaker 1>like conjunctive and conjunction, disjunction and negation.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:06:17.100 --> 00:06:20.880
<v Speaker 1>And the semantics is given by things like truth tables.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:20.880 --> 00:06:25.710
<v Speaker 1>So, you know, if you have, uh, true and false,

NOTE CONF {"raw":[100,100,100,100,100,100,89,100,100,100]}

00:06:26.490 --> 00:06:31.530
<v Speaker 1>uh, like that expression true and false, it's interpreted as

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:31.530 --> 00:06:34.290
<v Speaker 1>by evaluating it according to the truth tables to get

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:34.290 --> 00:06:34.890
<v Speaker 1>the result.

NOTE CONF {"raw":[100,100]}

00:06:34.890 --> 00:06:35.700
<v Speaker 1>False.

NOTE CONF {"raw":[100]}

00:06:36.210 --> 00:06:36.840
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:06:37.560 --> 00:06:38.760
<v Speaker 1>Um, hope that's hope.

NOTE CONF {"raw":[100,100,100,60]}

00:06:38.760 --> 00:06:39.780
<v Speaker 1>Hope that's helpful.

NOTE CONF {"raw":[98,100,100]}

00:06:39.780 --> 00:06:41.040
<v Speaker 1>Anyway, um.

NOTE CONF {"raw":[100,100]}

00:06:43.470 --> 00:06:46.830
<v Speaker 1>I'm going to start with an example of arithmetic expressions.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:47.190 --> 00:06:50.040
<v Speaker 1>And they're going to be very simple arithmetic expressions.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:06:51.540 --> 00:06:57.120
<v Speaker 1>Um, That only involve numbers, addition and multiplication.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:06:57.120 --> 00:07:00.810
<v Speaker 1>And that's not because division and subtraction are harder.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:07:00.810 --> 00:07:04.350
<v Speaker 1>But just three three cases is simpler to explain than

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:04.350 --> 00:07:05.400
<v Speaker 1>five cases.

NOTE CONF {"raw":[100,100]}

00:07:05.400 --> 00:07:06.330
<v Speaker 1>It's the only reason.

NOTE CONF {"raw":[94,100,100,100]}

00:07:06.600 --> 00:07:07.350
<v Speaker 1>Um, okay.

NOTE CONF {"raw":[99,100]}

00:07:07.350 --> 00:07:10.710
<v Speaker 1>So we're going to represent simple arithmetic expressions.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:07:10.710 --> 00:07:16.650
<v Speaker 1>So things like two plus 7 or 3 times four

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:16.650 --> 00:07:18.840
<v Speaker 1>plus eight that sort of thing.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:07:18.840 --> 00:07:19.740
<v Speaker 1>Really simple.

NOTE CONF {"raw":[100,100]}

00:07:21.120 --> 00:07:21.780
<v Speaker 1>Okay.

NOTE CONF {"raw":[88]}

00:07:21.990 --> 00:07:25.140
<v Speaker 1>Um, and I'm going to do do this using an

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:25.140 --> 00:07:27.840
<v Speaker 1>algebraic data type called exp for expression.

NOTE CONF {"raw":[100,100,100,100,58,100,100]}

00:07:28.860 --> 00:07:29.520
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:07:29.520 --> 00:07:34.200
<v Speaker 1>And um, and it's defined uh, there are three alternatives.

NOTE CONF {"raw":[100,100,100,94,100,100,100,100,100,100]}

00:07:34.200 --> 00:07:39.120
<v Speaker 1>So the three alternatives, three constructors separated by vertical bars.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:40.530 --> 00:07:43.740
<v Speaker 1>And the three constructors are here.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:07:43.740 --> 00:07:51.550
<v Speaker 1>So lit add and mole Okay.

NOTE CONF {"raw":[100,34,99,100,97,100]}

00:07:51.550 --> 00:07:53.170
<v Speaker 1>Add stands for additions.

NOTE CONF {"raw":[84,100,100,62]}

00:07:53.200 --> 00:07:55.270
<v Speaker 1>Mole stands for multiplication.

NOTE CONF {"raw":[89,100,100,100]}

00:07:56.170 --> 00:07:58.300
<v Speaker 1>Litt stands for literal.

NOTE CONF {"raw":[92,100,100,81]}

00:07:58.300 --> 00:08:00.850
<v Speaker 1>So this is a kind of computer science jargon.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:08:01.180 --> 00:08:02.560
<v Speaker 1>Uh, literal.

NOTE CONF {"raw":[96,100]}

00:08:02.560 --> 00:08:06.940
<v Speaker 1>It's um, when you've got in a programming language, something

NOTE CONF {"raw":[100,72,100,100,100,97,100,100,100,100]}

00:08:06.940 --> 00:08:13.000
<v Speaker 1>like a, a number or a string, it's, it's a,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:13.000 --> 00:08:15.190
<v Speaker 1>it's a kind of thing in your program that doesn't

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:15.190 --> 00:08:18.040
<v Speaker 1>have to be interpreted it already.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:08:18.040 --> 00:08:19.480
<v Speaker 1>The meaning is what it says.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:08:19.480 --> 00:08:19.780
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:08:19.780 --> 00:08:22.690
<v Speaker 1>So a string, you don't have to interpret a string

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:22.690 --> 00:08:24.550
<v Speaker 1>in order to in order to have a value.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:08:24.550 --> 00:08:25.840
<v Speaker 1>It's already a value.

NOTE CONF {"raw":[100,100,100,100]}

00:08:25.840 --> 00:08:26.050
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:08:26.050 --> 00:08:27.250
<v Speaker 1>That's called a literal.

NOTE CONF {"raw":[100,100,100,100]}

00:08:27.700 --> 00:08:28.360
<v Speaker 1>Um, okay.

NOTE CONF {"raw":[100,100]}

00:08:28.360 --> 00:08:31.390
<v Speaker 1>In this case our literals are our numbers.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:08:31.390 --> 00:08:32.050
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:08:32.320 --> 00:08:34.870
<v Speaker 1>So we're going to be able to write, uh, one

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:34.870 --> 00:08:37.990
<v Speaker 1>of the kinds of expressions is a literal which is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:37.990 --> 00:08:39.070
<v Speaker 1>a which is an integer.

NOTE CONF {"raw":[100,100,100,100,100]}

00:08:39.070 --> 00:08:44.710
<v Speaker 1>So like five another one is going to be add

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,67]}

00:08:44.740 --> 00:08:46.930
<v Speaker 1>apply to two expressions okay.

NOTE CONF {"raw":[62,100,100,100,100]}

00:08:46.930 --> 00:08:49.000
<v Speaker 1>This is recursive okay.

NOTE CONF {"raw":[100,100,100,100]}

00:08:49.000 --> 00:08:52.180
<v Speaker 1>If you have two expressions like the literal three and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:52.180 --> 00:08:53.350
<v Speaker 1>the literal seven.

NOTE CONF {"raw":[100,100,100]}

00:08:53.380 --> 00:08:58.660
<v Speaker 1>You can you can apply ad to get the, the,

NOTE CONF {"raw":[100,100,100,100,100,67,100,100,100,100]}

00:08:58.660 --> 00:09:03.850
<v Speaker 1>the the expression um ad literal three and literal seven.

NOTE CONF {"raw":[100,100,100,100,97,100,100,100,100,100]}

00:09:04.960 --> 00:09:10.510
<v Speaker 1>Um and mul from multiplication similarly takes two expressions as

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:10.510 --> 00:09:12.010
<v Speaker 1>a result as arguments.

NOTE CONF {"raw":[91,100,100,100]}

00:09:12.670 --> 00:09:13.420
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:09:14.350 --> 00:09:14.710
<v Speaker 1>Um.

NOTE CONF {"raw":[100]}

00:09:18.640 --> 00:09:21.010
<v Speaker 1>And here are some examples down here.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:09:22.120 --> 00:09:22.930
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:09:23.140 --> 00:09:29.860
<v Speaker 1>Um E0 ad applied to to uh, to Subexpressions first

NOTE CONF {"raw":[100,52,99,85,100,100,67,100,100,100]}

00:09:29.860 --> 00:09:32.950
<v Speaker 1>one is is lit apply to two.

NOTE CONF {"raw":[100,100,100,100,73,100,100]}

00:09:32.950 --> 00:09:35.290
<v Speaker 1>So that's the number two as a literal.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:09:35.290 --> 00:09:37.990
<v Speaker 1>And the second is a more complicated one.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:09:37.990 --> 00:09:43.000
<v Speaker 1>That's multiplication applied to literal three and literal three.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:09:43.450 --> 00:09:44.080
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:09:44.080 --> 00:09:45.820
<v Speaker 1>So those are combined using ad.

NOTE CONF {"raw":[100,100,100,100,100,63]}

00:09:46.810 --> 00:09:49.150
<v Speaker 1>And the second E1.

NOTE CONF {"raw":[100,100,100,50]}

00:09:49.150 --> 00:09:55.510
<v Speaker 1>Here we've got multiplication or mul applied to two expressions.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,73,97]}

00:09:55.720 --> 00:10:01.060
<v Speaker 1>That one, I mean, the parentheses are telling me that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:01.060 --> 00:10:04.750
<v Speaker 1>the end of this expression is here and and that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,97,100]}

00:10:04.750 --> 00:10:05.290
<v Speaker 1>one.

NOTE CONF {"raw":[100]}

00:10:06.970 --> 00:10:07.750
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:10:10.900 --> 00:10:13.750
<v Speaker 1>So I'm calling these things expression trees.

NOTE CONF {"raw":[100,100,100,100,100,100,92]}

00:10:14.950 --> 00:10:16.780
<v Speaker 1>Um, I mean, I don't know if that's clear so

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:16.780 --> 00:10:16.990
<v Speaker 1>far.

NOTE CONF {"raw":[100]}

00:10:16.990 --> 00:10:18.670
<v Speaker 1>Let me try to explain some more.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:10:18.670 --> 00:10:21.130
<v Speaker 1>I'm calling these things expression trees.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:10:21.130 --> 00:10:23.260
<v Speaker 1>Why is why is that?

NOTE CONF {"raw":[100,100,100,100,100]}

00:10:24.040 --> 00:10:24.550
<v Speaker 1>Um.

NOTE CONF {"raw":[100]}

00:10:27.550 --> 00:10:27.910
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:10:27.910 --> 00:10:29.410
<v Speaker 1>I don't see any trees here.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:10:30.370 --> 00:10:31.030
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:10:31.390 --> 00:10:36.700
<v Speaker 1>Um, it's because this is a kind of a representation

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:36.700 --> 00:10:40.600
<v Speaker 1>in text of something that's naturally drawn as a as

NOTE CONF {"raw":[100,100,100,100,100,100,100,92,92,100]}

00:10:40.600 --> 00:10:41.260
<v Speaker 1>a tree.

NOTE CONF {"raw":[100,100]}

00:10:41.470 --> 00:10:43.180
<v Speaker 1>And I'll.

NOTE CONF {"raw":[100,100]}

00:10:43.180 --> 00:10:45.280
<v Speaker 1>I'll show you what I mean with e zero and

NOTE CONF {"raw":[100,100,100,100,100,100,100,86,86,100]}

00:10:45.460 --> 00:10:47.050
<v Speaker 1>E1 zero.

NOTE CONF {"raw":[90,97]}

00:10:48.020 --> 00:10:52.280
<v Speaker 1>Okay so E0 I'll draw it and then I'll explain

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:52.280 --> 00:10:52.730
<v Speaker 1>it.

NOTE CONF {"raw":[100]}

00:10:52.730 --> 00:10:58.880
<v Speaker 1>So it's ad applied to lit which is applied to

NOTE CONF {"raw":[100,92,85,100,100,100,100,100,100,100]}

00:10:58.880 --> 00:10:59.660
<v Speaker 1>two.

NOTE CONF {"raw":[100]}

00:10:59.930 --> 00:11:06.920
<v Speaker 1>And the other argument is mul applied to lit applied

NOTE CONF {"raw":[100,100,100,100,100,100,91,100,100,100]}

00:11:06.920 --> 00:11:11.210
<v Speaker 1>to three and lit applied to three.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:11:11.210 --> 00:11:13.280
<v Speaker 1>Again okay.

NOTE CONF {"raw":[100,100]}

00:11:13.490 --> 00:11:24.890
<v Speaker 1>And um e1 is um mul applied to um ad.

NOTE CONF {"raw":[100,100,88,100,100,95,100,100,100,69]}

00:11:30.770 --> 00:11:31.280
<v Speaker 1>Um.

NOTE CONF {"raw":[100]}

00:11:34.250 --> 00:11:34.880
<v Speaker 1>It's this.

NOTE CONF {"raw":[100,100]}

00:11:38.570 --> 00:11:39.320
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:11:40.490 --> 00:11:44.030
<v Speaker 1>Um, I mentioned trees once before in these lectures.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:11:44.030 --> 00:11:46.070
<v Speaker 1>I think it was when I was talking about, um.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:47.840 --> 00:11:49.040
<v Speaker 1>explaining fold.

NOTE CONF {"raw":[100,100]}

00:11:49.790 --> 00:11:54.500
<v Speaker 1>Okay, so trees and computer science, like trees in linguistics,

NOTE CONF {"raw":[100,100,100,56,100,100,100,100,87,100]}

00:11:54.710 --> 00:11:57.590
<v Speaker 1>um, grow, uh, upside down.

NOTE CONF {"raw":[100,100,100,100,100]}

00:11:57.590 --> 00:11:58.280
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:11:58.760 --> 00:12:02.720
<v Speaker 1>Um, you know, trees in, in the forest look like

NOTE CONF {"raw":[100,100,100,100,95,100,100,100,60,100]}

00:12:02.720 --> 00:12:03.320
<v Speaker 1>that.

NOTE CONF {"raw":[100]}

00:12:04.670 --> 00:12:05.360
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:12:05.360 --> 00:12:08.030
<v Speaker 1>The root is down here, and the branches are up

NOTE CONF {"raw":[100,99,100,100,100,100,100,100,100,100]}

00:12:08.030 --> 00:12:08.570
<v Speaker 1>there.

NOTE CONF {"raw":[100]}

00:12:08.600 --> 00:12:09.290
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:12:09.290 --> 00:12:11.360
<v Speaker 1>In computer science and linguistics.

NOTE CONF {"raw":[100,100,100,100,100]}

00:12:11.690 --> 00:12:15.410
<v Speaker 1>Um, so this is an taken from linguistics.

NOTE CONF {"raw":[100,100,100,89,38,100,100,100]}

00:12:15.410 --> 00:12:17.120
<v Speaker 1>The root is at the top.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:12:17.120 --> 00:12:20.960
<v Speaker 1>And and and and the branches grow downwards.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:12:20.960 --> 00:12:23.600
<v Speaker 1>And you call the things at the bottom leaves.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:12:24.020 --> 00:12:24.680
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:12:24.680 --> 00:12:27.800
<v Speaker 1>So you'll, you'll I'll be talking about trees more in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:27.800 --> 00:12:28.790
<v Speaker 1>these lectures.

NOTE CONF {"raw":[100,100]}

00:12:29.000 --> 00:12:32.780
<v Speaker 1>Um so now this but but so what's going on

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:32.780 --> 00:12:33.020
<v Speaker 1>here.

NOTE CONF {"raw":[100]}

00:12:33.020 --> 00:12:37.430
<v Speaker 1>So this here represents E zero okay.

NOTE CONF {"raw":[100,100,100,100,90,90,100]}

00:12:37.430 --> 00:12:41.510
<v Speaker 1>So it's, it's it's um there's E zero okay.

NOTE CONF {"raw":[100,100,100,100,100,100,96,96,100]}

00:12:41.510 --> 00:12:42.740
<v Speaker 1>So it's add.

NOTE CONF {"raw":[100,100,57]}

00:12:48.540 --> 00:12:48.840
<v Speaker 1>Ah.

NOTE CONF {"raw":[93]}

00:12:53.400 --> 00:12:57.600
<v Speaker 1>It's add apply to two subexpressions litt of two and

NOTE CONF {"raw":[94,75,87,100,100,100,49,100,100,100]}

00:12:57.600 --> 00:13:00.600
<v Speaker 1>mul apply to two subexpressions like that.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:13:00.600 --> 00:13:02.040
<v Speaker 1>Do you see the structure here?

NOTE CONF {"raw":[86,100,100,78,100,100]}

00:13:02.880 --> 00:13:03.750
<v Speaker 1>I hope.

NOTE CONF {"raw":[100,100]}

00:13:04.260 --> 00:13:04.860
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:13:04.860 --> 00:13:08.670
<v Speaker 1>And representing as a tree you see this.

NOTE CONF {"raw":[100,100,63,100,100,100,100,98]}

00:13:08.670 --> 00:13:09.960
<v Speaker 1>You can see the structure.

NOTE CONF {"raw":[100,100,100,74,100]}

00:13:09.960 --> 00:13:12.660
<v Speaker 1>So it's this, you know, the main thing is add.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,77]}

00:13:12.900 --> 00:13:15.090
<v Speaker 1>And then there are two subexpressions.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:13:15.510 --> 00:13:18.780
<v Speaker 1>And in the second subexpression the main thing is mul.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:18.780 --> 00:13:20.670
<v Speaker 1>And then there are two subexpressions.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:13:20.970 --> 00:13:23.400
<v Speaker 1>And you can see from the shape of this tree,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:24.630 --> 00:13:28.530
<v Speaker 1>although that it involves both of them involve add and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,96,100]}

00:13:28.530 --> 00:13:30.660
<v Speaker 1>mul, add and mul.

NOTE CONF {"raw":[100,100,98,100]}

00:13:30.810 --> 00:13:35.160
<v Speaker 1>Both of them involve lit two and three and and

NOTE CONF {"raw":[100,100,100,100,98,100,100,100,52,100]}

00:13:35.160 --> 00:13:36.180
<v Speaker 1>twice lit three.

NOTE CONF {"raw":[100,100,100]}

00:13:36.180 --> 00:13:38.460
<v Speaker 1>There's lit two, twice lit three.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:13:38.550 --> 00:13:40.590
<v Speaker 1>They have different structures okay.

NOTE CONF {"raw":[100,100,100,100,100]}

00:13:40.590 --> 00:13:43.590
<v Speaker 1>Which is you know, here you're adding together the result

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:43.590 --> 00:13:46.980
<v Speaker 1>of, um, you know, uniting together two and the result

NOTE CONF {"raw":[100,72,100,100,93,100,55,100,100,100]}

00:13:46.980 --> 00:13:48.270
<v Speaker 1>of multiplying three by three.

NOTE CONF {"raw":[100,100,100,100,100]}

00:13:48.270 --> 00:13:51.720
<v Speaker 1>And here you're multiplying the result of adding two and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:51.720 --> 00:13:55.110
<v Speaker 1>three and, um, and the number three.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:13:55.110 --> 00:13:55.530
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:13:55.530 --> 00:14:02.100
<v Speaker 1>So, uh, the structure makes these things represent completely different,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:02.100 --> 00:14:05.220
<v Speaker 1>different expressions, even though the components are the same.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:14:05.220 --> 00:14:05.820
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:14:06.870 --> 00:14:08.760
<v Speaker 1>And that's why it's nice to look at them like

NOTE CONF {"raw":[90,100,100,100,100,100,100,100,100,100]}

00:14:08.760 --> 00:14:09.240
<v Speaker 1>that.

NOTE CONF {"raw":[100]}

00:14:09.240 --> 00:14:09.720
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:14:09.720 --> 00:14:10.530
<v Speaker 1>Of course.

NOTE CONF {"raw":[100,100]}

00:14:10.530 --> 00:14:13.170
<v Speaker 1>These trees, these are just my way of drawing this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:13.170 --> 00:14:15.870
<v Speaker 1>for conceptual purposes in the computer.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:14:15.870 --> 00:14:20.460
<v Speaker 1>It's, um, you know, lit add expressions and so forth.

NOTE CONF {"raw":[100,100,100,100,91,85,100,100,100,100]}

00:14:20.640 --> 00:14:23.070
<v Speaker 1>Um, and the parentheses are used to give a kind

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:23.070 --> 00:14:25.650
<v Speaker 1>of textual representation of this.

NOTE CONF {"raw":[100,98,100,100,100]}

00:14:25.650 --> 00:14:26.250
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:14:26.250 --> 00:14:29.160
<v Speaker 1>Is that kind of clear, I hope.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:14:29.850 --> 00:14:32.490
<v Speaker 1>Um, right.

NOTE CONF {"raw":[100,100]}

00:14:34.350 --> 00:14:35.820
<v Speaker 1>What else do I want to say?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:14:37.620 --> 00:14:37.980
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:14:37.980 --> 00:14:39.780
<v Speaker 1>Two expressions with different structure.

NOTE CONF {"raw":[100,100,100,100,100]}

00:14:40.200 --> 00:14:43.050
<v Speaker 1>Um, I should also just say here I said in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:43.060 --> 00:14:46.000
<v Speaker 1>my other examples that I would be writing some magic

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:46.000 --> 00:14:47.590
<v Speaker 1>words at the end deriving.

NOTE CONF {"raw":[100,100,100,100,97]}

00:14:48.100 --> 00:14:50.920
<v Speaker 1>In the other examples, it was deriving EQ and show.

NOTE CONF {"raw":[100,100,100,100,38,100,100,81,100,100]}

00:14:51.190 --> 00:14:54.700
<v Speaker 1>Okay, I'm using different magic words here because I'm going

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:54.700 --> 00:14:57.610
<v Speaker 1>to not use the built in show function, but I'm

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:57.610 --> 00:15:00.700
<v Speaker 1>going to define one myself because it gives me a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:00.700 --> 00:15:03.760
<v Speaker 1>nicer, a nicer way of printing out these things.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:15:05.500 --> 00:15:06.220
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:15:06.220 --> 00:15:08.590
<v Speaker 1>And then I could finally say, I mean, there's another

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:08.590 --> 00:15:10.900
<v Speaker 1>way of representing these things, of course.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:15:11.140 --> 00:15:16.240
<v Speaker 1>Um, you know, uh, well, we'll see it in a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:16.240 --> 00:15:17.230
<v Speaker 1>second, actually.

NOTE CONF {"raw":[100,100]}

00:15:17.380 --> 00:15:17.680
<v Speaker 1>Um.

NOTE CONF {"raw":[100]}

00:15:23.260 --> 00:15:25.450
<v Speaker 1>Uh, okay.

NOTE CONF {"raw":[100,100]}

00:15:26.410 --> 00:15:30.490
<v Speaker 1>Here is how you could represent that in normal kind

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:30.490 --> 00:15:34.300
<v Speaker 1>of mathematical, um, notation.

NOTE CONF {"raw":[100,100,100,100]}

00:15:37.540 --> 00:15:37.900
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:15:37.900 --> 00:15:39.580
<v Speaker 1>And this one would be, um.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:15:42.310 --> 00:15:46.270
<v Speaker 1>Two plus three times three.

NOTE CONF {"raw":[100,100,100,100,100]}

00:15:47.140 --> 00:15:47.410
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:15:47.410 --> 00:15:49.540
<v Speaker 1>Whether the parentheses around it or not doesn't matter.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:15:49.540 --> 00:15:51.100
<v Speaker 1>This is the way that they happen to be printed

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:51.100 --> 00:15:54.130
<v Speaker 1>out by my show function which I just skipped over.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:54.220 --> 00:15:54.700
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:15:54.700 --> 00:16:00.580
<v Speaker 1>So you could you could manipulate expressions as strings.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:16:01.300 --> 00:16:01.720
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:16:01.720 --> 00:16:04.450
<v Speaker 1>We possible to represent them as strings and to manipulate

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:04.450 --> 00:16:05.950
<v Speaker 1>them as strings and do all the things that I'm

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:05.950 --> 00:16:08.290
<v Speaker 1>going to do as strings.

NOTE CONF {"raw":[100,100,100,100,100]}

00:16:08.290 --> 00:16:10.960
<v Speaker 1>But it's a lot more work because when they're in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:10.960 --> 00:16:13.990
<v Speaker 1>this form, you have to kind of figure out by

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:13.990 --> 00:16:16.300
<v Speaker 1>looking, you know, where the parentheses and where the matching

NOTE CONF {"raw":[100,97,97,100,100,100,100,100,100,100]}

00:16:16.300 --> 00:16:17.110
<v Speaker 1>parentheses and so forth.

NOTE CONF {"raw":[100,100,100,100]}

00:16:17.110 --> 00:16:19.990
<v Speaker 1>You have to figure out where subexpressions begin and end

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:19.990 --> 00:16:20.860
<v Speaker 1>and so forth.

NOTE CONF {"raw":[100,100,100]}

00:16:20.860 --> 00:16:23.800
<v Speaker 1>When they're in, when they're in this form.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:16:24.100 --> 00:16:24.940
<v Speaker 1>Wait a minute.

NOTE CONF {"raw":[100,100,100]}

00:16:25.150 --> 00:16:27.370
<v Speaker 1>Why is this not letting me go backwards?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:16:33.130 --> 00:16:33.370
<v Speaker 1>Hmm.

NOTE CONF {"raw":[100]}

00:16:34.120 --> 00:16:34.900
<v Speaker 1>Interesting.

NOTE CONF {"raw":[97]}

00:16:35.320 --> 00:16:39.700
<v Speaker 1>Um, when they're in the form like this, with these,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:39.730 --> 00:16:42.020
<v Speaker 1>with this data type, this outbreak data type.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:16:42.020 --> 00:16:43.280
<v Speaker 1>It's easy to to.

NOTE CONF {"raw":[100,100,94,100]}

00:16:43.310 --> 00:16:45.560
<v Speaker 1>To like take them apart and put them together and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:45.560 --> 00:16:48.020
<v Speaker 1>do things with the components okay.

NOTE CONF {"raw":[100,100,100,100,100,86]}

00:16:48.110 --> 00:16:49.220
<v Speaker 1>That's the reason.

NOTE CONF {"raw":[100,100,100]}

00:16:49.580 --> 00:16:57.380
<v Speaker 1>So that's representing arithmetic expressions as an algebraic data type.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:57.380 --> 00:16:59.420
<v Speaker 1>And now once I have this representation I can write

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:59.420 --> 00:17:01.130
<v Speaker 1>functions that do things with them.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:17:01.610 --> 00:17:02.210
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:17:02.210 --> 00:17:08.780
<v Speaker 1>For example this first this first function evaluates them okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:08.780 --> 00:17:13.250
<v Speaker 1>So evaluating something like um, you know, uh, two plus

NOTE CONF {"raw":[100,100,100,100,100,100,100,86,100,100]}

00:17:13.250 --> 00:17:14.390
<v Speaker 1>three times three.

NOTE CONF {"raw":[100,100,100]}

00:17:14.839 --> 00:17:16.310
<v Speaker 1>You know, it's a simple computation.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:17:16.310 --> 00:17:17.480
<v Speaker 1>The answer is 11.

NOTE CONF {"raw":[100,100,100,100]}

00:17:18.470 --> 00:17:19.130
<v Speaker 1>Okay.

NOTE CONF {"raw":[85]}

00:17:19.550 --> 00:17:21.680
<v Speaker 1>Um, here's the code for doing that.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:17:21.680 --> 00:17:23.870
<v Speaker 1>And then the other one that I have here is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:23.870 --> 00:17:27.620
<v Speaker 1>just for, um, uh, turning them into strings in a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:27.620 --> 00:17:29.780
<v Speaker 1>form like I showed you a second ago.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:17:30.050 --> 00:17:31.670
<v Speaker 1>Um, you know, like this.

NOTE CONF {"raw":[100,100,100,100,100]}

00:17:32.000 --> 00:17:34.100
<v Speaker 1>And that's what I'm going to use for my show

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:34.100 --> 00:17:34.910
<v Speaker 1>function.

NOTE CONF {"raw":[100]}

00:17:35.300 --> 00:17:39.470
<v Speaker 1>Um, okay, so let me look at this.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:17:39.590 --> 00:17:40.400
<v Speaker 1>At this.

NOTE CONF {"raw":[100,100]}

00:17:40.610 --> 00:17:44.270
<v Speaker 1>The code for this expression evaluation thing okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,97]}

00:17:44.270 --> 00:17:47.720
<v Speaker 1>So this is a function which takes syntax.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:17:47.720 --> 00:17:51.260
<v Speaker 1>This is exactly what I was talking before about syntax

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:51.260 --> 00:17:53.060
<v Speaker 1>turning into meaning okay.

NOTE CONF {"raw":[100,100,100,100]}

00:17:53.060 --> 00:17:55.760
<v Speaker 1>Interpretation of the syntax.

NOTE CONF {"raw":[100,100,100,100]}

00:17:55.760 --> 00:17:59.090
<v Speaker 1>In this case the syntax is arithmetic expressions with numbers

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:59.090 --> 00:18:03.200
<v Speaker 1>in them and turning them into meaning or interpreting them

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:03.200 --> 00:18:06.770
<v Speaker 1>is is doing the actual computation okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:18:09.020 --> 00:18:10.760
<v Speaker 1>And there are three cases.

NOTE CONF {"raw":[100,100,100,100,100]}

00:18:10.760 --> 00:18:12.620
<v Speaker 1>So I you know, because I've defined this as an

NOTE CONF {"raw":[100,87,100,100,100,100,100,100,100,100]}

00:18:12.620 --> 00:18:16.970
<v Speaker 1>algebraic data type, I can write pattern matching.

NOTE CONF {"raw":[100,93,93,100,100,100,100,100]}

00:18:16.970 --> 00:18:19.280
<v Speaker 1>Um, uh, you know case.

NOTE CONF {"raw":[100,95,100,100,100]}

00:18:20.150 --> 00:18:20.600
<v Speaker 1>Yeah.

NOTE CONF {"raw":[100]}

00:18:20.600 --> 00:18:21.230
<v Speaker 1>Pattern matching.

NOTE CONF {"raw":[100,100]}

00:18:21.230 --> 00:18:23.030
<v Speaker 1>Definition of functions by cases.

NOTE CONF {"raw":[100,100,100,100,100]}

00:18:23.030 --> 00:18:26.930
<v Speaker 1>There are three cases because there are three, um, three

NOTE CONF {"raw":[100,100,100,100,100,100,55,100,100,100]}

00:18:26.990 --> 00:18:28.790
<v Speaker 1>um constructors.

NOTE CONF {"raw":[96,100]}

00:18:28.790 --> 00:18:30.830
<v Speaker 1>And so a case for each constructor.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:18:32.330 --> 00:18:37.550
<v Speaker 1>And um, this code is so I mean, to me,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:37.550 --> 00:18:39.200
<v Speaker 1>I don't know what it looks like to you.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:18:39.230 --> 00:18:42.320
<v Speaker 1>To me, this code is so simple that it's almost

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:42.320 --> 00:18:44.360
<v Speaker 1>hard to see what it's doing.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:18:44.900 --> 00:18:45.650
<v Speaker 1>Okay.

NOTE CONF {"raw":[81]}

00:18:46.250 --> 00:18:46.580
<v Speaker 1>Um.

NOTE CONF {"raw":[100]}

00:18:50.720 --> 00:18:53.480
<v Speaker 1>A tip is that the left hand side.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:18:53.480 --> 00:18:53.720
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:18:53.720 --> 00:18:56.030
<v Speaker 1>This is a function from expressions to integers.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:18:56.030 --> 00:18:57.890
<v Speaker 1>So this is the level of syntax.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:18:58.070 --> 00:19:02.690
<v Speaker 1>And this is the level of meaning or semantics okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:02.690 --> 00:19:07.340
<v Speaker 1>So everything on the left hand side here is syntax.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:07.820 --> 00:19:11.720
<v Speaker 1>So these are things from this world of expressions.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:19:11.720 --> 00:19:15.470
<v Speaker 1>And everything on the right hand side is is in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:15.470 --> 00:19:19.370
<v Speaker 1>the world of meanings or semantics in this case integers.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:19.370 --> 00:19:19.700
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:19:19.700 --> 00:19:22.790
<v Speaker 1>So everything over here is going to be calculations on

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:22.790 --> 00:19:23.570
<v Speaker 1>integers.

NOTE CONF {"raw":[100]}

00:19:25.340 --> 00:19:26.060
<v Speaker 1>All right.

NOTE CONF {"raw":[97,97]}

00:19:26.060 --> 00:19:29.270
<v Speaker 1>So simplest case actually.

NOTE CONF {"raw":[100,100,100,100]}

00:19:29.270 --> 00:19:32.570
<v Speaker 1>Well simplest case is if you've got a literal integer

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:32.570 --> 00:19:35.840
<v Speaker 1>then the evaluation of that is simply that integer.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:19:35.840 --> 00:19:36.860
<v Speaker 1>Whatever it is okay.

NOTE CONF {"raw":[100,100,100,100]}

00:19:36.860 --> 00:19:39.540
<v Speaker 1>The the the evaluating lit of three.

NOTE CONF {"raw":[100,100,100,100,77,100,100]}

00:19:39.540 --> 00:19:40.860
<v Speaker 1>The answer is three.

NOTE CONF {"raw":[100,100,100,100]}

00:19:41.400 --> 00:19:42.150
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:19:42.570 --> 00:19:46.710
<v Speaker 1>Not actually doing anything except um, taking off the constructor.

NOTE CONF {"raw":[100,100,100,100,100,96,100,100,100,100]}

00:19:46.710 --> 00:19:47.160
<v Speaker 1>Lit.

NOTE CONF {"raw":[100]}

00:19:48.930 --> 00:19:49.650
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:19:49.650 --> 00:19:53.190
<v Speaker 1>The more interesting cases are uh, add and mul and

NOTE CONF {"raw":[100,100,100,100,100,57,97,70,93,100]}

00:19:53.190 --> 00:19:56.730
<v Speaker 1>they are the same except for the constructor add here,

NOTE CONF {"raw":[84,84,100,100,100,100,100,100,100,100]}

00:19:56.730 --> 00:19:59.310
<v Speaker 1>mul here, and on the right hand side plus and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:59.310 --> 00:20:00.390
<v Speaker 1>times okay.

NOTE CONF {"raw":[100,100]}

00:20:00.390 --> 00:20:02.010
<v Speaker 1>Plus for add obviously.

NOTE CONF {"raw":[100,92,100,100]}

00:20:02.010 --> 00:20:02.790
<v Speaker 1>Right.

NOTE CONF {"raw":[100]}

00:20:02.790 --> 00:20:07.830
<v Speaker 1>And so in order to evaluate uh the expression which

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:07.830 --> 00:20:12.180
<v Speaker 1>is you know, add e to F, you evaluate e.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:14.610 --> 00:20:17.640
<v Speaker 1>That's a recursive call to the eval exp function.

NOTE CONF {"raw":[100,100,100,100,100,100,100,85,100]}

00:20:17.730 --> 00:20:18.480
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:20:19.260 --> 00:20:23.340
<v Speaker 1>And you evaluate f another recursive call.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:20:24.540 --> 00:20:26.250
<v Speaker 1>And then you add those together.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:20:26.250 --> 00:20:29.310
<v Speaker 1>So this gives you this gives you an integer.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:20:30.720 --> 00:20:32.250
<v Speaker 1>This gives you an integer.

NOTE CONF {"raw":[100,100,100,100,100]}

00:20:33.240 --> 00:20:34.110
<v Speaker 1>So you got two integers.

NOTE CONF {"raw":[88,86,100,100,100]}

00:20:34.110 --> 00:20:34.800
<v Speaker 1>You add them together.

NOTE CONF {"raw":[100,100,100,100]}

00:20:34.800 --> 00:20:35.850
<v Speaker 1>And that's the answer.

NOTE CONF {"raw":[100,100,100,100]}

00:20:38.220 --> 00:20:41.970
<v Speaker 1>Okay, let's just look at that.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:20:44.550 --> 00:20:45.900
<v Speaker 1>On, um.

NOTE CONF {"raw":[100,100]}

00:20:49.620 --> 00:20:50.550
<v Speaker 1>Over here.

NOTE CONF {"raw":[100,100]}

00:20:51.480 --> 00:20:51.810
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:20:51.810 --> 00:20:55.170
<v Speaker 1>If I want to add if I want to evaluate

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:55.170 --> 00:20:58.200
<v Speaker 1>this, this, um, this is remember, this is a representation

NOTE CONF {"raw":[100,100,100,100,60,100,100,100,98,100]}

00:20:58.200 --> 00:21:01.380
<v Speaker 1>of what I had before it was called E1.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:21:01.800 --> 00:21:02.220
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:21:02.340 --> 00:21:02.580
<v Speaker 1>Sorry.

NOTE CONF {"raw":[100]}

00:21:02.580 --> 00:21:03.360
<v Speaker 1>E0.

NOTE CONF {"raw":[60]}

00:21:03.600 --> 00:21:04.230
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:21:04.950 --> 00:21:06.240
<v Speaker 1>Just drawn as a tree.

NOTE CONF {"raw":[100,100,100,100,100]}

00:21:06.810 --> 00:21:10.470
<v Speaker 1>If I want to evaluate add lit two and mul

NOTE CONF {"raw":[100,100,100,100,100,97,100,86,100,54]}

00:21:10.470 --> 00:21:14.130
<v Speaker 1>lit three and lit three, what it tells me is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:15.990 --> 00:21:18.240
<v Speaker 1>apply eval exp to this thing.

NOTE CONF {"raw":[100,72,58,100,100,100]}

00:21:19.800 --> 00:21:20.250
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:21:20.250 --> 00:21:25.110
<v Speaker 1>The answer is going to be two and apply eval

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,98]}

00:21:25.380 --> 00:21:26.340
<v Speaker 1>to this thing.

NOTE CONF {"raw":[100,100,100]}

00:21:27.750 --> 00:21:33.180
<v Speaker 1>The result is going to be what anybody listening.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:21:33.730 --> 00:21:35.920
<v Speaker 1>Six Mo.

NOTE CONF {"raw":[85,72]}

00:21:35.950 --> 00:21:36.610
<v Speaker 1>Three times.

NOTE CONF {"raw":[100,100]}

00:21:36.610 --> 00:21:37.210
<v Speaker 1>Three.

NOTE CONF {"raw":[100]}

00:21:38.170 --> 00:21:38.800
<v Speaker 1>Anybody?

NOTE CONF {"raw":[81]}

00:21:40.120 --> 00:21:40.840
<v Speaker 1>Nine.

NOTE CONF {"raw":[100]}

00:21:40.840 --> 00:21:41.380
<v Speaker 1>Very good.

NOTE CONF {"raw":[100,100]}

00:21:41.380 --> 00:21:41.830
<v Speaker 1>Yes.

NOTE CONF {"raw":[100]}

00:21:41.860 --> 00:21:42.220
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:21:42.220 --> 00:21:45.430
<v Speaker 1>Two plus nine is 11.

NOTE CONF {"raw":[100,100,100,100,100]}

00:21:45.430 --> 00:21:45.970
<v Speaker 1>Right.

NOTE CONF {"raw":[100]}

00:21:45.970 --> 00:21:48.640
<v Speaker 1>So the answer is going to be 11 okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,86]}

00:21:48.730 --> 00:21:49.600
<v Speaker 1>Evaluate.

NOTE CONF {"raw":[100]}

00:21:49.600 --> 00:21:52.840
<v Speaker 1>Evaluate the left hand subtree to get two.

NOTE CONF {"raw":[100,100,100,100,100,100,100,92]}

00:21:52.840 --> 00:21:55.450
<v Speaker 1>Evaluate the right hand subtree to get nine.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:21:55.450 --> 00:21:58.120
<v Speaker 1>Add them together to get 11 okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:21:58.450 --> 00:22:02.140
<v Speaker 1>And then the same thing the same thing here except

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:02.140 --> 00:22:04.660
<v Speaker 1>we're multiplying okay.

NOTE CONF {"raw":[100,100,100]}

00:22:04.660 --> 00:22:07.690
<v Speaker 1>So we we evaluate the left hand.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:22:08.110 --> 00:22:09.880
<v Speaker 1>Uh subexpression.

NOTE CONF {"raw":[90,100]}

00:22:09.880 --> 00:22:12.220
<v Speaker 1>We evaluate the right hand Subexpression.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:22:13.180 --> 00:22:15.280
<v Speaker 1>And we multiply them to get the results.

NOTE CONF {"raw":[100,100,100,100,100,100,100,54]}

00:22:15.280 --> 00:22:19.420
<v Speaker 1>So this would apply to the second example up here

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:20.200 --> 00:22:20.890
<v Speaker 1>okay.

NOTE CONF {"raw":[100]}

00:22:20.890 --> 00:22:24.940
<v Speaker 1>We want to evaluate this, uh this value here this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:24.940 --> 00:22:27.370
<v Speaker 1>this expression tree okay.

NOTE CONF {"raw":[100,100,100,100]}

00:22:27.370 --> 00:22:30.130
<v Speaker 1>Again this is E1 which you can write using these

NOTE CONF {"raw":[100,100,100,73,100,100,100,97,100,100]}

00:22:30.130 --> 00:22:31.090
<v Speaker 1>constructors.

NOTE CONF {"raw":[100]}

00:22:31.090 --> 00:22:34.810
<v Speaker 1>So mul applied to to this and this.

NOTE CONF {"raw":[100,100,74,100,100,100,100,100]}

00:22:34.840 --> 00:22:35.110
<v Speaker 1>Okay.

NOTE CONF {"raw":[91]}

00:22:35.110 --> 00:22:39.010
<v Speaker 1>So we evaluate this add of of of lit two

NOTE CONF {"raw":[100,100,100,100,62,100,100,100,100,100]}

00:22:39.010 --> 00:22:40.870
<v Speaker 1>and lit three is.

NOTE CONF {"raw":[100,100,100,100]}

00:22:43.420 --> 00:22:44.050
<v Speaker 1>Anybody.

NOTE CONF {"raw":[100]}

00:22:44.920 --> 00:22:45.730
<v Speaker 1>Five.

NOTE CONF {"raw":[100]}

00:22:45.730 --> 00:22:51.550
<v Speaker 1>Yes and five multiplied by the result of evaluating this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:51.550 --> 00:22:56.290
<v Speaker 1>is three five times three is 15 okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:22:56.800 --> 00:22:59.560
<v Speaker 1>And you know so I explained that just looking at

NOTE CONF {"raw":[100,100,100,100,100,91,100,100,100,100]}

00:22:59.560 --> 00:23:02.860
<v Speaker 1>the top, at the top, um, thing the so-called root

NOTE CONF {"raw":[100,100,100,100,100,73,100,100,95,100]}

00:23:02.860 --> 00:23:03.760
<v Speaker 1>of this tree.

NOTE CONF {"raw":[100,100,100]}

00:23:03.760 --> 00:23:06.160
<v Speaker 1>But you know, the way that I get.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:23:08.650 --> 00:23:11.530
<v Speaker 1>The result of evaluating this is again, it's this it's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,96,100]}

00:23:11.530 --> 00:23:12.580
<v Speaker 1>the third case here.

NOTE CONF {"raw":[100,100,100,100]}

00:23:12.580 --> 00:23:13.960
<v Speaker 1>Multiply to three.

NOTE CONF {"raw":[57,100,100]}

00:23:13.960 --> 00:23:17.590
<v Speaker 1>And and, you know, multiplied to the result of evaluating

NOTE CONF {"raw":[100,100,100,100,94,100,100,100,100,100]}

00:23:17.590 --> 00:23:20.200
<v Speaker 1>this and the result of validating that is nine.

NOTE CONF {"raw":[100,100,97,100,100,98,100,100,100]}

00:23:20.200 --> 00:23:22.570
<v Speaker 1>That's how I got the nine okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:23:22.810 --> 00:23:24.250
<v Speaker 1>So um.

NOTE CONF {"raw":[100,100]}

00:23:27.700 --> 00:23:29.050
<v Speaker 1>Does that make sense.

NOTE CONF {"raw":[100,100,100,100]}

00:23:31.210 --> 00:23:33.920
<v Speaker 1>And I mean, this one is so it's so, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:34.010 --> 00:23:38.420
<v Speaker 1>it does so, so little that, um, you know, just

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:38.420 --> 00:23:41.900
<v Speaker 1>it just it looks at the, the, the literal and

NOTE CONF {"raw":[98,100,100,100,100,100,100,100,100,100]}

00:23:41.900 --> 00:23:44.840
<v Speaker 1>the, the result is n so, you know, the, the

NOTE CONF {"raw":[100,100,100,100,93,100,100,100,100,100]}

00:23:44.840 --> 00:23:49.640
<v Speaker 1>result of evaluating this is two because that's the number

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:49.640 --> 00:23:52.940
<v Speaker 1>that's in that's just packaged up as a, as a

NOTE CONF {"raw":[100,100,95,100,100,100,100,100,100,100]}

00:23:52.940 --> 00:23:54.710
<v Speaker 1>literal as syntax.

NOTE CONF {"raw":[100,100,100]}

00:23:54.710 --> 00:23:55.190
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:23:55.940 --> 00:23:57.410
<v Speaker 1>Um okay.

NOTE CONF {"raw":[100,100]}

00:23:57.410 --> 00:24:00.470
<v Speaker 1>So the answer to the E zero was evaluated to

NOTE CONF {"raw":[100,100,100,100,70,97,97,100,100,100]}

00:24:00.470 --> 00:24:03.890
<v Speaker 1>11 and the other one evaluated to um 15.

NOTE CONF {"raw":[100,100,100,100,100,100,100,98,100]}

00:24:03.890 --> 00:24:07.400
<v Speaker 1>And in fact that's what it does if I type

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:07.400 --> 00:24:12.020
<v Speaker 1>this into Haskell and evaluate those two expressions okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:24:21.260 --> 00:24:21.860
<v Speaker 1>Oh by the way.

NOTE CONF {"raw":[100,100,100,100]}

00:24:21.860 --> 00:24:24.230
<v Speaker 1>So I said okay, I didn't I didn't go over

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:24.230 --> 00:24:29.330
<v Speaker 1>the code, but um, here is code that, you know,

NOTE CONF {"raw":[100,100,100,100,56,56,100,100,100,100]}

00:24:29.330 --> 00:24:34.520
<v Speaker 1>turns, um, Expressions into strings in a form like this.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:34.550 --> 00:24:37.880
<v Speaker 1>If I use the default show function, which I would

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:37.880 --> 00:24:41.150
<v Speaker 1>get if I if I typed here instead of deriving

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:41.150 --> 00:24:41.600
<v Speaker 1>EQ.

NOTE CONF {"raw":[86]}

00:24:41.600 --> 00:24:43.340
<v Speaker 1>So this only gives me equality.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:24:43.340 --> 00:24:46.250
<v Speaker 1>If I said deriving show EQ, then I would get

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:46.250 --> 00:24:48.920
<v Speaker 1>a show function as well for converting these things into

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:48.920 --> 00:24:52.880
<v Speaker 1>strings, and what they would look like would be exactly.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:53.090 --> 00:24:53.420
<v Speaker 1>Um.

NOTE CONF {"raw":[100]}

00:24:53.420 --> 00:24:54.650
<v Speaker 1>Like what?

NOTE CONF {"raw":[100,100]}

00:24:55.100 --> 00:24:58.040
<v Speaker 1>What you had here, minus the highlighting.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:24:58.040 --> 00:24:58.640
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:24:59.120 --> 00:25:03.710
<v Speaker 1>You know, would be just using the constructors to display

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:03.710 --> 00:25:08.480
<v Speaker 1>the values, which is not quite as readable as, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:09.170 --> 00:25:10.460
<v Speaker 1>as something like that.

NOTE CONF {"raw":[100,100,100,100]}

00:25:11.360 --> 00:25:12.020
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:25:22.280 --> 00:25:23.330
<v Speaker 1>Okay.

NOTE CONF {"raw":[96]}

00:25:23.330 --> 00:25:25.340
<v Speaker 1>Let's see, what else do I have here?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:25:25.670 --> 00:25:28.820
<v Speaker 1>Um, is that is that so far making sense?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:25:28.820 --> 00:25:29.210
<v Speaker 1>Yeah.

NOTE CONF {"raw":[100]}

00:25:31.110 --> 00:25:33.000
<v Speaker 2>The function evil.

NOTE CONF {"raw":[100,100,67]}

00:25:34.800 --> 00:25:39.870
<v Speaker 2>Evil X is recalling um, in definition of Adam.

NOTE CONF {"raw":[67,70,100,100,100,100,100,100,31]}

00:25:39.870 --> 00:25:40.200
<v Speaker 2>Yeah.

NOTE CONF {"raw":[84]}

00:25:41.460 --> 00:25:46.590
<v Speaker 2>Uh, so when evil acts is recalled, it's not mentioning.

NOTE CONF {"raw":[51,99,100,100,78,100,100,100,100,100]}

00:25:46.590 --> 00:25:47.700
<v Speaker 2>Well, you can't see it now.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:25:47.700 --> 00:25:48.570
<v Speaker 1>It's not on the screen.

NOTE CONF {"raw":[100,100,100,99,100]}

00:25:48.600 --> 00:25:50.670
<v Speaker 2>It's not mentioning the lead.

NOTE CONF {"raw":[100,94,100,100,100]}

00:25:50.670 --> 00:25:53.880
<v Speaker 2>So lead is not that significant.

NOTE CONF {"raw":[100,99,100,100,100,100]}

00:25:54.270 --> 00:25:55.140
<v Speaker 1>It's not mentioning.

NOTE CONF {"raw":[100,100,100]}

00:25:55.140 --> 00:25:55.530
<v Speaker 2>What?

NOTE CONF {"raw":[100]}

00:25:55.530 --> 00:25:59.760
<v Speaker 2>So when it's recalling evil x e in the definition

NOTE CONF {"raw":[100,100,100,100,99,43,64,100,100,100]}

00:25:59.760 --> 00:26:01.860
<v Speaker 2>of ad, it's not mentioning lead.

NOTE CONF {"raw":[100,96,100,100,100,100]}

00:26:01.860 --> 00:26:05.220
<v Speaker 2>So lead is not that significant or how does it

NOTE CONF {"raw":[100,96,100,100,100,100,100,100,100,100]}

00:26:05.220 --> 00:26:05.880
<v Speaker 2>work.

NOTE CONF {"raw":[100]}

00:26:06.000 --> 00:26:06.330
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:26:06.330 --> 00:26:09.450
<v Speaker 1>So lit lit I mean in the case that's about

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:09.450 --> 00:26:14.580
<v Speaker 1>lit that says everything you say about lit okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:26:14.580 --> 00:26:19.200
<v Speaker 1>The case about AD doesn't have to say anything about

NOTE CONF {"raw":[100,100,100,95,100,100,100,100,100,100]}

00:26:19.200 --> 00:26:19.620
<v Speaker 1>it.

NOTE CONF {"raw":[100]}

00:26:20.070 --> 00:26:21.030
<v Speaker 1>Uh about lit.

NOTE CONF {"raw":[70,100,100]}

00:26:21.030 --> 00:26:21.630
<v Speaker 1>Right.

NOTE CONF {"raw":[100]}

00:26:21.930 --> 00:26:22.350
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:26:22.350 --> 00:26:27.690
<v Speaker 1>Because because when it evaluates E, whatever E is, it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,66]}

00:26:27.690 --> 00:26:29.640
<v Speaker 1>will give you a value which is an integer.

NOTE CONF {"raw":[66,100,100,100,100,100,100,100,100]}

00:26:30.270 --> 00:26:35.430
<v Speaker 3>So leave an x and it's the same there equivalent.

NOTE CONF {"raw":[100,97,98,100,99,91,100,100,100,100]}

00:26:35.430 --> 00:26:36.390
<v Speaker 1>To lit.

NOTE CONF {"raw":[98,100]}

00:26:37.650 --> 00:26:42.090
<v Speaker 2>And x, and is there equivalent to each other.

NOTE CONF {"raw":[99,98,19,100,81,100,100,100,100]}

00:26:45.090 --> 00:26:45.420
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:26:45.450 --> 00:26:49.770
<v Speaker 1>Eval eval x of lit n is the same as

NOTE CONF {"raw":[100,100,94,100,100,100,100,100,100,100]}

00:26:49.770 --> 00:26:50.280
<v Speaker 1>n.

NOTE CONF {"raw":[100]}

00:26:50.310 --> 00:26:52.050
<v Speaker 1>Like the equation says.

NOTE CONF {"raw":[100,100,100,100]}

00:26:52.050 --> 00:26:53.130
<v Speaker 1>Does that make sense?

NOTE CONF {"raw":[100,100,100,100]}

00:26:53.250 --> 00:26:54.210
<v Speaker 1>Maybe not.

NOTE CONF {"raw":[100,100]}

00:26:55.290 --> 00:26:55.830
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:26:55.830 --> 00:26:56.970
<v Speaker 1>The thing on the left.

NOTE CONF {"raw":[100,100,100,100,100]}

00:26:56.970 --> 00:26:58.680
<v Speaker 1>The thing on the left is an expression.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:26:58.770 --> 00:26:59.010
<v Speaker 1>Yeah.

NOTE CONF {"raw":[79]}

00:26:59.670 --> 00:27:00.030
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:27:00.030 --> 00:27:02.220
<v Speaker 1>One of the cases of an expression is lit of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:02.220 --> 00:27:02.730
<v Speaker 1>int.

NOTE CONF {"raw":[100]}

00:27:03.330 --> 00:27:03.810
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:27:03.810 --> 00:27:06.210
<v Speaker 1>The int in this case is is n whatever n

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:06.240 --> 00:27:07.110
<v Speaker 1>is okay.

NOTE CONF {"raw":[100,100]}

00:27:07.140 --> 00:27:09.060
<v Speaker 1>The thing on the right is an integer.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:27:09.630 --> 00:27:10.140
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:27:10.140 --> 00:27:12.120
<v Speaker 1>So uh n is an integer.

NOTE CONF {"raw":[98,60,100,100,100,100]}

00:27:12.120 --> 00:27:13.830
<v Speaker 1>So that's okay.

NOTE CONF {"raw":[100,100,99]}

00:27:14.850 --> 00:27:17.610
<v Speaker 1>It's kind of it's kind of confusing because it's it's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,83,100]}

00:27:17.610 --> 00:27:19.050
<v Speaker 1>doing almost nothing.

NOTE CONF {"raw":[100,100,100]}

00:27:19.050 --> 00:27:22.620
<v Speaker 1>It's just unpacking the number that's inside the, the literature

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,99,83]}

00:27:22.740 --> 00:27:23.970
<v Speaker 1>literal.

NOTE CONF {"raw":[100]}

00:27:23.970 --> 00:27:24.720
<v Speaker 1>Okay.

NOTE CONF {"raw":[96]}

00:27:25.140 --> 00:27:26.340
<v Speaker 1>Um, right.

NOTE CONF {"raw":[100,95]}

00:27:26.730 --> 00:27:27.210
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:27:27.220 --> 00:27:28.240
<v Speaker 1>Anybody else?

NOTE CONF {"raw":[100,100]}

00:27:28.300 --> 00:27:30.820
<v Speaker 1>Anybody else want a chance to talk into the big

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:30.820 --> 00:27:31.900
<v Speaker 1>red cube?

NOTE CONF {"raw":[100,100]}

00:27:33.340 --> 00:27:34.000
<v Speaker 1>No.

NOTE CONF {"raw":[100]}

00:27:37.780 --> 00:27:38.500
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:27:39.670 --> 00:27:42.730
<v Speaker 1>Um, so here's a variation.

NOTE CONF {"raw":[100,100,100,100,70]}

00:27:42.730 --> 00:27:43.360
<v Speaker 1>Wait a minute.

NOTE CONF {"raw":[100,100,100]}

00:27:43.690 --> 00:27:46.360
<v Speaker 1>Yeah, here's a variation on this.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:27:47.200 --> 00:27:49.420
<v Speaker 1>Uh, it's just a notational thing, and I'm only showing

NOTE CONF {"raw":[96,100,100,100,100,100,100,100,100,100]}

00:27:49.420 --> 00:27:52.810
<v Speaker 1>you this to, um, you know, it's one of the

NOTE CONF {"raw":[100,100,100,100,100,100,97,100,100,100]}

00:27:52.810 --> 00:27:55.870
<v Speaker 1>things you can do in Haskell, uh, is to, um,

NOTE CONF {"raw":[100,100,100,100,100,100,96,100,100,96]}

00:27:55.870 --> 00:28:01.000
<v Speaker 1>is to make is to make, um, constructors and function

NOTE CONF {"raw":[100,100,100,100,100,100,95,100,100,100]}

00:28:01.000 --> 00:28:03.370
<v Speaker 1>names into into.

NOTE CONF {"raw":[100,100,100]}

00:28:03.490 --> 00:28:06.220
<v Speaker 1>I'm calling you know, the terminology is infix.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:28:06.310 --> 00:28:06.640
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:28:06.640 --> 00:28:09.670
<v Speaker 1>You've seen this already with, uh, with other functions that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:09.670 --> 00:28:10.780
<v Speaker 1>I've introduced.

NOTE CONF {"raw":[100,100]}

00:28:10.780 --> 00:28:11.290
<v Speaker 1>Right.

NOTE CONF {"raw":[100]}

00:28:11.290 --> 00:28:14.440
<v Speaker 1>So, um, you can make the constructors here infix I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:14.440 --> 00:28:17.620
<v Speaker 1>mean that these two constructors add in mul you can

NOTE CONF {"raw":[100,80,100,100,100,100,77,100,100,100]}

00:28:17.620 --> 00:28:20.920
<v Speaker 1>make them infix by simply putting back quotes around them.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:21.280 --> 00:28:22.060
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:28:22.060 --> 00:28:27.160
<v Speaker 1>And um, the only reason that this is kind of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:27.160 --> 00:28:30.460
<v Speaker 1>a nice thing to do is that is that writing,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:30.460 --> 00:28:33.700
<v Speaker 1>writing these expressions like this makes them look a little

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:33.700 --> 00:28:37.270
<v Speaker 1>bit more like normal arithmetic expressions.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:28:37.270 --> 00:28:40.780
<v Speaker 1>Okay, because you're used to writing plus between the the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:40.780 --> 00:28:42.250
<v Speaker 1>things that you're adding together.

NOTE CONF {"raw":[100,100,100,100,100]}

00:28:42.370 --> 00:28:43.090
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:28:43.090 --> 00:28:47.470
<v Speaker 1>But um, you know, so I'm just I'm just pointing

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:47.470 --> 00:28:49.090
<v Speaker 1>out you can do that if you want.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:28:53.650 --> 00:28:55.210
<v Speaker 1>Makes things a little clearer.

NOTE CONF {"raw":[100,100,100,100,100]}

00:28:55.780 --> 00:28:56.410
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:28:56.410 --> 00:28:59.140
<v Speaker 1>And then, you know, you can you can use that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:59.140 --> 00:29:02.980
<v Speaker 1>to, um, to write exactly these same function definitions.

NOTE CONF {"raw":[100,88,100,100,100,87,100,100,100]}

00:29:02.980 --> 00:29:06.850
<v Speaker 1>And the difference is only, uh, here.

NOTE CONF {"raw":[100,100,100,100,100,89,100]}

00:29:09.130 --> 00:29:11.110
<v Speaker 1>And here.

NOTE CONF {"raw":[100,100]}

00:29:12.070 --> 00:29:12.520
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:29:12.520 --> 00:29:13.270
<v Speaker 1>The constructors.

NOTE CONF {"raw":[100,70]}

00:29:13.270 --> 00:29:15.430
<v Speaker 1>Well, also of course, here's the definition of that, of

NOTE CONF {"raw":[97,100,100,100,100,100,100,100,100,100]}

00:29:15.430 --> 00:29:17.680
<v Speaker 1>that, um, data type, same data type.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:29:17.680 --> 00:29:21.310
<v Speaker 1>It's just that we're defining it to have I mean,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:21.310 --> 00:29:26.350
<v Speaker 1>we're just writing the, the, the constructors in infix form.

NOTE CONF {"raw":[100,100,100,100,100,100,100,92,100,100]}

00:29:26.410 --> 00:29:27.010
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:29:27.010 --> 00:29:30.190
<v Speaker 1>And so this is just saying that, um, I mean

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:30.190 --> 00:29:32.860
<v Speaker 1>it's actually it's actually completely equivalent to what I wrote

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:32.860 --> 00:29:33.250
<v Speaker 1>before.

NOTE CONF {"raw":[100]}

00:29:33.250 --> 00:29:35.440
<v Speaker 1>It's just, uh, written in a different way.

NOTE CONF {"raw":[100,100,80,100,99,100,100,100]}

00:29:39.370 --> 00:29:39.970
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:29:39.970 --> 00:29:41.650
<v Speaker 1>I'm not going to belabour this point.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:29:41.650 --> 00:29:45.580
<v Speaker 1>I think it's, um, possibly just confusing.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:29:46.450 --> 00:29:49.450
<v Speaker 1>Um, anyway, okay.

NOTE CONF {"raw":[100,100,100]}

00:29:50.260 --> 00:29:53.410
<v Speaker 1>Um, let me see what else.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:29:53.530 --> 00:29:56.890
<v Speaker 1>Um, yeah, I'll say another another variation on this.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:29:56.890 --> 00:30:00.970
<v Speaker 1>If you want, you could use symbolic constructors instead of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:00.970 --> 00:30:03.850
<v Speaker 1>the, you know, I'm using up here, add and mul.

NOTE CONF {"raw":[100,100,100,100,100,100,100,94,100,97]}

00:30:08.800 --> 00:30:14.020
<v Speaker 1>I could just as well use symbolic constructors like like

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:14.020 --> 00:30:15.070
<v Speaker 1>these two here.

NOTE CONF {"raw":[100,100,100]}

00:30:17.470 --> 00:30:18.220
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:30:19.210 --> 00:30:19.690
<v Speaker 1>Um.

NOTE CONF {"raw":[100]}

00:30:23.020 --> 00:30:23.920
<v Speaker 1>Now.

NOTE CONF {"raw":[100]}

00:30:25.820 --> 00:30:28.670
<v Speaker 1>uh, the reason for doing this would be the same

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:28.670 --> 00:30:30.830
<v Speaker 1>as as what I had a second ago when I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:30.830 --> 00:30:31.670
<v Speaker 1>was writing.

NOTE CONF {"raw":[100,100]}

00:30:31.670 --> 00:30:37.970
<v Speaker 1>Um, you know, um, uh, constructors, you know, add in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:37.970 --> 00:30:41.060
<v Speaker 1>back quotes to, to make it look a little bit

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:41.060 --> 00:30:43.970
<v Speaker 1>more like, like normal arithmetic notation.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:30:44.840 --> 00:30:45.650
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:30:46.130 --> 00:30:48.680
<v Speaker 1>But now I'm using symbols plus and times.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:30:50.450 --> 00:30:51.200
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:30:51.590 --> 00:30:55.970
<v Speaker 1>Why do I write colon plus colon instead of just

NOTE CONF {"raw":[100,100,100,96,100,100,100,100,100,100]}

00:30:55.970 --> 00:30:56.660
<v Speaker 1>plus.

NOTE CONF {"raw":[100]}

00:30:57.710 --> 00:30:58.370
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:30:58.370 --> 00:31:05.540
<v Speaker 1>Well, um, in Haskell constructors that are, that are symbols,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:07.190 --> 00:31:10.940
<v Speaker 1>you know, just like, uh, okay.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:31:10.940 --> 00:31:14.150
<v Speaker 1>In Haskell, all types begin with capital letters.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:31:14.150 --> 00:31:17.180
<v Speaker 1>All functions begin with small letters.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:31:19.010 --> 00:31:20.210
<v Speaker 1>Um, okay.

NOTE CONF {"raw":[100,100]}

00:31:20.210 --> 00:31:24.830
<v Speaker 1>All constructors begin with capital letters, okay?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:31:24.830 --> 00:31:31.280
<v Speaker 1>And if the constructor is symbolic, then all symbolic constructors

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:31.280 --> 00:31:32.810
<v Speaker 1>begin with a colon.

NOTE CONF {"raw":[100,100,100,100]}

00:31:34.550 --> 00:31:34.940
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:31:34.940 --> 00:31:35.960
<v Speaker 1>Why a colon?

NOTE CONF {"raw":[98,100,100]}

00:31:37.700 --> 00:31:38.150
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:31:38.150 --> 00:31:41.420
<v Speaker 1>Because cons is a colon.

NOTE CONF {"raw":[100,74,100,100,100]}

00:31:41.420 --> 00:31:45.230
<v Speaker 1>It's just in order to get that to fit into

NOTE CONF {"raw":[99,100,100,100,100,100,100,100,100,100]}

00:31:46.550 --> 00:31:49.100
<v Speaker 1>this this requirement okay.

NOTE CONF {"raw":[100,100,100,100]}

00:31:49.370 --> 00:31:54.200
<v Speaker 1>So in in in Haskell, all constructors that are symbolic

NOTE CONF {"raw":[100,73,100,100,100,100,100,100,100,100]}

00:31:54.200 --> 00:31:56.810
<v Speaker 1>like this one begin with a colon.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:31:57.560 --> 00:32:00.590
<v Speaker 1>Cons is a constructor is a colon.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:32:01.310 --> 00:32:03.260
<v Speaker 1>And I've written it with a colon at the end

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:03.260 --> 00:32:05.990
<v Speaker 1>just to make it look a little bit prettier.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:32:06.320 --> 00:32:07.070
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:32:07.910 --> 00:32:10.460
<v Speaker 1>Um, it doesn't have to be that way.

NOTE CONF {"raw":[100,81,100,100,100,100,100,100]}

00:32:12.560 --> 00:32:13.250
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:32:15.590 --> 00:32:18.830
<v Speaker 1>Um, so I could have written exactly the same, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:18.830 --> 00:32:20.090
<v Speaker 1>the same definition.

NOTE CONF {"raw":[90,100,100]}

00:32:20.090 --> 00:32:21.170
<v Speaker 1>Like this.

NOTE CONF {"raw":[100,100]}

00:32:22.380 --> 00:32:28.620
<v Speaker 1>um, and, uh, write all the code, you know, so,

NOTE CONF {"raw":[100,79,52,94,100,100,100,100,100,100]}

00:32:28.620 --> 00:32:31.920
<v Speaker 1>so now my my expressions e0 and E let me

NOTE CONF {"raw":[100,100,100,100,100,79,100,97,100,100]}

00:32:31.920 --> 00:32:33.120
<v Speaker 1>go back to this.

NOTE CONF {"raw":[100,100,100,100]}

00:32:33.120 --> 00:32:36.540
<v Speaker 1>My expressions e zero and e1, uh, could be written

NOTE CONF {"raw":[100,100,51,51,100,100,60,100,100,100]}

00:32:36.540 --> 00:32:40.920
<v Speaker 1>using these, uh, symbolic constructors instead, which looks an awful

NOTE CONF {"raw":[100,100,83,100,100,100,100,100,100,100]}

00:32:40.920 --> 00:32:48.300
<v Speaker 1>lot like, um, like what I get from the show

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:32:48.300 --> 00:32:48.990
<v Speaker 1>function.

NOTE CONF {"raw":[100]}

00:32:48.990 --> 00:32:51.960
<v Speaker 1>Okay, here's here's E0 and E1.

NOTE CONF {"raw":[100,100,100,57,100,100]}

00:32:56.610 --> 00:32:58.860
<v Speaker 1>Written using these symbolic constructors.

NOTE CONF {"raw":[100,100,67,100,100]}

00:32:58.860 --> 00:33:03.840
<v Speaker 1>And here's what you get by by, um, uh, using

NOTE CONF {"raw":[100,100,100,100,100,78,78,100,100,100]}

00:33:03.840 --> 00:33:06.210
<v Speaker 1>the show function that I defined on the previous slide

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:06.210 --> 00:33:08.430
<v Speaker 1>that I didn't show you in detail how it worked,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:08.430 --> 00:33:12.810
<v Speaker 1>but it just replaces, you know, it just it just

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:12.810 --> 00:33:15.900
<v Speaker 1>goes through and and turns these into strings.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:33:17.160 --> 00:33:17.550
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:33:17.550 --> 00:33:20.910
<v Speaker 1>Maybe it is actually worth looking at that just briefly,

NOTE CONF {"raw":[100,97,100,100,100,100,100,100,100,100]}

00:33:20.910 --> 00:33:24.750
<v Speaker 1>the form of this is very similar to the form

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:24.750 --> 00:33:27.600
<v Speaker 1>of this, of this, of this eval function.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:33:28.080 --> 00:33:28.860
<v Speaker 1>Okay.

NOTE CONF {"raw":[85]}

00:33:29.640 --> 00:33:33.570
<v Speaker 1>Again, three cases, one for each constructor.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:33:33.840 --> 00:33:35.700
<v Speaker 1>And the only difference is that on the right hand

NOTE CONF {"raw":[100,100,100,100,100,69,100,100,100,100]}

00:33:35.700 --> 00:33:39.000
<v Speaker 1>side here we had integers and we were doing multiplication

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:39.000 --> 00:33:41.790
<v Speaker 1>and addition okay.

NOTE CONF {"raw":[100,100,84]}

00:33:43.410 --> 00:33:44.670
<v Speaker 1>That's the meaning.

NOTE CONF {"raw":[100,100,100]}

00:33:45.150 --> 00:33:47.010
<v Speaker 1>That's what evaluation gives.

NOTE CONF {"raw":[100,100,100,100]}

00:33:47.130 --> 00:33:52.410
<v Speaker 1>Whereas turning things into string strings we have over here

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:52.410 --> 00:33:55.740
<v Speaker 1>manipulations on strings okay.

NOTE CONF {"raw":[100,100,100,100]}

00:33:55.740 --> 00:34:01.620
<v Speaker 1>So to get a string for the integer n uh

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:01.830 --> 00:34:04.590
<v Speaker 1>the function show this is a function in Haskell that

NOTE CONF {"raw":[100,100,100,100,100,100,100,89,100,100]}

00:34:04.590 --> 00:34:06.360
<v Speaker 1>you can use apply to any value to get a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:06.360 --> 00:34:06.900
<v Speaker 1>string.

NOTE CONF {"raw":[100]}

00:34:06.900 --> 00:34:10.020
<v Speaker 1>Actually not every value but many values okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:34:10.020 --> 00:34:12.480
<v Speaker 1>So this will give you a string representing this integer.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:12.780 --> 00:34:18.120
<v Speaker 1>And then um, you know, to put together the string

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:18.120 --> 00:34:23.050
<v Speaker 1>for E and the string for F with a plus

NOTE CONF {"raw":[100,99,100,100,100,100,100,100,100,100]}

00:34:23.050 --> 00:34:24.669
<v Speaker 1>in the middle, we can use append.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:34:25.629 --> 00:34:27.040
<v Speaker 1>Okay, this is a string.

NOTE CONF {"raw":[100,100,100,100,100]}

00:34:27.460 --> 00:34:28.780
<v Speaker 1>This is a string.

NOTE CONF {"raw":[100,100,100,100]}

00:34:29.110 --> 00:34:31.960
<v Speaker 1>This plus thing in the middle here is a string.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:32.320 --> 00:34:33.070
<v Speaker 1>Oops.

NOTE CONF {"raw":[71]}

00:34:33.070 --> 00:34:34.389
<v Speaker 1>And append.

NOTE CONF {"raw":[100,100]}

00:34:36.220 --> 00:34:41.050
<v Speaker 1>Append here and here is used for putting these strings

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:41.050 --> 00:34:41.800
<v Speaker 1>together.

NOTE CONF {"raw":[100]}

00:34:44.200 --> 00:34:44.889
<v Speaker 1>All right.

NOTE CONF {"raw":[97,97]}

00:34:48.909 --> 00:34:55.179
<v Speaker 1>If this is all a little bit bewildering, bewildering for

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:55.179 --> 00:34:58.300
<v Speaker 1>you all, let me just suggest you look.

NOTE CONF {"raw":[100,58,100,100,100,100,100,100]}

00:34:58.330 --> 00:35:02.170
<v Speaker 1>You concentrate on this first on this first version.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:35:02.740 --> 00:35:07.480
<v Speaker 1>The others are just slightly prettier versions of the same

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:07.480 --> 00:35:07.990
<v Speaker 1>thing.

NOTE CONF {"raw":[100]}

00:35:07.990 --> 00:35:11.800
<v Speaker 1>But the first one is the one that, um, that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:11.800 --> 00:35:13.540
<v Speaker 1>has all of the content in it.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:35:14.620 --> 00:35:18.760
<v Speaker 1>Okay, so Let me see.

NOTE CONF {"raw":[100,100,100,100,100]}

00:35:20.320 --> 00:35:20.890
<v Speaker 4>Right.

NOTE CONF {"raw":[94]}

00:35:22.450 --> 00:35:24.310
<v Speaker 1>So are there any questions about that?

NOTE CONF {"raw":[100,93,93,100,100,100,100]}

00:35:24.640 --> 00:35:26.200
<v Speaker 1>I want to move on to another example.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:35:26.200 --> 00:35:26.380
<v Speaker 1>Yeah.

NOTE CONF {"raw":[89]}

00:35:26.410 --> 00:35:27.670
<v Speaker 1>Let me throw you the.

NOTE CONF {"raw":[100,100,100,100,100]}

00:35:31.960 --> 00:35:32.620
<v Speaker 4>Hoops.

NOTE CONF {"raw":[61]}

00:35:36.730 --> 00:35:37.150
<v Speaker 5>Nice shot.

NOTE CONF {"raw":[100,100]}

00:35:37.570 --> 00:35:41.290
<v Speaker 5>Um, is the second column necessary?

NOTE CONF {"raw":[97,100,96,100,100,100]}

00:35:41.800 --> 00:35:43.180
<v Speaker 1>The second column.

NOTE CONF {"raw":[100,100,100]}

00:35:45.610 --> 00:35:47.770
<v Speaker 5>I think you said that the second column.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:35:47.770 --> 00:35:48.610
<v Speaker 5>When you o.

NOTE CONF {"raw":[100,100,20]}

00:35:48.610 --> 00:35:49.450
<v Speaker 1>The second column.

NOTE CONF {"raw":[100,100,100]}

00:35:49.480 --> 00:35:49.690
<v Speaker 1>Yeah.

NOTE CONF {"raw":[98]}

00:35:49.840 --> 00:35:50.350
<v Speaker 1>Second column.

NOTE CONF {"raw":[100,100]}

00:35:50.560 --> 00:35:51.580
<v Speaker 1>You mean like here?

NOTE CONF {"raw":[100,100,100,100]}

00:35:52.150 --> 00:35:52.960
<v Speaker 1>No.

NOTE CONF {"raw":[100]}

00:35:53.170 --> 00:35:54.490
<v Speaker 1>Completely unnecessary.

NOTE CONF {"raw":[100,100]}

00:35:54.490 --> 00:35:56.050
<v Speaker 1>I put it in just to make it prettier.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:35:56.050 --> 00:35:59.050
<v Speaker 1>Because plus is a kind of, you know, it's a.

NOTE CONF {"raw":[100,91,100,100,100,100,100,100,100,100]}

00:35:59.050 --> 00:36:01.690
<v Speaker 5>Well, so you could just put one column in a

NOTE CONF {"raw":[100,100,100,100,100,100,100,95,99,100]}

00:36:01.690 --> 00:36:02.050
<v Speaker 5>plus.

NOTE CONF {"raw":[100]}

00:36:02.050 --> 00:36:02.590
<v Speaker 4>Yes.

NOTE CONF {"raw":[100]}

00:36:03.640 --> 00:36:04.060
<v Speaker 1>You could.

NOTE CONF {"raw":[100,100]}

00:36:04.480 --> 00:36:05.260
<v Speaker 1>I mean, yeah.

NOTE CONF {"raw":[100,100,100]}

00:36:07.690 --> 00:36:08.020
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:36:08.020 --> 00:36:08.320
<v Speaker 1>Any other.

NOTE CONF {"raw":[100,100]}

00:36:08.320 --> 00:36:09.100
<v Speaker 4>Questions?

NOTE CONF {"raw":[100]}

00:36:09.670 --> 00:36:12.520
<v Speaker 1>The first column is necessary just because it says this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:12.520 --> 00:36:13.660
<v Speaker 1>thing is a constructor.

NOTE CONF {"raw":[100,69,100,100]}

00:36:16.030 --> 00:36:19.280
<v Speaker 1>Anybody else I'm going to move on to another example

NOTE CONF {"raw":[98,100,100,100,100,100,100,100,100,100]}

00:36:19.280 --> 00:36:19.820
<v Speaker 1>now.

NOTE CONF {"raw":[100]}

00:36:22.790 --> 00:36:23.450
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:36:23.450 --> 00:36:27.650
<v Speaker 1>My other example is um propositions.

NOTE CONF {"raw":[100,100,100,100,100,52]}

00:36:27.650 --> 00:36:28.910
<v Speaker 1>So this is logic.

NOTE CONF {"raw":[100,100,100,100]}

00:36:31.070 --> 00:36:31.610
<v Speaker 1>Um.

NOTE CONF {"raw":[100]}

00:36:33.620 --> 00:36:37.100
<v Speaker 1>And this is connecting together computation and logic part of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:37.100 --> 00:36:39.530
<v Speaker 1>the course and functional programming part of the course.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:36:39.530 --> 00:36:40.670
<v Speaker 1>Again okay.

NOTE CONF {"raw":[100,100]}

00:36:40.670 --> 00:36:45.920
<v Speaker 1>So I can represent propositions in Haskell.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:36:47.390 --> 00:36:50.630
<v Speaker 1>Um and here is a data type algebraic data type

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:50.630 --> 00:36:57.590
<v Speaker 1>for um propositions that have uh false true negation um

NOTE CONF {"raw":[100,100,100,100,100,85,100,100,100,100]}

00:36:57.590 --> 00:36:59.690
<v Speaker 1>disjunction and conjunction.

NOTE CONF {"raw":[100,100,100]}

00:37:00.110 --> 00:37:00.440
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:37:00.440 --> 00:37:02.930
<v Speaker 1>So these are the propositions you've been dealing with and,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:02.930 --> 00:37:07.010
<v Speaker 1>and variables, uh, having strings as names.

NOTE CONF {"raw":[100,100,44,100,100,100,100]}

00:37:07.730 --> 00:37:08.150
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:37:08.150 --> 00:37:12.200
<v Speaker 1>So this is like the full the part of process.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,92]}

00:37:12.290 --> 00:37:12.560
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:37:12.560 --> 00:37:15.500
<v Speaker 1>Propositional logic has more stuff in it a little bit

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:15.500 --> 00:37:15.740
<v Speaker 1>more.

NOTE CONF {"raw":[100]}

00:37:15.740 --> 00:37:19.970
<v Speaker 1>You'll learn about implication in case Julian hasn't talked about

NOTE CONF {"raw":[76,100,100,100,100,100,84,100,100,100]}

00:37:19.970 --> 00:37:20.480
<v Speaker 1>it yet.

NOTE CONF {"raw":[100,100]}

00:37:20.480 --> 00:37:21.260
<v Speaker 1>Don't know.

NOTE CONF {"raw":[100,100]}

00:37:21.470 --> 00:37:25.880
<v Speaker 1>Um, anyway, this is this is propositional logic without implication

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:25.880 --> 00:37:26.330
<v Speaker 1>in it.

NOTE CONF {"raw":[100,100]}

00:37:26.660 --> 00:37:28.520
<v Speaker 1>Um, but it doesn't matter.

NOTE CONF {"raw":[100,100,100,100,100]}

00:37:28.700 --> 00:37:31.820
<v Speaker 1>Anyway, we've got we've got here now six cases.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:37:32.450 --> 00:37:33.170
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:37:34.670 --> 00:37:36.710
<v Speaker 1>And so you can represent the stuff that you've been

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:36.710 --> 00:37:39.950
<v Speaker 1>doing in your, in your, in your logic exercises.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:37:41.210 --> 00:37:41.930
<v Speaker 1>All right.

NOTE CONF {"raw":[99,99]}

00:37:43.220 --> 00:37:47.240
<v Speaker 1>Um, so we've got uh variables.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:37:49.130 --> 00:37:52.370
<v Speaker 1>So six cases, six constructors.

NOTE CONF {"raw":[100,100,100,100,100]}

00:37:53.900 --> 00:37:54.710
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:37:55.040 --> 00:37:59.090
<v Speaker 1>Uh, the first four constructors are like, um, you know,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:59.090 --> 00:38:02.510
<v Speaker 1>alphabetic, you know, var feet and nought.

NOTE CONF {"raw":[100,100,100,100,79,100,29]}

00:38:02.660 --> 00:38:07.460
<v Speaker 1>And the, these two I've chosen to do as symbolic

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,78,100]}

00:38:07.460 --> 00:38:08.150
<v Speaker 1>constructors.

NOTE CONF {"raw":[100]}

00:38:08.150 --> 00:38:08.510
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:38:08.510 --> 00:38:13.550
<v Speaker 1>So colon uh, two vertical bars colon and colon.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:38:13.730 --> 00:38:14.660
<v Speaker 1>Uh, two Ampersands.

NOTE CONF {"raw":[52,100,100]}

00:38:14.690 --> 00:38:15.320
<v Speaker 1>Colon okay.

NOTE CONF {"raw":[100,100]}

00:38:15.320 --> 00:38:16.160
<v Speaker 1>This is disjunction.

NOTE CONF {"raw":[100,100,100]}

00:38:16.160 --> 00:38:17.270
<v Speaker 1>This is conjunction.

NOTE CONF {"raw":[100,100,99]}

00:38:20.750 --> 00:38:21.260
<v Speaker 1>All right.

NOTE CONF {"raw":[100,100]}

00:38:21.260 --> 00:38:25.070
<v Speaker 1>So um, going through these six cases.

NOTE CONF {"raw":[100,75,100,100,100,100,100]}

00:38:25.160 --> 00:38:29.570
<v Speaker 1>We've got um, the first one is, is, uh, you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:29.570 --> 00:38:32.840
<v Speaker 1>know, we've got three cases that are, that are recursive

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:32.840 --> 00:38:34.520
<v Speaker 1>in three cases that are non recursive.

NOTE CONF {"raw":[76,100,100,100,100,100,100]}

00:38:34.520 --> 00:38:36.050
<v Speaker 1>So the simplest ones are these here.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:38:36.050 --> 00:38:36.320
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:38:36.320 --> 00:38:41.540
<v Speaker 1>So the the case of a of a propositional variable,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:41.540 --> 00:38:43.940
<v Speaker 1>it's the constructor of var to say this is a

NOTE CONF {"raw":[96,100,100,87,100,100,100,100,100,100]}

00:38:43.940 --> 00:38:44.600
<v Speaker 1>variable.

NOTE CONF {"raw":[100]}

00:38:44.600 --> 00:38:48.140
<v Speaker 1>And then the name of the variable which I've defined

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:48.140 --> 00:38:49.790
<v Speaker 1>here to be a string.

NOTE CONF {"raw":[100,100,100,100,100]}

00:38:50.270 --> 00:38:51.050
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:38:51.350 --> 00:38:55.490
<v Speaker 1>Um I'm using strings as names okay.

NOTE CONF {"raw":[89,100,100,100,100,100,100]}

00:38:55.490 --> 00:38:57.710
<v Speaker 1>So this is just propositional variables.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:38:59.000 --> 00:39:02.960
<v Speaker 1>This is this is um what I'm going to use

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:02.960 --> 00:39:04.220
<v Speaker 1>to represent false.

NOTE CONF {"raw":[100,100,100]}

00:39:05.180 --> 00:39:06.890
<v Speaker 1>And this is what I'm going to use to represent

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:06.890 --> 00:39:07.430
<v Speaker 1>true.

NOTE CONF {"raw":[100]}

00:39:07.430 --> 00:39:14.070
<v Speaker 1>Why do I not use false false and true Okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:14.070 --> 00:39:19.080
<v Speaker 1>Reason is that, um, Haskell would complain that I'm using

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:19.080 --> 00:39:23.250
<v Speaker 1>the same thing for two, uh, having two types.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:39:23.250 --> 00:39:24.210
<v Speaker 1>It would get confused.

NOTE CONF {"raw":[75,100,100,100]}

00:39:24.210 --> 00:39:27.420
<v Speaker 1>Okay, so f and T, that's the only reason.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:39:30.030 --> 00:39:30.720
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:39:31.380 --> 00:39:34.140
<v Speaker 1>Um, the last three cases here are the recursive one.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,79]}

00:39:34.140 --> 00:39:37.830
<v Speaker 1>So, um, you know, not apply to a proposition.

NOTE CONF {"raw":[100,100,100,100,100,81,100,100,100]}

00:39:37.830 --> 00:39:42.180
<v Speaker 1>Gives me a proposition prop here is proposition okay a

NOTE CONF {"raw":[100,100,100,100,100,100,79,100,100,100]}

00:39:42.180 --> 00:39:48.510
<v Speaker 1>prop and this, this, um, disjunction forming thing here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:39:48.720 --> 00:39:49.080
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:39:49.080 --> 00:39:50.940
<v Speaker 1>And another prop that gives me a proposition.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:39:50.940 --> 00:39:53.940
<v Speaker 1>So this is the disjunction of two propositions.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:39:54.990 --> 00:39:57.870
<v Speaker 1>And this is the conjunction of two propositions prop.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:39:57.870 --> 00:40:01.410
<v Speaker 1>And then this um this symbol this this constructor here

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:01.710 --> 00:40:04.290
<v Speaker 1>and then prop okay.

NOTE CONF {"raw":[100,100,100,100]}

00:40:05.910 --> 00:40:06.990
<v Speaker 1>So six cases.

NOTE CONF {"raw":[100,100,100]}

00:40:06.990 --> 00:40:09.150
<v Speaker 1>So this is more complicated example than what I had

NOTE CONF {"raw":[98,100,100,100,100,100,100,100,100,100]}

00:40:09.150 --> 00:40:10.020
<v Speaker 1>a minute ago.

NOTE CONF {"raw":[100,100,100]}

00:40:10.290 --> 00:40:13.980
<v Speaker 1>Um So a proposition is one of six things.

NOTE CONF {"raw":[100,100,82,100,100,100,100,100,100]}

00:40:13.980 --> 00:40:15.450
<v Speaker 1>There are the six cases.

NOTE CONF {"raw":[100,100,77,100,100]}

00:40:16.140 --> 00:40:20.790
<v Speaker 1>And I can form propositions like this one down here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:23.490 --> 00:40:25.650
<v Speaker 1>Let me draw that as a tree.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:40:33.720 --> 00:40:34.110
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:40:34.110 --> 00:40:41.310
<v Speaker 1>So it's this some conjunction thing applied to two propositions.

NOTE CONF {"raw":[100,100,100,65,100,100,100,100,100,100]}

00:40:42.390 --> 00:40:47.070
<v Speaker 1>This is this is this is P0 okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:40:47.070 --> 00:40:50.400
<v Speaker 1>From my from from up there okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:40:50.400 --> 00:40:51.930
<v Speaker 1>So what's the first thing.

NOTE CONF {"raw":[100,100,100,100,100]}

00:40:52.020 --> 00:40:57.420
<v Speaker 1>The first thing is um constructor var applied to the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:57.420 --> 00:40:58.740
<v Speaker 1>name a.

NOTE CONF {"raw":[100,96]}

00:40:58.740 --> 00:40:59.880
<v Speaker 1>So this is a string.

NOTE CONF {"raw":[100,100,100,100,100]}

00:41:02.100 --> 00:41:02.430
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:41:02.430 --> 00:41:03.780
<v Speaker 1>And what's the second thing.

NOTE CONF {"raw":[100,100,100,100,100]}

00:41:05.010 --> 00:41:10.560
<v Speaker 1>It's the constructor not applied to var.

NOTE CONF {"raw":[100,100,100,100,97,100,100]}

00:41:11.740 --> 00:41:13.540
<v Speaker 1>of A.

NOTE CONF {"raw":[100,100]}

00:41:14.380 --> 00:41:14.680
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:41:14.680 --> 00:41:15.880
<v Speaker 1>Not very exciting.

NOTE CONF {"raw":[100,100,100]}

00:41:17.800 --> 00:41:19.870
<v Speaker 1>Um, okay.

NOTE CONF {"raw":[100,100]}

00:41:19.870 --> 00:41:24.940
<v Speaker 1>This is representing, um, what I what what Julian would

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,97,100]}

00:41:24.940 --> 00:41:29.380
<v Speaker 1>write as, um, a and not a.

NOTE CONF {"raw":[97,100,100,100,100,100,100]}

00:41:33.790 --> 00:41:34.540
<v Speaker 1>Okay.

NOTE CONF {"raw":[93]}

00:41:43.120 --> 00:41:43.510
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:41:43.510 --> 00:41:48.610
<v Speaker 1>And this and this form, which is just drawing P0

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:48.610 --> 00:41:50.620
<v Speaker 1>out in the form of a tree.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:41:51.160 --> 00:41:51.820
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:41:51.820 --> 00:41:55.210
<v Speaker 1>This is showing the structure of this, of this thing,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:55.210 --> 00:41:59.620
<v Speaker 1>showing the structure of this expression a and and then

NOTE CONF {"raw":[100,100,100,100,100,100,97,100,100,100]}

00:41:59.620 --> 00:42:01.630
<v Speaker 1>a subexpression not a.

NOTE CONF {"raw":[100,73,100,100]}

00:42:02.230 --> 00:42:02.890
<v Speaker 1>Okay.

NOTE CONF {"raw":[95]}

00:42:09.640 --> 00:42:14.650
<v Speaker 1>Um, one thing to point out here is that in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:14.650 --> 00:42:19.390
<v Speaker 1>these, um, algebraic data types, you always need.

NOTE CONF {"raw":[100,100,100,100,100,94,100,100]}

00:42:21.400 --> 00:42:23.170
<v Speaker 1>Wait a minute trying to see what time it is.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:23.170 --> 00:42:23.620
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:42:23.620 --> 00:42:26.560
<v Speaker 1>You always need constructors for every case.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:42:26.860 --> 00:42:27.640
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:42:27.910 --> 00:42:30.670
<v Speaker 1>Six cases, six constructors.

NOTE CONF {"raw":[100,100,100,100]}

00:42:31.480 --> 00:42:31.960
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:42:31.960 --> 00:42:36.040
<v Speaker 1>A natural question is couldn't I just leave this one

NOTE CONF {"raw":[95,100,100,100,100,100,100,100,100,100]}

00:42:36.040 --> 00:42:36.610
<v Speaker 1>out?

NOTE CONF {"raw":[100]}

00:42:39.640 --> 00:42:43.930
<v Speaker 1>Because somehow it's Haskell should sort of figure it out.

NOTE CONF {"raw":[100,100,100,90,100,100,100,100,100,100]}

00:42:43.930 --> 00:42:47.710
<v Speaker 1>If I use a string here, um, as a prop,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,97]}

00:42:47.710 --> 00:42:47.920
<v Speaker 1>that.

NOTE CONF {"raw":[100]}

00:42:47.920 --> 00:42:49.030
<v Speaker 1>That's what I mean.

NOTE CONF {"raw":[100,100,100,100]}

00:42:49.090 --> 00:42:50.980
<v Speaker 1>Okay, the answer is no.

NOTE CONF {"raw":[100,100,100,100,100]}

00:42:50.980 --> 00:42:52.240
<v Speaker 1>You can't leave it out.

NOTE CONF {"raw":[100,100,100,100,100]}

00:42:53.470 --> 00:42:58.300
<v Speaker 1>Um, so, uh, um, okay, so that's that's the way

NOTE CONF {"raw":[100,100,97,71,100,100,100,100,100,100]}

00:42:58.330 --> 00:42:59.500
<v Speaker 1>Haskell is defined.

NOTE CONF {"raw":[100,100,100]}

00:42:59.500 --> 00:43:00.340
<v Speaker 1>You can't leave it out.

NOTE CONF {"raw":[100,100,100,100,100]}

00:43:00.340 --> 00:43:00.910
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:43:00.910 --> 00:43:04.810
<v Speaker 1>Another, another, um, another part of the answer is, you

NOTE CONF {"raw":[100,100,82,100,100,100,100,100,100,100]}

00:43:04.810 --> 00:43:06.250
<v Speaker 1>know, why can't you leave it out?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:43:06.250 --> 00:43:07.990
<v Speaker 1>Why is Haskell defined that way?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:43:07.990 --> 00:43:11.630
<v Speaker 1>And the reason Haskell's defined that way is that, uh,

NOTE CONF {"raw":[100,100,100,89,100,100,100,100,100,92]}

00:43:11.630 --> 00:43:15.710
<v Speaker 1>type checking, this whole type checking thing in Haskell, the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:15.710 --> 00:43:17.780
<v Speaker 1>fact that it can figure out what the types are

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:17.780 --> 00:43:20.360
<v Speaker 1>in your program and it can even figure them out

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:20.360 --> 00:43:22.910
<v Speaker 1>if you don't tell them what the you know, if

NOTE CONF {"raw":[100,100,100,100,100,100,74,100,100,100]}

00:43:22.910 --> 00:43:24.830
<v Speaker 1>you write a function without telling you what type it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:24.830 --> 00:43:26.690
<v Speaker 1>is, it'll figure out what type it is.

NOTE CONF {"raw":[100,97,100,100,100,100,100,100]}

00:43:26.690 --> 00:43:28.250
<v Speaker 1>All of that works.

NOTE CONF {"raw":[100,100,100,100]}

00:43:28.910 --> 00:43:32.000
<v Speaker 1>It's like on the borderline of being possible, and this

NOTE CONF {"raw":[96,100,100,100,100,100,100,100,100,100]}

00:43:32.000 --> 00:43:34.550
<v Speaker 1>is one of the things that you need to have

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:34.550 --> 00:43:38.300
<v Speaker 1>to make that be possible is that there's always constructors,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:38.690 --> 00:43:42.470
<v Speaker 1>um, whenever you're using a, um, algebraic data type.

NOTE CONF {"raw":[100,100,100,100,94,50,100,100,100]}

00:43:46.100 --> 00:43:46.820
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:43:55.190 --> 00:43:57.830
<v Speaker 1>I could maybe mention at this point, I said last

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:57.830 --> 00:44:00.260
<v Speaker 1>time that algebraic data types is one of the things

NOTE CONF {"raw":[100,100,100,98,98,100,100,100,100,100]}

00:44:00.260 --> 00:44:04.160
<v Speaker 1>that was invented in Edinburgh that contributed to functional programming.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:04.160 --> 00:44:08.120
<v Speaker 1>Another thing that contributed to functional programming invented here was

NOTE CONF {"raw":[97,100,100,100,100,100,100,100,100,100]}

00:44:08.150 --> 00:44:13.400
<v Speaker 1>type checking for, um, for this this style of language.

NOTE CONF {"raw":[100,100,100,97,100,100,100,100,100,100]}

00:44:13.430 --> 00:44:18.860
<v Speaker 1>Um, another, um, former professor here, Robin Milner, who won

NOTE CONF {"raw":[88,100,100,100,100,100,96,51,100,100]}

00:44:18.860 --> 00:44:21.290
<v Speaker 1>the Turing Award for this work and other work.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:44:22.010 --> 00:44:23.750
<v Speaker 1>Um, related to that?

NOTE CONF {"raw":[100,100,100,100]}

00:44:24.140 --> 00:44:24.950
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:44:27.860 --> 00:44:29.540
<v Speaker 1>Um, I'm coming to the end of my time, which

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:29.540 --> 00:44:31.310
<v Speaker 1>I keep looking at my watch to decide where I'm

NOTE CONF {"raw":[73,100,100,100,100,100,100,100,100,100]}

00:44:31.310 --> 00:44:32.210
<v Speaker 1>going to stop.

NOTE CONF {"raw":[100,100,100]}

00:44:32.240 --> 00:44:35.600
<v Speaker 1>Okay, so these are propositions, and I can write a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:35.600 --> 00:44:39.710
<v Speaker 1>function to turn a proposition into into a string.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:44:40.850 --> 00:44:41.330
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:44:41.330 --> 00:44:43.040
<v Speaker 1>So it takes a prop and it gives you a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:43.040 --> 00:44:43.640
<v Speaker 1>string.

NOTE CONF {"raw":[100]}

00:44:43.670 --> 00:44:46.820
<v Speaker 1>There are six cases because there are six, um, kinds

NOTE CONF {"raw":[100,100,100,100,100,100,93,100,84,100]}

00:44:46.820 --> 00:44:52.280
<v Speaker 1>of proposition, one for each, one for each, um, constructor.

NOTE CONF {"raw":[100,82,100,100,100,100,100,100,100,100]}

00:44:53.090 --> 00:44:55.370
<v Speaker 1>And on the right hand side I have a string.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:55.490 --> 00:45:00.440
<v Speaker 1>So, you know, the, the, the, the case of our

NOTE CONF {"raw":[100,100,100,94,100,100,100,100,95,76]}

00:45:00.440 --> 00:45:01.670
<v Speaker 1>x x is a string.

NOTE CONF {"raw":[80,100,100,100,100]}

00:45:01.670 --> 00:45:04.460
<v Speaker 1>And so, um, turning that into a string is just

NOTE CONF {"raw":[100,100,97,100,100,100,100,100,100,100]}

00:45:04.460 --> 00:45:05.990
<v Speaker 1>the, the value x.

NOTE CONF {"raw":[100,100,100,100]}

00:45:06.870 --> 00:45:08.820
<v Speaker 1>um f and trees.

NOTE CONF {"raw":[100,100,100,95]}

00:45:09.960 --> 00:45:13.470
<v Speaker 1>And these other cases, you have to turn um, the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:13.470 --> 00:45:16.560
<v Speaker 1>subexpressions into strings, like here for example.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:45:17.790 --> 00:45:18.120
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:45:18.120 --> 00:45:19.260
<v Speaker 1>Turn P into a string.

NOTE CONF {"raw":[100,93,100,100,100]}

00:45:19.260 --> 00:45:19.950
<v Speaker 1>We want.

NOTE CONF {"raw":[100,98]}

00:45:19.980 --> 00:45:22.020
<v Speaker 1>We want to turn this into a string.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:45:22.500 --> 00:45:23.160
<v Speaker 1>Right.

NOTE CONF {"raw":[87]}

00:45:23.250 --> 00:45:25.200
<v Speaker 1>So we turn P into a string.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:45:25.230 --> 00:45:27.150
<v Speaker 1>We turn Q into a string.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:45:32.280 --> 00:45:35.670
<v Speaker 1>And we join together them together using append with a,

NOTE CONF {"raw":[100,100,93,100,100,100,100,96,100,95]}

00:45:35.700 --> 00:45:37.800
<v Speaker 1>you know, double vertical bar in the middle.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:45:43.080 --> 00:45:43.740
<v Speaker 4>Okay.

NOTE CONF {"raw":[100]}

00:45:44.490 --> 00:45:46.950
<v Speaker 1>Um, you know.

NOTE CONF {"raw":[100,100,100]}

00:45:46.950 --> 00:45:47.670
<v Speaker 4>Note.

NOTE CONF {"raw":[100]}

00:45:48.090 --> 00:45:51.390
<v Speaker 1>It's important with these things to see the, the, um,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,87]}

00:45:51.420 --> 00:45:55.830
<v Speaker 1>the form of the function follows the form of the,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:55.860 --> 00:45:57.420
<v Speaker 1>of the type definition.

NOTE CONF {"raw":[100,100,100,100]}

00:45:57.420 --> 00:45:59.700
<v Speaker 1>This we saw this already with list.

NOTE CONF {"raw":[100,100,100,100,100,100,81]}

00:46:00.330 --> 00:46:04.770
<v Speaker 1>Um, with definition of functions on lists using recursion and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:04.770 --> 00:46:05.970
<v Speaker 1>pattern matching.

NOTE CONF {"raw":[100,100]}

00:46:06.360 --> 00:46:07.260
<v Speaker 1>Um, definitions.

NOTE CONF {"raw":[91,100]}

00:46:07.260 --> 00:46:09.540
<v Speaker 1>Okay, we've got six cases here.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:46:10.080 --> 00:46:13.500
<v Speaker 1>Um, the type definition is recursive in three places.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:46:13.980 --> 00:46:17.430
<v Speaker 1>I mean three, three of the six cases and the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:17.430 --> 00:46:21.300
<v Speaker 1>function definition on that type, we've got six cases, one

NOTE CONF {"raw":[100,100,94,100,100,100,100,100,100,100]}

00:46:21.300 --> 00:46:22.530
<v Speaker 1>for each constructor.

NOTE CONF {"raw":[100,100,100]}

00:46:22.950 --> 00:46:27.180
<v Speaker 1>And it's recursive exactly in the places where the type

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:27.180 --> 00:46:28.350
<v Speaker 1>definition is recursive.

NOTE CONF {"raw":[100,100,100]}

00:46:28.350 --> 00:46:28.890
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:46:28.890 --> 00:46:31.500
<v Speaker 1>So um here P is a prop.

NOTE CONF {"raw":[94,71,100,100,100,100,100]}

00:46:31.500 --> 00:46:34.350
<v Speaker 1>And so we need to use recursion to turn it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:34.350 --> 00:46:35.280
<v Speaker 1>into a string.

NOTE CONF {"raw":[100,100,100]}

00:46:35.370 --> 00:46:37.140
<v Speaker 1>You know p and q here are props.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:46:37.140 --> 00:46:39.090
<v Speaker 1>And so we use recursion here and there okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,93]}

00:46:39.090 --> 00:46:43.200
<v Speaker 1>So the the pattern of the function follows the the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:43.200 --> 00:46:45.450
<v Speaker 1>pattern of the type definition.

NOTE CONF {"raw":[100,100,100,100,100]}

00:46:48.480 --> 00:46:53.370
<v Speaker 1>And um evaluation is similar I think I'm going to

NOTE CONF {"raw":[100,98,100,100,100,100,100,100,100,100]}

00:46:53.370 --> 00:46:55.770
<v Speaker 1>I think this is a place where I'm going to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:55.800 --> 00:46:59.400
<v Speaker 1>ask for questions and pick this up at this point

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:59.400 --> 00:47:01.830
<v Speaker 1>in the next lecture, because it's a little bit requires

NOTE CONF {"raw":[100,100,100,100,100,97,100,100,100,100]}

00:47:01.830 --> 00:47:03.750
<v Speaker 1>a little bit of explanation, but before it.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:47:03.750 --> 00:47:04.680
<v Speaker 1>Don't don't just leave.

NOTE CONF {"raw":[100,100,100,100]}

00:47:04.680 --> 00:47:05.190
<v Speaker 1>All right.

NOTE CONF {"raw":[100,100]}

00:47:05.190 --> 00:47:06.630
<v Speaker 1>Are there any questions at this point?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:47:06.630 --> 00:47:09.480
<v Speaker 1>Because this stuff I know, it's, um, I know it's

NOTE CONF {"raw":[100,100,100,100,100,100,95,100,100,100]}

00:47:09.480 --> 00:47:10.590
<v Speaker 1>a little hard.

NOTE CONF {"raw":[100,100,100]}

00:47:10.590 --> 00:47:13.800
<v Speaker 1>Or at least students in the past have found it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:13.800 --> 00:47:14.370
<v Speaker 1>hard.

NOTE CONF {"raw":[100]}

00:47:14.370 --> 00:47:17.220
<v Speaker 1>And so I want to give you a chance to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:17.220 --> 00:47:22.890
<v Speaker 1>ask questions if there are any, um, anybody.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:47:25.710 --> 00:47:27.240
<v Speaker 1>You all you're all comfortable with this.

NOTE CONF {"raw":[98,64,100,100,100,100,100]}

00:47:27.240 --> 00:47:29.880
<v Speaker 1>You're going to be writing data type algebraic data type

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:29.880 --> 00:47:32.610
<v Speaker 1>definitions starting tomorrow.

NOTE CONF {"raw":[100,100,100]}

00:47:34.440 --> 00:47:35.040
<v Speaker 1>Okay?

NOTE CONF {"raw":[100]}

00:47:35.160 --> 00:47:37.050
<v Speaker 1>I mean, if there are no questions, then, uh, thanks

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,66,100]}

00:47:37.050 --> 00:47:37.710
<v Speaker 1>for your attention.

NOTE CONF {"raw":[100,100,100]}

00:47:37.710 --> 00:47:40.500
<v Speaker 1>And I'll pick this up on Monday at this point.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:40.500 --> 00:47:41.010
<v Speaker 1>Okay.

NOTE CONF {"raw":[100]}

00:47:41.190 --> 00:47:41.490
<v Speaker 1>Here's.

NOTE CONF {"raw":[65]}

00:48:06.130 --> 00:48:08.560
<v Speaker 6>I wanted to ask some quick question about the curse.

NOTE CONF {"raw":[100,96,100,97,99,95,100,100,100,100]}

00:48:08.890 --> 00:48:09.790
<v Speaker 6>Uh, yeah.

NOTE CONF {"raw":[100,87]}

00:48:10.180 --> 00:48:13.030
<v Speaker 6>According to the academic calendar of the.

NOTE CONF {"raw":[100,100,100,95,100,100,100]}

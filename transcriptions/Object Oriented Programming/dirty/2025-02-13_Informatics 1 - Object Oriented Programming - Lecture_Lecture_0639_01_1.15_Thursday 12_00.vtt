WEBVTT

00:00:07.560 --> 00:00:09.120
<v Speaker 0>That's us there.

NOTE CONF {"raw":[90,69,37]}

00:00:11.760 --> 00:00:11.960
<v Speaker 0>Yeah.

NOTE CONF {"raw":[75]}

00:00:11.960 --> 00:00:12.560
<v Speaker 0>Yeah, yeah.

NOTE CONF {"raw":[86,97]}

00:00:12.600 --> 00:00:13.160
<v Speaker 0>Perfect.

NOTE CONF {"raw":[100]}

00:00:13.200 --> 00:00:15.320
<v Speaker 0>Okay, so just, uh, talking to us.

NOTE CONF {"raw":[81,100,100,92,83,97,65]}

00:00:15.520 --> 00:00:16.000
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:00:16.040 --> 00:00:16.640
<v Speaker 0>Awesome.

NOTE CONF {"raw":[100]}

00:00:16.800 --> 00:00:17.280
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:00:17.680 --> 00:00:19.760
<v Speaker 0>And I hear you tell everybody we're setting.

NOTE CONF {"raw":[100,98,98,100,100,100,92,78]}

00:00:20.920 --> 00:00:23.320
<v Speaker 0>All right, everyone, the recording is live.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:00:23.320 --> 00:00:24.840
<v Speaker 0>We're going to go ahead and get started.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:00:24.840 --> 00:00:28.880
<v Speaker 0>I'm going to turn it over to Condren.

NOTE CONF {"raw":[100,100,100,100,100,100,100,63]}

00:00:29.080 --> 00:00:29.600
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:00:29.600 --> 00:00:30.960
<v Speaker 0>To give a quick announcement.

NOTE CONF {"raw":[100,100,100,100,100]}

00:00:31.360 --> 00:00:31.800
<v Speaker 0>Yes.

NOTE CONF {"raw":[91]}

00:00:32.640 --> 00:00:33.200
<v Speaker 0>Hello.

NOTE CONF {"raw":[100]}

00:00:33.480 --> 00:00:33.960
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:00:34.240 --> 00:00:34.600
<v Speaker 1>Hello.

NOTE CONF {"raw":[100]}

00:00:34.600 --> 00:00:35.280
<v Speaker 1>Hi, everyone.

NOTE CONF {"raw":[100,100]}

00:00:35.280 --> 00:00:37.000
<v Speaker 1>I'm Catherine from type sig.

NOTE CONF {"raw":[100,33,100,100,100]}

00:00:37.040 --> 00:00:40.520
<v Speaker 1>Type sig being the, uh, student society on programming languages

NOTE CONF {"raw":[100,100,100,100,96,100,100,100,100,100]}

00:00:40.520 --> 00:00:41.840
<v Speaker 1>and theoretical computer science.

NOTE CONF {"raw":[100,100,100,100]}

00:00:41.840 --> 00:00:44.280
<v Speaker 1>And this is a bit of a, an advertisement for

NOTE CONF {"raw":[100,100,100,100,100,100,96,74,100,100]}

00:00:44.280 --> 00:00:47.640
<v Speaker 1>tuples, which is our student conference, uh, running at the

NOTE CONF {"raw":[100,100,100,100,100,100,90,100,100,100]}

00:00:47.640 --> 00:00:49.000
<v Speaker 1>end of Flexible learning week.

NOTE CONF {"raw":[100,100,100,100,100]}

00:00:49.240 --> 00:00:51.280
<v Speaker 1>So you should come and I'll try and convince you.

NOTE CONF {"raw":[100,100,100,100,100,95,100,100,100,100]}

00:00:51.920 --> 00:00:53.360
<v Speaker 1>Um, what is tuples?

NOTE CONF {"raw":[100,100,100,100]}

00:00:53.360 --> 00:00:54.640
<v Speaker 1>It's a student conference.

NOTE CONF {"raw":[100,100,100,100]}

00:00:55.000 --> 00:00:56.040
<v Speaker 1>Um, which is.

NOTE CONF {"raw":[100,100,100]}

00:00:56.520 --> 00:00:56.840
<v Speaker 1>Yeah.

NOTE CONF {"raw":[100]}

00:00:56.880 --> 00:00:59.280
<v Speaker 1>Meaning it's meant for students like you and me.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:00:59.770 --> 00:01:03.130
<v Speaker 1>Um, and what we've done is we've gathered 12 speakers

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:03.130 --> 00:01:06.250
<v Speaker 1>from across the UK to speak about theoretical computer science.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:06.250 --> 00:01:09.610
<v Speaker 1>So you have we have two tracks, one on general

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:09.610 --> 00:01:11.770
<v Speaker 1>theory and the other one on programming languages.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:01:12.210 --> 00:01:14.930
<v Speaker 1>Um, and we have speakers, 12 speakers, you know, from,

NOTE CONF {"raw":[66,100,100,100,100,100,100,78,78,100]}

00:01:14.930 --> 00:01:17.490
<v Speaker 1>from all of these, um, over here.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:01:18.090 --> 00:01:20.490
<v Speaker 1>Um, if you look at these words and you don't

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:20.490 --> 00:01:21.970
<v Speaker 1>know what they mean, that's totally fine.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:01:22.210 --> 00:01:24.250
<v Speaker 1>Uh, we the goal of this conference is that we

NOTE CONF {"raw":[94,83,100,100,100,100,100,100,100,100]}

00:01:24.250 --> 00:01:25.690
<v Speaker 1>introduce you to these things.

NOTE CONF {"raw":[100,100,100,100,100]}

00:01:26.090 --> 00:01:27.530
<v Speaker 1>And even though some of the topics might be a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:27.530 --> 00:01:31.090
<v Speaker 1>bit involved, um, we're trying to make it as accessible

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:31.090 --> 00:01:31.890
<v Speaker 1>as possible.

NOTE CONF {"raw":[100,100]}

00:01:32.170 --> 00:01:34.170
<v Speaker 1>Um, right.

NOTE CONF {"raw":[100,96]}

00:01:34.250 --> 00:01:36.130
<v Speaker 1>An important thing is you can switch between the tracks

NOTE CONF {"raw":[92,100,100,100,100,100,100,100,100,100]}

00:01:36.130 --> 00:01:37.010
<v Speaker 1>during the day.

NOTE CONF {"raw":[100,100,100]}

00:01:37.250 --> 00:01:38.930
<v Speaker 1>So don't feel like you have to stick to one.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:38.930 --> 00:01:41.610
<v Speaker 1>You can jump around depending on which talks you find

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:41.610 --> 00:01:42.450
<v Speaker 1>more interesting.

NOTE CONF {"raw":[100,100]}

00:01:42.930 --> 00:01:46.410
<v Speaker 1>Um, to give you an example, um, we have one

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:46.410 --> 00:01:48.970
<v Speaker 1>speaker in the theory track, which is Christian.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:01:49.570 --> 00:01:53.690
<v Speaker 1>Um, he will, uh, he's very interested in, uh, geometric

NOTE CONF {"raw":[100,100,100,92,100,100,100,100,80,100]}

00:01:53.690 --> 00:01:56.970
<v Speaker 1>complexity theory, which I don't know much about, but if

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:01:56.970 --> 00:01:59.590
<v Speaker 1>you're interested in that, you could come to his talk.

NOTE CONF {"raw":[71,100,100,100,100,76,100,100,97,99]}

00:02:00.110 --> 00:02:03.750
<v Speaker 1>Um, and we also have Thurston coming from Nottingham who

NOTE CONF {"raw":[47,100,100,100,100,91,100,100,100,100]}

00:02:03.750 --> 00:02:05.230
<v Speaker 1>will talk about fancy types.

NOTE CONF {"raw":[100,100,100,100,100]}

00:02:05.550 --> 00:02:08.550
<v Speaker 1>So types that type systems that go a bit beyond,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:08.910 --> 00:02:11.470
<v Speaker 1>uh, the type systems you'd find in Java or other

NOTE CONF {"raw":[66,100,100,100,100,100,100,100,100,100]}

00:02:11.470 --> 00:02:12.230
<v Speaker 1>languages.

NOTE CONF {"raw":[100]}

00:02:12.510 --> 00:02:13.990
<v Speaker 1>And what can we do with them?

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:02:15.230 --> 00:02:15.550
<v Speaker 1>Right.

NOTE CONF {"raw":[100]}

00:02:15.590 --> 00:02:17.350
<v Speaker 1>So, um, when will it happen?

NOTE CONF {"raw":[100,54,100,100,100,100]}

00:02:17.390 --> 00:02:20.470
<v Speaker 1>23rd February at the end of Flexible Learning Week.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:02:21.070 --> 00:02:23.550
<v Speaker 1>Um, from about 10 a.m., maybe a bit earlier till

NOTE CONF {"raw":[97,100,100,97,97,100,100,100,96,73]}

00:02:23.590 --> 00:02:25.750
<v Speaker 1>530 in nucleus.

NOTE CONF {"raw":[100,100,100]}

00:02:25.750 --> 00:02:27.710
<v Speaker 1>In fact, one of the lecture theatres is going to

NOTE CONF {"raw":[100,100,100,100,100,100,95,100,100,100]}

00:02:27.710 --> 00:02:28.390
<v Speaker 1>be this one.

NOTE CONF {"raw":[100,100,100]}

00:02:28.390 --> 00:02:32.350
<v Speaker 1>So please come and then you can get your tickets

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:32.350 --> 00:02:32.870
<v Speaker 1>there.

NOTE CONF {"raw":[100]}

00:02:33.550 --> 00:02:36.070
<v Speaker 1>It costs £5, but if you use that code that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:36.070 --> 00:02:38.750
<v Speaker 1>I've added this morning for you guys, uh, you can

NOTE CONF {"raw":[100,100,100,100,100,100,100,94,100,100]}

00:02:38.750 --> 00:02:39.790
<v Speaker 1>get £1 off.

NOTE CONF {"raw":[100,100,100]}

00:02:40.350 --> 00:02:43.270
<v Speaker 1>Um, and in that ticket price, you get catering for

NOTE CONF {"raw":[72,100,100,100,100,100,100,100,100,100]}

00:02:43.270 --> 00:02:43.750
<v Speaker 1>the whole day.

NOTE CONF {"raw":[100,100,100]}

00:02:43.790 --> 00:02:45.910
<v Speaker 1>So you get lunch, you get coffee and snacks.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:02:45.910 --> 00:02:48.030
<v Speaker 1>So even if you just want food, you can come

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:48.030 --> 00:02:48.470
<v Speaker 1>for that.

NOTE CONF {"raw":[100,100]}

00:02:48.510 --> 00:02:49.350
<v Speaker 1>It's quite cheap.

NOTE CONF {"raw":[100,100,100]}

00:02:49.910 --> 00:02:52.150
<v Speaker 1>Um, and you also get access to all the talks

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:02:52.310 --> 00:02:53.830
<v Speaker 1>and types of branded items.

NOTE CONF {"raw":[100,91,91,100,100]}

00:02:53.830 --> 00:02:57.270
<v Speaker 1>So you will give out conference tote bags and stickers

NOTE CONF {"raw":[100,97,97,100,100,100,100,100,100,100]}

00:02:57.270 --> 00:02:57.760
<v Speaker 1>and stuff.

NOTE CONF {"raw":[100,100]}

00:02:57.760 --> 00:02:59.480
<v Speaker 1>So that should be.

NOTE CONF {"raw":[100,54,100,100]}

00:02:59.520 --> 00:03:00.280
<v Speaker 1>Should be fun.

NOTE CONF {"raw":[100,100,100]}

00:03:00.920 --> 00:03:01.560
<v Speaker 1>Thank you.

NOTE CONF {"raw":[100,100]}

00:03:02.960 --> 00:03:03.320
<v Speaker 0>Thanks.

NOTE CONF {"raw":[86]}

00:03:10.600 --> 00:03:11.000
<v Speaker 0>Terrific.

NOTE CONF {"raw":[100]}

00:03:11.040 --> 00:03:11.880
<v Speaker 0>Thanks so much.

NOTE CONF {"raw":[95,100,100]}

00:03:12.640 --> 00:03:15.560
<v Speaker 0>Uh, while I'm switching over to my laptop, I'll make

NOTE CONF {"raw":[51,91,100,100,100,100,100,100,100,100]}

00:03:15.560 --> 00:03:17.960
<v Speaker 0>one more appeal for anyone who came in late.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:03:18.000 --> 00:03:22.080
<v Speaker 0>Does anybody have one of the HDMI to Mac dongles?

NOTE CONF {"raw":[100,100,100,100,100,100,100,89,100,100]}

00:03:22.120 --> 00:03:23.760
<v Speaker 0>I have one of the old Mac pros.

NOTE CONF {"raw":[100,100,100,100,100,100,100,98]}

00:03:24.280 --> 00:03:27.160
<v Speaker 0>If anybody happens to have that, it'd be a hero.

NOTE CONF {"raw":[100,100,100,100,100,100,68,100,100,100]}

00:03:29.320 --> 00:03:32.120
<v Speaker 0>If you suddenly find it, simply interrupt the lecture.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:03:34.400 --> 00:03:35.240
<v Speaker 0>Someone does.

NOTE CONF {"raw":[100,100]}

00:03:36.840 --> 00:03:37.720
<v Speaker 0>Let me see if this works.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:03:37.720 --> 00:03:38.960
<v Speaker 0>I have one of the old ones.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:03:40.200 --> 00:03:41.160
<v Speaker 0>Thank you so much.

NOTE CONF {"raw":[100,100,100,100]}

00:03:43.720 --> 00:03:44.640
<v Speaker 0>This might be it.

NOTE CONF {"raw":[100,100,100,100]}

00:03:51.000 --> 00:03:51.920
<v Speaker 0>Well, I will.

NOTE CONF {"raw":[100,100,54]}

00:03:51.920 --> 00:03:53.080
<v Speaker 0>I get plugged in here.

NOTE CONF {"raw":[99,100,100,100,100]}

00:03:54.600 --> 00:03:56.320
<v Speaker 0>Uh, you can tell I'm not Fiona.

NOTE CONF {"raw":[82,100,100,100,100,100,100]}

00:03:56.360 --> 00:03:58.810
<v Speaker 0>I think she sent out an email about it.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:03:58.810 --> 00:03:59.730
<v Speaker 0>Possibly.

NOTE CONF {"raw":[100]}

00:04:00.090 --> 00:04:01.770
<v Speaker 0>Uh, she's in Glasgow today.

NOTE CONF {"raw":[64,100,100,100,100]}

00:04:02.410 --> 00:04:04.690
<v Speaker 0>I think attending some sort of workshop or conference or

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:04.690 --> 00:04:05.650
<v Speaker 0>something like this.

NOTE CONF {"raw":[100,100,100]}

00:04:06.130 --> 00:04:09.050
<v Speaker 0>So I'm the Ta for the course.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:04:09.210 --> 00:04:10.410
<v Speaker 0>My name is Colton.

NOTE CONF {"raw":[100,100,100,88]}

00:04:10.530 --> 00:04:13.170
<v Speaker 0>I'm a PhD student at the university.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:04:13.490 --> 00:04:14.730
<v Speaker 0>I studied generative AI.

NOTE CONF {"raw":[100,93,100,94]}

00:04:15.730 --> 00:04:18.170
<v Speaker 0>I used the to the Java class though back at

NOTE CONF {"raw":[100,100,34,100,100,100,100,100,100,100]}

00:04:18.170 --> 00:04:19.530
<v Speaker 0>my previous university.

NOTE CONF {"raw":[100,100,100]}

00:04:19.890 --> 00:04:21.650
<v Speaker 0>So Fiona asked if I could jump in.

NOTE CONF {"raw":[100,100,97,100,100,100,100,100]}

00:04:22.410 --> 00:04:24.890
<v Speaker 0>And so I'm going to be giving the lecture today.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:25.130 --> 00:04:27.050
<v Speaker 0>And I have a cold.

NOTE CONF {"raw":[100,100,100,100,100]}

00:04:27.530 --> 00:04:29.290
<v Speaker 0>I haven't lectured this course before.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:04:29.370 --> 00:04:31.730
<v Speaker 0>And my laptop doesn't plug into this.

NOTE CONF {"raw":[100,100,100,100,100,66,98]}

00:04:32.010 --> 00:04:34.370
<v Speaker 0>So I found all of this out this morning.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:04:34.770 --> 00:04:39.210
<v Speaker 0>And so I'm trying to do my best to still

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:04:39.210 --> 00:04:40.530
<v Speaker 0>put on a great lecture.

NOTE CONF {"raw":[100,100,100,100,100]}

00:04:41.450 --> 00:04:43.130
<v Speaker 0>So let me see if this works.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:04:43.610 --> 00:04:45.970
<v Speaker 0>Um, if it does, that'll be phenomenal because I won't

NOTE CONF {"raw":[83,100,100,100,100,100,100,100,100,100]}

00:04:45.970 --> 00:04:48.090
<v Speaker 0>have to use my friend's laptop.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:04:55.010 --> 00:04:55.990
<v Speaker 0>Uh, but Let's see.

NOTE CONF {"raw":[54,61,100,100]}

00:05:04.310 --> 00:05:04.910
<v Speaker 0>All right.

NOTE CONF {"raw":[100,100]}

00:05:05.670 --> 00:05:06.470
<v Speaker 0>Thank you so much.

NOTE CONF {"raw":[100,100,86,46]}

00:05:06.510 --> 00:05:09.110
<v Speaker 0>Thank you so much for the for the adaptor.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,96]}

00:05:09.350 --> 00:05:10.710
<v Speaker 0>Come grab it from me after.

NOTE CONF {"raw":[100,100,100,96,100,100]}

00:05:12.230 --> 00:05:12.590
<v Speaker 0>So, yes.

NOTE CONF {"raw":[98,100]}

00:05:12.590 --> 00:05:13.470
<v Speaker 0>Flexible learning.

NOTE CONF {"raw":[100,100]}

00:05:13.470 --> 00:05:16.430
<v Speaker 0>The only announcement I have to make is flexible learning

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:16.430 --> 00:05:17.510
<v Speaker 0>week is next week.

NOTE CONF {"raw":[100,100,100,100]}

00:05:17.590 --> 00:05:24.230
<v Speaker 0>That means no lecture, no tutorials, no labs, no no

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:24.230 --> 00:05:24.670
<v Speaker 0>nothing.

NOTE CONF {"raw":[100]}

00:05:24.750 --> 00:05:27.910
<v Speaker 0>There is nothing going on with the course as far

NOTE CONF {"raw":[92,92,100,100,100,100,100,100,100,100]}

00:05:27.910 --> 00:05:30.110
<v Speaker 0>as an in-person commitment.

NOTE CONF {"raw":[100,100,100,100]}

00:05:30.710 --> 00:05:31.830
<v Speaker 0>So don't don't show up.

NOTE CONF {"raw":[100,100,100,100,100]}

00:05:31.870 --> 00:05:33.230
<v Speaker 0>No one, no one will be around.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:05:36.470 --> 00:05:38.910
<v Speaker 0>Hope everyone has some fun plans by the way I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:38.910 --> 00:05:39.350
<v Speaker 0>see.

NOTE CONF {"raw":[100]}

00:05:39.950 --> 00:05:41.550
<v Speaker 0>Definitely not revising.

NOTE CONF {"raw":[100,100,100]}

00:05:42.070 --> 00:05:43.070
<v Speaker 0>We've all been there.

NOTE CONF {"raw":[100,100,100,100]}

00:05:43.750 --> 00:05:45.870
<v Speaker 0>Hope everyone has safe travels.

NOTE CONF {"raw":[100,100,100,100,100]}

00:05:46.350 --> 00:05:47.670
<v Speaker 0>If you're if you're leaving Edinburgh.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:05:53.430 --> 00:05:55.640
<v Speaker 0>Okay, so I noticed that screen was flickering.

NOTE CONF {"raw":[100,100,100,68,100,100,100,100]}

00:05:55.640 --> 00:05:58.440
<v Speaker 0>If that keeps happening, I'll switch, but I'll go for

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:05:58.440 --> 00:05:59.120
<v Speaker 0>it for now.

NOTE CONF {"raw":[100,100,100]}

00:05:59.840 --> 00:06:04.000
<v Speaker 0>So today we're talking about the stack versus the heap.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:04.560 --> 00:06:08.200
<v Speaker 0>And if you've studied any data structures at all, you

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:08.200 --> 00:06:10.040
<v Speaker 0>might be thinking, oh boy, exciting.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:06:10.040 --> 00:06:12.400
<v Speaker 0>We're going to be talking about data structures and algorithms

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:12.400 --> 00:06:15.680
<v Speaker 0>today because you will have possibly heard the stack and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:15.680 --> 00:06:17.720
<v Speaker 0>the heap are both data structures.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:06:18.120 --> 00:06:21.040
<v Speaker 0>But I am sorry to disappoint that this is just

NOTE CONF {"raw":[83,62,56,100,100,100,100,100,100,100]}

00:06:21.040 --> 00:06:22.480
<v Speaker 0>memory today.

NOTE CONF {"raw":[100,100]}

00:06:22.480 --> 00:06:26.240
<v Speaker 0>So we're going to be talking about different memory structures

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:26.480 --> 00:06:30.120
<v Speaker 0>that Java uses under the hood in order to store

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:30.120 --> 00:06:32.920
<v Speaker 0>everything that you do while you code.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:06:33.120 --> 00:06:35.280
<v Speaker 0>Up until now, I think Fiona has talked to you

NOTE CONF {"raw":[100,100,100,100,100,96,100,100,100,100]}

00:06:35.280 --> 00:06:39.400
<v Speaker 0>about memory, specifically with storing objects.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:06:39.800 --> 00:06:41.320
<v Speaker 0>And so today we're going to go into a bit

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:41.320 --> 00:06:45.520
<v Speaker 0>more depth on what actually happens when you store objects

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:45.520 --> 00:06:47.000
<v Speaker 0>versus normal variables.

NOTE CONF {"raw":[100,100,100]}

00:06:47.200 --> 00:06:48.920
<v Speaker 0>They get stored in two different places.

NOTE CONF {"raw":[99,100,97,100,100,100,100]}

00:06:49.720 --> 00:06:52.200
<v Speaker 0>And how knowing this can help you avoid what we

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:06:52.200 --> 00:06:55.170
<v Speaker 0>call side effects when you're working with objects.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:06:55.170 --> 00:06:58.530
<v Speaker 0>So this is a bit lower level than the just

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,97]}

00:06:58.530 --> 00:07:01.490
<v Speaker 0>syntactical Java you've been learning throughout the course, but it's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:01.490 --> 00:07:04.010
<v Speaker 0>actually quite interesting and something you're going to run into

NOTE CONF {"raw":[100,100,100,72,100,100,100,100,100,100]}

00:07:04.130 --> 00:07:05.290
<v Speaker 0>fairly often.

NOTE CONF {"raw":[100,100]}

00:07:08.650 --> 00:07:13.050
<v Speaker 0>So so far you've learned that objects have a static

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:13.050 --> 00:07:15.850
<v Speaker 0>compile time type defined inside a class.

NOTE CONF {"raw":[100,100,100,100,100,92,100]}

00:07:15.850 --> 00:07:18.370
<v Speaker 0>So when you create an object in Java, you have

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:18.370 --> 00:07:22.130
<v Speaker 0>to tell Java what type of object it is.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:07:23.290 --> 00:07:26.290
<v Speaker 0>These are then instances of these classes are created at

NOTE CONF {"raw":[100,100,96,100,100,100,100,100,100,100]}

00:07:26.290 --> 00:07:29.770
<v Speaker 0>runtime and you've learned all about the new keyword.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:07:29.810 --> 00:07:33.050
<v Speaker 0>Fiona tells me so that creates a new object.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:07:33.050 --> 00:07:36.370
<v Speaker 0>And as we see, the new keyword is very important

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:36.370 --> 00:07:38.610
<v Speaker 0>for knowing how it gets assigned in memory.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:07:38.890 --> 00:07:41.690
<v Speaker 0>And then objects are reference types, so they get passed

NOTE CONF {"raw":[100,100,100,93,100,100,100,100,100,100]}

00:07:41.690 --> 00:07:42.650
<v Speaker 0>by reference.

NOTE CONF {"raw":[100,100]}

00:07:42.650 --> 00:07:45.290
<v Speaker 0>What that means is unlike an integer or a primitive

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:45.330 --> 00:07:49.370
<v Speaker 0>type, where if you pass the integer one to a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:49.370 --> 00:07:52.750
<v Speaker 0>function, it's getting an actual value of one.

NOTE CONF {"raw":[100,97,100,100,100,100,100,100]}

00:07:52.830 --> 00:07:56.110
<v Speaker 0>But if you pass an object to a function, it's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:07:56.110 --> 00:08:00.590
<v Speaker 0>not getting the actual object, it's getting a reference to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:00.630 --> 00:08:03.710
<v Speaker 0>where that object lives in memory.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:08:04.310 --> 00:08:05.910
<v Speaker 0>This is a little tricky to wrap your head around,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:05.910 --> 00:08:07.950
<v Speaker 0>but we're going to go over some examples today where

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,99]}

00:08:07.950 --> 00:08:09.430
<v Speaker 0>hopefully it'll make more sense.

NOTE CONF {"raw":[100,91,100,100,100]}

00:08:12.110 --> 00:08:14.910
<v Speaker 0>Okay, so I think I think the circle class has

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:14.910 --> 00:08:17.430
<v Speaker 0>either come up before in the course or has been

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:17.430 --> 00:08:19.430
<v Speaker 0>teased that it's going to come up in the course,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:19.430 --> 00:08:21.390
<v Speaker 0>but we're going to talk all about it today, and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:21.390 --> 00:08:23.710
<v Speaker 0>then we're going to use it to write some code.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:23.990 --> 00:08:26.390
<v Speaker 0>So the circle class is is public.

NOTE CONF {"raw":[100,100,100,100,86,93,100]}

00:08:26.430 --> 00:08:30.590
<v Speaker 0>It has a constructor that takes a double radius.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:08:30.590 --> 00:08:32.390
<v Speaker 0>That would be the radius of the circle.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:08:32.669 --> 00:08:36.950
<v Speaker 0>We have a get area method that returns a double

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:37.150 --> 00:08:38.909
<v Speaker 0>which would be the area of a circle.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:08:38.909 --> 00:08:41.229
<v Speaker 0>So pi r squared.

NOTE CONF {"raw":[100,100,100,100]}

00:08:41.310 --> 00:08:43.310
<v Speaker 0>So with the radius we can compute that.

NOTE CONF {"raw":[100,91,100,100,100,100,100,100]}

00:08:43.669 --> 00:08:47.030
<v Speaker 0>We have a void method called enlarge that can increase

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:47.030 --> 00:08:49.550
<v Speaker 0>the radius of the circle by a certain factor.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:08:50.310 --> 00:08:54.480
<v Speaker 0>And then we have our Boolean equals method, which all

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:54.520 --> 00:08:58.320
<v Speaker 0>objects typically have, which gives you a way to compare

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:08:58.320 --> 00:09:02.440
<v Speaker 0>if two of the same type of object are equal.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:02.800 --> 00:09:06.640
<v Speaker 0>And you'll notice at the bottom right there, the equals

NOTE CONF {"raw":[100,100,100,100,100,100,78,100,100,100]}

00:09:06.640 --> 00:09:10.040
<v Speaker 0>method is going to return true if means if and

NOTE CONF {"raw":[100,100,100,100,100,100,100,98,100,100]}

00:09:10.040 --> 00:09:13.520
<v Speaker 0>only if if and only if A is a circle

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:13.520 --> 00:09:14.960
<v Speaker 0>of the same size.

NOTE CONF {"raw":[100,100,100,100]}

00:09:15.080 --> 00:09:18.200
<v Speaker 0>So this particular equals method is not going to check

NOTE CONF {"raw":[100,100,100,97,100,100,100,100,100,100]}

00:09:18.600 --> 00:09:21.320
<v Speaker 0>if the two objects are pointing to the exact same

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:21.320 --> 00:09:22.560
<v Speaker 0>spot in memory.

NOTE CONF {"raw":[100,100,100]}

00:09:23.000 --> 00:09:25.000
<v Speaker 0>This equals method is going to be checking.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:09:25.200 --> 00:09:28.720
<v Speaker 0>Do two circles have the same radius.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:09:29.160 --> 00:09:31.200
<v Speaker 0>So even if they're stored separately, if they have the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:31.200 --> 00:09:33.840
<v Speaker 0>same radius we're going to consider them equal.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:09:34.320 --> 00:09:35.960
<v Speaker 0>We'll get some practice with this in a second.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,81]}

00:09:36.840 --> 00:09:38.480
<v Speaker 0>We'll get some practice with this right now.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:09:41.280 --> 00:09:44.800
<v Speaker 0>So I'm going to erase all of this.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:09:45.960 --> 00:09:47.240
<v Speaker 0>And I'm going to have a go.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:09:47.760 --> 00:09:48.600
<v Speaker 0>You can see this right.

NOTE CONF {"raw":[94,100,100,100,100]}

00:09:48.640 --> 00:09:50.610
<v Speaker 0>Yeah I'm going to have a have a go at

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:50.610 --> 00:09:56.130
<v Speaker 0>writing this from scratch, because I think Fiona usually does

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:09:56.130 --> 00:09:57.130
<v Speaker 0>some live coding.

NOTE CONF {"raw":[100,100,100]}

00:09:57.570 --> 00:09:58.490
<v Speaker 0>I'm going to have a go with that.

NOTE CONF {"raw":[100,100,100,100,90,100,78,100]}

00:09:58.490 --> 00:10:00.330
<v Speaker 0>And also, the lecture today isn't that long.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:10:00.610 --> 00:10:02.850
<v Speaker 0>So I'm actually going to walk through the code because

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:02.850 --> 00:10:04.210
<v Speaker 0>there aren't a ton of slides.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:10:04.490 --> 00:10:05.970
<v Speaker 0>And so we're going to go through this.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:10:06.330 --> 00:10:09.490
<v Speaker 0>And yeah if anyone has any questions at any point

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:09.530 --> 00:10:10.850
<v Speaker 0>feel free to throw your hand up.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:10:11.490 --> 00:10:11.970
<v Speaker 0>All right.

NOTE CONF {"raw":[99,99]}

00:10:12.130 --> 00:10:15.370
<v Speaker 0>So a couple of things we're going to do here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:16.170 --> 00:10:18.810
<v Speaker 0>So we're going to make a circle called C1.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,93]}

00:10:18.810 --> 00:10:21.170
<v Speaker 0>And that's going to equal a new circle.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:10:21.170 --> 00:10:24.490
<v Speaker 0>And I'm going to give that a radius of one.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:25.850 --> 00:10:32.330
<v Speaker 0>And then I'm going to print out the area.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:10:32.370 --> 00:10:34.130
<v Speaker 0>Actually I guess I could print the radius.

NOTE CONF {"raw":[100,100,100,100,78,100,100,100]}

00:10:35.730 --> 00:10:37.450
<v Speaker 0>I'll print out the radius of the circle.

NOTE CONF {"raw":[100,100,100,100,100,100,91,100]}

00:10:38.890 --> 00:10:42.370
<v Speaker 0>By the way the circle class is right here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:10:42.370 --> 00:10:45.570
<v Speaker 0>And the reason that I can access the radius variable

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:45.570 --> 00:10:47.490
<v Speaker 0>is because it's public here.

NOTE CONF {"raw":[100,100,100,100,100]}

00:10:48.290 --> 00:10:51.430
<v Speaker 0>So if this if this were private, which you often

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:51.470 --> 00:10:54.110
<v Speaker 0>see when you're writing Java, a lot of the class

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:10:54.110 --> 00:10:55.670
<v Speaker 0>variables will be private.

NOTE CONF {"raw":[100,100,100,100]}

00:10:56.310 --> 00:10:57.710
<v Speaker 0>If I switch that to private.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:10:57.750 --> 00:10:58.990
<v Speaker 0>Notice how I get an error.

NOTE CONF {"raw":[100,100,97,100,100,100]}

00:11:00.430 --> 00:11:04.030
<v Speaker 0>I can't call the radius like this if it's private,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:04.030 --> 00:11:07.150
<v Speaker 0>because private means it's only accessible inside the class.

NOTE CONF {"raw":[99,100,100,100,100,100,100,100,100]}

00:11:08.190 --> 00:11:11.750
<v Speaker 0>I could still call get area because that's a public

NOTE CONF {"raw":[100,100,100,100,74,100,100,100,100,100]}

00:11:11.750 --> 00:11:14.710
<v Speaker 0>method on the class.

NOTE CONF {"raw":[100,100,100,100]}

00:11:14.750 --> 00:11:17.390
<v Speaker 0>It's public, but I want to show you how the

NOTE CONF {"raw":[96,100,100,100,98,100,100,100,100,100]}

00:11:17.390 --> 00:11:18.710
<v Speaker 0>radius gets manipulated.

NOTE CONF {"raw":[100,100,100]}

00:11:18.710 --> 00:11:22.710
<v Speaker 0>So I could either write a get radius method that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:22.710 --> 00:11:25.510
<v Speaker 0>would return the radius, or just to make things easy

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:25.510 --> 00:11:26.310
<v Speaker 0>for today.

NOTE CONF {"raw":[100,92]}

00:11:27.910 --> 00:11:31.990
<v Speaker 0>I'm going to make this class variable public, which means

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:11:31.990 --> 00:11:35.230
<v Speaker 0>I can access it here.

NOTE CONF {"raw":[100,100,100,100,99]}

00:11:35.870 --> 00:11:38.070
<v Speaker 0>Radius like that.

NOTE CONF {"raw":[100,100,100]}

00:11:39.070 --> 00:11:39.430
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:11:39.470 --> 00:11:41.110
<v Speaker 0>So then if I go ahead and.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:11:43.950 --> 00:11:46.670
<v Speaker 0>Compile and run this, I get.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:11:46.670 --> 00:11:49.760
<v Speaker 0>And hopefully you can see that I get 1.0.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:11:53.200 --> 00:11:54.400
<v Speaker 0>I can try to make it a little bigger, but

NOTE CONF {"raw":[69,88,100,100,100,100,100,100,100,100]}

00:11:54.400 --> 00:11:55.560
<v Speaker 0>then it gets tough to see.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:12:00.360 --> 00:12:00.880
<v Speaker 0>Right.

NOTE CONF {"raw":[88]}

00:12:01.000 --> 00:12:02.680
<v Speaker 0>So I'm going to make another circle.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:12:04.160 --> 00:12:07.840
<v Speaker 0>So circle C2 equals new circle.

NOTE CONF {"raw":[100,100,68,100,100,100]}

00:12:07.880 --> 00:12:09.640
<v Speaker 0>And I'm going to give this one a radius of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:09.640 --> 00:12:10.040
<v Speaker 0>two.

NOTE CONF {"raw":[100]}

00:12:10.880 --> 00:12:15.720
<v Speaker 0>And then I will print out C2 is radius same

NOTE CONF {"raw":[100,100,100,100,100,100,98,62,100,100]}

00:12:15.720 --> 00:12:16.640
<v Speaker 0>as the first one.

NOTE CONF {"raw":[100,100,100,100]}

00:12:17.120 --> 00:12:19.320
<v Speaker 0>And then I'm going to make a third circle.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:12:19.320 --> 00:12:21.320
<v Speaker 0>And this is where we get a little bit more

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:21.320 --> 00:12:21.720
<v Speaker 0>interesting.

NOTE CONF {"raw":[100]}

00:12:21.720 --> 00:12:23.480
<v Speaker 0>So I'm going to make circle C3.

NOTE CONF {"raw":[100,100,100,100,100,100,96]}

00:12:23.840 --> 00:12:27.400
<v Speaker 0>I'm going to set that equal to C1 like that.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:28.560 --> 00:12:34.440
<v Speaker 0>And then I'm going to print out C3 dot radius

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:34.640 --> 00:12:35.640
<v Speaker 0>like so.

NOTE CONF {"raw":[100,100]}

00:12:37.320 --> 00:12:38.400
<v Speaker 0>So I'm going to run this.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:12:39.920 --> 00:12:40.520
<v Speaker 0>All right.

NOTE CONF {"raw":[99,100]}

00:12:41.200 --> 00:12:42.320
<v Speaker 0>And notice what we get.

NOTE CONF {"raw":[100,100,100,100,100]}

00:12:42.680 --> 00:12:45.120
<v Speaker 0>So radius of one radius of two for the two

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:45.120 --> 00:12:47.690
<v Speaker 0>circles that I made from scratch.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:12:47.850 --> 00:12:50.890
<v Speaker 0>So because I used the new keyword, those get assigned

NOTE CONF {"raw":[100,100,100,58,100,100,100,100,100,100]}

00:12:50.890 --> 00:12:52.170
<v Speaker 0>to a place in memory.

NOTE CONF {"raw":[100,100,100,100,100]}

00:12:52.490 --> 00:12:54.530
<v Speaker 0>And then I made C3 by setting an equal to

NOTE CONF {"raw":[100,100,100,100,94,100,100,100,100,100]}

00:12:54.570 --> 00:12:55.250
<v Speaker 0>C1.

NOTE CONF {"raw":[100]}

00:12:55.330 --> 00:12:58.410
<v Speaker 0>And we see that C3 is radius is one, so

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:12:58.410 --> 00:13:00.450
<v Speaker 0>the same as circle one.

NOTE CONF {"raw":[100,100,100,100,100]}

00:13:01.090 --> 00:13:02.090
<v Speaker 0>Hopefully that makes sense.

NOTE CONF {"raw":[100,100,100,100]}

00:13:02.090 --> 00:13:03.490
<v Speaker 0>We're saying that they're equal.

NOTE CONF {"raw":[100,100,100,97,100]}

00:13:05.530 --> 00:13:08.570
<v Speaker 0>So now we're going to test a few equalities.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:13:08.930 --> 00:13:10.130
<v Speaker 0>So if we say.

NOTE CONF {"raw":[100,100,100,100]}

00:13:12.410 --> 00:13:18.690
<v Speaker 0>Circle one equals equals circle two versus circle one dot

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:18.730 --> 00:13:21.930
<v Speaker 0>equals circle two.

NOTE CONF {"raw":[100,100,100]}

00:13:22.530 --> 00:13:24.730
<v Speaker 0>And then I'll do the same thing for circle one

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:24.730 --> 00:13:25.730
<v Speaker 0>and circle three.

NOTE CONF {"raw":[100,100,100]}

00:13:26.330 --> 00:13:29.250
<v Speaker 0>So circle one equals circle three.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:13:29.450 --> 00:13:34.890
<v Speaker 0>And print out circle one dot equals circle three.

NOTE CONF {"raw":[100,95,100,100,100,100,100,100,100]}

00:13:35.370 --> 00:13:36.130
<v Speaker 0>Like this.

NOTE CONF {"raw":[100,100]}

00:13:36.690 --> 00:13:40.610
<v Speaker 0>Take a second and think about what these might produce.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:41.370 --> 00:13:42.330
<v Speaker 0>Well I run it.

NOTE CONF {"raw":[58,97,99,100]}

00:13:48.060 --> 00:13:53.020
<v Speaker 0>Okay, so if I print out circle one equals equals

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:53.020 --> 00:13:53.780
<v Speaker 0>circle two.

NOTE CONF {"raw":[100,100]}

00:13:54.460 --> 00:13:58.460
<v Speaker 0>Remember the equals equals operator is checking if these objects

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:13:58.460 --> 00:13:59.980
<v Speaker 0>are actually the same.

NOTE CONF {"raw":[100,100,100,100]}

00:14:00.060 --> 00:14:04.580
<v Speaker 0>If they point to the same spot in memory, they

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:04.580 --> 00:14:05.180
<v Speaker 0>don't.

NOTE CONF {"raw":[100]}

00:14:05.220 --> 00:14:05.620
<v Speaker 0>Right.

NOTE CONF {"raw":[80]}

00:14:05.660 --> 00:14:09.700
<v Speaker 0>Because I've created two new circles with the new keyword.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:09.700 --> 00:14:12.700
<v Speaker 0>Every time you use the new keyword, you're creating a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:12.700 --> 00:14:15.660
<v Speaker 0>new spot in memory for that object.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:14:16.260 --> 00:14:18.540
<v Speaker 0>So because those are two different spots in memory, I've

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:18.580 --> 00:14:20.300
<v Speaker 0>used new two different times.

NOTE CONF {"raw":[100,100,100,100,100]}

00:14:20.420 --> 00:14:21.980
<v Speaker 0>Those objects are not the same.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:14:23.540 --> 00:14:30.740
<v Speaker 0>If I say to see 1.2. equals is using this

NOTE CONF {"raw":[100,100,100,98,52,15,100,100,100,100]}

00:14:30.740 --> 00:14:34.820
<v Speaker 0>method here that we've defined where all we're checking are.

NOTE CONF {"raw":[100,100,100,100,100,63,100,100,100,91]}

00:14:34.860 --> 00:14:38.860
<v Speaker 0>If the radii are the same radii, radius is if

NOTE CONF {"raw":[100,100,100,100,100,100,100,72,56,100]}

00:14:38.860 --> 00:14:39.380
<v Speaker 0>they're the same.

NOTE CONF {"raw":[100,100,100]}

00:14:39.380 --> 00:14:41.220
<v Speaker 0>If they're the same, the circles are the same.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:14:42.460 --> 00:14:45.640
<v Speaker 0>So one and two are not equal, so that also

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:45.640 --> 00:14:46.640
<v Speaker 0>returns false.

NOTE CONF {"raw":[100,100]}

00:14:47.480 --> 00:14:51.160
<v Speaker 0>But now when I print out C1 equals equals c3

NOTE CONF {"raw":[100,100,100,100,100,100,100,99,100,100]}

00:14:51.320 --> 00:14:52.240
<v Speaker 0>that returns true.

NOTE CONF {"raw":[100,100,100]}

00:14:52.280 --> 00:14:55.320
<v Speaker 0>Those are the same object in memory.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:14:55.320 --> 00:14:58.440
<v Speaker 0>Because when we created circle three we didn't use the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:14:58.440 --> 00:14:59.400
<v Speaker 0>new keyword.

NOTE CONF {"raw":[100,100]}

00:14:59.560 --> 00:15:01.720
<v Speaker 0>We set it equal to C1.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:15:02.120 --> 00:15:04.000
<v Speaker 0>C1 already exists in memory.

NOTE CONF {"raw":[100,100,100,100,100]}

00:15:04.000 --> 00:15:07.800
<v Speaker 0>So C3 just points to that same spot in memory

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:07.800 --> 00:15:09.400
<v Speaker 0>that C1 occupies.

NOTE CONF {"raw":[100,100,100]}

00:15:10.080 --> 00:15:13.200
<v Speaker 0>Therefore when we compare them with equals equals they're true.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,88,100]}

00:15:13.240 --> 00:15:15.680
<v Speaker 0>They're the same exact object in memory.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:15:16.320 --> 00:15:19.640
<v Speaker 0>And naturally if we use dot equals that also is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:19.640 --> 00:15:23.520
<v Speaker 0>going to return true because they're the exact same object

NOTE CONF {"raw":[100,100,100,100,100,98,100,100,100,100]}

00:15:23.520 --> 00:15:26.720
<v Speaker 0>in memory, meaning they both have the same radius of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:15:26.720 --> 00:15:27.280
<v Speaker 0>one.

NOTE CONF {"raw":[100]}

00:15:29.160 --> 00:15:31.240
<v Speaker 0>Now we're going to do one other interesting thing.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:15:32.560 --> 00:15:33.840
<v Speaker 0>I am going to.

NOTE CONF {"raw":[100,100,100,100]}

00:15:37.320 --> 00:15:40.240
<v Speaker 0>I'm going to enlarge C1.

NOTE CONF {"raw":[100,100,100,100,100]}

00:15:44.530 --> 00:15:47.250
<v Speaker 0>By a factor of two.

NOTE CONF {"raw":[100,100,100,100,100]}

00:15:52.210 --> 00:15:54.330
<v Speaker 0>Now, I'll take a second to think about what might

NOTE CONF {"raw":[99,60,100,100,100,100,100,100,100,100]}

00:15:54.330 --> 00:15:55.130
<v Speaker 0>happen here.

NOTE CONF {"raw":[100,100]}

00:15:55.730 --> 00:15:56.650
<v Speaker 0>I'll run the code.

NOTE CONF {"raw":[100,100,100,100]}

00:16:02.410 --> 00:16:02.850
<v Speaker 0>Okay.

NOTE CONF {"raw":[97]}

00:16:03.050 --> 00:16:04.330
<v Speaker 0>Actually I should.

NOTE CONF {"raw":[100,100,100]}

00:16:04.450 --> 00:16:08.410
<v Speaker 0>I should probably print out the radiuses again after this.

NOTE CONF {"raw":[100,100,100,100,100,100,98,100,100,100]}

00:16:08.490 --> 00:16:11.850
<v Speaker 0>So let me print out, and it'll be more interesting

NOTE CONF {"raw":[100,100,100,100,100,51,100,100,100,100]}

00:16:11.850 --> 00:16:12.730
<v Speaker 0>if we do this.

NOTE CONF {"raw":[100,100,100,100]}

00:16:21.450 --> 00:16:22.730
<v Speaker 0>Yeah, let's do that.

NOTE CONF {"raw":[100,100,100,100]}

00:16:27.090 --> 00:16:27.370
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:16:27.410 --> 00:16:29.970
<v Speaker 0>So ignore ignore these first three.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:16:30.010 --> 00:16:33.130
<v Speaker 0>That was that was originally the radii of the three

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:33.130 --> 00:16:33.730
<v Speaker 0>circles.

NOTE CONF {"raw":[100]}

00:16:33.730 --> 00:16:36.890
<v Speaker 0>So now I've in the large C1 by a factor

NOTE CONF {"raw":[100,100,92,95,100,100,75,100,100,100]}

00:16:36.890 --> 00:16:37.290
<v Speaker 0>of two.

NOTE CONF {"raw":[100,100]}

00:16:37.330 --> 00:16:40.970
<v Speaker 0>And remember our enlarge method that just takes the radius

NOTE CONF {"raw":[100,100,94,72,100,100,100,100,100,100]}

00:16:40.970 --> 00:16:43.220
<v Speaker 0>and multiplies it by whatever factor I've passed in.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:16:43.220 --> 00:16:47.420
<v Speaker 0>So I've effectively changed the radius of circle one from

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:47.420 --> 00:16:48.620
<v Speaker 0>1 to 2.

NOTE CONF {"raw":[100,100,100]}

00:16:48.740 --> 00:16:49.940
<v Speaker 0>I've multiplied it by two.

NOTE CONF {"raw":[95,100,100,100,100]}

00:16:50.620 --> 00:16:57.500
<v Speaker 0>So now the radius of all three circles is two.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:16:59.380 --> 00:17:02.860
<v Speaker 0>But if I compare c1 to c2 this line down

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:02.860 --> 00:17:03.940
<v Speaker 0>here line 18.

NOTE CONF {"raw":[100,100,100]}

00:17:04.060 --> 00:17:07.300
<v Speaker 0>If I compare them it's still false.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:17:07.900 --> 00:17:11.579
<v Speaker 0>Because remember the equals equals operator is just checking if

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:11.579 --> 00:17:13.620
<v Speaker 0>they're occupying the same space in memory if they're the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:13.620 --> 00:17:14.540
<v Speaker 0>same object.

NOTE CONF {"raw":[100,100]}

00:17:14.660 --> 00:17:16.300
<v Speaker 0>So these are still two different objects.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:17:16.300 --> 00:17:19.140
<v Speaker 0>So even though the radii are the same they're not

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:19.140 --> 00:17:20.180
<v Speaker 0>the same object.

NOTE CONF {"raw":[100,100,100]}

00:17:20.860 --> 00:17:25.339
<v Speaker 0>But the one that has changed is c1 c2.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:17:25.500 --> 00:17:28.180
<v Speaker 0>They may not be the same object in memory, but

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:28.180 --> 00:17:29.860
<v Speaker 0>they do have the same radius now.

NOTE CONF {"raw":[100,100,100,100,100,100,64]}

00:17:29.900 --> 00:17:31.740
<v Speaker 0>They now both have a radius of two.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:17:31.820 --> 00:17:34.540
<v Speaker 0>So the one thing that's changed is that has flipped

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,98]}

00:17:34.540 --> 00:17:36.940
<v Speaker 0>from false to true, because they now have the same

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:36.940 --> 00:17:37.620
<v Speaker 0>radius.

NOTE CONF {"raw":[100]}

00:17:38.100 --> 00:17:40.620
<v Speaker 0>C1 and C3 are still the same circle.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:17:40.620 --> 00:17:40.680
<v Speaker 0>Cool.

NOTE CONF {"raw":[98]}

00:17:41.040 --> 00:17:42.360
<v Speaker 0>They both got enlarged.

NOTE CONF {"raw":[100,100,100,100]}

00:17:42.960 --> 00:17:44.480
<v Speaker 0>So they're both still true.

NOTE CONF {"raw":[100,100,100,100,100]}

00:17:51.000 --> 00:17:54.480
<v Speaker 0>Okay, so we've done all that.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:17:55.320 --> 00:17:58.800
<v Speaker 0>That's that's a little taster of the theory behind what

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:17:58.800 --> 00:17:59.880
<v Speaker 0>we're talking about today.

NOTE CONF {"raw":[100,100,100,100]}

00:17:59.920 --> 00:18:00.800
<v Speaker 0>Stack versus heap.

NOTE CONF {"raw":[100,100,98]}

00:18:00.800 --> 00:18:05.920
<v Speaker 0>So so far memory has been just this abstract space

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:05.920 --> 00:18:07.320
<v Speaker 0>where we store things.

NOTE CONF {"raw":[100,100,100,100]}

00:18:08.280 --> 00:18:10.840
<v Speaker 0>But actually it's not just memory.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:18:10.840 --> 00:18:13.920
<v Speaker 0>There's two types stack and there's heap in the Java

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:13.920 --> 00:18:16.520
<v Speaker 0>virtual machine manages both of these.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:18:17.400 --> 00:18:21.480
<v Speaker 0>So I'm not going to write this code I don't

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,70,100]}

00:18:21.480 --> 00:18:24.680
<v Speaker 0>know why it's a little small.

NOTE CONF {"raw":[100,100,100,100,100,83]}

00:18:25.160 --> 00:18:25.800
<v Speaker 0>There we go.

NOTE CONF {"raw":[100,100,100]}

00:18:27.800 --> 00:18:29.720
<v Speaker 0>I think this might make the most sense.

NOTE CONF {"raw":[100,100,95,100,100,100,100,100]}

00:18:29.760 --> 00:18:30.280
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:18:30.720 --> 00:18:33.960
<v Speaker 0>So we'll start with stack memory.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:18:34.200 --> 00:18:35.480
<v Speaker 0>There's stack and there's heap.

NOTE CONF {"raw":[99,100,97,100,100]}

00:18:35.520 --> 00:18:38.880
<v Speaker 0>Stack is transient.

NOTE CONF {"raw":[100,100,100]}

00:18:39.120 --> 00:18:41.610
<v Speaker 0>Transient meaning temporary.

NOTE CONF {"raw":[100,100,97]}

00:18:42.330 --> 00:18:46.770
<v Speaker 0>So we store local variables on the stack.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:18:47.410 --> 00:18:49.610
<v Speaker 0>Objects will get stored on the heap and we'll talk

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:49.610 --> 00:18:50.930
<v Speaker 0>about that more in a second.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:18:51.010 --> 00:18:53.730
<v Speaker 0>So in this code example here we're in the main

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:53.730 --> 00:18:56.170
<v Speaker 0>method we have an int called jack money.

NOTE CONF {"raw":[100,100,100,100,100,100,92,100]}

00:18:56.690 --> 00:18:59.090
<v Speaker 0>We have another int called jack target and we have

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:18:59.090 --> 00:19:00.890
<v Speaker 0>a double called weeks.

NOTE CONF {"raw":[100,100,100,100]}

00:19:01.410 --> 00:19:02.610
<v Speaker 0>None of those are objects.

NOTE CONF {"raw":[100,100,100,100,100]}

00:19:02.610 --> 00:19:04.330
<v Speaker 0>Those are all primitive types.

NOTE CONF {"raw":[100,100,100,100,100]}

00:19:04.690 --> 00:19:06.330
<v Speaker 0>So they all go on the stack.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:19:06.330 --> 00:19:08.490
<v Speaker 0>And we see that represented here on the right.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:19:08.490 --> 00:19:10.850
<v Speaker 0>So Jack money and its value jack target is value

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,49,100]}

00:19:10.890 --> 00:19:13.050
<v Speaker 0>weeks and its value that all gets stored on the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,97,100]}

00:19:13.050 --> 00:19:13.690
<v Speaker 0>stack.

NOTE CONF {"raw":[100]}

00:19:14.570 --> 00:19:16.330
<v Speaker 0>And they're all highlighted in blue.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:19:16.330 --> 00:19:18.890
<v Speaker 0>And there's a little call out to the right saying

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:18.890 --> 00:19:20.530
<v Speaker 0>a stack frame.

NOTE CONF {"raw":[100,100,100]}

00:19:21.050 --> 00:19:24.610
<v Speaker 0>This is a fancy way of simply saying that any

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,90]}

00:19:24.650 --> 00:19:28.530
<v Speaker 0>time you're inside of a method, all of the variables

NOTE CONF {"raw":[90,100,100,100,100,100,100,100,100,100]}

00:19:28.530 --> 00:19:32.330
<v Speaker 0>in that method get their own stack frame in the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:32.330 --> 00:19:32.930
<v Speaker 0>stack.

NOTE CONF {"raw":[100]}

00:19:33.050 --> 00:19:35.810
<v Speaker 0>So I'll show you an example in a second where

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:35.810 --> 00:19:39.420
<v Speaker 0>we have more than one stack frame, And just at

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:39.420 --> 00:19:40.260
<v Speaker 0>the bottom here.

NOTE CONF {"raw":[100,100,100]}

00:19:40.820 --> 00:19:44.460
<v Speaker 0>This would also include things like the main method has

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:44.460 --> 00:19:50.620
<v Speaker 0>the args parameter passed into it function arguments.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:19:50.620 --> 00:19:52.500
<v Speaker 0>Those would also get stored on the stack in the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:52.500 --> 00:19:55.420
<v Speaker 0>stack frame, as well as the return address if someone

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:55.460 --> 00:19:57.860
<v Speaker 0>if another function called this one, but we're omitting those

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:19:57.860 --> 00:19:59.540
<v Speaker 0>for now for simplicity.

NOTE CONF {"raw":[100,100,100,100]}

00:20:00.140 --> 00:20:01.900
<v Speaker 0>Okay, so here's what I was just mentioning.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:20:02.180 --> 00:20:08.340
<v Speaker 0>Here's a second method called calc weeks that has two

NOTE CONF {"raw":[100,90,100,100,100,100,100,100,100,100]}

00:20:08.380 --> 00:20:09.340
<v Speaker 0>arguments.

NOTE CONF {"raw":[100]}

00:20:09.620 --> 00:20:11.220
<v Speaker 0>Int money and int target.

NOTE CONF {"raw":[100,100,100,100,100]}

00:20:11.340 --> 00:20:14.940
<v Speaker 0>And then two doubles sweets and red money.

NOTE CONF {"raw":[100,100,100,100,74,100,80,100]}

00:20:15.380 --> 00:20:17.620
<v Speaker 0>And those are in a different method.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:20:17.860 --> 00:20:21.900
<v Speaker 0>So those get a different frame on the stack.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:20:22.900 --> 00:20:26.060
<v Speaker 0>Hopefully that all makes sense so far inside of a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:26.060 --> 00:20:26.700
<v Speaker 0>method.

NOTE CONF {"raw":[100]}

00:20:27.180 --> 00:20:30.700
<v Speaker 0>Any primitive variable types not objects.

NOTE CONF {"raw":[100,100,100,100,39,92]}

00:20:31.100 --> 00:20:34.220
<v Speaker 0>They get a place on the stack and there are

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:34.220 --> 00:20:38.960
<v Speaker 0>frames separating the variables that are in each method on

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:38.960 --> 00:20:41.080
<v Speaker 0>the stack, and they're highlighted in different shades of blue

NOTE CONF {"raw":[100,100,100,65,100,100,100,100,100,100]}

00:20:41.120 --> 00:20:41.600
<v Speaker 0>here.

NOTE CONF {"raw":[94]}

00:20:44.560 --> 00:20:45.200
<v Speaker 0>All right.

NOTE CONF {"raw":[100,100]}

00:20:45.400 --> 00:20:49.640
<v Speaker 0>So you might be thinking, great, why do I care.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:20:50.200 --> 00:20:56.680
<v Speaker 0>So the stack is not unlimited sized.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:20:57.080 --> 00:21:00.360
<v Speaker 0>It's a finite amount of memory on your computer.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:21:00.840 --> 00:21:02.280
<v Speaker 0>So you can fill it up.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:21:02.640 --> 00:21:05.240
<v Speaker 0>And if you do fill it up, you've probably written

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:05.240 --> 00:21:08.400
<v Speaker 0>code with a bug in it and your computer will

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:08.400 --> 00:21:08.920
<v Speaker 0>crash.

NOTE CONF {"raw":[100]}

00:21:08.960 --> 00:21:12.240
<v Speaker 0>Well, Java will attempt to stop your computer from crashing

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:12.360 --> 00:21:16.080
<v Speaker 0>by crashing itself, but you can actually kind of mess

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:16.080 --> 00:21:18.680
<v Speaker 0>your computer up if you accidentally overflow the stack.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:21:19.080 --> 00:21:22.800
<v Speaker 0>And so I don't know if you've talked about recursion

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:23.000 --> 00:21:25.480
<v Speaker 0>at all yet in the course, but you're going to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:25.520 --> 00:21:27.400
<v Speaker 0>either get to it now or in a future term,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:27.400 --> 00:21:28.800
<v Speaker 0>or you've already talked about it.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:21:28.920 --> 00:21:32.560
<v Speaker 0>But recursion is where a function, a method, calls itself,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:33.560 --> 00:21:36.040
<v Speaker 0>and it can call itself as many times as needed

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:36.040 --> 00:21:37.810
<v Speaker 0>until it returns the correct answer.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:21:38.090 --> 00:21:40.530
<v Speaker 0>You'll often see this with things like summing a number

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:40.770 --> 00:21:43.130
<v Speaker 0>or doing a factorial, for example.

NOTE CONF {"raw":[100,100,58,100,100,100]}

00:21:43.130 --> 00:21:46.010
<v Speaker 0>So like ten factorial is ten times nine times eight.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:46.370 --> 00:21:48.370
<v Speaker 0>Rather than writing that all out or using a for

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:48.370 --> 00:21:50.690
<v Speaker 0>loop, you can do a clever recursive function call that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:50.690 --> 00:21:53.690
<v Speaker 0>calls itself with one less number each time and adds

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:53.690 --> 00:21:54.370
<v Speaker 0>it all up.

NOTE CONF {"raw":[100,100,100]}

00:21:54.450 --> 00:21:56.370
<v Speaker 0>It's a really cool process, but if you mess up

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:21:56.370 --> 00:22:00.730
<v Speaker 0>in recursion, what often happens is it's going to run

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:00.730 --> 00:22:04.250
<v Speaker 0>an infinite number of times because you've not ended the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:04.250 --> 00:22:06.210
<v Speaker 0>loop correctly, as it were.

NOTE CONF {"raw":[100,100,100,100,100]}

00:22:08.170 --> 00:22:09.890
<v Speaker 0>And so in this case, if n gets very large

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:09.890 --> 00:22:12.850
<v Speaker 0>or you make a mistake, you get a stack overflow.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:12.850 --> 00:22:16.290
<v Speaker 0>And this is literally the namesake of Stack Overflow.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:22:16.490 --> 00:22:19.530
<v Speaker 0>The programming help website that you've probably all seen.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:22:19.690 --> 00:22:22.330
<v Speaker 0>So it's that's a joke on if you've made a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:22.330 --> 00:22:25.890
<v Speaker 0>mistake while you're programming, you could literally overflow your stack.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:26.090 --> 00:22:27.970
<v Speaker 0>And that's an error that will crash your program and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:27.970 --> 00:22:28.850
<v Speaker 0>your computer.

NOTE CONF {"raw":[100,100]}

00:22:29.850 --> 00:22:31.210
<v Speaker 0>If the recursion is too deep.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:22:31.250 --> 00:22:36.220
<v Speaker 0>As it says here, you can actually, um, Set the

NOTE CONF {"raw":[100,100,100,100,100,100,100,87,100,100]}

00:22:36.220 --> 00:22:38.860
<v Speaker 0>amount of stack memory that Java is going to use

NOTE CONF {"raw":[100,100,97,100,100,98,98,100,100,100]}

00:22:38.900 --> 00:22:41.020
<v Speaker 0>on your computer, which is kind of cool.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:22:41.140 --> 00:22:42.100
<v Speaker 0>I've done that before.

NOTE CONF {"raw":[100,100,100,100]}

00:22:42.140 --> 00:22:44.540
<v Speaker 0>There's really, really never a need for it.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:22:44.540 --> 00:22:46.460
<v Speaker 0>But if you ever wanted to, you can look that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:22:46.460 --> 00:22:47.420
<v Speaker 0>up on Stack Overflow.

NOTE CONF {"raw":[100,100,86,86]}

00:22:47.460 --> 00:22:49.580
<v Speaker 0>You can change your stack memory.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:22:51.820 --> 00:22:53.820
<v Speaker 0>Okay, so local variables go on the stack.

NOTE CONF {"raw":[100,100,100,100,100,86,100,100]}

00:22:53.860 --> 00:22:55.220
<v Speaker 0>The heap gets objects.

NOTE CONF {"raw":[100,100,100,100]}

00:22:56.340 --> 00:22:57.820
<v Speaker 0>So let's talk a bit about that.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:23:00.020 --> 00:23:03.300
<v Speaker 0>Now as opposed to where we were just using ints

NOTE CONF {"raw":[100,100,100,100,100,100,72,100,100,100]}

00:23:03.300 --> 00:23:06.260
<v Speaker 0>and doubles and other primitive types in the last example.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:07.220 --> 00:23:09.420
<v Speaker 0>Now we're going to add the heap with objects.

NOTE CONF {"raw":[100,100,100,100,100,100,100,91,100]}

00:23:09.420 --> 00:23:13.420
<v Speaker 0>So here we're making a car mycar.

NOTE CONF {"raw":[100,100,100,100,100,100,29]}

00:23:13.700 --> 00:23:16.100
<v Speaker 0>We're setting it equal to new car.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:23:16.140 --> 00:23:17.580
<v Speaker 0>Here's the single most.

NOTE CONF {"raw":[100,100,100,100]}

00:23:17.620 --> 00:23:19.420
<v Speaker 0>This is the single most important thing you have to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:19.420 --> 00:23:21.980
<v Speaker 0>remember about when to store something on the heap.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:23:22.900 --> 00:23:27.380
<v Speaker 0>If you say new in your code, it's going on

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:27.380 --> 00:23:28.020
<v Speaker 0>the heap.

NOTE CONF {"raw":[100,100]}

00:23:28.660 --> 00:23:31.300
<v Speaker 0>That's the rule of thumb, and that's the easiest way

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:31.300 --> 00:23:31.980
<v Speaker 0>to remember it.

NOTE CONF {"raw":[100,100,100]}

00:23:32.020 --> 00:23:35.480
<v Speaker 0>If you've written new meaning, you're creating a new object

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:35.960 --> 00:23:37.440
<v Speaker 0>that's going to get stored on the heap.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:23:37.600 --> 00:23:42.520
<v Speaker 0>The new keyword literally means allocate new memory for me

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:23:42.520 --> 00:23:43.360
<v Speaker 0>on the heap.

NOTE CONF {"raw":[100,100,100]}

00:23:43.720 --> 00:23:45.680
<v Speaker 0>So that's what you're doing when you say that.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:23:46.240 --> 00:23:50.200
<v Speaker 0>And so in this case we create a variable mycar

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,82]}

00:23:50.200 --> 00:23:51.280
<v Speaker 0>and we say new.

NOTE CONF {"raw":[100,100,100,100]}

00:23:51.600 --> 00:23:53.440
<v Speaker 0>Now here's here's the tricky bit.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:23:53.760 --> 00:23:57.080
<v Speaker 0>The variable itself that you made in this case mycar.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,94]}

00:23:57.120 --> 00:24:00.680
<v Speaker 0>The mycar variable that gets stored on the stack.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:24:00.800 --> 00:24:03.520
<v Speaker 0>Because that's just a local variable like any of the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:03.520 --> 00:24:04.600
<v Speaker 0>others that you've made.

NOTE CONF {"raw":[100,100,100,100]}

00:24:05.200 --> 00:24:07.320
<v Speaker 0>But instead of having a value like in this case

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:07.320 --> 00:24:10.280
<v Speaker 0>the variable gas has the value 20.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:24:10.280 --> 00:24:13.240
<v Speaker 0>And we see that on our stack, the variable my

NOTE CONF {"raw":[100,100,100,100,82,100,100,100,100,100]}

00:24:13.240 --> 00:24:16.240
<v Speaker 0>car is an object because we've said new.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:24:17.080 --> 00:24:21.200
<v Speaker 0>And so there's an arrow here that points to the

NOTE CONF {"raw":[100,100,100,100,96,100,100,100,100,100]}

00:24:21.200 --> 00:24:24.840
<v Speaker 0>heap where the values of the car then reside.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:24:25.880 --> 00:24:27.040
<v Speaker 0>So that's the difference.

NOTE CONF {"raw":[100,100,100,100]}

00:24:27.280 --> 00:24:29.440
<v Speaker 0>With an object it's going to be a pointer.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:24:30.160 --> 00:24:32.880
<v Speaker 0>We call it in the C programming language.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:24:32.880 --> 00:24:34.090
<v Speaker 0>It's called a called a pointer.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:24:34.730 --> 00:24:37.090
<v Speaker 0>In Java we probably just call it a reference.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:24:37.970 --> 00:24:40.370
<v Speaker 0>My car is on the stack, but it's referencing an

NOTE CONF {"raw":[100,100,100,100,100,100,100,97,100,100]}

00:24:40.370 --> 00:24:42.450
<v Speaker 0>object that's in the heap in memory.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:24:45.210 --> 00:24:49.650
<v Speaker 0>Okay, so what happens if I make another variable like

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:49.650 --> 00:24:51.090
<v Speaker 0>I did in my code example?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:24:51.170 --> 00:24:53.930
<v Speaker 0>So in my code example I had C1 and I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:24:53.970 --> 00:24:55.650
<v Speaker 0>set that equal to C3.

NOTE CONF {"raw":[100,100,100,100,100]}

00:24:55.970 --> 00:24:57.370
<v Speaker 0>I didn't use the new keyword.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:24:57.370 --> 00:24:59.090
<v Speaker 0>So here's the same example.

NOTE CONF {"raw":[100,100,100,100,100]}

00:24:59.770 --> 00:25:05.530
<v Speaker 0>We say car your car equals my car right.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,95]}

00:25:05.570 --> 00:25:08.570
<v Speaker 0>So first step did we use the new keyword.

NOTE CONF {"raw":[100,100,48,100,100,100,100,100,100]}

00:25:09.490 --> 00:25:10.450
<v Speaker 0>We did not.

NOTE CONF {"raw":[100,100,100]}

00:25:10.530 --> 00:25:13.330
<v Speaker 0>So that means we are not going to create any

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:13.650 --> 00:25:15.810
<v Speaker 0>new memory on the heap.

NOTE CONF {"raw":[100,100,100,100,100]}

00:25:15.970 --> 00:25:19.250
<v Speaker 0>So we shouldn't be adding a second frame or a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:19.250 --> 00:25:21.730
<v Speaker 0>second chunk of variables for a new car, because we

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:21.730 --> 00:25:22.690
<v Speaker 0>didn't say new.

NOTE CONF {"raw":[100,100,100]}

00:25:23.210 --> 00:25:25.130
<v Speaker 0>So okay, we don't have to make any changes to

NOTE CONF {"raw":[100,90,100,100,100,100,100,100,100,100]}

00:25:25.130 --> 00:25:25.490
<v Speaker 0>the heap.

NOTE CONF {"raw":[100,100]}

00:25:25.490 --> 00:25:27.850
<v Speaker 0>We know that for sure because we didn't say new,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:28.770 --> 00:25:32.210
<v Speaker 0>but we are dealing with objects so that your car

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:32.420 --> 00:25:33.180
<v Speaker 0>variable.

NOTE CONF {"raw":[93]}

00:25:33.700 --> 00:25:38.660
<v Speaker 0>As you can see by, the arrow references the same

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:38.700 --> 00:25:41.900
<v Speaker 0>object in memory as my car references.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:25:42.540 --> 00:25:45.660
<v Speaker 0>So there are two separate variables my car and your

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:45.660 --> 00:25:46.140
<v Speaker 0>car.

NOTE CONF {"raw":[100]}

00:25:46.780 --> 00:25:49.140
<v Speaker 0>They both live on the stack in.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:25:49.140 --> 00:25:51.860
<v Speaker 0>The value of each of them is a reference to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:25:51.860 --> 00:25:54.020
<v Speaker 0>the same object in memory.

NOTE CONF {"raw":[100,100,100,100,100]}

00:25:54.740 --> 00:25:56.900
<v Speaker 0>So back to my example of the circles.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:25:57.460 --> 00:26:04.020
<v Speaker 0>That's why when we enlarged circle one, circle three also

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:04.260 --> 00:26:07.220
<v Speaker 0>would get enlarged because they were referring.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:26:07.700 --> 00:26:09.860
<v Speaker 0>Well I guess I enlarged circle two to show that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:09.860 --> 00:26:10.900
<v Speaker 0>they would all be the same.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:26:10.900 --> 00:26:12.860
<v Speaker 0>If I had enlarged circle one.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:26:13.020 --> 00:26:16.380
<v Speaker 0>Circle three would enlarge two because they're the same circle,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:16.380 --> 00:26:18.380
<v Speaker 0>they're pointing to the exact same space.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:26:18.460 --> 00:26:20.300
<v Speaker 0>So that's what I was sort of demonstrating in that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:20.300 --> 00:26:21.780
<v Speaker 0>first code example.

NOTE CONF {"raw":[100,100,100]}

00:26:21.780 --> 00:26:24.180
<v Speaker 0>And then this is seeing it on paper.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:26:29.780 --> 00:26:32.760
<v Speaker 0>By contrast to this example where we did not use

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:32.760 --> 00:26:33.720
<v Speaker 0>the new keyword.

NOTE CONF {"raw":[100,100,100]}

00:26:34.040 --> 00:26:36.840
<v Speaker 0>Here's an example where we do use the new keyword.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:36.840 --> 00:26:38.720
<v Speaker 0>So all I've changed here.

NOTE CONF {"raw":[100,100,100,100,100]}

00:26:39.040 --> 00:26:41.200
<v Speaker 0>The only thing that's changed is now instead of your

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:41.200 --> 00:26:45.040
<v Speaker 0>car equalling my car, your car equals a new car.

NOTE CONF {"raw":[100,98,100,100,100,100,100,100,100,100]}

00:26:45.480 --> 00:26:46.040
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:26:46.200 --> 00:26:46.760
<v Speaker 0>Step one.

NOTE CONF {"raw":[100,100]}

00:26:46.760 --> 00:26:48.280
<v Speaker 0>Did we use the new keyword?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:26:49.240 --> 00:26:49.880
<v Speaker 0>Yes.

NOTE CONF {"raw":[100]}

00:26:49.880 --> 00:26:52.240
<v Speaker 0>So that means we have to go to the heap

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:26:52.760 --> 00:26:54.800
<v Speaker 0>and we have to put a new object there.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:26:54.800 --> 00:26:56.480
<v Speaker 0>So that's what we've done in this case.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:26:57.160 --> 00:27:01.280
<v Speaker 0>And then the other car doesn't reference my car.

NOTE CONF {"raw":[100,100,100,89,100,100,100,100,100]}

00:27:01.960 --> 00:27:05.920
<v Speaker 0>It references its own separate car in the heap.

NOTE CONF {"raw":[100,100,94,100,100,100,100,100,100]}

00:27:05.920 --> 00:27:08.080
<v Speaker 0>So in this case they would be distinct.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:27:09.040 --> 00:27:12.240
<v Speaker 0>And the difference is solely on that new keyword.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:27:12.240 --> 00:27:13.160
<v Speaker 0>That's how you know.

NOTE CONF {"raw":[100,100,100,100]}

00:27:16.920 --> 00:27:17.560
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:27:17.560 --> 00:27:21.280
<v Speaker 0>So this can get tricky for a number of reasons.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:22.760 --> 00:27:24.520
<v Speaker 0>And I'm going to try to demonstrate that.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:27:24.520 --> 00:27:28.400
<v Speaker 0>And then we'll look at another pretty interesting code example.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:27:29.600 --> 00:27:32.930
<v Speaker 0>So in in this case, and this might be what

NOTE CONF {"raw":[100,100,100,100,100,99,100,100,100,100]}

00:27:32.930 --> 00:27:34.090
<v Speaker 0>I have the code for.

NOTE CONF {"raw":[100,100,100,100,100]}

00:27:34.250 --> 00:27:34.450
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:27:34.450 --> 00:27:35.570
<v Speaker 0>Let me just run the code for this.

NOTE CONF {"raw":[100,100,100,100,100,100,100,56]}

00:27:35.570 --> 00:27:36.850
<v Speaker 0>Let me write the code for this.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:27:37.090 --> 00:27:38.730
<v Speaker 0>I think it'll be more interesting that way.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:27:41.690 --> 00:27:42.490
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:27:42.810 --> 00:27:45.290
<v Speaker 0>So good.

NOTE CONF {"raw":[100,100]}

00:27:45.770 --> 00:27:47.490
<v Speaker 0>And let me erase this.

NOTE CONF {"raw":[71,100,100,100,100]}

00:27:47.530 --> 00:27:48.810
<v Speaker 0>I need to get it to.

NOTE CONF {"raw":[100,100,100,74,74,89]}

00:27:52.210 --> 00:27:53.090
<v Speaker 0>Add one.

NOTE CONF {"raw":[99,100]}

00:27:54.050 --> 00:27:54.490
<v Speaker 0>Sorry.

NOTE CONF {"raw":[48]}

00:27:54.530 --> 00:27:54.890
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:27:54.930 --> 00:27:55.490
<v Speaker 0>All right.

NOTE CONF {"raw":[100,100]}

00:27:56.170 --> 00:28:00.530
<v Speaker 0>So here we have some code.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:28:01.770 --> 00:28:04.330
<v Speaker 0>And this is passing around an array.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:28:04.330 --> 00:28:07.290
<v Speaker 0>So in the main the main method here we're creating

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:07.290 --> 00:28:09.890
<v Speaker 0>an array the values of zero and one.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:28:10.690 --> 00:28:14.850
<v Speaker 0>We're calling add one on that array which we have

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:14.850 --> 00:28:16.250
<v Speaker 0>the add one method up here.

NOTE CONF {"raw":[98,100,100,100,100,100]}

00:28:16.810 --> 00:28:21.450
<v Speaker 0>And then afterwards we're just printing out um the values

NOTE CONF {"raw":[100,100,100,100,100,100,100,73,100,100]}

00:28:21.450 --> 00:28:22.250
<v Speaker 0>of the array.

NOTE CONF {"raw":[100,100,100]}

00:28:22.730 --> 00:28:24.650
<v Speaker 0>So it looks it looks pretty straightforward.

NOTE CONF {"raw":[100,100,100,48,100,100,100]}

00:28:25.050 --> 00:28:28.690
<v Speaker 0>But what does everybody think this is going to print

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:28.780 --> 00:28:30.300
<v Speaker 0>out I have.

NOTE CONF {"raw":[100,100,100]}

00:28:31.220 --> 00:28:34.260
<v Speaker 0>Oh, wait, this reminds me Fiona does pets of the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:34.260 --> 00:28:35.300
<v Speaker 0>lecture, which I have.

NOTE CONF {"raw":[100,100,100,100]}

00:28:35.340 --> 00:28:36.380
<v Speaker 0>She sent them to me.

NOTE CONF {"raw":[100,100,100,100,100]}

00:28:36.500 --> 00:28:37.580
<v Speaker 0>This is lucky.

NOTE CONF {"raw":[100,100,100]}

00:28:37.860 --> 00:28:39.420
<v Speaker 0>I think I read in the email that lucky is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:28:39.420 --> 00:28:43.660
<v Speaker 0>actually blind, has some trouble sitting, but is perfect.

NOTE CONF {"raw":[100,100,100,100,100,92,100,92,100]}

00:28:43.980 --> 00:28:45.340
<v Speaker 0>So this is lucky.

NOTE CONF {"raw":[100,100,100,100]}

00:28:45.740 --> 00:28:47.060
<v Speaker 0>Shout out Lucky's owner.

NOTE CONF {"raw":[100,100,89,100]}

00:28:48.300 --> 00:28:49.740
<v Speaker 0>And this is.

NOTE CONF {"raw":[100,100,100]}

00:28:49.740 --> 00:28:52.820
<v Speaker 0>This is Willow who is just absolutely lovely.

NOTE CONF {"raw":[100,100,97,100,100,100,100,100]}

00:28:53.460 --> 00:28:54.540
<v Speaker 0>Thanks for sending in your pets.

NOTE CONF {"raw":[96,100,100,100,100,100]}

00:28:54.540 --> 00:28:55.740
<v Speaker 0>Please keep sending in your pets.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:28:55.740 --> 00:28:57.500
<v Speaker 0>You can email them to Fiona and they'll make it

NOTE CONF {"raw":[100,100,100,100,100,100,100,46,100,100]}

00:28:57.500 --> 00:28:58.220
<v Speaker 0>into lecture.

NOTE CONF {"raw":[99,100]}

00:29:00.340 --> 00:29:00.780
<v Speaker 0>Right.

NOTE CONF {"raw":[100]}

00:29:00.820 --> 00:29:03.820
<v Speaker 0>Okay, so on the clap you'll see this.

NOTE CONF {"raw":[100,100,100,100,78,100,100,100]}

00:29:03.820 --> 00:29:05.380
<v Speaker 0>I'll put the code back up so you can see

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:05.380 --> 00:29:06.020
<v Speaker 0>the code.

NOTE CONF {"raw":[100,100]}

00:29:06.420 --> 00:29:08.780
<v Speaker 0>But you've got five options for what you think this

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:08.780 --> 00:29:11.140
<v Speaker 0>is going to print.

NOTE CONF {"raw":[100,100,100,100]}

00:29:11.260 --> 00:29:14.100
<v Speaker 0>So let me give you 30 to 60s to make

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:29:14.100 --> 00:29:14.860
<v Speaker 0>your guesses.

NOTE CONF {"raw":[100,100]}

00:29:19.380 --> 00:29:22.460
<v Speaker 0>Yes, yes.

NOTE CONF {"raw":[100,100]}

00:29:31.960 --> 00:29:33.000
<v Speaker 0>Everyone got that?

NOTE CONF {"raw":[100,100,100]}

00:29:33.480 --> 00:29:34.480
<v Speaker 0>Here's the code again.

NOTE CONF {"raw":[100,100,100,100]}

00:29:44.840 --> 00:29:45.400
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:29:51.120 --> 00:29:51.800
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:29:52.200 --> 00:29:53.560
<v Speaker 0>We're very torn.

NOTE CONF {"raw":[79,100,100]}

00:29:54.720 --> 00:29:55.520
<v Speaker 0>That's great.

NOTE CONF {"raw":[100,100]}

00:29:56.080 --> 00:29:58.200
<v Speaker 0>Uh, here's here's what it'll actually be.

NOTE CONF {"raw":[46,100,100,100,100,100,100]}

00:30:04.800 --> 00:30:05.200
<v Speaker 2>All right.

NOTE CONF {"raw":[39,48]}

00:30:07.760 --> 00:30:08.920
<v Speaker 0>One, one.

NOTE CONF {"raw":[100,100]}

00:30:09.160 --> 00:30:11.400
<v Speaker 0>So slight majority.

NOTE CONF {"raw":[100,100,100]}

00:30:11.440 --> 00:30:12.120
<v Speaker 0>Got that?

NOTE CONF {"raw":[100,100]}

00:30:13.160 --> 00:30:14.280
<v Speaker 0>What's happening here?

NOTE CONF {"raw":[100,100,100]}

00:30:16.040 --> 00:30:16.680
<v Speaker 0>We're creating.

NOTE CONF {"raw":[100,100]}

00:30:16.720 --> 00:30:18.120
<v Speaker 0>And notice how there was a big split.

NOTE CONF {"raw":[94,100,100,100,100,100,100,100]}

00:30:18.160 --> 00:30:20.400
<v Speaker 0>This is this is a confusing topic and one that's

NOTE CONF {"raw":[97,97,100,100,100,100,100,100,100,100]}

00:30:20.400 --> 00:30:21.880
<v Speaker 0>very important to understand.

NOTE CONF {"raw":[100,100,100,100]}

00:30:22.280 --> 00:30:23.680
<v Speaker 0>And these are called side effects.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:30:23.720 --> 00:30:25.440
<v Speaker 0>The the name of what I'm showing you right now

NOTE CONF {"raw":[90,100,100,100,100,100,100,100,100,100]}

00:30:25.440 --> 00:30:26.120
<v Speaker 0>is a side effect.

NOTE CONF {"raw":[56,100,100,100]}

00:30:26.120 --> 00:30:28.570
<v Speaker 0>It's not actually clear what it's going to print.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:30:28.610 --> 00:30:31.290
<v Speaker 0>It's not straightforward as seeing it all in in one

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:31.290 --> 00:30:33.570
<v Speaker 0>method because we're passing by reference.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:30:33.570 --> 00:30:35.130
<v Speaker 0>And so this is a side effect of that.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:30:35.130 --> 00:30:37.850
<v Speaker 0>So I've created an array zero one.

NOTE CONF {"raw":[100,100,100,100,100,100,96]}

00:30:37.890 --> 00:30:38.970
<v Speaker 0>Okay straightforward.

NOTE CONF {"raw":[100,94]}

00:30:39.810 --> 00:30:43.090
<v Speaker 0>We've passed that to the add one function sorry method

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:43.090 --> 00:30:44.170
<v Speaker 0>method in Java.

NOTE CONF {"raw":[100,100,100]}

00:30:44.570 --> 00:30:49.130
<v Speaker 0>So A comes up here and we're taking the first

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:30:49.130 --> 00:30:52.890
<v Speaker 0>value and we're incrementing it by one.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:30:53.050 --> 00:30:58.570
<v Speaker 0>Remember objects which arrays are objects just like a car.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,72,100]}

00:30:58.610 --> 00:31:01.890
<v Speaker 0>Just like circle they're passed by reference.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:31:01.890 --> 00:31:05.370
<v Speaker 0>So when we send a up to the add one

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:05.890 --> 00:31:12.170
<v Speaker 0>method, it has the actual reference to where that array

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:12.210 --> 00:31:13.610
<v Speaker 0>lives in memory.

NOTE CONF {"raw":[100,100,100]}

00:31:13.930 --> 00:31:17.010
<v Speaker 0>So when it goes and updates this by incrementing the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:17.010 --> 00:31:20.770
<v Speaker 0>first value by one, it's literally changing that in the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:20.770 --> 00:31:22.570
<v Speaker 0>heap in the memory.

NOTE CONF {"raw":[100,100,100,100]}

00:31:23.850 --> 00:31:26.980
<v Speaker 0>So when we come back down to the main method,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:27.460 --> 00:31:29.060
<v Speaker 0>and we go ahead and print that out.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:31:29.260 --> 00:31:30.020
<v Speaker 0>We get one one.

NOTE CONF {"raw":[100,100,100,100]}

00:31:30.020 --> 00:31:33.860
<v Speaker 0>It actually updated because the A that's referenced here is

NOTE CONF {"raw":[100,100,100,100,100,100,98,100,100,100]}

00:31:33.860 --> 00:31:36.860
<v Speaker 0>the same A that was referenced up here because we

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:36.860 --> 00:31:38.260
<v Speaker 0>passed it by reference.

NOTE CONF {"raw":[100,100,100,100]}

00:31:38.780 --> 00:31:41.460
<v Speaker 0>So it actually gets changed in memory and its value

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,96,100]}

00:31:41.460 --> 00:31:42.700
<v Speaker 0>is actually different.

NOTE CONF {"raw":[100,100,100]}

00:31:43.900 --> 00:31:45.220
<v Speaker 0>Okay everyone following that.

NOTE CONF {"raw":[100,100,100,100]}

00:31:45.220 --> 00:31:47.820
<v Speaker 0>So far we have two other ways we can look

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:47.820 --> 00:31:48.460
<v Speaker 0>at this.

NOTE CONF {"raw":[100,100]}

00:31:50.260 --> 00:31:55.660
<v Speaker 0>So now instead of saying an array and incrementing the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:55.660 --> 00:31:58.940
<v Speaker 0>first value I'm going to set this equal to a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:31:58.940 --> 00:32:00.100
<v Speaker 0>new int array.

NOTE CONF {"raw":[100,100,100]}

00:32:04.140 --> 00:32:05.060
<v Speaker 0>A value two.

NOTE CONF {"raw":[87,100,100]}

00:32:05.500 --> 00:32:07.820
<v Speaker 0>All I've changed is that sending it to a new

NOTE CONF {"raw":[100,100,100,100,100,77,56,97,100,100]}

00:32:07.820 --> 00:32:08.820
<v Speaker 0>array of value two.

NOTE CONF {"raw":[100,100,100,100]}

00:32:13.220 --> 00:32:14.220
<v Speaker 0>Now what's returned.

NOTE CONF {"raw":[100,100,100]}

00:32:39.560 --> 00:32:39.840
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:32:39.880 --> 00:32:41.360
<v Speaker 0>We got a good split again.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:32:47.520 --> 00:32:48.560
<v Speaker 0>Let's run it and see.

NOTE CONF {"raw":[97,89,100,100,100]}

00:32:56.240 --> 00:32:58.160
<v Speaker 0>Zero one.

NOTE CONF {"raw":[100,100]}

00:32:58.960 --> 00:33:00.320
<v Speaker 0>Let's see what everyone said again.

NOTE CONF {"raw":[100,100,100,87,100,100]}

00:33:01.480 --> 00:33:02.160
<v Speaker 0>Close.

NOTE CONF {"raw":[100]}

00:33:02.440 --> 00:33:03.160
<v Speaker 0>We got it.

NOTE CONF {"raw":[100,100,100]}

00:33:03.160 --> 00:33:04.000
<v Speaker 0>But close.

NOTE CONF {"raw":[100,100]}

00:33:07.480 --> 00:33:07.720
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:33:07.760 --> 00:33:08.840
<v Speaker 0>People are discussing it.

NOTE CONF {"raw":[100,100,100,100]}

00:33:08.840 --> 00:33:09.680
<v Speaker 0>This one.

NOTE CONF {"raw":[100,100]}

00:33:09.800 --> 00:33:12.720
<v Speaker 0>I think this one is confusing after the one that

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:12.720 --> 00:33:13.640
<v Speaker 0>we just saw.

NOTE CONF {"raw":[100,100,100]}

00:33:14.240 --> 00:33:15.680
<v Speaker 0>But let me try to explain it.

NOTE CONF {"raw":[86,100,100,100,100,100,100]}

00:33:16.400 --> 00:33:21.360
<v Speaker 0>So in the last one, we manipulated the actual memory

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:21.920 --> 00:33:24.490
<v Speaker 0>that the array Occupied in the heat.

NOTE CONF {"raw":[100,100,100,100,100,100,86]}

00:33:24.770 --> 00:33:27.970
<v Speaker 0>So in both places it was referencing the same thing.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:28.130 --> 00:33:29.690
<v Speaker 0>And so it actually got updated.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:33:31.290 --> 00:33:34.050
<v Speaker 0>Remember what I said when we used the new keyword?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:35.050 --> 00:33:40.450
<v Speaker 0>The new keyword creates a new section on the heap.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:40.450 --> 00:33:42.770
<v Speaker 0>So now we're not talking about the array that existed

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:42.770 --> 00:33:43.530
<v Speaker 0>originally.

NOTE CONF {"raw":[100]}

00:33:43.810 --> 00:33:46.690
<v Speaker 0>We have that one here, but we're making an entirely

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:46.690 --> 00:33:48.930
<v Speaker 0>new one down here on the heap.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:33:50.490 --> 00:33:53.530
<v Speaker 0>Then we're creating a local variable, an array.

NOTE CONF {"raw":[100,100,100,100,100,100,80,100]}

00:33:54.690 --> 00:33:57.770
<v Speaker 0>And we're setting that equal to that new section on

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:33:57.770 --> 00:33:58.370
<v Speaker 0>the heap.

NOTE CONF {"raw":[100,100]}

00:33:58.490 --> 00:33:59.770
<v Speaker 0>So here's our old one up here.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:33:59.770 --> 00:34:00.930
<v Speaker 0>Here's the old array.

NOTE CONF {"raw":[100,100,100,100]}

00:34:01.130 --> 00:34:03.810
<v Speaker 0>But now instead of changing this one, we've made a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:03.810 --> 00:34:06.050
<v Speaker 0>whole new one entirely separate.

NOTE CONF {"raw":[100,100,100,100,100]}

00:34:07.890 --> 00:34:10.730
<v Speaker 0>And it would be equal to zero zero because we

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:10.730 --> 00:34:11.929
<v Speaker 0>didn't initialise it.

NOTE CONF {"raw":[100,100,100]}

00:34:12.810 --> 00:34:14.889
<v Speaker 0>But then the method doesn't do anything else.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:34:14.929 --> 00:34:16.090
<v Speaker 0>It just returns.

NOTE CONF {"raw":[100,100,100]}

00:34:17.050 --> 00:34:18.570
<v Speaker 0>We never touched the top one.

NOTE CONF {"raw":[100,100,96,100,100,100]}

00:34:18.570 --> 00:34:19.929
<v Speaker 0>We never touched it at all.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:34:20.290 --> 00:34:22.419
<v Speaker 0>We just made an entirely separate one and then did

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:22.419 --> 00:34:23.300
<v Speaker 0>nothing with it.

NOTE CONF {"raw":[100,100,100]}

00:34:23.340 --> 00:34:27.580
<v Speaker 0>In fact, in IntelliJ my I'm using VS code in

NOTE CONF {"raw":[100,100,100,100,100,100,100,73,73,100]}

00:34:27.580 --> 00:34:28.179
<v Speaker 0>IntelliJ.

NOTE CONF {"raw":[100]}

00:34:28.220 --> 00:34:31.100
<v Speaker 0>If you have all the things turned on that tell

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:31.100 --> 00:34:34.580
<v Speaker 0>you stuff about your code, it would actually grey an

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,75,100]}

00:34:34.580 --> 00:34:35.740
<v Speaker 0>array out here.

NOTE CONF {"raw":[100,100,100]}

00:34:35.740 --> 00:34:36.500
<v Speaker 0>It would grey it out.

NOTE CONF {"raw":[100,100,92,100,100]}

00:34:36.500 --> 00:34:38.419
<v Speaker 0>I don't know if anyone's writing it, but it'll literally

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,94,100]}

00:34:38.419 --> 00:34:41.060
<v Speaker 0>grey this out because you never used it.

NOTE CONF {"raw":[88,100,100,100,100,100,100,100]}

00:34:41.060 --> 00:34:43.060
<v Speaker 0>You made a variable and then never did anything with

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:34:43.060 --> 00:34:43.740
<v Speaker 0>it at all.

NOTE CONF {"raw":[100,100,100]}

00:34:44.740 --> 00:34:47.260
<v Speaker 0>So we print zero one.

NOTE CONF {"raw":[100,100,100,100,100]}

00:34:47.260 --> 00:34:48.220
<v Speaker 0>Nothing happens.

NOTE CONF {"raw":[100,100]}

00:34:48.220 --> 00:34:49.780
<v Speaker 0>We just print the original array.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:34:50.260 --> 00:34:52.179
<v Speaker 0>The the one that we pass in is not not

NOTE CONF {"raw":[86,100,100,100,100,100,100,100,100,100]}

00:34:52.179 --> 00:34:52.780
<v Speaker 0>changed at all.

NOTE CONF {"raw":[100,100,100]}

00:34:52.820 --> 00:34:55.260
<v Speaker 0>Not updated in any way whatsoever.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:34:57.420 --> 00:34:58.980
<v Speaker 0>Hopefully I'm blowing your mind a bit.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:34:59.100 --> 00:35:01.020
<v Speaker 0>It'll make more sense once you do some examples.

NOTE CONF {"raw":[99,100,100,100,100,100,100,100,100]}

00:35:01.020 --> 00:35:03.020
<v Speaker 0>I think the assignments, homeworks, etc..

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:35:03.020 --> 00:35:04.140
<v Speaker 0>Tutorials, labs.

NOTE CONF {"raw":[100,100]}

00:35:04.180 --> 00:35:06.420
<v Speaker 0>We've got a lot of this, so you'll definitely be

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:06.420 --> 00:35:08.220
<v Speaker 0>an expert by the time you go through it a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:08.220 --> 00:35:08.860
<v Speaker 0>few times.

NOTE CONF {"raw":[100,100]}

00:35:08.980 --> 00:35:10.500
<v Speaker 0>Now last but not least, I have one more.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:35:10.540 --> 00:35:11.380
<v Speaker 0>I have one more.

NOTE CONF {"raw":[85,100,100,100]}

00:35:11.940 --> 00:35:16.900
<v Speaker 0>So if instead of this I'm going to return.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:35:20.020 --> 00:35:23.760
<v Speaker 0>I'm going to return an array and then I need

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:23.760 --> 00:35:29.400
<v Speaker 0>to change this, returning it into a I need semicolon.

NOTE CONF {"raw":[100,100,100,52,100,100,94,100,100,96]}

00:35:29.400 --> 00:35:31.920
<v Speaker 0>And then I need to say a equals I think

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:33.240 --> 00:35:33.840
<v Speaker 0>right.

NOTE CONF {"raw":[93]}

00:35:33.880 --> 00:35:34.160
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:35:34.200 --> 00:35:35.440
<v Speaker 0>So now what have I done.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:35:36.040 --> 00:35:38.400
<v Speaker 0>I'm returning I'm returning the array.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:35:39.640 --> 00:35:42.600
<v Speaker 0>And I'm setting a equal to that array down here.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:42.720 --> 00:35:46.400
<v Speaker 0>So I've changed what the add one method actually does.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:35:46.880 --> 00:35:49.640
<v Speaker 0>So one last time.

NOTE CONF {"raw":[100,100,100,100]}

00:35:50.880 --> 00:35:52.040
<v Speaker 0>What are we getting here.

NOTE CONF {"raw":[100,100,100,100,100]}

00:36:14.000 --> 00:36:15.280
<v Speaker 0>Okay okay.

NOTE CONF {"raw":[100,100]}

00:36:15.280 --> 00:36:17.520
<v Speaker 0>We have somewhat of a consensus.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:36:17.840 --> 00:36:19.080
<v Speaker 0>Let's see if you're all right.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:36:19.120 --> 00:36:20.770
<v Speaker 0>It'd be awesome if it was just not that one

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:20.770 --> 00:36:21.290
<v Speaker 0>at all.

NOTE CONF {"raw":[100,100]}

00:36:23.690 --> 00:36:24.610
<v Speaker 0>No, you're exactly right.

NOTE CONF {"raw":[100,100,100,100]}

00:36:24.650 --> 00:36:25.610
<v Speaker 0>You're exactly right.

NOTE CONF {"raw":[100,100,100]}

00:36:26.010 --> 00:36:28.650
<v Speaker 0>In this case, for anyone who didn't get this one,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:28.650 --> 00:36:32.210
<v Speaker 0>or just so you understand it, last time in the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:32.210 --> 00:36:36.690
<v Speaker 0>previous example, I made a new place on the heap

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:36.690 --> 00:36:39.530
<v Speaker 0>for this new array and then did absolutely nothing with

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:39.530 --> 00:36:39.930
<v Speaker 0>it.

NOTE CONF {"raw":[100]}

00:36:40.210 --> 00:36:42.290
<v Speaker 0>But in this case, I've made a new place on

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:42.290 --> 00:36:44.290
<v Speaker 0>the heap and then I'm taking that.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:36:44.290 --> 00:36:45.330
<v Speaker 0>So it's zero zero.

NOTE CONF {"raw":[100,99,100,100]}

00:36:45.330 --> 00:36:47.170
<v Speaker 0>I've made this new array that's zero zero.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:36:47.170 --> 00:36:50.570
<v Speaker 0>And then I'm taking that and literally passing it back

NOTE CONF {"raw":[100,100,100,100,100,73,100,100,100,100]}

00:36:50.570 --> 00:36:53.090
<v Speaker 0>to the method that called it by returning it and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:53.090 --> 00:36:54.890
<v Speaker 0>then setting a equal to that.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:36:55.090 --> 00:36:58.850
<v Speaker 0>So in this case I've replaced a originally referenced the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:36:58.850 --> 00:37:00.650
<v Speaker 0>first array in memory.

NOTE CONF {"raw":[100,100,100,100]}

00:37:00.970 --> 00:37:05.370
<v Speaker 0>But now on line nine I'm saying okay, a you're

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,96,100]}

00:37:05.370 --> 00:37:07.730
<v Speaker 0>not referencing that spot in memory anymore.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:37:08.210 --> 00:37:12.610
<v Speaker 0>A is referencing the new array that I just made

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:12.730 --> 00:37:13.930
<v Speaker 0>in the method up there.

NOTE CONF {"raw":[100,100,100,100,100]}

00:37:15.210 --> 00:37:15.970
<v Speaker 0>Makes sense.

NOTE CONF {"raw":[83,100]}

00:37:17.450 --> 00:37:17.930
<v Speaker 0>Cool.

NOTE CONF {"raw":[100]}

00:37:20.340 --> 00:37:22.060
<v Speaker 0>Good job getting the last one.

NOTE CONF {"raw":[100,100,100,90,100,100]}

00:37:24.260 --> 00:37:24.460
<v Speaker 0>Sorry.

NOTE CONF {"raw":[88]}

00:37:24.500 --> 00:37:25.220
<v Speaker 0>Where are my slides?

NOTE CONF {"raw":[83,83,100,100]}

00:37:25.260 --> 00:37:25.780
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:37:26.420 --> 00:37:27.940
<v Speaker 0>All of that was this example.

NOTE CONF {"raw":[100,100,100,100,88,100]}

00:37:29.900 --> 00:37:31.020
<v Speaker 0>Uh oh.

NOTE CONF {"raw":[100,98]}

00:37:31.060 --> 00:37:32.820
<v Speaker 0>She had these all on the slides, but I wanted

NOTE CONF {"raw":[100,100,100,94,77,100,100,100,100,100]}

00:37:32.820 --> 00:37:33.620
<v Speaker 0>to write it out.

NOTE CONF {"raw":[100,82,100,100]}

00:37:35.180 --> 00:37:35.420
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:37:35.460 --> 00:37:38.340
<v Speaker 0>So side effects everything we just saw there that, like

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:38.340 --> 00:37:40.180
<v Speaker 0>I said at the beginning, that is all what we

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:40.180 --> 00:37:41.780
<v Speaker 0>call side effects.

NOTE CONF {"raw":[100,100,100]}

00:37:42.300 --> 00:37:45.100
<v Speaker 0>Because a lot of programmers don't really ever learn the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:45.100 --> 00:37:46.660
<v Speaker 0>nuances of what you just saw.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:37:46.860 --> 00:37:49.300
<v Speaker 0>And this can be a huge source of bugs and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,99]}

00:37:49.300 --> 00:37:52.740
<v Speaker 0>errors in code, both in school and and in industry.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:52.780 --> 00:37:53.940
<v Speaker 0>This happens all the time.

NOTE CONF {"raw":[100,100,100,100,100]}

00:37:54.180 --> 00:37:56.700
<v Speaker 0>So there's precautions we can take against this by making

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:37:56.740 --> 00:37:58.260
<v Speaker 0>objects immutable.

NOTE CONF {"raw":[100,100]}

00:37:58.540 --> 00:38:01.740
<v Speaker 0>So that means once you create them, you can't change

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:01.740 --> 00:38:02.260
<v Speaker 0>them.

NOTE CONF {"raw":[100]}

00:38:02.340 --> 00:38:04.460
<v Speaker 0>So they might get assigned a space on the heap.

NOTE CONF {"raw":[100,100,100,100,97,60,100,100,100,100]}

00:38:04.460 --> 00:38:06.660
<v Speaker 0>And then you make them you mark them as immutable

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:06.820 --> 00:38:09.300
<v Speaker 0>so you can't actually update them at all.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:38:09.300 --> 00:38:12.500
<v Speaker 0>Whatever they start as they are staying, whatever that was

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:12.500 --> 00:38:13.220
<v Speaker 0>forever.

NOTE CONF {"raw":[100]}

00:38:14.260 --> 00:38:15.980
<v Speaker 0>Circle and car were mutable.

NOTE CONF {"raw":[100,100,99,100,100]}

00:38:15.980 --> 00:38:18.720
<v Speaker 0>We could change them in memory because we did.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:38:18.760 --> 00:38:20.360
<v Speaker 0>We saw some examples of that.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:38:22.360 --> 00:38:24.480
<v Speaker 0>There's some fancy things you can do with immutability.

NOTE CONF {"raw":[84,100,100,100,100,100,100,100,100]}

00:38:24.480 --> 00:38:26.800
<v Speaker 0>I think these might come up later in the course,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:26.800 --> 00:38:28.600
<v Speaker 0>but we're not we're not going to look at them

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:28.600 --> 00:38:29.040
<v Speaker 0>just now.

NOTE CONF {"raw":[100,100]}

00:38:29.040 --> 00:38:30.880
<v Speaker 0>Just know that that is something you can do.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:38:30.920 --> 00:38:33.920
<v Speaker 0>You can mark things as immutable, cannot be changed.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:38:34.280 --> 00:38:34.800
<v Speaker 0>If you do that.

NOTE CONF {"raw":[100,100,100,100]}

00:38:34.800 --> 00:38:36.680
<v Speaker 0>You don't have to worry about side effects.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:38:37.040 --> 00:38:39.080
<v Speaker 0>But why does Java even do this at all?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:38:39.400 --> 00:38:42.160
<v Speaker 0>It's because it's really convenient to pass an object all

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:42.160 --> 00:38:43.440
<v Speaker 0>around your code base.

NOTE CONF {"raw":[100,100,100,100]}

00:38:43.520 --> 00:38:47.920
<v Speaker 0>It could visit 50, 101,000 methods in some production code

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:47.960 --> 00:38:50.680
<v Speaker 0>bases, and to be able to update that object as

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:50.680 --> 00:38:53.880
<v Speaker 0>it flies around your code base is actually really convenient

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:38:54.160 --> 00:38:57.120
<v Speaker 0>and allows you a lot more positives than negatives, as

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,98]}

00:38:57.120 --> 00:38:59.440
<v Speaker 0>long as you're careful and know what you're doing.

NOTE CONF {"raw":[100,100,96,100,100,100,100,100,100]}

00:39:01.160 --> 00:39:07.240
<v Speaker 0>Okay, so we've now established that objects, in addition to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:07.240 --> 00:39:09.840
<v Speaker 0>everything we talked about on the first slide of lecture,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:10.320 --> 00:39:15.880
<v Speaker 0>reside on the heap, we've we've now established that okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:16.080 --> 00:39:16.520
<v Speaker 0>So.

NOTE CONF {"raw":[100]}

00:39:18.850 --> 00:39:25.250
<v Speaker 0>The stack I mentioned was transient temporary it the stack

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:25.250 --> 00:39:32.130
<v Speaker 0>variables only exist while the code is in that method,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:32.130 --> 00:39:33.490
<v Speaker 0>if that makes any sense.

NOTE CONF {"raw":[100,100,100,100,100]}

00:39:34.010 --> 00:39:36.650
<v Speaker 0>So if you're in the main method we make we

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:36.650 --> 00:39:38.090
<v Speaker 0>make our stack variables.

NOTE CONF {"raw":[100,100,100,100]}

00:39:38.090 --> 00:39:39.650
<v Speaker 0>Then we go off to some other method.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:39:39.770 --> 00:39:41.210
<v Speaker 0>That method is going to come back to the main

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:41.210 --> 00:39:41.490
<v Speaker 0>method.

NOTE CONF {"raw":[100]}

00:39:41.490 --> 00:39:45.530
<v Speaker 0>So we keep those we keep that stack variable alive.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:45.650 --> 00:39:47.570
<v Speaker 0>But then we go off into some other method.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:39:48.410 --> 00:39:50.890
<v Speaker 0>It makes its own stack frame puts its variables in

NOTE CONF {"raw":[100,100,100,100,100,100,100,97,100,100]}

00:39:50.890 --> 00:39:51.170
<v Speaker 0>there.

NOTE CONF {"raw":[100]}

00:39:51.210 --> 00:39:54.850
<v Speaker 0>Once we return from that other method, the stack variables

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:39:54.850 --> 00:39:56.450
<v Speaker 0>for that one just get erased.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:39:56.530 --> 00:39:58.050
<v Speaker 0>Java does that automatically.

NOTE CONF {"raw":[100,100,100,100]}

00:39:59.050 --> 00:40:01.210
<v Speaker 0>The heap does.

NOTE CONF {"raw":[100,100,100]}

00:40:01.450 --> 00:40:03.370
<v Speaker 0>It works the same way.

NOTE CONF {"raw":[93,100,100,100,100]}

00:40:03.610 --> 00:40:06.930
<v Speaker 0>So in our in our lovely second example where we

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:06.930 --> 00:40:10.250
<v Speaker 0>made this new array, did absolutely nothing with it and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:10.250 --> 00:40:11.890
<v Speaker 0>then left the method.

NOTE CONF {"raw":[100,100,100,100]}

00:40:14.090 --> 00:40:15.410
<v Speaker 0>Fiona might have this.

NOTE CONF {"raw":[100,100,100,100]}

00:40:15.620 --> 00:40:16.220
<v Speaker 0>Yes.

NOTE CONF {"raw":[100]}

00:40:16.420 --> 00:40:18.660
<v Speaker 0>So in this case, we made something on the heap,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:18.860 --> 00:40:20.620
<v Speaker 0>did nothing with it, and then left.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:40:21.700 --> 00:40:27.860
<v Speaker 0>Java has a a function or a process called garbage

NOTE CONF {"raw":[100,100,96,100,100,100,100,100,100,100]}

00:40:27.860 --> 00:40:28.460
<v Speaker 0>collection.

NOTE CONF {"raw":[100]}

00:40:28.500 --> 00:40:29.940
<v Speaker 0>That's literally what it's called.

NOTE CONF {"raw":[100,100,100,100,100]}

00:40:30.420 --> 00:40:34.380
<v Speaker 0>And if anything you create on the heap is not

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:34.380 --> 00:40:35.820
<v Speaker 0>used by your code.

NOTE CONF {"raw":[100,100,100,100]}

00:40:36.380 --> 00:40:40.020
<v Speaker 0>Java garbage collects it, so Java erases it.

NOTE CONF {"raw":[100,100,99,99,100,100,100,100]}

00:40:40.060 --> 00:40:41.460
<v Speaker 0>Why does Java do this?

NOTE CONF {"raw":[100,100,100,100,100]}

00:40:41.780 --> 00:40:45.420
<v Speaker 0>Unlike the stack, which is temporary and takes up just

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:45.420 --> 00:40:47.180
<v Speaker 0>a little bit of space on your computer.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:40:47.740 --> 00:40:51.060
<v Speaker 0>The heap is your computer's memory in a lot of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:51.060 --> 00:40:54.540
<v Speaker 0>ways, so you are actually writing to your computer's memory.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:54.700 --> 00:40:58.860
<v Speaker 0>Java manages this, but it's possible to actually write to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:40:58.860 --> 00:40:59.940
<v Speaker 0>your computer's memory.

NOTE CONF {"raw":[100,100,100]}

00:40:59.940 --> 00:41:02.660
<v Speaker 0>And so it's really important that we clean this up,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:02.660 --> 00:41:05.860
<v Speaker 0>because if we don't say you wrote some buggy code

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:05.980 --> 00:41:09.100
<v Speaker 0>that made a million arrays on the heap, well, there's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:09.100 --> 00:41:13.620
<v Speaker 0>a million arrays on your laptop's storage now and no

NOTE CONF {"raw":[100,100,100,100,100,98,100,100,100,100]}

00:41:13.740 --> 00:41:16.070
<v Speaker 0>easy way to remove them.

NOTE CONF {"raw":[100,100,100,100,100]}

00:41:16.270 --> 00:41:18.110
<v Speaker 0>You'd have to write some special code to go find

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:18.110 --> 00:41:20.470
<v Speaker 0>them all and erase them off of your computer.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:41:20.550 --> 00:41:23.230
<v Speaker 0>So that would actually happen if Java didn't have this.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:24.190 --> 00:41:28.550
<v Speaker 0>If anyone has used the lovely C language, C does

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:28.550 --> 00:41:31.790
<v Speaker 0>not garbage collect for you does not.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:41:32.150 --> 00:41:38.230
<v Speaker 0>If you allocate memory for something on the heap, it'll

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:38.230 --> 00:41:40.870
<v Speaker 0>just live there forever unless you go and close it,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:41.070 --> 00:41:42.310
<v Speaker 0>erase it at the end of your code.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:41:42.310 --> 00:41:44.750
<v Speaker 0>So in C we have to manually do this.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:41:44.750 --> 00:41:48.270
<v Speaker 0>We have to manually go in and find everything in

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:48.270 --> 00:41:50.550
<v Speaker 0>our code that we assign memory for and erase it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:41:50.550 --> 00:41:51.750
<v Speaker 0>before the code ends.

NOTE CONF {"raw":[100,100,100,100]}

00:41:51.790 --> 00:41:53.550
<v Speaker 0>So if you ever take C or know anything about

NOTE CONF {"raw":[100,100,100,100,100,94,100,99,100,100]}

00:41:53.550 --> 00:41:55.390
<v Speaker 0>it, you know what I'm talking about.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:41:55.630 --> 00:41:59.030
<v Speaker 0>But Java does that for us, which is very convenient.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:00.990 --> 00:42:04.110
<v Speaker 0>Okay, I think this last example.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:42:06.510 --> 00:42:07.870
<v Speaker 0>Well, I'll show you this and then I'm going to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:07.870 --> 00:42:09.750
<v Speaker 0>hop into one more code example for the last couple

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:09.790 --> 00:42:10.510
<v Speaker 0>of minutes.

NOTE CONF {"raw":[100,100]}

00:42:11.110 --> 00:42:14.930
<v Speaker 0>So in this case we've made an array of objects

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:14.930 --> 00:42:16.570
<v Speaker 0>because remember, we can do that too.

NOTE CONF {"raw":[100,100,100,100,100,100,97]}

00:42:16.810 --> 00:42:18.410
<v Speaker 0>And so an array is an object.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:42:18.530 --> 00:42:20.050
<v Speaker 0>And then objects are objects.

NOTE CONF {"raw":[100,100,100,100,100]}

00:42:20.130 --> 00:42:21.370
<v Speaker 0>So what happens then.

NOTE CONF {"raw":[100,100,100,100]}

00:42:21.850 --> 00:42:25.730
<v Speaker 0>Well when we make an array called some circles it's

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:25.730 --> 00:42:26.370
<v Speaker 0>an array.

NOTE CONF {"raw":[100,100]}

00:42:26.370 --> 00:42:28.370
<v Speaker 0>So the name of the array goes in the stack.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:29.290 --> 00:42:31.730
<v Speaker 0>We use the new keyword to make our array.

NOTE CONF {"raw":[100,98,100,100,100,100,100,100,100]}

00:42:32.210 --> 00:42:33.730
<v Speaker 0>So that goes into the heap.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:42:33.730 --> 00:42:38.010
<v Speaker 0>And it allocates in this case five null values.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:42:38.330 --> 00:42:42.450
<v Speaker 0>Because an object that hasn't been initialised or instantiated is

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:42.450 --> 00:42:42.970
<v Speaker 0>null.

NOTE CONF {"raw":[100]}

00:42:43.650 --> 00:42:45.490
<v Speaker 0>So when we make our circle array we make five

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:45.490 --> 00:42:46.090
<v Speaker 0>nulls.

NOTE CONF {"raw":[100]}

00:42:46.650 --> 00:42:48.250
<v Speaker 0>And then we go in and we say okay the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:48.250 --> 00:42:50.370
<v Speaker 0>third circle index two.

NOTE CONF {"raw":[100,100,100,100]}

00:42:50.890 --> 00:42:53.530
<v Speaker 0>We're going to make that a new circle of value

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:53.570 --> 00:42:53.810
<v Speaker 0>ten.

NOTE CONF {"raw":[100]}

00:42:53.850 --> 00:42:55.010
<v Speaker 0>We said new again.

NOTE CONF {"raw":[100,100,100,100]}

00:42:55.090 --> 00:42:57.010
<v Speaker 0>If we say new we need new space in the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:42:57.010 --> 00:42:57.530
<v Speaker 0>heap.

NOTE CONF {"raw":[100]}

00:42:57.810 --> 00:43:00.610
<v Speaker 0>So we actually then in the heap make another new

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:00.610 --> 00:43:03.410
<v Speaker 0>section to store that circle.

NOTE CONF {"raw":[100,100,100,100,100]}

00:43:03.850 --> 00:43:05.330
<v Speaker 0>And here's the tricky part.

NOTE CONF {"raw":[100,100,100,100,100]}

00:43:05.730 --> 00:43:09.970
<v Speaker 0>Some circles has a reference to those five nulls.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:43:10.290 --> 00:43:14.020
<v Speaker 0>But then that third circle now has its own reference

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:14.620 --> 00:43:16.260
<v Speaker 0>to where it lives in the heap.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:43:16.260 --> 00:43:17.820
<v Speaker 0>That's why there's two arrows there.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:43:18.380 --> 00:43:22.700
<v Speaker 0>So when we have objects in objects, nothing really changes.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:22.700 --> 00:43:24.660
<v Speaker 0>There's just more arrows to think about.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:43:24.700 --> 00:43:25.380
<v Speaker 0>Integer.

NOTE CONF {"raw":[89]}

00:43:27.580 --> 00:43:30.740
<v Speaker 0>And yeah, this is generally showing the same thing.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:43:30.780 --> 00:43:33.420
<v Speaker 0>Okay I'm going to try in the last seven minutes

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:33.420 --> 00:43:35.180
<v Speaker 0>I literally have one more code example.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:43:35.180 --> 00:43:36.460
<v Speaker 0>And then we are done.

NOTE CONF {"raw":[100,100,100,100,100]}

00:43:37.340 --> 00:43:39.820
<v Speaker 0>So we are going to do this.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:43:42.060 --> 00:43:44.140
<v Speaker 0>I'm going to erase that and attempt to do it

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:44.140 --> 00:43:44.980
<v Speaker 0>myself again.

NOTE CONF {"raw":[100,100]}

00:43:44.980 --> 00:43:51.180
<v Speaker 0>So we've got a circle array called some circles.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:43:51.740 --> 00:43:55.540
<v Speaker 0>And that's going to equal a new circle array of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:43:55.540 --> 00:43:57.500
<v Speaker 0>length five just like we showed.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:43:58.180 --> 00:44:01.180
<v Speaker 0>And then I will say for I equals zero I

NOTE CONF {"raw":[100,100,100,100,100,50,54,95,100,76]}

00:44:01.180 --> 00:44:04.540
<v Speaker 0>is less than some circles dot length I plus plus

NOTE CONF {"raw":[97,100,100,100,100,100,100,100,100,100]}

00:44:04.940 --> 00:44:08.860
<v Speaker 0>we will say some circles at I is going to

NOTE CONF {"raw":[100,100,100,100,100,100,94,100,100,100]}

00:44:08.860 --> 00:44:11.510
<v Speaker 0>be a new circle and I'm just going to give

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:11.510 --> 00:44:14.110
<v Speaker 0>them all a radius of of one like that.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:44:14.110 --> 00:44:15.950
<v Speaker 0>This is just a simple example.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:44:17.910 --> 00:44:21.830
<v Speaker 0>Now the question here becomes how do we copy this.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:22.950 --> 00:44:26.070
<v Speaker 0>So you're writing some code and you want to copy

NOTE CONF {"raw":[85,66,100,100,100,100,100,100,100,100]}

00:44:26.390 --> 00:44:28.110
<v Speaker 0>what you have for an integer is easy.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:44:28.110 --> 00:44:30.390
<v Speaker 0>If you have five a equals five.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:44:30.430 --> 00:44:32.350
<v Speaker 0>You can just say b is five, B is now

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:32.350 --> 00:44:33.310
<v Speaker 0>its own five.

NOTE CONF {"raw":[88,100,100]}

00:44:33.550 --> 00:44:35.670
<v Speaker 0>But you can't do that with objects as we saw,

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:35.710 --> 00:44:37.550
<v Speaker 0>because if you set one equal to the other, they

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:37.550 --> 00:44:39.870
<v Speaker 0>reference the same spot in memory.

NOTE CONF {"raw":[94,100,100,100,100,100]}

00:44:40.750 --> 00:44:42.630
<v Speaker 0>So how do we actually make a copy?

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:44:43.110 --> 00:44:46.670
<v Speaker 0>Well, what you might think is that we could say

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:47.870 --> 00:44:51.670
<v Speaker 0>infer for time's sake, I will copy this.

NOTE CONF {"raw":[100,100,58,100,100,100,100,100]}

00:44:51.710 --> 00:44:53.670
<v Speaker 0>So I'm going to say shallow copy.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:44:54.270 --> 00:44:57.070
<v Speaker 0>There's a notion of a shallow versus a deep copy.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:44:57.070 --> 00:45:00.710
<v Speaker 0>And you might be able to guess, um, what that's

NOTE CONF {"raw":[100,100,100,100,100,100,100,74,100,100]}

00:45:00.710 --> 00:45:01.590
<v Speaker 0>going to mean.

NOTE CONF {"raw":[100,100,100]}

00:45:01.910 --> 00:45:04.230
<v Speaker 0>So phi is zero.

NOTE CONF {"raw":[100,88,66,100]}

00:45:04.270 --> 00:45:08.590
<v Speaker 0>I is less than, I'll say shallow copy dot length

NOTE CONF {"raw":[41,100,100,100,100,100,100,100,100,100]}

00:45:08.590 --> 00:45:09.310
<v Speaker 0>i++.

NOTE CONF {"raw":[100]}

00:45:09.310 --> 00:45:13.530
<v Speaker 0>And then we'll say a shallow copy at I equals

NOTE CONF {"raw":[100,100,100,100,46,100,100,96,89,100]}

00:45:14.730 --> 00:45:16.850
<v Speaker 0>some circles at I.

NOTE CONF {"raw":[100,100,100,95]}

00:45:17.650 --> 00:45:18.170
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:45:18.330 --> 00:45:19.530
<v Speaker 0>So what have I done here.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:45:19.650 --> 00:45:24.410
<v Speaker 0>I'm saying that in our shallow copy array we're going

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:24.410 --> 00:45:25.530
<v Speaker 0>to iterate over it.

NOTE CONF {"raw":[100,100,100,100]}

00:45:25.970 --> 00:45:29.170
<v Speaker 0>And we're just going to take whatever was in some

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:29.170 --> 00:45:30.730
<v Speaker 0>circles at that index.

NOTE CONF {"raw":[100,100,100,100]}

00:45:30.810 --> 00:45:34.290
<v Speaker 0>And we're going to set that equal to our new

NOTE CONF {"raw":[99,95,85,85,100,100,100,100,100,100]}

00:45:34.330 --> 00:45:36.170
<v Speaker 0>array's value at that position.

NOTE CONF {"raw":[81,100,100,100,100]}

00:45:36.170 --> 00:45:37.890
<v Speaker 0>So we're going through and setting okay.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:45:37.930 --> 00:45:40.930
<v Speaker 0>In our new array, we're taking each circle and we're

NOTE CONF {"raw":[97,100,100,100,99,100,100,100,100,100]}

00:45:40.930 --> 00:45:42.970
<v Speaker 0>setting them as is the new one.

NOTE CONF {"raw":[100,100,100,76,100,100,100]}

00:45:43.810 --> 00:45:44.330
<v Speaker 0>All right.

NOTE CONF {"raw":[100,100]}

00:45:44.370 --> 00:45:45.530
<v Speaker 0>That's that's one way.

NOTE CONF {"raw":[100,100,100,100]}

00:45:46.850 --> 00:45:51.130
<v Speaker 0>Can anybody think of a problem that could come up.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:45:51.210 --> 00:45:51.690
<v Speaker 0>Yeah.

NOTE CONF {"raw":[100]}

00:45:52.810 --> 00:45:54.850
<v Speaker 2>Those are interesting.

NOTE CONF {"raw":[72,72,32]}

00:45:59.050 --> 00:45:59.650
<v Speaker 0>Yes.

NOTE CONF {"raw":[85]}

00:45:59.690 --> 00:46:00.770
<v Speaker 0>Yeah exactly.

NOTE CONF {"raw":[99,98]}

00:46:00.890 --> 00:46:04.850
<v Speaker 0>And if you didn't hear that, all of the shallow

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:04.850 --> 00:46:09.420
<v Speaker 0>copy circles are just going to be pointers Ters to

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,50,100]}

00:46:09.420 --> 00:46:11.340
<v Speaker 0>the circles in some circles.

NOTE CONF {"raw":[100,100,100,100,100]}

00:46:12.180 --> 00:46:12.980
<v Speaker 0>Is this bad?

NOTE CONF {"raw":[100,100,100]}

00:46:12.980 --> 00:46:14.460
<v Speaker 0>Well, maybe yes, maybe no.

NOTE CONF {"raw":[100,100,100,100,100]}

00:46:14.500 --> 00:46:15.780
<v Speaker 0>Depends on what you're trying to do.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:46:15.780 --> 00:46:17.380
<v Speaker 0>This is a perfectly valid way to do it.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:46:17.380 --> 00:46:18.540
<v Speaker 0>But what's the problem?

NOTE CONF {"raw":[100,100,100,100]}

00:46:18.540 --> 00:46:21.660
<v Speaker 0>The problem is, if you go and update any of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:21.660 --> 00:46:24.100
<v Speaker 0>the circles in some circle.

NOTE CONF {"raw":[100,100,100,100,100]}

00:46:24.100 --> 00:46:27.580
<v Speaker 0>So say I took a circle, one in some circle

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:27.580 --> 00:46:28.580
<v Speaker 0>and enlarged it.

NOTE CONF {"raw":[100,100,100]}

00:46:28.620 --> 00:46:32.780
<v Speaker 0>It's enlarging the circle in shallow copy two because they

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:32.780 --> 00:46:33.980
<v Speaker 0>both point to the same thing.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:46:33.980 --> 00:46:37.700
<v Speaker 0>So if you change anything in some circles it's going

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:37.700 --> 00:46:40.340
<v Speaker 0>to affect all the circles in shallow copy.

NOTE CONF {"raw":[100,100,100,100,100,79,100,100]}

00:46:40.460 --> 00:46:42.220
<v Speaker 0>And you probably don't want that.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:46:42.500 --> 00:46:44.860
<v Speaker 0>If you're copying an array, you probably want a copy

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:44.860 --> 00:46:47.380
<v Speaker 0>of it to do something else with at least most

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:47.380 --> 00:46:48.180
<v Speaker 0>of the time.

NOTE CONF {"raw":[100,100,100]}

00:46:48.580 --> 00:46:52.180
<v Speaker 0>So this shallow copy gets people all the time, and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:52.180 --> 00:46:53.940
<v Speaker 0>then they have all sorts of side effects in their

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:46:53.940 --> 00:46:55.660
<v Speaker 0>code, and they don't know why it's happening.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:46:56.340 --> 00:46:59.020
<v Speaker 0>So you can do this, but be careful.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:46:59.380 --> 00:47:01.180
<v Speaker 0>So what do we want instead?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:47:01.340 --> 00:47:03.580
<v Speaker 0>We want what we would call in programming a deep

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:03.580 --> 00:47:06.620
<v Speaker 0>copy, a true copy, an actual copy.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:47:07.220 --> 00:47:11.550
<v Speaker 0>So to get that I'll say a circle array deep

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:11.550 --> 00:47:14.830
<v Speaker 0>copy equals new circle array five.

NOTE CONF {"raw":[100,100,100,100,91,83]}

00:47:14.870 --> 00:47:16.070
<v Speaker 0>Nothing has changed.

NOTE CONF {"raw":[100,100,100]}

00:47:16.790 --> 00:47:19.470
<v Speaker 0>I'll set up a for loop.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:47:20.030 --> 00:47:21.630
<v Speaker 0>We'll iterate over it.

NOTE CONF {"raw":[71,100,100,100]}

00:47:22.070 --> 00:47:24.670
<v Speaker 0>And now take a second and think about what I

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:24.670 --> 00:47:26.990
<v Speaker 0>might do here.

NOTE CONF {"raw":[100,100,100]}

00:47:26.990 --> 00:47:28.950
<v Speaker 0>I think it's probably in the in the slides.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:47:28.950 --> 00:47:30.630
<v Speaker 0>But if you haven't seen the slides yet think for

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:30.630 --> 00:47:31.350
<v Speaker 0>a second.

NOTE CONF {"raw":[100,100]}

00:47:31.670 --> 00:47:34.070
<v Speaker 0>What would we actually want to do here instead of

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:34.070 --> 00:47:36.470
<v Speaker 0>just assigning the pointers the references?

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:47:39.230 --> 00:47:39.830
<v Speaker 0>Yes.

NOTE CONF {"raw":[100]}

00:47:41.190 --> 00:47:42.550
<v Speaker 0>Yes, exactly.

NOTE CONF {"raw":[98,99]}

00:47:42.590 --> 00:47:43.070
<v Speaker 0>New.

NOTE CONF {"raw":[96]}

00:47:43.230 --> 00:47:45.030
<v Speaker 0>New is your friend when you're trying to make an

NOTE CONF {"raw":[72,100,100,100,100,100,100,100,100,100]}

00:47:45.030 --> 00:47:47.750
<v Speaker 0>actual new copy of something.

NOTE CONF {"raw":[100,100,100,100,100]}

00:47:47.750 --> 00:47:54.110
<v Speaker 0>So we can say deep copy at I equals new

NOTE CONF {"raw":[100,100,100,100,100,100,48,100,100,100]}

00:47:54.110 --> 00:47:54.910
<v Speaker 0>circle.

NOTE CONF {"raw":[100]}

00:47:56.310 --> 00:47:59.390
<v Speaker 0>And then remember we want them to be the same

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:47:59.870 --> 00:48:01.230
<v Speaker 0>as in some circles.

NOTE CONF {"raw":[100,100,100,100]}

00:48:01.430 --> 00:48:03.110
<v Speaker 0>So the way that we would do that is we

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:03.110 --> 00:48:06.890
<v Speaker 0>would say, remember we pass circle a radius.

NOTE CONF {"raw":[100,100,100,100,100,100,100,98]}

00:48:06.930 --> 00:48:07.490
<v Speaker 0>Right.

NOTE CONF {"raw":[99]}

00:48:07.530 --> 00:48:11.090
<v Speaker 0>So we can get the radii from some circles.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:48:11.330 --> 00:48:17.610
<v Speaker 0>So this will be some circles at I dot's radius.

NOTE CONF {"raw":[100,100,55,100,100,100,100,85,67,100]}

00:48:18.530 --> 00:48:19.570
<v Speaker 0>Let me make this smaller.

NOTE CONF {"raw":[90,90,100,100,100]}

00:48:19.650 --> 00:48:24.010
<v Speaker 0>Let me just move this over and I need my

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:24.810 --> 00:48:25.610
<v Speaker 0>semicolon.

NOTE CONF {"raw":[84]}

00:48:25.730 --> 00:48:26.170
<v Speaker 0>Okay.

NOTE CONF {"raw":[100]}

00:48:26.170 --> 00:48:28.690
<v Speaker 0>So this is doing the same thing but completely different.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:28.970 --> 00:48:32.290
<v Speaker 0>Each deep copy circle is going to be not a

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,82]}

00:48:32.290 --> 00:48:37.210
<v Speaker 0>not a reference to some circles, but instead a reference

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:37.210 --> 00:48:41.170
<v Speaker 0>to its own brand new circle in memory that has

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:41.170 --> 00:48:44.210
<v Speaker 0>the same radii as all the circles and some circles.

NOTE CONF {"raw":[100,100,100,100,100,100,100,65,100,100]}

00:48:44.210 --> 00:48:46.530
<v Speaker 0>So if I had made all of these radii different

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:46.730 --> 00:48:48.770
<v Speaker 0>in some circle, that would be reflected here.

NOTE CONF {"raw":[100,100,85,100,100,100,100,100]}

00:48:49.250 --> 00:48:51.210
<v Speaker 0>So this is how to make a deep copy.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:48:51.250 --> 00:48:55.290
<v Speaker 0>Now if I change any of the circles in some

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:48:55.290 --> 00:48:58.810
<v Speaker 0>circles, that's going to change the same circles in shallow

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,96,100]}

00:48:58.810 --> 00:49:01.410
<v Speaker 0>copy, but it's not going to change any of the

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:01.410 --> 00:49:03.090
<v Speaker 0>circles in deep copy.

NOTE CONF {"raw":[100,100,100,100]}

00:49:03.330 --> 00:49:06.260
<v Speaker 0>Those deep copy ones are all their own spaces and

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,82]}

00:49:06.260 --> 00:49:06.820
<v Speaker 0>memory.

NOTE CONF {"raw":[100]}

00:49:06.820 --> 00:49:09.620
<v Speaker 0>And so you've made what, this bottom one a true

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:09.620 --> 00:49:10.180
<v Speaker 0>copy.

NOTE CONF {"raw":[100]}

00:49:11.260 --> 00:49:13.980
<v Speaker 0>This is an important concept that you'll get to practice

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:13.980 --> 00:49:15.940
<v Speaker 0>with a bit more in the coming weeks.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100]}

00:49:17.620 --> 00:49:19.780
<v Speaker 0>So I don't have any more questions.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:49:19.780 --> 00:49:24.660
<v Speaker 0>I think the last thing is, yeah, garbage collector.

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100]}

00:49:25.940 --> 00:49:28.180
<v Speaker 0>And here's here's a summary of today.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:49:28.180 --> 00:49:29.180
<v Speaker 0>So we looked at the stack.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:49:29.180 --> 00:49:30.260
<v Speaker 0>We looked at the heap.

NOTE CONF {"raw":[100,100,100,100,100]}

00:49:30.380 --> 00:49:31.900
<v Speaker 0>We looked at how references work.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:49:31.900 --> 00:49:33.540
<v Speaker 0>We looked at side effects.

NOTE CONF {"raw":[100,100,100,100,100]}

00:49:33.540 --> 00:49:37.140
<v Speaker 0>We looked at garbage collection immutable and finally deep and

NOTE CONF {"raw":[100,100,100,100,100,54,100,100,100,100]}

00:49:37.140 --> 00:49:38.540
<v Speaker 0>shallow copy.

NOTE CONF {"raw":[100,100]}

00:49:39.100 --> 00:49:42.500
<v Speaker 0>So that's the working understanding of memory that you now

NOTE CONF {"raw":[100,100,100,100,100,100,100,100,100,100]}

00:49:42.500 --> 00:49:43.020
<v Speaker 0>have.

NOTE CONF {"raw":[100]}

00:49:43.060 --> 00:49:44.620
<v Speaker 0>You'll get some practice with this.

NOTE CONF {"raw":[100,100,100,100,100,100]}

00:49:45.060 --> 00:49:46.540
<v Speaker 0>And that's all I've got for today.

NOTE CONF {"raw":[100,100,100,100,100,100,100]}

00:49:46.900 --> 00:49:47.460
<v Speaker 0>Thanks.

NOTE CONF {"raw":[95]}

00:50:01.540 --> 00:50:01.780
<v Speaker 2>Very.

NOTE CONF {"raw":[54]}

Okay.
That's fine too.
All right, that's the red light.
So we got a few things I want to get
through today.
There should be a few spaces for people coming in
late.
We're not too bad today.
All right, let's move on.
All right.
Pet of the LAX.
We got a cat today.
This is Theo.
I don't know anything about fear when you're sending me
pictures of your cats, maybe tell me a little bit
about them and what they're into or whatever, so I
can share that.
But this is a very nice picture of this cat.
I've got a lot of pictures of pets now stacked
up, so I'm just going to do one picture for
now because in case I get a ton more in.
But if I keep yeah, I don't want to run
out, but , but I might, , might go to
a couple Alexa, if we keep getting more.
So keep them coming.
, somebody was asking how to send them.
Just just send them to my email address.
She'll be able to find it on the course web
page.
Okay.
Oh, right.
No.
So let's go back now to.
So we get slightly out of sync in the first
week or two because we have to cover all the
intro stuff.
So we've now got a little bit left over from
yesterday.
So first of all, I'm just going to put this
up for a second.
The Burns Night ceilidh.
There are still some I think there's about 20 tickets
left maybe.
So if you're interested, , I think it's going to
be loads of fun.
It's on Friday.
I'm going to be there.
I think quite a few members of staff will be
there.
I will ask Julian if you can come, but I
can't make any promises.
, so do come along.
It's a lot of fun.
You get there's a lot of free food and drink.
, if you have got a ticket, please do come.
Or if you can't come, let us know, because.
Well, at the moment there are spare tickets, but we'll
probably be sold out.
So, , we don't always tickets on people who've got
them.
Can't come.
Yeah.
It's 7:00.
.
Oh, I don't even say on there.
It's 7 to 9.
That's a good point.
I should have put this on the slide 7 to
9 on.
Oh, I say Wednesday.
That is nonsense.
Wednesday, January 24th.
It's not Wednesday.
Okay, this is a terrible slide.
Sorry about this.
This is completely unhelpful.
Friday.
Oops.
It's Friday at seven till nine.
Okay.
Right now let's do some Java.
Okay.
I don't.
Okay.
So the questions are.
Yeah.
It's in the Informatics forum.
If you follow the link.
It should have all the information should tell you everything.
It's in the forum.
7:00 on Friday.
You need to have a ticket.
If you turn up on the day, I doubt there's
going to be any spare tickets.
Okay, so any questions?
There's so much stuff in here.
I really can't sort through it.
I really don't.
If you've got some things to say, that's totally fine
for the word cloud.
I don't mind that it's unhelpful if you put them
in here, but you can see it's got this thing
where you can other people's comments.
If people have put sensible comments that you want to
know the answer to, if you just them, That'll
help.
Help me see what they are.
There is surely some way to sort this by how
much people.
How many hearts they've got.
But I don't know what that is.
But I'll try and figure it out.
So anyway, I don't think there was much in there
that hasn't been answered, but in general there might be
questions, so don't spam it because otherwise I can't answer
anything useful.
All right.
So now what we're going to do is we are
going to.
Oh sorry I'll put these in the right place.
Okay.
So there's a couple of things to talk about actually.
, well, you should have seen in the email a
couple of we're having so many hiccups.
So the tutorials should all be in your timetable starting
this week.
That's an error.
They do not start this week.
They start next week.
So just ignore it for this week.
But from next week that will be your timetable slot.
Apparently when you if you can't make a stop, please
go along to your sign slot.
Unless you really can't.
If you can't, I sent a link to change your
tutorial slot.
Apparently when you follow that link, you get a drop
down list of courses and info on B is not
in that.
Nobody seems to know why they're working on that, so
that should be fixable quite soon.
Also, I did have some complaints that there were no
demonstrators in the lab sessions.
I'm pretty sure there were.
I'm chasing them.
Just they've all been assigned.
They all know they've got to be there.
I'm chasing them just in case some of them weren't
there.
I think the problem is they're not making themselves visible.
I told them to put stickers on and to walk
around and to tell people who they are.
That's clearly not happening.
Sorry about that.
I will, , I'll I'll talk to them again and
try and improve that.
But thanks for the feedback.
Please just let me know when these things happen and
we can try and fix it.
, assessments.
, so the weekly quiz is still open, but I'm
going to go through the results not of the quiz
questions, but of the survey questions.
And you will be getting your practice questions for the
first assignment pretty soon.
Watch out for announcements about that.
James and Adriana, who are doing the assignments, will get
in touch with you about that.
So let me just quickly show you The week one
results.
Okay, so this obviously is not the final results from
the survey because it's still open until Friday.
Not all of you have done that, but actually a
lot of you have done this.
So having a look at your background, , actually 63%
of people have got higher or advanced higher or a
level or some kind of similar school leaving qualification.
In computing, this is higher than usual.
Normally it's only about 5050, but you can see a
lot of the class do.
But then for a lot of the class, about 35%
of the class don't have very much higher computing.
They've either done a little bit or they've done none
at all before last semester.
So you can see it's quite a mixed class there,
although less mix.
Unusual.
More than half of you have some experience of OOP,
but not 20% have done a lot.
Most of you have done just a little bit, or
some of you have never done any.
This is again, this is higher.
I'm surprised how many people have already done OOP.
So there's maybe a bit of repetition for those of
you who have done quite a bit of OOP, but
you just have to bear with us because this is
for the people who haven't.
And also the reminder is often really useful.
Okay, so most of you are feeling confident and looking
forward to the course, which makes me feel very happy.
Quite a few are a little bit worried about how
you will cope.
Very normal.
Please do.
Take advantage.
Go and talk to the demonstrators if you can find
them.
I'll make sure you can find them.
Talk to your tutor.
Come along to my office.
I'll say my office hours today at 4:00.
I'm going to be in 606 in Appleton Tower, where
you may be anyway.
Just come and say hi.
You don't need a question or whatever.
I brought some oat biscuits.
, just come say hi, introduce yourself or whatever.
I really to meet people because it's really hard
in the big class to get to know anyone anyway,
but that's particularly useful if you're a little bit anxious
about it.
I'll be able to help you get all the support
you need.
Some of you, only 9% think it's going to be
too easy.
As you already know OP, which is good to see.
Hopefully all of you will have found some challenges and
some of you are quite worried about it again.
Come and talk to me.
Come and access the help that we have.
, most people think everything is pretty clear.
, a couple of things you're not sure about.
Hopefully Piazza is being helpful for that.
If you find that Piazza is not helpful.
Email me directly.
Okay, this is what you want to get.
So this is what you're aiming to get.
So these are most of you are aiming to get
a first.
So that is great.
It's good to see you being optimistic.
Quite a lot of you aiming for 100%.
I mean it's great to be optimistic.
, but you know you know about the common marking
scheme that we use in universities.
It's very different to in schools.
And it's not it's not written in the courses.
It should be more or less impossible to get 100%
because there's a lot asked of you.
So if you're aiming for 100%, don't.
The most important thing is that you don't set
your heart 100% and just work and work and work
and work to try and get that.
You don't need to do that.
Yeah.
Aim higher.
Yes.
Put the practice in.
But don't kill yourself to get this because it's not
set up for this to be expected.
, this.
Oh, no.
This is what you're aiming to get.
This is what you think.
You'll get a little bit lower, but still optimistic.
, nobody thinks they're going to fail, which is great.
Nobody should think they're going to fail and nobody will
fail.
If you put the time in, if you get the
support you that is available when you're confused.
We always have some people failing.
That's usually because they've sort of effectively dropped out because
of things going on in their life, or it's because
they get a little bit behind, they get a little
bit stressed and not understanding things.
And then instead of accessing the help, they just bury
their heads in the sand and think it's too embarrassing
to go along.
Now I'm three weeks out of date.
They're just going to think.
They're just going to laugh at me.
That is never the case.
We're always there to support you, however far behind you
are.
Come along and get support and we can and we
can help you.
Somebody thinks they're going to get 110%.
Frankly, that's not realistic.
But good to see.
People are ambitious.
All right okay.
So enough about that.
Let's do some actual Java.
Okay.
So we were looking at we were looking at f
loops.
So we were looking at basic control loops last time.
And we were looking at if loops.
What we're going to look at briefly now is nested
if loops.
So if there's lots of different variations.
So so far we've looked if something is true do
a if not do B.
Very simple situations, but obviously situations are often a lot
more complex than this.
So here's a nice picture of Scottish weather.
It was actually a little bit this a
couple of weeks ago.
Maybe now it's weirdly warm for the time of year.
But anyway, here is how you classify Scottish weather.
So if it's over ten, that's what we consider to
be super hot in Edinburgh.
1 to 10 is normal.
If it's below freezing it's maybe nippy, and if it's
below five degrees, you might even actually want to wear
a sweater.
So how are we going to code this?
So let's go back.
We're still in Hello world which doesn't make a lot
of sense, but that doesn't really matter for demonstration purposes.
So let me see what we're going to do here.
So we're going to have a variable called temp.
And we're going to initialise it as something.
Let's just put zero for now.
, and we're going to return a verdict of what
we should do, what kind of weather it is based
on that little thing we saw there.
So we're going to have a string called verdict.
We just declare that we're not going to set that
because we're going to be setting that during the programming.
We're just declaring its type.
So how did it go?
If the temperature is less than five, then verdict equals.
Wear a sweater.
Okay.
Oops.
If the temperature is less than one then the verdict
is nippy.
Oops.
If temp is.
What was it?
Less than ten.
That is what we're going to say is normal.
And otherwise, if none of these things are true, we've
got our else here.
We're going to say else.
The verdict is Roasting.
Okay.
And then once we've gone through these options, we will
have a signed verdict of value.
And we're going to print it out.
Okay.
Now if you see verdict, they were all greyed out
and it was greyed out because verdict was never used.
If you look at this it says verdict is never
used.
But now we're actually doing something with verdict.
So these two have gone black.
These two are still grey but we'll see in a
minute why this is okay.
So here are all our options.
At the moment the temperature is zero.
So let's have a just have a look at that.
Think what is it going to do when the temperature
is zero.
So let's run through that.
So actually I'm going to put the temperature to let's
put it at minus six to begin with.
So we'd expect this to be a nice to be
minus five.
It should be.
It's going to be the lowest.
So it should be wear a sweater.
Let's see.
It's normal.
Okay.
Actually, I kind of showed that the wrong way around.
Let's put it at 12, That none of these are
going to apply.
So it's going to print out roasting.
Okay.
That's what we think.
None of these none of these ifs apply.
It goes straight onto the else that's roasting.
If we go down to nine then we'd expect it
to be normal because, , this becomes true.
So we're going to set verdict to normal because this
condition is met.
So if we then go down to wherever I was
before zero, we would what we wanted to say is
nippy, right?
Yeah.
Nippy between -1 and -5 is nippy, so that's what
we'd expect it to say.
Okay.
What it says is normal.
And I heard someone call out that that was what
it was going to say.
, obviously somebody who knows a little bit about coding
said, why is this saying normal and not nippy?
Because I've told it here.
If the temperature is less than one, we should put
nippy.
Okay.
What's going on here?
So this is because we have all of our different
ifs, but we don't have any else statements.
Right?
So it's going through this.
It's saying is temperature less than minus five.
No.
Okay.
Jump over that.
Ignore that.
Is temperature less than one.
Yes.
So now I'm going to assign this value to verdict.
Then on to the next step.
Is the temperature less than ten.
Well yeah that is also true.
Zero is less than ten as well as less than
one.
So now verdict is nippy.
But because it means this condition is going to assign
a new value to it, it's going to write verdict
equals normally normal.
This is why these are greyed out because it's saying
it's never actually going to use these.
Because if any of these are true, this is also
going to be true.
So you're going to be overwriting what you've done.
And this is why we need else conditions.
Right.
Because once we've once we've found where we want to
be, we then don't want to go on to do
the things that don't apply in that situation.
So I'm going to say if temperature is less than
five were a sweater else.
So I'm going to put this in an else loop
here.
Else if temperature is.
Less than one the verdict is nippy.
And then I have another else in here.
Else if temperature is less than ten, verdict is normal.
And then we've got the final else here.
And that should.
Oh, I've got to close these brackets.
Hopefully this is going to work.
Okay.
So now can you see it's nested.
And if I run that now if I haven't made
a stupid error it should work.
Oops.
And it's saying okay because I've nested that properly.
I've got my ifs and I've got my elses right.
So it's always it always knows which path to go
down.
There's no confusion about checking multiple conditions by the way.
Just as an aside, what would happen say, we talked
a little bit about the importance of curly braces in
these loops.
So what happens if I just remove these.
Okay.
So now there's no curly braces around the first condition.
Let's put it down to minus six.
So that will be relevant.
Okay.
So who thinks that's going to make a difference.
Do you think that's going to we are going to
have a different output.
No.
Okay.
Some people do.
Who thinks it's going to be the same.
Probably more people think it's going to be the same.
So if we run it and see, we'd expect that
to say, wear a sweater and it's exactly the same,
it doesn't make a difference.
Why is that?
Is because there is only one line, right?
So if you don't use curly braces, Java will assume
the loop is just the first line.
In this case, it genuinely is just the first line.
So you don't need the braces from a from Java's
point of view.
You do need them.
From a readability point of view, though, it's not going
to fail if you don't do it, but it's way
more readable if you do, so just always put those
in.
Okay, so that's everything that I wanted to do from
the from the last lecture.
So now we're going to move on.
I just got my water up.
Sorry about that.
Okay.
So we are going to look at arrays.
Okay.
So arrays are something that you should.
Oh sorry.
I'm just looking through these beforehand.
So let me go up.
, so you should be kind of familiar with arrays
from math.
But arrays are a very fundamental part of most programming
languages.
There's something you're going to use all the time in
Java, and you would use all the time in a
lot of different languages.
So arrays are essentially a way of keeping things together,
right?
Lots of things that you want to consider.
At the same time, you keep them all together.
So it's a yeah, it's a way of storing different
kinds of data.
So importantly in Java, in an array, every every item
of an array has to be the same type of
thing.
You can't have an array with one element that's a
double and one that's an integer and one that's a
string.
Everything has got to be the same.
Okay.
So here we're looking at initialising.
An array that is is an array of doubles.
And it's got.
So here we've got these ten numbers A0 to A9.
And we want them all to be we want them
all to start off as 0.0.
They're doubles.
0.0 is the default value of a double, and we
may then want to do other things, here.
We're now assigning a new value to A4.
We might want to do addition with some elements of
the array.
We want to do things with bits of the array,
but we want to keep these things together okay.
, so we initialise these.
, okay.
Let me just go straight.
Let's go straight to IntelliJ and have a look at
it here how we do this.
So we're going to bring up arrays.
Okay.
So I'm going to I'm going to make an array
of doubles right.
I'm going to call it array.
And it's already read because I haven't told it what
type it is yet.
As you know Java really wants me to tell everything
once.
Always be very clear about types.
, so I'm going to use the keyword new here.
And this is something that you'll get very familiar with.
What does new mean?
New means I'm creating something that doesn't exist before, and
I need a space in memory for it.
So new is essentially finding a space in memory so
that when I create this new thing, there's somewhere for
it to live.
Now, so far we've only looked at doing things with
literals.
You don't need to do this with literals, but if
you're creating a new object, which is essentially what an
array is you use, you need the keyword new.
Okay, now I need to indicate what I need to
indicate that it's an array, which I do with square
brackets.
And I have to say what kind of thing is
going to be in the array.
And I'm going to do an array of doubles.
So this is how I declare that double the word
double or the word whatever the type is with the
square brackets.
Now also when I'm creating this space in memory, I
need to say how much space do I need.
So I need to say how big is the array
going to be?
So when you're creating arrays, you already know when you
when you create them, you need to know how many
elements they're going to have.
You can't do this on the fly.
You have to declare this.
And you do.
You do it by putting the number in here.
So I'm going to say this is an array with
ten elements.
It could be anything but I want to create an
array with ten elements.
Now I need to tell it what type it is
and the type of this thing.
A new thing I've created called array is a double
array.
So you may think this looks kind of redundant.
I've literally just told it that this is an array
of doubles.
And then Java is , oh yeah, but I don't
know what the type is.
So I have to say it's an array of doubles.
So you have this same thing on both sides of
the of the declaration, which maybe seems a little redundant,
but this is what you have to do in Java.
You have to be really explicit.
Here I don't need to put how big it is,
because the purpose of this is not to create anything.
It's just to say the type and the type is
an array of doubles.
So here I have to put the size.
But on the left hand side very bad left and
right.
I'm just saying what the type is.
Okay, now I can do stuff with it.
Let's try system to print out an element.
So let's print out a.
.
So what this means here is I'm saying here's an
array.
And what I want you to do, Java, is to
find whatever is in position two, and then it's going
to print it.
So let's see what happens when I do that okay.
And it's going to print 0.0 right.
So first this might seem a little strange.
I've just created this new array but I haven't set.
And I've said there's ten elements in it and they're
all of type double.
But I haven't said anything about what value these things
have.
And yet it is printing out a value.
Okay.
So this is normal.
This is because you have these default values in Java.
So if I don't assign anything a value it will
use a default values.
okay.
So this is exactly what I've been showing.
And then I can do all sorts of things here.
I can assign new values so I can say
array two equals let's say 2.5.
And now you can see I've changed this value to
2.5.
And now I'm printing it out and you can see
that it's got its new value.
And I can do things adding things I could
do, , int , no, let's make that a double.
That would make more sense in sum equals array
two plus array three.
And that I would expect to.
What's the value of this going to be.
2.5 yeah okay.
So I can manipulate things in arrays in this way.
And we all get really practice at doing that.
so what kinds of things would you want to
put in arrays.
Basically anything.
All kinds of stuff.
So we'll look in a minute about using an example,
using playing cards in a deck.
But you could keep all the undergraduate students at UAE.
That would be , well that might be an array
of strings if you're using their names, or you might
have.
Identifier integer identifiers or whatever.
All the characters in a book are just all kinds
of things that you want to keep together.
These are really, really common.
Now, one thing that's really important about array is that
they're index.
So you've already seen that when I say whatever is
at position two it that has a meaning.
Something is at position two in an array.
Because arrays are ordered and a little bit counterintuitive to
begin with.
But something you'll get super used to is that indexes
always start at zero.
So the the first element in an array is not
in position one, it's in position zero.
The thing in position one is the second in the
array.
So here Rebecca is the first value in this array
at position zero Isla is the second.
That's at position one.
So.
There's a lot of silly errors that come in because
people forget that.
But you will get pretty used to that.
So this array is of is length five.
There's five different slots, so when I create this, I
say it's an array of length five.
And in memory there will be five different slots created.
The final index index of an array is always one
less than the length, because the first one is zero.
So what's happening in memory?
So if we have primitives, they all have a different
space in memory.
So they're all pointing to a different bit of memory.
But with an array you just have one position in
memory for the whole array.
And then within that there's different slots in the memory
for each element of the array.
So you're just pointing to this, this one entry in
the memory.
And all of the stuff is saved there.
Don't worry too much about what memory means.
If that's really unfamiliar and strange, we will be getting
on to memory in a bit and we'll look at
this in a lot more detail.
So arrays are kind of objects.
They're kind of they're special kinds of objects.
We haven't really spoken very much about objects at all,
let alone what it means to be a special kind
of object.
This is something that we will get onto later and
we'll be talking a lot about in this course.
, and so we looked at all of this and
we declared it.
This is how you declare it?
, and.
Oh, yes.
Let's do.
Okay.
So, so this is a for loop going through initialising
things, , that we will.
Yeah.
We'll come across this later.
So this is if you want to go through and
give a different value to everything, you can do that
rather than having the actual default value.
, yep.
We've already seen that.
And here are the default values.
If it's an integer default value of zero double is
0.0.
Boolean is false.
String is null.
So if you haven't told it the value of any
of these things, that is what it's going to default
to.
And as we said before, everything in array has to
have the same type.
all right.
Let's have a look at a different sort of array.
So I'm going to make an array of strings and
it's going to be of I'm going to call it
buildings, and it's going to be different buildings that I
might be going to.
So I'm going to say, oh, sorry, I haven't shown
you this shorthand yet.
Okay.
So here's a shorthand for making arrays.
So what we saw before with the square brackets that
will create an array of things that have just a
default value.
, so if I want an array so there's going
to be four elements in an array.
So I can do it this.
sorry.
New string.
Four.
So I can do it this.
This has created what I want, but nothing has any
value.
So I can go through one by one, giving it
values, missing a bracket somehow.
, but there's another way to do it.
If I already know every element and it's maybe not
too long a list, so this is quite easy to
do.
There's a shorthand way of doing this where we use
curly braces.
So normally everything in an array is always square braces.
But if you want to do this initialisation trick, use
curly braces and you just list everything that's going into
your array.
So I'm going to instead of doing this, I'm going
to say, here are my curly braces.
And get rid of that.
And I'm going to just list everything in this init.
So the first thing is going to be my house.
And then and then we separate things in the array
with commas.
Let's have the Informatics Forum and Appleton Tower.
And what's another building in Edinburgh.
What's that.
Castle okay Edinburgh Castle.
Fine.
That'll do for now.
Okay.
Okay.
So let's first of all here's.
So let's just run that check.
It's happy with that.
Okay.
So it's created this thing I can't see it because
I'm not doing anything with it.
But now I know that I've changed the memory.
I've created a bit of memory in here.
.
And this is what's in it now.
I haven't used the keyword new, which is very rare.
When you're creating something new in memory, you almost always
use new.
But with this special shortcut, you don't have to do
that.
So if we print it out, what's it going to
look ?
, buildings.
Okay, so this is the name of array.
, no it isn't.
This is the name of the array.
I'm going to print this out.
Okay.
And this is what it's going to return.
Okay.
Which is not what I might want it to return.
So it's kind of annoying.
In Java, you can't just print arrays out.
You have to go through and print out the elements
of this.
So this is essentially a kind of reference to it
in memory.
It's not telling me what the contents of that is,
which is probably when I print out an array what
I actually want to do.
So , okay.
But what I can do is I can get it
to print out, , what is in each slot.
So okay, I'm going to do print out.
This is telling me this this I'm saying print out
what is ever whatever is an index one of building.
So I'm going to go back to woo Clap.
And I'm going to open this question I'm going to
hide the results okay.
So this is what this is what I've asked it.
So have a look at that question on woohoo.
Clap and vote.
What you think the answer is going to be.
Okay, let's have a look.
49 people okay.
Lots of people voted so the results are okay.
Most people have said the Informatics forum okay so let's
run it see what we get.
It is the Informatics forum right.
So the second most popular vote was , Appleton Tower.
That is because.
Oh, actually, I have no idea why anybody who gets
up to the tower.
So the naive thing, you might guess is my house,
because that's the first thing in the list.
But as I've just been saying, I'm glad to see
that everyone's been listening to me.
That's really nice, because you all knew that my house
is not at index one, it's at index zero.
So Informatics Forum is what's at index one.
That's great.
Okay.
So I can also get it to tell me the
length.
Now this is something we haven't seen before using built
in methods.
Right.
So when you apply methods to an object you use
a dot.
So here I'm going to put buildings dot length okay.
So length is a built in method.
And I'm applying it to an object called buildings using
this dot.
So what this is saying is whatever length, whatever length
is do it to buildings.
Right.
And what length is, is something that tells you the
length of an array.
So it's something that's built in for arrays.
So if I run this, it's going to tell me
that the length of buildings is four.
That means it's got four elements in it.
, other things I can do.
So I can say right.
What is that?
So it's for long.
I want to know what is at the in in
index for.
So let's have a look.
So I can do this.
So.
So the what I want to do here is I
want to make this, this number that is returning.
I want that to be the index I'm looking at.
And then I'm going to ask what's in that position.
So.
So what this is mean I'm not giving it an
explicit number here to, to tell me what is at
the index.
I'm getting it to work out a number and then
return what's at the index.
Okay.
So it doesn't really this.
Okay.
So it's got this yellow.
So which yellow as you know means I will run
it.
But it's not very good coding.
So let's see what's going on here.
Okay.
So I now get an array index out of bounds
exception.
And it's telling me the yellow is telling me array
index is out of bounds.
Okay.
Now we should know why that is.
Because the building the list of is of length four.
What's the index for?
Nothing.
Because the highest index is three.
It goes from 0 to 3.
So the highest index in any array is always length
minus one.
So if we put this.
So if we put a minus one in here, what
this is saying now is give me whatever is the
last element of this array.
And that is something you might quite often do when
you're coding what is last in this array.
If I do that it's going to tell me Edinburgh
Castle that is in the final index.
So this array index out of bounds is something that
happens quite often when you're coding because you've somehow messed
up how long it is or whatever.
What's the next question?
Oh yeah.
I haven't done go down to that yet.
Okay.
Right.
That's what I wanted to show you that now.
Okay.
And that's all what we were just looking at.
And here's some more examples so you can have a
look through this.
Just if you want different examples of the same thing
we've been looking at.
But I'm not going to go through those all now.
So we've got this Is a dot product.
So maybe you remember doing dot products in maths.
, so essentially what we're doing here.
A dot product is the sum of the products of
their corresponding components.
So you multiply them together and then you add those
all those multiplications together.
So what we're doing here we're setting up these two
arrays.
And we're using this shorthand here with the curly braces.
so x is has got three values y has
got three values.
Now we're trying to find out what the ultimate sum
is.
So we start off with an initial value for some
which is some is a double.
So it's going to be 0.0.
And then we go through go through these this
array.
And every time we are multiplying whatever is in ith
position of x with the ith position of y.
That's probably familiar with you, if you can remember dot
products, if you can't have a look at it, if
you want to figure out what's going on.
Okay.
So.
Oh.
.
Okay.
So we're going to have a little question about that
a little bit later on.
So we're creating an array with random values.
Okay.
So sorry.
Okay.
So here you can see this is another thing we
haven't we haven't done yet built in packages.
So obviously there's tons of things that people do all
the time.
You don't want to build it in yourself all the
time.
So here's a package called maths packages.
Start with uppercase.
And this is just a whole package of different maths
things you want to do.
And one of the methods in there is called random.
What random does is it just finds a random value.
So what this is saying is create something completely random
and assign that to A1.
So now we're creating an array and we don't know
what the values are but they're not 0.0.
We're creating random stuff for those values to be ,
let's do the printing.
Yeah.
Okay.
So let's do printing.
So we tried printing this out, right.
Just using buildings.
And we saw that that didn't work because you can't
do that with arrays.
So what you have to do with the rays is
you have to go through one by one and print
them all out yourself.
So we can do this with a for loop.
I get rid of that for now.
Okay.
So for everything in the array we're going to print
it out.
So.
So if you remember for loops from the last lecture
we have the three things in the header.
First of all we have the counter which we're going
to initialise to zero.
So in t equals zero.
And then how long are we going to go through
it.
How many times are we going to do this.
We're going to do this for every element of the
array.
So we can have at whilst as long as I
is less than building buildings dot length.
Okay.
Because as we've just seen, when we get to buildings
length then we're outside the array.
So as long as it's less than that we'll keep
going.
You also could have I is less than or equal
to buildings length minus one, which is saying go to
the end and then stop.
This is saying stop before you get past the end
as effectively the same thing.
It's slightly more concise this way.
And then we're iterating each time.
What I++.
Okay.
And then every time we're just going to print out
whatever is in the ith position in the array.
Buildings ie.
Okay.
So if we do this it should print out everything
for us.
So here this is all the elements of the array.
Okay.
Now this is not what I'm going to show you
now is not particularly apropos to arrays, but it's something
a little coding hack that you need to know.
And I think it's as good a time as any
to do it, because as you can see, we've got
this little yellow thing here.
It's saying it's not completely happy about this for loop.
It's not wrong, but it's not very neat programming.
So what it's saying here is for loop can be
replaced with enhanced for.
Okay.
So for loops are pretty repetitive.
Right.
We always have we start with an iterator.
We go on until we've got a condition met and
then we iterate by one.
And what we're essentially mostly doing or very often doing
in a for loop is just going through a list
of things and doing the same thing to each of
them.
So for everything in the list, we do something.
And , because this is really common, there's shorthand for
it which is called enhanced for loop.
So one of the nice things about using an IDE
IntelliJ is that it does a lot of this
stuff for you, so I don't actually have to replace
it.
I can just choose here.
Is suggesting do you want to replace this with an
enhanced for loop.
So fine I'll do that.
And now it's changed that for me.
Okay.
So this is the anatomy of an enhanced for loop.
So we just have this one thing in the header.
So this is what we're this is what we're going
through.
This is this is our array.
We're going to step through the array and we're going
to.
So the colon should be read as in.
Okay.
So what this is saying for everything called building that
is in this array.
Buildings do something.
What we're going to do here is print it out.
You might think it could be, , this is very
common way of doing it, but we could just put
a, .
We could just put X or whatever, you know, whatever
we want.
So for every thing in buildings, do something for it.
If we look at that, it's going to be exactly
the same.
Okay.
So enhance for loops.
You can get IntelliJ to write them.
You can write them yourselves.
The colon means for for everything sorry.
It means n for everything in this array.
Do this.
So basically most of the time we're using for loops.
You kind of want to do the enhance for the
only other.
The only situation when you don't want to do this
is if you're actually using the iterator to do something.
So when we looked at, , did we do it
when we were doing here when we looked at.
Yeah.
So when we looked at this dot product we're actually
using this iterator.
We want to know what's in the ith position.
and we're multiplying.
Actually we could do that.
Yeah.
Okay.
So we'll have a we'll have a look at examples
when you can and can't use for loops.
If you if you need to know the iterator, if
you're doing something with the iterator, then you Then
you need to use a traditional for loop, but usually
use enhance for loops.
Okay, so we've done the printing.
We've done random values.
we can look at maximum values of the array.
and here so this is a little for loop
that's been written.
And again this could be an enhanced for loop.
and it's saying we want to find the maximum
value.
So let's go through everything in the array.
We'll start off with the maximum value being the first
element.
and then we check everything else.
If it's higher than the one we've already got, we'll
replace it.
And if not, we'll just ignore it and keep going
until we have finished.
And that will give us the maximum.
So this is lots of different things you might want
to do with arrays.
Copying one array to another.
So I don't want to go through all these examples
in a huge amount of detail.
, but this is useful if you want to look
through and see if you can figure out what they're
doing.
So this is this is essentially going to copy.
It's going to create a new array B.
And it's going to copy A to it.
all right, so let's do the fill in the
blanks, okay.
So if you go to woo clap.
Now, , this is the question.
Here are some things that might go in the blanks.
So I'm going to give you a minute or so.
Oh.
So what's going in blank one for a start.
So the header of the for loop.
Which of those options is that going to be.
Let's see.
Okay.
I'll leave it a little bit longer.
Not that many people have answered yet.
Okay.
Let's see what people are saying.
So most people have got is that the right answer?
Yeah, I'm pretty sure that's the right answer.
Okay, so number one is the second most popular answer.
So in t equals one is correct.
But you've got I's less than length minus one.
If that was I's less than or equal to length
minus one that'd be great.
You keep on until it's equal to the final index.
But if you say it's less than so length minus
one is the final index.
You're stopping when it's less than.
So you're not going to get to the final index.
You're going to miss out the last one.
And you're iterating correctly.
Here there's commas instead of semicolons.
By the way I do this all the time in
four loops.
I don't know why I always make this mistake.
I'm just you probably see it when I'm doing live
coding.
I always put commas in and I'm , why isn't
it running?
I don't know why I do that, because you always
use colons.
Must be colons also I've just got i++ here.
Should be i++.
What's wrong with this one?
Oh this is, this is actually does have the same
problem as up here with the less than length minus
one.
But also I'm not instantiating the I.
It's not going to know what the I is.
And here this is correct.
So we're properly instantiating AI.
We're going until AI is less in length and then
we're iterating.
Okay.
And what are we going to want to put in
here.
So we're working out the dot product which means that
we want to multiply whatever's in position AI together
and then add and then add it to the sum.
So what of that code is going to do that?
Let me just.
Is that.
Yeah.
Oh.
I just did.
Okay.
I just gave the answer there.
, so, , sorry about that.
Oh.
Nobody voted.
Oh, hello.
Okay.
I somehow screwed that up.
Okay.
So what we're doing here is.
Oh.
I've now got really confused about what I'm doing.
Is that for the wrong thing?
Okay.
Anyway, let's just talk through it.
Let's just ignore that.
Sorry.
I don't know what happened there.
So what we're doing here is we are multiplying whatever's
in the i'th position in A with B, we're adding
it to whatever we've got in the sum.
And then we're allocating that new value to sum.
So sum is now changing.
Okay.
So we've got average values.
Okay.
So what we have here hopefully this is going to
work.
What I just said.
Oh okay.
So this is what we're supposed to be doing now.
But I can't vote anymore.
Why can't I vote?
Oh, God.
Sorry.
So.
.
How did I turn that off?
I don't know.
Anyway, let's just forget about that.
So what I wanted you to do here is to
look at all the different commands and to order them
in the right way.
And I especially put in that new slide because I
screwed that up last year.
And it should have worked, but I didn't.
It didn't work anyway.
So what we have to do here, first of all,
we have to declare what some is.
So we've got some we're going to use some.
So we've got to declare what it is.
And then here we've got what we're doing here is
okay, so this is shorthand.
Have we seen this shorthand before.
, this is a nice way of just saying instead
of saying sum equals sum plus something, you just say
sum plus equals.
And that just means by adding something new to sum
and reassigning it.
And then you're going to print out, , so we're
doing the average value of an array of doubles.
So we're getting the sum and then we're dividing it
by the length okay.
If that's not clear have a look through it.
If it's still not clear then go along to the
lab okay.
So do we have time to do this.
The so this here we're going to look at,
, slightly more complex different arrays where we are trying
to represent a pack of cards.
, let me just see if we can start doing
that.
.
What is a deck of cards?
Okay, so I think.
Oh, cards.
Oh, okay.
, right.
Sorry about this.
, I forgot to get this figured.
It's using the wrong version.
Oh, no, don't do that.
Okay, so maybe we should just leave this.
, okay.
Hang on.
I've got to just change the.
Version of Java.
For some reason, it keeps trying to open it with
an old version of Java.
Okay, now this should work.
, okay.
So we don't have time to look at this in
very much detail just now.
, but, , okay, so what this is doing, right?
Oh, actually, also, in fact, I'm just going to leave
that because it's got things in that I want to
introduce slowly.
I'm really sorry.
, I wasn't actually expecting to get onto that one,
so I haven't prepared it.
But let's go on to the to the questions and
see if we can get any sensible questions.
No questions at all.
Okay.
Nobody's got any questions.
Favourite biscuits?
My favourite biscuits.
I love rich tea biscuits.
I'm really low key in my biscuit things.
And also, .
Also I biscotti.
They're really good.
Okay.
Isn't nesting ifs a bad.
Isn't it?
Oh, God.
What is it?
Is it a bad practice?
Okay.
We're going to look at alternatives to that.
So as you can see, even with the four options
it does begin to get a little bit cluttered, right.
So sometimes it's if you're in a complex situation
there are other ways to do it.
And we're going to look at it differently.
Look at that later on.
Why do arrays start from zero?
I don't know a lot of things in coding start
from zero.
I've never really understood it, but that's how it works.
Could you have used a break instead of nested.
Else?
Yes.
You could have used a break.
, usually you need to be a bit careful about
using breaks because it takes it right out of the
coding.
But yeah, that could have worked.
Which is more efficient?
Okay, wait, this is a list.
It might not jump around a bit.
Okay.
Please can you explain how the enhanced for loops work?
Yes.
We will get on to that.
We'll be looking at that a lot.
Is this okay?
Double n array.
No, that's not okay.
You cannot.
You cannot initialise it this.
You have to use the keyword new unless you're using
the curly braces shorthand.
You have to use the the the the the keyword
new.
And you have to do the declaration in one side
and then the type on the other.
So you can't do that.
Her scheduling clashes put something onto Piazza.
I do want to see your cats.
Definitely send them to me.
Should we use an enhanced for loop over array dot
for each?
I not, I would say yes, but I'm not completely
sure what you mean by that.
Other than weekly quiz and lab exercises, what do I
have to do this week?
Nothing.
Just finish the weekly quiz.
Week two weekly quiz will be released today.
You've got a week and a half to do that.
, okay.
I'm going to go through these.
.
Anything useful?
I will extract and get an answer to you for.
Sorry that that was a little bit chaotic at the
end.
Not quite sure what I had with that, but thanks
for coming.
See you on Thursday.
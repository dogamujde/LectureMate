Yeah.
It wouldn't be anything too long.
I mean, it would only be a kind of
4 to 5 minute break.
You do the questions, then, okay?
It's gone bad.
So do you want to.
Okay.
Okay, everyone.
So we've got a shout out or a little explanation
about something from Luke before we go on to the
lecture.
Yep.
Do I just use this?
Hello, everyone.
I am Luke.
I am a fourth year computer science student, and I
am just going to briefly run you through my dissertation
project, which is studying the effects of AI coding assistance.
So just talking a bit about quickly the usage of
AI coding assistance.
So recent years Chennai coding systems have been on the
rise.
So ones GitHub, Co-Pilot, intellisense.
I'm sure some of you have heard of these and
have possibly used them.
.
Here is a file and read a Stack Overflow.
Do you currently use AI tools in your development process,
which was about a 5050 split for yes, but this
data was a bit old, so you might extrapolate.
It's quite a bit higher now and is currently unknown
how effective these assistants are, which is when I move
on to what is my project about.
So my project studies, if Jenny coding assistance are useful
to students and for learning in general, and also in
the professional environment, but not too so how and why
you could help me with, , looking and collecting data
to find some answers to this so you can volunteer.
Sorry, volunteered to participate.
So I've got a QR code at the end that
you can sign up to.
It's a very easy setup.
It just requires you to run the executable.
It's it's pre-packaged, comes with questions, tests, and integrated
it that you can run.
I've just got a little picture here if you'd
to take a look.
So this is what it would look when you
open the research software in your browser.
So on the left hand side you would have preloaded
questions.
These are based on the lab questions for the course.
So you've got which one do I put.
You've got a simple just reversing an array in here.
You'd write your code in there you can click the
run code button.
And you would have a range of tests that you
can test your code on.
And on the right hand side.
This would be where you talk to the coding assistant,
and it would be able to see your code, see
the context, and give you tips on how you can
improve it.
So here is the QR code if you'd to
sign up.
I'll just leave that up for a minute.
Thank you everyone for your time.
Okay.
Thanks, Luke.
So if you're interested in that, use the QR code
to sign up.
So just to be really clear about how this interacts
with the course policy on JNI.
So as Luke has said, how JNI can help develop
your learning.
As as a coda is really still is very experimental.
That's what Luke's doing research into.
So our policy in infancy at the moment is that
I do not want you to use JNI.
You're not allowed to use them for assignments, but I
don't recommend you use JNI for your practice, because what
you're trying to do is to learn to develop the
skills yourself is really unclear whether you if you use
JNI too much.
I think it is clear that you're not going to
get that full skill development.
So if you want to get involved in this project
with Luke, what are you going to do?
You're going to sign up.
And then we're going to work with that group of
people who are working with Luke to think about how
this interacts with your learning to make sure that you're
not doing all your learning with JNI, but in some
cases, to to work with Luke on his research, you
will be using JNI.
But in general, I don't want you to be using
JNI because I want you to be learning how to
do these basic skills yourself.
Okay, so, , sign up if you .
, I guess Luke might want to send out an
email about that.
So you might see an email, , following this up.
, but this doesn't change the policy on AI.
It's just a specific research project that there's an opportunity
for you guys to get involved with.
Is really interesting.
Being involved in research.
This is you know, this is really fundamental stuff that's
probably going to be changing how we're teaching.
So I would definitely recommend you signing up for that
if you're interested in that.
And we'll work with those students to to think about
how that's going to impact on their course.
I mean, it's not going to impact on it much,
but we're just going to look at general policy with
respect to people working with Luke.
Okay, great.
Thank you.
Now let me yeah.
Thank you.
Thank you.
Okay.
So a couple of things to go over to begin
with.
tutorials.
Oh my goodness tutorials.
So tutorials have started.
, those of you who had tutorials yesterday, , will
have already had them.
Most of you, although there's been an issue with this
, and some of you will have tutorials today and
tomorrow.
So there's two issues with this.
So one of the things is all of you are
in tutorial groups of around 12 to 15 students, and
then the tutorial sessions are groups of 3 or 4
of these separate groups, all in one time.
So you will have a tutor who's just your tutor
for about 12 to 15 of you.
And in your tutorial session, there'll be 3 or 4
of these tutors working with their groups, but they can
also help students in other groups.
And also a super tutor who's a member of staff
who will be just overseeing and mentoring the the tutors
and providing additional support.
, however, timetabling for some reason have just put you
all in six massive groups, so you're just in a
group with everyone else on your big tutorial.
That means you don't have a specific tutor assigned at
the moment, which is not how it's supposed to be.
I don't know why it's been done this.
I'm working with timetabling.
I haven't it's not sorted out yet.
, you.
Once you've been to your tutorial, you should see who
all your tutors are.
I don't know whether you can see any names.
Associate of tutors.
Okay, that's not good.
You should be able to get in touch with your
tutors.
I'll try and get this sorted ASAP.
In the meantime, if you have a question you need
to put to your tutor, send it to me or
to one of the Tas and we can make sure
it gets the right place.
So I'm really sorry about this.
The other thing is, I have heard that yesterday afternoon
people in the 330 tutorial.
It suddenly disappeared from your timetables.
Is that right?
I have no idea what's happened with that.
We haven't moved the tutorial slot.
Your tutorial slot is as advertised 330 on Wednesday in
the room it's supposed to be in.
I have no idea why that happened.
I'm really sorry about that.
I think that caused some of the students not to
go along to tutorial.
If so, you've missed out on the first tutorial.
If you're able to make one of the extra sessions
today or tomorrow.
You can see on the website where they are and
when they are.
Do try and go along to that.
, if not, you can make it up yourself.
If you're worried about this, get in touch with me.
Maybe we can organise a bit of an extra session,
but it's difficult to find the time to do this.
I'm completely baffled by this, and again, I've not got
any answers.
I've emailed urgently to find out what that's about.
I can only apologise.
I'm sorry.
That's causing confusion.
, and as always, any concerns?
Put, .
Put a post on Piazza.
Come along to my office hour on Monday.
Or email the course Tas or me.
So the the undergraduate ceilidh.
Obviously that was cancelled because the university was closed last
Friday because of the storms, which is really annoying, but
it has been rescheduled.
If you had a ticket, you probably have heard already
it's going to be the 12th of February I think.
So if you had a ticket previously that will transfer
over.
If you're not able to make the new date, you
can get a refund.
We may have more tickets available, depending if there's quite
a few ticket holders who are not able to make
the new date.
There might be tickets available for those who didn't have
them for the last one.
If so, , we'll let you know and I hope
that it'll go ahead without any problems this time.
, okay.
The only other thing to mention is the session on
Monday, which, as I've said before, will be this double
session.
, and we'll provide we'll be providing lunch.
So it's just a kind of free lunch should be
quite a chill session, but I think it's going to
be really helpful for you to think about your first
year and think about your path through university.
, some of you have signed up to be volunteers.
Fantastic.
Thank you so much.
I'm not sure if Becker's got in touch with you
yet, but if not, we will be doing that really
soon.
We just want you to come along slightly early and
go over what we're going to be doing.
So I'm really excited about that.
, and, , yeah, we'll see how that goes.
All right.
So now let's go back to the session.
So where are we?
Oh come on, don't be annoying.
Why is it frozen?
Interesting.
Page on response.
Oh, here we go.
All right.
So where are we from?
Lots of interesting things coming up here.
Some of these are genuine, some of them not.
, part of the lecture.
This is Owen, who's a German springer spaniel.
I love that picture.
It just looks so, .
It looks a really professional picture, actually.
He looks so active.
I love those ears they have that are all furry.
It's really cool.
And this is sparkle.
He's a Pomeranian.
Different sort of dog, but it looks very cute with
the little jacket on.
Okay.
, okay.
I just want to ask this.
, we had a bit of discussion about this last
session, and there were different views on this.
I'm happy to do it in dark.
Some people find that harder to see.
Oh, okay.
Everybody wants it in dark mode.
Interesting.
All right.
Okay.
That seems fairly clear that I should change to dark
mode.
All right.
Okay, fine.
, biscuits.
I'm just going to leave that open for a short
while so you can vote.
For what?
Biscuits in the next office.
Our last time we had rich teas, which I was
really pleased about because they're my favourites.
And, , loads of people came, which was awesome.
Some people with questions, some people just to say hi,
, and which is really great.
Oh, Oreos.
Okay, that looks the most popular at the moment.
, okay, I'm going to give you another minute because
I want to turn it on to the next question.
Okay, I'll tell you what.
I'm going to leave that open whilst I'm doing the
end of this lecture.
And then we're going to then I'm going to put
it onto the ask me any questions.
So I'm not going over the questions from last time
because there were no questions last time.
I don't know whether nobody has any questions at all,
but I think actually probably it's because I put it
up too late.
So you guys are all leaving before that was available.
So what I'm going to do now, in a minute,
I'm going to move on from the biscuits one.
And there are no, , interactive questions for this session.
So what that means is that you can now start
putting up your questions so you can put them up
at any stage.
And I will answer them on Monday.
All right.
So just to go back to what we were talking
about last time.
So last time we were looking at objects, right?
Why do we do object oriented programming?
What is an object?
How do you create an object and how does that
relate to classes?
Okay, so there's just a couple of things to finalise
from this.
So we looked at using methods.
Right.
And the notation you use for methods is is the
dot.
So what this means is this is the method start
engine is the method that I want to use.
And I want to use I want to apply that
method to this object.
Right.
So I'm starting the engine of this car.
You always have the round brackets for the arguments to
go in.
Sometimes there will be actual arguments that you need to
be in there, sometimes that will be empty, that will
be defined, and you need to know the method definition
well.
You don't need to know the method definition.
You need to know the signature to see what arguments
the method would expect.
And IntelliJ will always be able to tell you that.
, okay.
And but here we also saw earlier we saw this
application dot here.
So this is applying a method.
But math is not an object.
Math is a class, right?
So this essentially what this means is you're calling method
random on the class math.
That means there is a method called random that is
defined within the maths class.
That's what I want you to use.
Okay.
So that is what that means.
It's the same operator but it can be used either
on instances, which means do this to that instance or
it can be used in classes, which means this is
where you'll find the definition.
, so instance methods are associated in object , and
you need the object name to say what you're going
to apply it to.
Whereas class methods are associated with a class that's fairly
explanatory.
Class methods are globally available.
That means that you , that means that you anywhere
within the class, you can use it.
And sometimes you need to import things.
We'll be looking at that later.
But if you want to use things from a different
class you can import that.
And then that means your code can see any of
these, , class methods.
They're also static.
, we'll get on to explain a bit what that
means in future lectures.
But for now, just just remember that they're static.
, so static, static behaviour, which which is to do
with how much you can change how things behave.
But there's also static states, which means things can't change
states easily.
And that's useful for constants.
, so global constants this is a global constant.
So in within math we're defining this constant pi.
We're going to make this final because we don't want
anybody to be able to change pi.
Pi is just a thing that's always going to be
the same.
, and we're declaring it public static and final.
And that that means the public.
This means that it's a global constant.
And we'll be practising these these modifiers a lot more
in future lectures.
Okay.
So just to go back to why object orientation is
important is this is the dominant paradigm in programming.
That is because it's really helpful for good software engineering
principles, because it's used to objects used to model real
world domains, or real world entities and domain concepts, and
the way in which these change is much slower than
the way in which the world in general evolves.
So object oriented object orientation puts things together.
That's changes together.
So if you if you want to say something different
about cars, if you want to develop the behaviour of
objects, there's a specific place that you do that.
That is in the class definition.
And it's all clear.
It's clear where it comes from.
And once you make changes in there, that filters out
to everything that every instance of that class is very
nice and neat.
And this is just about the types I don't think
it's worth going through this, but just another really important
thing we covered is about the double equals and the
dot equals where double equals is comparing the references.
Are these the same object which means do they occupy
the same place in memory or are they just equal?
Where all their values might be the same, but they're
living in a different part of part of memory?
Okay.
So now I'm going to move this on.
Let's see the biscuits.
Oreos is the winner right I'll bring Oreos but I
might bring digestives next time.
I don't Oreos very much, but that's okay.
I'll bring them for you guys.
And by the way, after after the session, if there's
any left, there were actually some left last time because
I got a really big pack of which I just
leave them in the kitchen and.
606 so if you don't make it along, you might
be able to get a biscuit anyway if you go
along there before they're all eaten.
Okay, so I'm just leaving this up.
I'm not going to look at it for now, but
, yeah, okay.
That's super helpful.
Okay.
The more you do this, the more I just have
to spend my time going through deleting them before I
can actually answer any real questions.
So I'd really appreciate it if you didn't do it
all that much.
Okay, so now we are looking at testing and debugging.
Okay.
So the rule of thumb is coding is that there's
usually an error in your code somewhere.
So when you're just beginning coding, a lot of people
have the feeling that, okay, mistakes is something you make
in the beginning.
And as you get better at coding, you're going to
know how to do this properly and you won't be
making mistakes very often.
Okay.
That is absolutely not how coding works.
Making mistakes and coding is absolutely part of what happens
when you're coding.
Code gets really complex.
The logic gets really complex.
It's really easy to make mistakes and it's basically impossible
to avoid.
Nobody can really do a lot of coding without making
quite frequent mistakes.
That's inevitable, and it can be a massive problem if
you release code to tons of people, which has got
fundamental errors in it, then that's a huge problem.
My husband was actually super stressed yesterday because he's a
software engineer, and he'd released some code that there was
an error and it wasn't a huge thing, but it
was having impacts on clients and he was having to
get his colleagues to help and it was really
stressful.
I think it's been sorted out now and it turned
out not to be too terrible, but this is something
you really, really want to avoid, right?
You will make mistakes.
You do not want those mistakes to live in the
code that's then being sent out to people, because that's
going to cause a lot of problems for you and
for whoever you work for.
So what do we do about this?
Well, what we do about this is we try and
avoid them.
And if we and if they exist, if they do
come along and we try and fix them, okay.
But first of all, looking at the there's three, three
different kinds of errors syntax errors, runtime errors and logical
errors okay.
So syntax errors are kind of a spelling mistake.
You're just using the language incorrectly.
This is unlikely to happen when you're more experienced, but
it's usually something you know.
You just do it carelessly.
You forget something.
using an IDE, this is.
These are pretty easy to pick up.
IntelliJ is going to tell you about this sort of
stuff.
, syntax errors are usually not picked up before you
run it.
So if you have a syntax error.
Yeah sorry.
Syntax error.
Yeah it's syntax error.
So they're picked up at compile time right.
So you can't run a program with a syntax error
and it's not going to run.
So if you're doing it the command line when you
compile it that's when it's going to break.
If you're doing IntelliJ it just won't let you run
it.
so usually these are fairly easy to identify, particularly
with an IDE.
But it's not always the case.
So what's going on here?
Illegal start of expression.
So this is the this is the information it gives
you is a little bit unclear exactly what that means.
, so and exactly what that means I'm not going
to go into details, but the point is it gives
you error messages.
Usually these are pretty clear, but sometimes it's a little
bit hard to understand.
So runtime errors maybe that's a bit more a
grammar mistake.
, and this means you can compile it and you
can run it, but when you run it, it's you're
going to get some kind of error.
So this is your classic obvious entry level runtime error.
We've looked at this several times before.
You're looking for something in the in at index for
in an array.
That's for long.
When we know an array that is for long, the
the biggest index of the end index is going to
be three.
So this does not exist.
But you can compile it.
It's not going to show up errors in the in
IntelliJ because that is there's no syntax error.
But when it runs it's going to be trying to
do something that's impossible and that's going to fail.
You're going to get an error message.
So this would say we've seen this before.
Index array index out of bounds exception.
okay.
Logical errors.
So most of the time the kinds of errors you're
going to get are logical errors.
Right.
So this means the Java is syntactically correct.
And the Java is doing exactly what you have told
it you want it to do.
But what you've told it to do is not actually
quite what you really meant to tell it.
So you thought you were giving correct instructions, but actually
your instructions were either not clear or not quite correct,
and it's doing something wrong.
So here we've got a classic example.
We're trying to add things but we're using minus here.
We've got for example the statement this one is an
orange bird.
That's a perfectly reasonable thing to say in English.
It just isn't true.
There's a there's a logical error there.
Okay.
So you're not going to get any help from IntelliJ
with these errors.
You're going to get a lot of help to find
out where they are.
But it's not going to tell you what these errors
are because it doesn't know you've told it.
That adding means subtraction.
And it's , fine, this is this is how we're
defining this.
This is working perfectly.
Well.
You've got to see where the logical error lies.
Okay.
So let's have a look at some of these examples.
So I'm going to try and run this.
Now you can already say you can already see I've
got a syntax error here.
Right.
Because there's lots of red.
IntelliJ is not happy.
You have something that's red, you can't run it.
Okay.
So it's just it's it's it's just going to tell
me what the problems are.
Okay.
So it's saying, , colon is expected.
If we look in here, it's going to tell me
a little bit more about that.
So it's in line five I can see that.
So and then problems further on.
But this is coming out of a problem that happens
earlier.
So can anybody see what is the problem with this.
Any thoughts.
Yeah exactly.
So in the for loop instead of separating these by
semicolons I've separated them by commas.
And this is actually weirdly something I do quite often
even though I use Java quite a bit.
So during semester, , doesn't that.
So you saw that there were when I had this
comma in it's also saying, okay, there's a problem here.
And the problem here is it can't resolve the symbol
I.
So you have to be a little bit careful when
you're looking at the information.
And an IDE is telling you, and to try to
see that you're at the root of the problem, right?
Because there's no objective problem with this AI.
The problem is because I've got this error up here.
AI is not properly defined.
And that means when I try and use it later,
, it's not happy with this.
It doesn't know enough about AI.
, but that's not really the root of the problem.
If I'm just looking at this and say, can't resolve
simple AI.
It's not that very helpful.
I need to look back to here and say, oh,
okay, this for statement is not right.
Change that.
And then these are going to resolve themselves.
So you've got to look at the root of the
problem.
It's going to spread out to lots of other problems
later on.
Okay.
So that is the first problem.
Now I'm going to try and run it.
Okay.
So that is that is going to compile.
But when I run it I get an array index
out of bounds exception.
And why is this.
I think you should know why.
This is something we've talked about quite a lot.
Yeah.
That's exactly, exactly.
So as we've seen before, we have to put length
minus one, because the final index of an array is
at length minus one because it starts at zero.
So let's run this.
Okay.
Perfect.
So it runs.
There's no problem.
There's no compile errors.
There's no runtime errors.
And it's telling me the smallest number of this array
I've made from 1 to 5 is five.
Okay.
So is that the answer that we want to get.
No, that's not the answer we want to get because
that isn't true right.
So this is a logical error.
It's doing exactly what I told it to do.
Without any problems.
However, I didn't tell it to do what I actually
wanted it to do.
So what's the problem with this?
Anyone see what the problem is?
Actually IntelliJ here.
What's IntelliJ saying?
It's this?
Intel's just saying something helpful?
Oh, yeah.
, the problem is this, right?
I've said I'm.
When I'm doing the comparison, I'm always saying if, ,
the number is bigger than the smallest number, then overwrite
what the smallest number is.
But of course that shouldn't happen.
You only want to overwrite the current smallest number.
If this is great, if it's or if it's smaller
than it, then we don't care about the previous smallest
number.
This is the new smallest number, so I change that
around I run that and that tells me the smallest
number is one.
So I've sorted out my logical error.
So those are the three times three types of errors.
You will come across all of them, but the one
that's going to cause the most amount of trouble in
your life are the logical errors.
Oh my God.
Seriously.
I mean, I if anyone has any actual questions, I'm
not prepared to spend an hour wading through random messages.
, and I mean, I'm.
Yeah.
Anyway, Okay, so what are we saying here?
So this.
So here we are looking at exactly the same thing.
, okay.
So we want to test the code and we're going
to look at how we test that.
and this is the difficulty of fixing them syntax
errors.
You get a load of help, runtime errors.
You get some help.
Logical errors are harder.
, okay, so let's have a look at this.
Testing and debugging.
So what is the difference between testing and debugging.
, so, so in this Calvin Hobbs cartoon, what's happening
is he's letting out a bug.
And as he's doing that, a whole ton of new
bugs are coming in.
So this can happen really easily, right?
You find an underlying problem and you fix it, but
that's going to spiral out to all sorts of things.
And you need to be really careful thinking about how
you're going to manage that.
, so you have a cycle, right?
So first of all, you create a test.
You run the test and that test fails.
So you create a so you create a new feature
that's going to solve that problem.
You run the test and the test passes.
And then you have to refactor which means you change
the code.
You've got to run it through all the other tests
and update your code and you've got it.
This is a cycle, right?
You keep testing whenever it fails, you keep refactoring the
code so that it's going to it's going to pass
all of your tests.
Okay.
So let's have a look at this in practice.
So we want the calculator.
Okay.
So this is something a slight extension of how we
have been using Java before.
So here is a class called calculator right.
And can you see anything that is missing from calculator
that has been in all the other classes that we've
defined so far.
Ah.
Sorry.
, so it's so void.
So all of all of the methods in here are
returning something, so we don't know whether there's a void
here.
No, actually this isn't.
So the class wouldn't have a return type.
The methods would.
And they all do, and that's fine.
But what we don't have here is a main method.
Right?
So in Java the main method is always the entry
point into any class.
So as you can see normally in Java we have
these little arrows.
And that's what we use to run it.
There are no arrows here right.
We can't run anything because there's no entry point to
this class okay.
And that's fine.
You will often be defining classes this.
There's no entry into them directly for the user, but
that's the way into them is by calling these methods
from other from other classes.
So here we have calculator client.
This is a class that will use our calculator class.
And this has a main method so it can be
run.
Okay.
So let's use some of these things.
Mhm.
So in calculator we have three methods.
We've got add which adds two numbers together.
Multiply which multiplies two two numbers together and increment all
which takes an array.
And it adds a, it adds a number an integer
to every element of that array.
And we pass in both the array and the number
that we want it to be incremented by.
So let's start with add return.
So we'll create a variable called add return which is
going to be an integer.
And we are going to we're going to send this
to add okay with two okay.
Give me two integers.
Okay.
And 12.
Cool okay.
But it doesn't know what Add is right.
Because it can only see inside this class.
So this is there's no add right.
Because add is in calculator.
So what I need to do as we saw before
with maths I'm going to put calculator.
Oops.
Calculator ad.
Okay.
What this means is I want to use a method
ad from this class calculator.
And this is going to create this variable.
And then I'm going to return it.
Now I'm not going to return it.
Sorry I'm going to print it.
I'm going to say seven plus 12.
equals and then I'm going to say whatever my,
my program tells me it equals.
So let's run this, see what happens.
So now you can see we've got the arrows.
We can run this.
And it's going to tell me seven plus 12 is
19 which is correct.
Actually this is supposed to not work.
But I just remembered I didn't put it back.
Okay so but what if it what if it did
this right?
It's not complaining about this.
This is completely fine.
Java.
There's no problem with this.
But if I then go on to run this, it's
going to tell me seven plus 12 is minus five,
right?
That's not the answer I was looking for.
This is a logical error.
And if I go back to here I can see
what's going on.
But what do I do?
How do I.
So how do I pick these up as I go
along?
Actually let's have a look at let's first of all
look at the integer array.
Okay.
So I'm going to create an array called first array.
And this is going to be an array of integers.
And it's just going to be let's just make it
12345.
And okay first of all I'm just going to print
it out.
And so we saw before you can't just print an
array that's going to print nonsense.
You can do you can loop through an array.
But there's also another way of doing it.
And actually some of you were using this method in
the tutorial.
It's not one we've looked at yet, but it's one
we're looking at now.
And it's just the two strings method two strings.
So I can do arrays dot two string.
What this does is it turns an array into a
string and then I can print it out.
Okay.
So if I print that that's just going to print
the array.
So what I'm going to do now is I'm going
to, , call the method I want to use here
is increment all.
And that's from the calculator class.
So it's calculated dot increment all.
And as always IntelliJ is really useful.
So it knows what methods are in the calculator class.
So it's going to suggest what's possible.
and I'm going to send first array plus a
number to increment it.
For what.
What should I use.
Fine three okay.
Now I'm going to print out the new array.
So remember we looked at this last time here
with adding I need to assign this to a particular
value.
And then I need to return that value.
Right.
Whereas because the change is local and the change will
only come back to me if I pick it up
in a return value, but with an array, because it's
changing things directly in memory.
I don't have to send anything back and pick that
up.
I just can print out the array rate again.
, so these two lines.
Oh, I've got to do two string again.
, so these two lines are exactly the same, but
they're going to be doing something different, because in the
meantime, I've gone off to another place and I've messed
around in memory changing what's going on.
So I could do that.
Let's run that.
Okay.
So here we can see this is the same array.
, increased by a certain amount by three, in fact.
Okay.
So but we've got this problem here, right?
Seven plus 12 is minus five.
So this we don't want this to happen.
So we want to write code that will make sure
either this doesn't happen or we're going to pick it
up if things do happen.
Okay.
So we so we were able to tell that something
had happened because we printed out a statement and we
could we we'd set it up so we can see
okay, this is telling us something that's clearly not true.
So that's clearly a useful thing to do.
If I hadn't done this and I was using this
number and other things.
I might not know that this problem had happened, so
this is helpful.
However, print statements are kind of messy.
They mess up the output and you can only really
see them internally.
So there's other ways to do this.
, we can let's just comment that out.
Oops.
So one way of doing this is by using assert.
So I'm going to say assert add return is equivalent
to seven plus 12.
So normally I'd want to do this in a more
general way with that with not with these specific numbers
hardcoded.
But to make it easier, I'm going to do that.
So I'm saying this is what should happen.
This is what I want this code to do.
So whatever add return is it should be equal to
this right.
So within assert you put in what you want to
be true.
And then you put a colon.
And colon means otherwise.
If this is not the case you print out a
message.
So I'm going to say error.
.
.
Seven plus.
Oops.
Plus 12 is return.
It's given the value.
And then I'm going to say whatever that value is.
Okay.
So I'm going to run this.
Okay.
So here this is causing an exception.
And it's telling me what's going on.
It's telling me this is the error.
So that is much more useful when you're debugging.
So you can see this.
You can put in whatever you want the error to
be.
And that's quite useful.
Okay.
So this is another way of helping it be easy
to find errors in your code.
, but there is a more common way.
And this is using tests.
These are these are unit tests.
We will be using these , in we'll be using
these in inform be , but you're not writing them
in form B, although they're actually really quite straightforward to
write but you will be using them.
That's important.
So you can add as many tests as you .
You can run all the tests, or you can just
run a test ad as you go.
So you indicate.
So this is in a class which would usually be
called something test.
And then you indicate each test with this at test.
And that means that IntelliJ or Java knows where
these tests are.
these are always void.
You give them names.
, so which should often I mean, this kind of
normal nomenclature is quite useful.
So you.
Say you tell it what you want it to do.
Right.
So what I want this to do I want calculator
to.
So this is an example.
Say if I send one and two to a calculator
what I expect is this.
This is what what it does.
This is what I want the answer to be.
and assert equals means.
, so so I'm saying these should be the same.
Right.
Result and expected should be the same.
I'm setting up.
This is my test condition.
This is what the answer should be.
This is what it's actually going to be.
And these really should be the same.
And these are not the same as a problem.
So if I run that okay.
That's going to that's not happy.
And it's telling me there's a problem.
So it's saying here are some not as expected.
That's because that's what I told it to print out.
I expected the answer to be three.
That's because this is how I told it to calculate
it.
But actually the answer is minus one.
So these tests are really important.
So you can either just run specific ones or you
can run everything on the whole class.
And this is saying great.
There's three tests.
One of them is failed.
Two of them have passed.
So overall you get this cross for the whole class.
Test class.
That means that there is at least one test in
there that hasn't passed.
And intelligent indicates this by the red.
The red exclamation marks.
Okay.
So main methods can be used to quickly evaluate the
functionality of your code.
This is what I was doing with the print statements.
As you're going along, you might want to just quickly
check things.
Just check what things are look .
, then that's fine.
Just to put it in print statements, but that's fairly
limited.
They have a few drawbacks.
It requires manual effort.
It's more error prone than doing proper testing.
So assertions are kind of helpful with that.
We've seen these assertions.
However, the tests are unorganised.
We're just putting them in in your coding.
There's no easy way to only test certain methods.
It's not easy to see everything all at once.
So the easiest way to do this is a test
framework.
And the test framework is the test class that we've
just seen.
Okay.
So how do you decide what you're going to test.
So in the example we looked at we were testing
whether addition was working.
We just put in one plus two equals three right.
If that's working that's fine.
Okay.
And you should do that.
You should put in general cases things that are quite
normal.
, regular use cases.
Make sure those are returning the right thing.
But also you have to think about corner cases.
What are the slightly weird cases that might happen?
So when you're doing things with numbers, this is very
often zero.
, it might be that, , things.
Is it handling negative numbers.
Right.
So you need to think about what are all the
what happens if you put a really large number in.
So you need to think about what are the ones
that might cause something slightly different and put in test
examples for those as well.
, what happens about invalid inputs.
So what happens if, , I am doing something with
addition or I'm expecting integers and actually somebody send me
a string.
What am I going to do with that?
How am I going to respond to that?
, and you also need to look at positive testing
as well as negative testing.
So that means is it doing things right that it
should be.
Is is it succeeding when you want it to succeed?
But also does it fail when you want it to
fail?
So things failing is often really important in coding.
if this doesn't work, then you go off and
do something else.
You need to make sure it's failing at that point
when you want it to.
So make sure you put in those examples as well.
So one of the important things about writing good code
is being able to figure out how you should test
it and testing it really robustly.
And usually when things go wrong, when code is released,
it's because people haven't thought about specific cases and haven't
tested those cases.
They've just assumed that the cases they've tested it on
cover pretty much everything.
And they and they don't always.
Okay.
So first of all, you want to test that your
code is is running fine.
And usually hopefully it is.
But if it isn't what do you do then you
have to debug.
Sometimes this is super obvious right?
If you have a function called add and you notice
there's a minus in there, okay.
You don't need any complex skills to debug that.
But when it's bigger than a test case, debugging can
be quite challenging.
Okay.
So let's have a look again at IntelliJ.
okay.
Rotate debug.
Okay.
So this is code which is taking.
So I'm creating this array.
And what I'm doing is I'm what I'm intending to
do is rotate it right.
So it starts off one, two, three, four, five.
What I want it to do is to return an
array to me.
That is five, four, three, two, one.
So everything's backwards.
Okay.
So let's run that and see if that's what it
does.
Okay.
That's not what it does.
It returns 51111.
Okay.
So it's got the it's brought the final one to
the first position.
Great.
But after that it has kind of messed up.
.
Oh, yeah.
I was going to do this, but I haven't got
a pen.
Maybe I'm just going to do this on here.
I'm going to use a chalkboard.
I haven't used a chalkboard for years.
Okay, let's see if I can write on the chalkboard
an intelligible way.
Okay, so one way you can do this is just
go by three by hand.
And if you've been in the tutorial or you go
to church today or tomorrow, you'll see there's a bit
of practice where we just go through through things by
hand.
And this can be really helpful just to just got
a few things down to give you an idea.
Right.
So my array.
Is oh God Go.
One.
Two.
Three.
Four.
Five.
Okay, so I is equal to I starting off at
okay.
You can shout out that is equal to zero.
So what do I need to know.
I need to know what's in array zero.
And what's the answer.
Okay one.
And now I'm saying that array.
Array a I plus one which is array one is
equal to array zero which is one.
Okay.
So now at the end of this loop my array
is going to be what's my array going to be.
11345.
Okay.
So I can tell even from just going through ones.
Right.
There's a problem here because two is completely vanished.
I'm not going to be able to put two into
the final answer at all because I've lost it.
I'm not keeping it anywhere, but I've got this duplication
of one, right.
So right away I can see there's a problem going
on somewhere here where I'm overwriting things that I need
to not be overwriting.
That's really helpful for debugging.
Okay, so that's one way you can do it.
, but there's also lots of super useful tools in
an IDE.
, okay.
So.
Why is this just spinning?
Oh, come on IntelliJ.
Don't be.
Annoying.
Right.
Let's reboot IntelliJ.
Okay.
, rotate.
Debug.
Okay, so we're running that, and that was fine.
Okay.
So now we're going to put in debug points or
we're going to put in stop points.
Right.
So you might have seen I quite often do this
when I'm trying to click on this I actually accidentally
click on here.
And this creates, in this case a red diamond.
But if you do it lower down it'll create a
red circle okay.
And this is a stop point.
And what this means is , I want to I
want to go through actually, let me just show you
this first.
, so when you click the green arrow, we've always
just been choosing the first one which is just running
it.
But you see down here there's also debug.
So let's debug it okay.
So that's not telling us something very useful.
let's say we put a stop point in here
and this is saying I want what I want to
see.
Okay.
That's because I'm, I'm not telling it to tell me
anything about the debugging.
But now I'm saying here, this is my stop.
I want you to tell me what is happening here.
Right.
So let's try debugging this again.
Okay.
Now we're getting all this information.
Can you see that well enough.
Oh, also, I've just remembered I supposed to turn it
on to black.
Well, I'll leave that to the next lecture, but remind
me to do it then, if I forget.
So I hope this isn't too small to see.
But you can see it's telling me at this line
here.
These are the values we've got, right?
So this is what the array looks the first
time we get here.
So it's always going to be the first time around.
It is zero.
The array dot length is five.
Array zero is one.
Array one plus I plus one is two.
And so the what is in position I plus one
is two.
And what is in position I is one.
Okay.
Now you can see here are some these are these
are the choices you can make.
So step over essentially step over and step into the
ones you're going to use the most.
Step over is I'm in a loop.
I don't care what happens in the sleep.
I want to jump out of the sleep.
I want to know what comes out of this loop.
Whereas step into means I want to go through this
loop and see what's happening.
So let's press step into okay.
So now you can see this is changing right.
So we've got we've we've gone on to the next
step of the loop.
So at the beginning we had I plus one was
two.
But now because of this assignment.
I plus one equals one.
And we can already now see this problem coming in
because this has changed the array to 113452 is disappeared
as we saw by hand.
We can step into it further.
And it's keep it keeps on making these changes.
So this is really helpful in seeing what goes wrong.
Okay.
So you're going to use that a lot.
There's other things you can do with it.
So say for example I'm not interested in looking at
what happens when I equals zero.
But there's a particular point I'm concerned about.
We can if we right click on this.
Oops sorry.
Why is this not coming up.
Oh that's weird.
Okay.
Sorry.
, we can add a conditional breakpoint, right?
So that means I say I don't want it just
to break any time on this line.
I want it to break under certain conditions, and I
want it to break.
Let's say I want it to.
I want to look at what happens when I is
two.
So if if I is equivalent to two, then I
want you to break.
Now we run through that.
And we will see that.
Oh.
That's.
Oh, sorry.
That's because I chose run.
And I should choose debug.
So it'll never give you debugging information, even with breakpoints,
unless you tell it you want it to debug.
So now when I run that debug, we see we're
already looking at the situation where I is two and
already at this stage, , the array is 1143.
So that's allowing us to look at a specific point.
So these are super useful tools that you're going to
be using a lot.
Okay.
So we've done all that.
Okay.
So debugging strategies we've got the manual walkthrough.
we've got logging which is yeah.
So you look at you walk through, you look at
what's going on at each point or you use the
debugger.
I don't know why this is.
Oh my God, what's wrong with my laptop at the
moment?
I don't know why this isn't full screen.
Okay.
So what do you do when you find errors?
This is really important.
How do we handle invalid input for a start?
Okay.
This generates a sequence of numbers.
What?
So what could go wrong here?
What might be a problem.
So we're testing.
That starts as an end okay.
So one thing that can happen.
Let's have a look.
Invalid input.
Okay.
So if we say the sequence is 7 to 15
is going to return.
This is a sequence, right.
But can somebody give me a number that's going to
cause a problem.
19.
Exactly right.
So I run that.
Okay.
This is a problem, right?
Because this is just assuming that start is going to
be less than zero.
Okay.
So I can simplest thing to do is to add
a comment.
I can just say here, I can say, , by
the way start Must be less than.
End.
Okay.
So this is really quite useful for me when I'm
doing it.
Remember what I have to think about.
It's not useful to anybody else.
Nobody wants to look into my code to see what
comments I've written.
So that can be useful as a memory to you,
as a reminder to yourself.
But it's not always that useful.
What I can do, I can put in an if
statement.
So if it's the case that start is bigger than
end, then I just want to print out.
Oh, there's a problem here.
Problem.
Okay.
So that's going to fail.
Does something print out problem.
What's going on there?
Anything else?
Oh, yeah.
Okay.
Sorry.
So I put it in the wrong place because I've
already tried to create an array of negative size, and
then that's when.
Oh, God.
That's when the problem is going to come.
So I'm going to get rid of this.
That's going to go right at the beginning.
Right.
So before I even try to create the array.
I'm going to put this in and run that.
Okay.
So I get the same thing.
But I've got already this message coming through.
Right.
Thank you very much.
I'm terrible at live debugging by the way.
When you debug I recommend do not do it in
front of a whole class of people because it's really
stressful.
So comments from the floor is super helpful.
Okay.
So that's a way of doing it.
That's kind of a little bit more useful.
But prints and you will use print statements to pick
up errors.
That's common, but it's not really a great solution for
finished code.
For one thing, it's printing these things out all over
the place, which is not necessarily what you want to
do.
So what what we do here is we use throw
exception okay.
So we throw exceptions.
We use a the method is throw.
And then we have to create a new instance.
So we use a keyword new.
And then it's going to Java.
IntelliJ will give us some examples of what we want.
And what we want is a legal argument exception.
And then we send a message and it should be
start, , should be less than end or whatever we
want it to be.
Okay.
So when we run that.
That is going to throw this exception.
So this is a much more organised, clear way to
do it.
You'll be able to see all the exceptions.
You've got this error message coming out which is attached
to the specific, , thing that you're looking for.
So this is a much more organised way to do
it.
And we'll look at a lot more of that, ,
over the time over, over the course.
, okay.
So these are all examples of things that can go
wrong.
You can have a look at these in more detail
and it doesn't contaminate the code.
Okay.
So which do you use for private methods.
We've not really looked at private methods but we will
do later.
You can use assertion if it helps you.
It doesn't matter.
Nobody else cares.
But for public methods you should be using these, ,
exceptions.
Okay, let me just really quickly finish.
So we've looked at these three types of types of
errors.
three different testing strategies.
The three debugging strategies and the three kinds of error
handling.
And this is oh that's the end.
This is really important.
We'll have a lot of practice on this.
So okay we've just made it to the end of
the lecture which I'm really pleased about is just on
time.
So I'm going to look at all your questions and
answer them on Monday.
See you on Monday.
, have a good rest of the week and do
get in touch if there's any more, , problems.
And by the way, the Wu club remains open.
If you've got other questions you want to put up
on that for me to answer on Monday.
That will stay open until Monday.
You can always add to that.
Oh, sorry.
Excuse me.
I have other questions about this one.
So yesterday you had .
Okay, everyone.
Oh, okay.
That's ten past.
So we're going to have a quick shout out from
IMP Sports.
Before we start the lecture, I can just see her
excited for this lecture.
Yay!
That's what you're feeling at the moment.
That's great.
So a lot of people feeling tired and waiting for
Friday.
Somebody got flu.
That sucks, I hope.
Don't come to the lecture if you've got flu, maybe
there.
Maybe they're doing this online.
, anyway, , I am going to hand over to
Chris just to do a quick shout out.
Hi everyone.
I'm Chris, hope you're looking forward to the week ahead.
I'm here to talk about Informatics Sport, which is a
new organisation.
This year we have a bunch of teams men's
football elevens and fives, women's fives, men's rugby and then
mixed hockey, mixed squash.
Mixed tennis.
Mixed basketball.
Mixed volleyball.
Mixed netball.
, these are a great way to meet people, get
some exercise, pull out your CV with more things you
did at uni.
, especially because your first years.
It's a great way to ask older people about courses
and get a slightly more honest perspective than you might
otherwise.
, Neil's going to send around an email either later
or now with a link to the WhatsApp where you
can join.
, once again, my name is Chris, so feel free
to either find me outside working with love for the
distraction or to send me a message over the WhatsApp.
Thank you.
Great, thanks.
And there's a good mix right between teams that take
that are quite serious and quite competitive.
And then lots of just teams for fun and stuff.
There's a there's a recreational option for pretty much all
of the sports.
, they enter into the intramural leagues in most cases
where you can be competitive, but most options you can
just do a casual weekend kickabout or something that.
Yeah.
And didn't you guys win the November competition across the
whole University of Sports was the.
Yes.
Yeah, yeah, yeah.
, different teams in the university and the, the Movember
competition to try and raise money by growing hideous moustaches.
We ended up winning, which was great.
If you'd to get involved next year or also
there are roles opening for running things next year as
well.
So if that sounds interesting, please do let us know.
Yeah, it's really it's a lot of fun.
I definitely recommend getting, getting or looking that into that
more if you're at all interested in doing anything athletic.
Okay.
Thanks a lot, Chris.
All right.
, okay.
So I don't have any questions to answer from last,
, from last time because I didn't move on to
the asking anything until right at the end of the
lecture.
So nobody had an opportunity to put any questions.
Sorry about that.
, I'll make sure I do that properly this time.
Also, sorry about the quiz.
You might have seen the email that went out today.
.
The quiz.
The quiz was from last year.
It was.
It was today's.
It covered Thursday's lecture and today's lecture because of the
Monday, , being out of being not in for B,
it pushed it all out of schedule, I knew this.
I knew that I had to change it.
I looked at it.
Somebody even came up to me after elected to remind
me, and I knew and I just forgot to tell
the to.
I forgot to ask him if he would make those
changes.
So sorry about that, but I'm leaving it open for
a week, so you should have plenty of time after
this lecture to go and do those questions right?
What do I want to do today are part of
the lecture.
So this is Yaba and Zanzibar from Spirited Away who
here has seen Spirited Away quite a few people.
It's Spirited away.
It's such a great film.
It's Studio Ghibli, it's really it's my favourite of all
the Studio Ghibli.
It's absolutely beautiful.
And, , you, Barbara and Zanzibar are witches.
, and so these cats have been named after them,
and they love to fight and lick denim.
Seems a weird thing.
But anyway, that's what the email said.
So they look very cute.
And then we have another cat.
This is Ginger.
And Ginger can sit and give you his paw on
demand, which is quite impressive for a cat because normally
cats don't care about that sort of stuff, but you
have to have a treat to get them to do
it.
Okay.
teaching awards.
Let me just put this up for a moment, please.
If you think anybody's been good, though, people really, really
appreciate being nominated.
It only takes a moment, you know, if you if
you think Julian did a good job or Don or
you know, or anybody you've been working with, there's lots
of different categories and it really, really is very meaningful
to people who are nominated.
And also it's very nice for the school to get
nominations.
So if you can think of anyone, just do that.
That will teach you to take you to the link.
But also you can just Google it.
Okay?
Right.
So now we're already on ask me anything.
I'm just going to leave it up so you can
put questions at any point.
And I will come back to them later on.
Oh okay.
So I'm just going to go quickly back over your
feedback from last week.
So , so this first question about your marketing from
B, I mean, obviously, you know what I was wanting
you to answer here.
I'm trying to and I've said this before, but I
just want to keep emphasising that how well you do
in this course is a real combination between how much
experience you're coming in with.
Which is very much correlated to how, you know, whether
you've been studying in school.
But it's not necessarily the same because you might have
been studying a bit of a different way.
You know how much effort you put into the course,
how much support you're getting.
So most of you pick this up.
So I'm just trying to hammer away on that.
It's not reflection, a reflection of how much potential you
have as a programmer, not exclusively.
I mean, if you're, you know, if you really love
it and you spend a lot of time practising, you
will do better.
But, , anyway, , okay.
How difficult is it?
So manageable is nearly 50%, which is great.
That's what we're aiming for and challenging.
But I'm coping okay is also okay.
And about 25% think easy.
That's probably because you've covered very similar material.
Enjoyment of the course was really good.
I'm really happy about that.
Only 1.9%.
So they weren't really enjoying it.
So I'm really pleased about that.
, and a lot of you haven't started for assignment
one yet.
That's okay, because It's not due for a while, but
don't leave it all to last minute.
Do start doing it, I would recommend.
You know, you're just making life harder for yourself later
on.
.
And most of you are quite happy.
Either way, more than 50% of you actually me
doing this, and the rest mostly don't really care.
Very small numbers of you think that this is annoying,
so I'm going to keep on doing it because it's
really useful for me and for the school.
For example, this feedback we've got.
So there is definitely a preference for Central Campus, slightly
less than I expected there to be.
, and inflections that are kind of annoying, creating complications
for quite a lot of you.
So thanks very much.
We we will that will feed into how we're thinking
about how we might be teaching in the future.
It's not completely up to us.
, but it's definitely really useful to get the views
from the students and to factored in as much as
we can.
All right.
Okay.
So let's do some Java.
Okay.
So what we're talking about today are collections.
How you have groups of things that you're working through.
So we've already looked at one kind of collection, which
is an array, but now we're going to look a
little beyond that.
So arrays are pretty useful.
You've been doing quite a lot of things with arrays,
but as you already know, as we've talked about before,
arrays are limited.
Arrays are quite rigid structures.
So you fix the length.
When you create an array, you fix the length.
That is how it's stored in memory.
That is how much space you can store information about
the array in.
That's you forever.
That array is never going to change size.
So that's which is often kind of annoying.
, we know that arrays are part of Java language,
and there's lots of special syntax and things built in
to help us work with arrays, but they're not always
optimal for handling data.
So another thing you can use and you will use
quite a lot probably are array lists.
So array list essentially this is a sort of a
wrapper that the Java language puts around an array.
So under the hood you're still using arrays.
But if you if you create them as array list
it gives you lots of options to do things that
might be useful, which are not things you can do
directly with arrays.
So one of the most important things is that they
can grow and shrink as needed.
You don't have to decide at creation time how big
you want that to be in.
That sticks forever.
, and also there are different methods for inserting and
removing elements.
Okay, so this is how you declare an array.
It's very similar to how we always declare things.
But you have these, , angular brackets with the with
in here.
This is the type of thing that's going to go
into an array list.
So an array, everything in an array list has
to be the same type of thing.
And you have to declare it when you create it.
, you create a bit of memory as before, but
as you see, you're not telling it how big this
is.
You're just saying this is a new ArrayList.
, so here the first example is with string.
And you might do this with with built in types
or standard types strings.
But very often you're going to be doing this with
objects you've created from classes that you've written.
So an example I think we're going to go on
to this example.
Not today, but later on.
, there's hotel room.
There's a big coding example where we're creating hotel rooms
and figuring stuff out.
So you might want to do that.
And then you have a array of different hotel rooms.
, you can do whatever you .
The only limitation is that it cannot be a primitive
type.
You can't put integers or booleans in or whatever.
Yeah.
, so this this is just the way that you
call it.
You have to have the empty bracket.
So this is essentially, , showing what you're passing into
that, but you don't need to pass anything.
So we looked at calling methods.
There's a brackets afterwards which sometimes will have arguments in.
But even if you don't have arguments you have those
empty brackets in.
That's the way you call it.
, however, one useful thing in ArrayList, I don't know
why this happens for this, but not for anything else.
You know, normally we have this stupid thing Well, when
you create something new, you have to say what type
it is, and then you have to say, oh, the
thing I'm creating that is that thing is also the
same type as the thing that it is.
, but in ArrayList, you don't have to do this.
You do have to say it's a list, but you
don't have to duplicate what you're saying here because it
knows it's got to be strings.
So you don't have to say that again.
This is just something Java's been doing since for quite
a long time, since Java eight.
You can do it with ArrayList and in a way
that you can't do with other things for some reasons.
Okay, so we're not passing it aside right?
When we create it, it doesn't have a size.
Therefore when we when we first construct it, it has
size zero.
There's nothing in it.
And then we add methods to it and we can
remove if we want to.
And then the size is changing.
So let's have a look at that in IntelliJ.
Okay.
So I'm going to create an array list.
And here you can see this is a built in
stuff ArrayList e where E is going to be the
the type.
And here you can see it already knows that I
need I'm going to want to access the built in
methods in ArrayList.
So if we just go back to the so
this is a Java API.
You can see there's all kinds of things that I
might want to do in ArrayList.
So I want to import all that all that functionality
when I'm doing the coding.
But I don't really need to bother with that because
IntelliJ already knows that I want to do that.
Okay.
So I'm going to create an array list.
And this is going to contain strings I'm going to
call it cheers.
And this is a new array list.
And here so you see it automatically puts those brackets
in because it knows that they're needed.
but I can leave that empty if I want
to.
Or I could put string in as the same thing.
So now I've got a new ArrayList.
, let's have a look at what that looks .
Okay.
So this is what it's going to print out right?
It is printing something.
It's saying there is definitely something here.
And the square brackets indicate this is an ArrayList, but
there's nothing in it.
It's empty.
So let's start adding things.
So I'm going to do that using the add functionality.
So I'm adding something to my array list.
Cheers.
And I'm going to add a string.
It's got to be a string obviously because cheers is
an array of strings an array list of string strings
I should say.
So I'm going to add hip twice.
Oops.
What.
I don't want to do that.
And then I'm going to say hooray okay.
and then I'm going to run that.
What's that going to do.
Oh it's not going to do anything because I'm printing
it before I actually add anything to it.
So let's move that down here.
By the way, cutting and pasting.
When you're coding, , you probably will do it quite
a lot, but do be really careful.
It's really easy when you cut and paste to just
screw things up.
Okay, so now I print it out and this is
what it looks .
It looks an array.
Basically it's in square brackets and it's listing everything in
there with commas between it.
All right.
So there's various things I can do.
So let's maybe find the index of a particular thing.
So if I do it I'm going to get index.
And this is going to be I want the index
of the string hip.
And I'm looking at that within.
Cheers okay.
And then I'm going to print out index.
Okay.
So this is telling me that hip is at
index zero right.
So you see there's actually two hips in there.
I print out the original thing as well.
, so why is it only telling me one of
them.
So if we go back and have a look at
the, , Javadoc, what we're looking for.
Index of.
I don't want the index of down here.
I'm.
Sorry.
I should have got this line up.
Here we go.
Index of.
So that's telling me it returns the first occurrence of
the specified element in the list.
So that is just how it's not inevitable that it
is that way.
But that is how it's been written.
So if you want to know how to do this,
you look at the API and you see what it's
giving you and what it's giving you is the first
occurrence of whatever it is that you're looking for.
, okay.
So let's add another thing.
So.
Let's add here another thing saying hop.
So if I actually let's bring this down here which
is ad hoc.
Okay.
So let's see what that looks .
okay.
So you can see actually we've already seen this as
we're building up hip hip hooray.
But if you do add what is it?
Where does it put it.
It's going to put it at the end of the
array list.
So you're adding always adding to the back of the
array list if you just simply use add.
.
Okay.
But we can do this differently.
So we can say actually , so Add is going
to have more than one way.
This is an overloaded term.
It's got more ways of doing it.
Whereas add so here add with no added just
with the element will amend it to the end of
the list.
But also we can give it an index.
And if we give it an index, that's not going
to put it at the end of the list.
It's going to put it at the index that we
specify.
So let's say here we're going to add it
index one.
And then we have a look at that.
So then it goes in at index one.
And it pushes everything else further down the array list.
And the array list is getting bigger as we do
this.
, so we can also do things check whether
things are there, which is quite useful.
So there is a , a function called contains, ,
let's call it is in, , cheers.
Oops.
Cheers.
Dot contains hip.
Okay.
And then let's print out is in.
Okay.
So this is saying true.
Yeah.
So hip is contained in this.
But if we say hap oops I don't want
to debug it.
It's going to say false.
Okay.
So that contains is just looking for not how many
times it occurs but just whether it occurs at all.
, okay.
What else did I want to do?
I don't know what point I was making with that.
Okay.
So let's go through this a bit.
So we've seen a lot of this ad.
, I won't go through these in detail because this
is exactly what we've just been doing.
You can add the first occurrence or as an index
remove.
Let me just show you remove.
, let's then, .
Cheers.
Remove hip.
Okay.
So what's going to happen here?
So I'm saying remove hip.
What's it going to print out?
Hop hip.
Hooray!
Okay, so hip is still there, but there is only
one occurrence now.
So what remove does is it finds the first time
something appears in an ArrayList and it removes that instance,
then it stops, it terminates, it's not going through.
And removing everything.
get index will return the first the first
time an element occurs.
So let's just get rid of that and have to
get index.
No that's not What's it called?
I'll just get.
Sorry.
Get a hip.
.
String cannot be.
Oh, sorry.
Yeah.
This is supposed to be.
Oh, sorry.
Yeah.
This is a this is an index.
It's brackets.
Anyway.
You get the idea.
It's going to return the, .
There we go.
, yes.
Well, okay.
I'm not printing it out, but what it's doing is
it's figuring out what's at that index.
Okay.
So there's lots of, , there's lots of useful things
you can do with this.
.
Okay.
And to.
Oh, and the other thing is.
Sorry, I should have mentioned this.
You've obviously seen this.
This is another really nice thing.
Beyond that, you can't do with arrays.
You can see here I'm just saying print this array
list and it just prints it in a sensible, manageable
way.
As we know with arrays, you can't do that or
raise.
You either have to go through the for loop and
print everything separately, or you have to do the two
string methods.
But here you can just print it in a sensible
way.
So there's lots of things in here that you really
want arrays to do.
, okay.
So I can do let's do , okay.
So we can, we can do for loops, we can
loop through ArrayList.
So let's say for now we're going to do an
enhanced for loop because we don't need the index in
here.
So we're going to say for s in cheers.
So for everything that's inches every item and s we
need to say is a string.
Also S is a terrible name.
Let's say for word in cheers.
What we want to do is we're going to just
print out the index.
I don't want to print out the index.
Well, that's been so difficult.
, word plus has index.
And then I'm going to.
Oh why is it keep doing that.
now I'm going to get the index of.
word and I'm going to print that out.
That should work.
Let's just get rid of these.
And if I haven't accidentally got rid of too many
brackets, I should work.
Okay.
And also, let's just print out the line here.
We don't want a blank line there okay.
So just a little reminder of enhanced for loops.
We are going through something.
This isn't the case as an ArrayList, but we've done
this with arrays.
And for everything that's in that container we're doing this
particular thing which is printing out that that item and
its index.
Okay.
So here you can see hyp has index zero,
hoppers index one, Hyp has index zero.
So in the second place, we're now on to the
second tip.
But it's still telling us that it's at index zero.
Okay.
That is because this is kind of.
So it's just this is just looking for a string.
It's not looking for this particular.
Well it is looking for a string that exactly matches
it.
But it's not looking for the string particularly in that
index.
So it's going to go to the whole array and
it's going to find the first instance of it.
Even though you're in a loop that's going through the
array one by one.
Okay.
So this is just something you need to be a
little bit careful of.
Make sure you understand that these things are happening when
you're doing these these manipulations, these methods within for loops.
Just be really conscious of how it's working and think
about whether it's actually working on the particular item you're
looking at or whether it's looking at the whole collection.
Okay.
Great.
So we could have done that with a standard for
loop, but easier because we're not using.
We're only using the iterator to, to to do each
individual thing.
We're not using it as a counter or anything.
Then we can just do the enhanced for loop, which
is easier.
, and we've looked at that.
Okay.
So now remember I said that ArrayList.
You can't use primitive types.
You can't have an array list of ints.
, but maybe sometimes you want to have an array
list of int.
So what do you do.
Well we've looked at this before.
We have these wrapper classes, which is essentially just a
way of turning, , primitive types into objects.
You don't need to worry about this too much.
You just need to know that this is this is
the thing.
If you want to put primitive types in places where
primitive types don't go, you just use this conversion and
it's super easy.
And usually it just means you turn the first letter
to A from lowercase to uppercase, sometimes it's into integer,
etc..
, and you don't you don't need to do anything
about this.
So here I'm saying this is 2.75.
That is a double.
That is a primitive type with a lowercase d.
That is what its type is.
As I'm defining it here.
But I'm saying, actually, I want you to consider this
to be an object double, not a primitive type.
I'm indicating that to Java with the capital letter.
I can just do that.
And likewise the other way around, I've said that battery
charge is a is an object because it's got a
capital D, but now I'm saying, right, I want you
to treat this thing X which I'm making.
Equivalent battery charges battery charge.
Treat that as a as a as a primitive type.
You can just switch between these as you .
And you do this so that it's just a little
hack so that you can use things where primitive types
are not allowed.
, okay.
So , most of the time, or maybe not most
of the time, a lot of the time, you're going
to be putting your own data types into an array
list.
, sorry, I've just realised I have no idea what
the time is.
I ought to keep an eye on the time anyway.
, okay, so here what I'm doing is I'm creating
a new thing I'm constructing.
I'm making something that I'm calling circle here.
I'm constructing that, and I'm going to put my thing,
my circles into an array list.
So an array list contain anything you .
Very often this will be your own objects.
, okay.
Some functionality will not work properly unless you implement the
necessary interfaces.
Okay.
I actually maybe should have removed that because I don't
want you to think about that later.
Until later, we'll go through this.
, but just be aware that it does get a
little bit more complicated, and we'll look at that in
more detail.
Okay.
Let's have a look at nested array lists.
And so you can , this can get arbitrarily complicated
which is always fun.
Obviously good principle of coding, which I talk about all
the time.
Don't make it too complex.
So you can have an array list 1020 deep.
Don't do that because it'll be impossible to understand and
really difficult to work with.
But sometimes, , , sometimes, , having a list of
array list can be quite useful.
So let's have a look here.
We're going to do something about the weather.
Okay.
So I'm going to make an array list.
And this is what's going to be in my array
list.
It's going to be array list.
This is an array list of array lists.
And these array lists are going to be a type
double okay.
And this is going to be a new array list.
Array list.
Is that right.
Or am I.
Oops.
Come on that.
I think all my brackets are working.
Okay.
So now I'm going to see what does this actually
look .
Now because I'm doing things with arrays.
When I'm when I'm auto completing from system, it's thinking.
That's why it keeps filling it with things from arrays
when actually I'm trying to get it to print.
So that's why that happens.
And this is oh wait, this doesn't have a name.
Let's give it a name.
We're going to call it Daley.
Daley temp okay.
And then I'm going to print Daley temp.
Right.
Doesn't this.
Why does it not this?
It doesn't this.
.
Because probably.
I think it's.
Oh, it's because of this.
Over here.
Yeah.
Okay.
Okay, so let's run this.
Okay.
So this is what it looks .
It's created this for me, and but it's empty, so
there's nothing in it so far.
.
That's fine.
Now I want to add something to it.
So I'm going to add the first thing I'm going
to add is a new.
There's no I've told it this is a ArrayList of
ArrayList.
But there are no ArrayList in there because I haven't
added any.
So now I can add an ArrayList.
So daily tempered and it's going to be a
new ArrayList of type double.
Okay.
So what is this going to look okay.
So now you see there is an ArrayList in there.
So now I have an ArrayList containing one ArrayList and
that internal ArrayList has nothing in it, but it exists.
And obviously if I.
Then.
If I tried to add something that wasn't an ArrayList,
, it's not going to it.
Oops.
So incompatible types obviously, because I've said although there's nothing
in it, I've said it's going to be an ArrayList.
So that's what it's expecting.
Okay.
So now I can start adding things to my ArrayList.
but how do I do that.
So if I just do if I just say right
I'm going to add some temperatures, I'm going to add
temperature.
What's the temperature today.
About four degrees.
, but obviously I can't just do add 4.0 okay.
Because it's not expecting doubles.
It's expecting an array list.
So I'm not putting this straight into daily temp.
I'm putting it into one of the array lists that
exists in there.
And I'm going to put it well there only is
one that exists at the moment.
So I have to put, .
So I have to use the get command.
So if we, if we look back at what get
was actually doing, okay.
So get returns the element at the specific position in
the list.
So I need to think where do I want this
to go.
I need to get that element and I need to
change that element.
So I'm going to get zero the first the the
first thing in there I want you to get it.
And then I want to add 4.02 whatever comes back
from get zero, which will be, , which will be
the empty array list.
Okay.
So if I print that I have to put the
print command in the right place.
So it's printing it after it's done this.
Okay.
So now we can see 4.0 is in the first
array.
So I can add another array list to it.
If I want to I can add as many as
I .
Let's add three.
Oops.
Ah.
Okay, so now I've added three array lists.
If I run that, you can see there's now three
elements of the top level array list.
And one of them has got something in it and
the others don't.
And I can do this exactly as I for
any of them.
I can say, all right, let's get let's add something
to the whatever's in second position.
This is going to be 10.0.
, and to the first one I want to add
another element.
Let's say 3.7.
Okay.
So now it's got three array lists and one the
first has got two elements, the second has got zero
still and the third has got one.
So we build it up in that way.
Okay.
Okay.
This is just a reminder.
We already looked at this.
You need to import the right the right information.
, let's get rid of these.
We don't need these.
So, so these are these are actually things when I
was playing around with it before, I was using things
that needed arrays and hash maps, which are going to
get onto in a minute.
It's not using these anymore.
So the import statements are still there, but they're not
doing anything.
But IntelliJ has put in this import array list for
me.
Otherwise it wouldn't work.
Okay.
So let's have a look at a different kind of
array list.
This is going to be strings.
So hang on I think I've got a different example
for that.
Okay.
So now we've got an array list of strings.
Here's one I made earlier.
And this has got three three names in it Charles,
Mary and Peter.
So what we've looked at so far is adding and
removing stuff.
But sometimes what you want to do is manipulate any
number of things in an array list.
So what I want to do at the moment is
I want to find any element in my array list
that has the, , this string are within it, Right.
So I've got this is a string called indicator.
And I've marked it final because I don't want people
changing it.
, and what I want to do is to go
through and, , to go through and what this is
doing.
What this is trying to say is that if, ,
for every name in this array, if that name contains
this indicator, then remove it.
Okay.
So let's have a look at what's going to happen.
Oops.
Don't want to debug.
I want to okay.
So this is printing out this array list as we
looked at before.
But then it's getting really upset with this concurrent modification
exception.
I don't actually even really know what that means.
But what it means is you can't do that this
way with array lists.
Okay.
And this.
Oh, right.
Okay.
So to do this you need iterators.
Okay.
And iterators are objects.
And they allow you to iterate through each element of
a collection.
So this is something you'll need to do quite a
lot to.
You have to have an object that is going through.
So let's show how we would actually do this.
Let's get rid of this.
So comment that out.
And this which opened earlier is already commented.
So let's uncomment this.
Okay.
So what I'm saying here is.
, I'm creating something that is an iterator.
And this iterator is going to be a string.
It's going to be a string.
Because what I'm trying to do here is find things
that have a particular string.
, no, sorry.
That's completely not true.
Forget I just said that it's of type string because
this is an array list of strings.
Okay, so I'm using this iterator command.
We can again look at iterator in the API.
I don't know why is this not enough particular
order anyway I don't know where it is, but you
can have a look and see exactly what that's doing.
And I'm doing it on this array.
Names is an array list.
, okay.
So while there is another element I'm going through until
it's empty and I'm and I'm finding what is the
next one, as long as there is a next one,
I want to look at what that next one is.
I'm going to make that temporarily name.
And then if it contains the indicator you remove that.
Okay.
So if I just show you how that works if
I just run that.
So this this is, this is originally printing it out
and this is what it's printing out now.
It's just printing out Peter because Charles and Mary both
have the substring.
Ah.
So they're being removed by that process.
Okay.
So the the kind of actual thing that does the
work is very similar to what we have in this
for loop, but we don't do it with a for
loop.
We have to do it with an iterator.
For various reasons that are more complex than I want
to get into at the moment.
And in fact, I don't know if I actually really
know myself either.
That's how it works in Java.
Mhm.
Okay.
Associative arrays.
so one thing.
So we know in array we have this index right.
We have a unique index.
Everything has a key.
And that is a that's its index.
but with regular arrays this is fixed.
You start at zero and they're integers.
And that is how you associate things to their positions.
, however, if you want you don't always want to
do that.
Right.
Sometimes you want to have keys that are not just
integers.
And you can do this with associative arrays.
So for example, if you have a person's phone number,
you if you have a person's name, you want to
be able to look up their phone number.
So then you want the key to be the person's
name.
It's not very helpful just to have an integer index
for that.
And there's various different, , things you might want to
do with that.
, and then you have this relationship between the key
and the value.
You're mapping.
You're using mapping.
And , in general these are called associative arrays.
But the way they're implemented in Java are hash maps
okay.
So associative arrays in Java are hash maps type HashMap
okay.
So for example you might want to map students to
their matric numbers.
So the keys here are strings and the values are
also strings actually.
so you can do this if you want to.
here we're mapping words to their lengths.
And you can see we've got more than one mapping
to the same values.
That's fine.
So keys can map to more than one value okay.
But keys themselves must be unique.
We can't have key with the same name.
That makes sense, right?
Because we use the keys to look things up.
And if there's more than one, that's the same.
But that's not really a key.
You don't know which one you're looking for.
, also.
The key can only be mapped to one value.
Is that.
Yeah.
So the key.
So the keys themselves have to map to one value.
Keys cannot map to more than one thing.
right?
Because the key is what you're using to look it
up.
It's got to be unique and it's got to map
to something specific.
Now that's fine if you want it.
If we want to know loads of information about pizza,
and we want this to point to lots of stuff,
we can do that, but only by putting them in
a collection.
We can put it in array for example.
So Peter would just be pointing to one thing that
would be an array.
And then within the array we might have lots of
different things.
okay.
So we're going to do this with hash maps.
Right.
What am I doing with the hash map.
Okay.
Okay.
So we need to import Java util HashMap.
Okay.
So I'm going to make let's go back to
the other one.
Let's get rid of all of this.
I'm going to make a hash map.
So Mm mm.
Okay.
So HashMap.
And you can see there's capital the capital M.
It's helping me do that.
string and int.
Sorry.
As I've just been saying in in these collections
you can't use primitive types that I was just typing
in int didn't it because this is not valid.
I need to put integer instead.
So what am I doing here?
I'm saying in my HashMap the the keys are going
to be strings and the values are going to be
integers.
Okay.
And this is going to be I'm going oh it
needs a name.
This is going to be word length.
And this is going to be a new HashMap.
of yeah that's fine.
So let's then have a look at what that looks
.
Okay, this is what a HashMap looks that's got
curly braces instead of the square brackets that you have
for arrays and res lists.
Obviously there's nothing in that at the moment because I
haven't done anything with that.
, okay.
But let's, , let's, let's have something that we want
to put in it.
, okay.
I'm going to have a sentence.
Right?
Somebody give me a sentence.
And you think of a sentence or phrase, a few
words, random words, anything.
Nobody's going to tell me.
Come on.
I'm going to wait until somebody says something.
Brilliant.
Live.
Laugh.
Love.
Okay.
Thank you.
And then I'm going to just put this in just
because then we've got a little bit of repetition.
, Okay, so this is my string, and I'm going
to use some built in a built in method called
split.
Okay.
So I'm going to create words string.
This is an array.
So words is an array of strings.
And I'm going to split the sentence by spaces.
Okay.
So actually yeah.
So I'm going to use a sentence dot split.
And then in here I'm going to put just a
space.
Okay.
So this means split this up.
Every time you see a space.
You're moving on to something new.
And then let's have a look at what that's going
to look .
, words.
Oh, right.
Okay.
So what's gone wrong here?
Because I've forgotten.
Because I was doing ArrayList and HashMap.
So you can just print out easily.
But actually I've told it that words is an actual
array.
It's not an ArrayList.
So I can't do simple printing.
I've got to do the array of two string methods.
And look, did you see how when I did that,
let me just show you this again.
, this is this is commented out.
We don't need util arrays, but once I do this,
, to string, I'm using a two string method from
array, so it automatically knows.
Actually now we do use it.
And that's why that's now upgrade to show that this
is actually being used.
, and we're sending words to them okay.
Okay.
I'm just going to get rid of these commas because
that's just making it harder to see what's going on.
So this is what split does.
It creates , it separates things.
, according to it creates an array.
It turns a string into an array with each of
different elements.
And here I'm saying, , when you have a space,
start with a new element I could put.
Let's see if I put l, I want you
to split it on that instead.
This is what it would look .
So it's splitting until when it comes to an L
it's removing that and it's creating a new thing.
But I'm going to do space.
All right.
So now I've got my.
Now I've got my words and I am making this
hash map okay.
So.
I'm going to say for I'm going to do an
enhanced for loop for string.
Oops.
word in words okay.
So I'm going through my array.
And for every element of that I'm going to
put things into my HashMap.
So my hash map is called word length okay.
So I'm going to do word length.
Dot put.
Okay.
So this is how you add things to a to
a hash to a hash map.
And it's telling me here what needs to be in
here I need a key which has got to be
a string.
And I need a value which has got to be
an integer.
And it knows that because that's what I've told it,
that the HashMap word length is .
so my key is going to be the word and
my integer value is going to be how long that
word is.
So that's going to be word dot length okay.
So if I run that that should now print out
my HashMap okay.
So you see before I did that the HashMap was
just empty.
But now I've been putting things into my HashMap.
I've been putting one thing in for every element of
this array.
And what it's doing here is telling me is telling
me what's in there and what its key is.
So the word love.
So the word love is the key.
Its value is four.
Okay.
Because love is four words, four letters long.
, and then you can, you can see each of
the values is how many how many letters are in
there that's been calculated on the length.
Right.
Was another point you can see.
So you can see there's a lot of repetition.
So again and laugh are both have values five.
That doesn't matter but.
.
Okay.
So there's actually no repetition because, , this is uppercase
and that's lowercase.
So let's make it lowercase.
Now we can see Liv is coming in twice.
Right.
What's going to happen here?
Because I've told you that keys have to be unique.
So what's it going to do with this?
Okay, so live here.
There's only one instance of it, right?
So it's starting off.
When it's going through this it's going to find Liv
live.
Live has length four.
, but it's not coming up twice.
It's just removing the second instance of it because keys
have to be unique, right?
So it's not going to put the same key in,
, when it already exists.
Okay.
So that's what it does.
It'll just discount repetition if you're telling it.
Those are keys.
Okay okay.
There's also hash tables.
There's a sort of you can think of them as
the same as hash maps.
There are some subtle differences, but for now you can
think of hash tables as pretty much interchangeable.
Okay, so this is exactly what we've already done.
, this is our enhanced for loop.
, okay.
This is a different way of doing it.
No, not a different way of doing it.
A different thing that you might want to do.
So what's happening here?
, here, we're getting the key set, and this is
the set of, of keys in word length.
So this is printing out.
oh.
Yeah.
Okay.
So key set is just going to print out all
the different keys.
, and this is what we've seen, but you can
loop through.
So what this is doing here.
, so we were adding things to it.
So what you can do and there's lots of things
you could do, but you can, , print out this
is, , looping over all the keys to print out
what they are.
, and here we're using, remember the format, the print
f that we looked at last time?
We're formatting a string because we want to say this
is going to be the key.
And this is going to be the, , value.
This is what we want the string to look .
And then we're filling in all these values for each
iteration.
So if that's not familiar, have a bit of a
play with that.
Looked back at the lecture, last lecture and printing.
This is what we've just done.
So you can print out hash maps very easily which
is nice.
, here you of course you can put your own
data types into hash maps.
So here what we're doing, we've created circles we
saw with the array lists.
But we want to put it into a hash hashmap
because we want there to be keys.
So what we're doing here is we're creating a small
the key the keys are the size basically.
, so the key type of the key is, is
string.
And the type of the of the value is circle.
So in small we're putting this new circle which is
of size two etc. etc..
Okay.
So.
We will touch a little bit later on that there
are certain restrictions about what you can use in keys.
Most importantly you have to have a equals method.
So generally when you're defining things you will have a
equals method anyway.
But with keys that's compulsory because you want to be
able to compare keys.
So there must be a way of knowing if keys
are equal or not.
So you can only do things for which a equals
method is defined.
Here again we can write nested HashMap.
So this is a HashMap where the the value is
an ArrayList.
And here so we're saying there's large circles and there's
small circles.
But we don't want that to be only one large
circle and only one small circle.
But keys as we know have to point to one
specific value.
So we can't have the keys small, pointing to lots
of different circles that can only point to one thing.
So we're going to get it to point not to
a circle, but to an array list of circles.
And in that array list, we can put all of
the circles that we want to say are small.
And here you can see what this does.
It circles are five and six.
They're small.
Large circles are 203 hundred.
And we can do that arbitrarily complex Okay.
So, .
Summary.
, yeah.
So you use an array list when you want arrays
to be able to grow, or you want to use
that nice built in functionality of easily adding and removing
and printing.
, and you can move things around and it's, and
it has a lot of advantages.
, HashMap when you want to have a key that
is not just integers that you get with arrays and
ArrayList, you can look at the Java API.
, but importantly you need to have this iterator object
if you want to iterate through collections and do something
to every, , item in the collection.
Okay, so that's all for today.
, so I will look at what's coming in and
we'll clap.
Let's see.
Are there any questions.
to a solution to the tutorials should be oh
they should be on the the solutions for tutorials
should come out after everyone's done the tutorials.
They should be on the course materials page.
I will have a look.
If they're not there, I apologise.
I'll get them put there.
, officer, today I'm going to bring fruit.
I'm not going to be here on Thursday.
So on Thursday you're going to get Colton's going to
come and do the lecture.
And I'm sure he's going to be really great.
So, , that would be something to look forward to.
But I will be in my office this afternoon, ,
next week is, is, , is, , whatever, whatever they
call it these days, there's no teaching.
Next week, you will not see me.
Don't come to your lectures next week.
There's nothing you have to do.
Chill out and have a nice time, and I will
see you in two weeks, I guess.
All right.
Thank you.
, HashMap orders its elements.
You order the elements in a HashMap.
It depends how you put them in.
You tell it how, where you want it to go.
, there's a question about assignment.
, if you want, if you want the questions about
the if you have questions about something, put it on
Piazza.
It should be answered really quickly.
If it's somehow urgent and not getting a response and
just email me.
It's six big groups with a bunch of tutors to
each group.
You don't have your own tutor yet and I'm sorry.
I'm really hoping they can get that sorted out this
week so that you can get in touch with your
own tutor.
But in the meantime, of course, all the tutors there
are for supporting all of you, so hopefully it won't
make too much practical difference.
All right, that's the red light on.
So let's get going.
Right.
What are we doing today?
, okay.
So we're back to normal in from B timetable.
, let's start off with the pet of the lecture.
Ah, so these are the ones I want to show
you a couple of weeks ago and mysteriously couldn't find
the picture.
So.
Birds, it's really nice when we mix it.
I love seeing all the cats and dogs, but it's
also really cool when we get different kinds of pets.
So this is banana, is this one I think this
is banana, this is blueberry and this is chia.
I think this is also chia.
And that's banana again.
And this is satellite.
One of those little fluffy chicks you put on Easter
cakes.
So that's very cute.
Thank you for that.
, And this is a really sweet dog.
Unfortunately, I don't know what this dog's name is.
I don't know what the name of this dog is.
What's that?
Levi.
Okay, so this is Levi.
Very lovely.
So thanks for that.
Thanks.
Do keep them coming, everybody.
Every pet will get a turn.
, okay.
Just to look a little bit quickly at the feedback
from the week three quiz, which we'd normally do on
a Monday.
So in terms of pals, , a lot of people
are not planning to.
Quite a few of you are planning to.
And some of you have some of you don't know
what impulse is.
So hopefully that number is a bit smaller.
That impulse came into the lecture to give a shout
out.
, it's fine if you don't.
So some of the things they're covering, maybe they do
sessions on git and so forth, and maybe you're super
proficient at git, then no need to go.
, but really useful.
We cover git very briefly and informally, because you will
be expected to use it next year without being taught
it.
If you go to impulse, you'll get much better support
for that because we don't have time to cover it
much.
, But they do have really, really useful things, stuff
about internships.
So I do recommend going if you think the topics
are interesting to you.
Okay, so this question I feel I can access support
when struggling.
, I wasn't that I was I'm a bit concerned
about this.
So so 22% are not needing help, which is quite
low actually.
, 4,043% of you do need some support, but you
can get it when you need it.
And that's that's great.
But this concerns me.
Only 1.4 are not getting the help they need.
That is concerning.
But here this 20 nearly 32% say only getting
finding the support you need sometimes, which is way too
low.
I'm going to touch briefly on where to go to
get help, but this is really concerns me.
If you feel you have things that aren't being
dealt with, whether they're academic or personal or anything, please
do either come and talk to me about it.
, go and talk to your student advisor and get
the support you need.
It's really important that you get what you need.
I'm going to go through these responses and thanks very
much for these.
, mostly quite positive, which is really nice to hear.
, a few people saying it's going too slowly, but
also people saying it's going too fast, which is inevitable
when it's a really a class with really mixed previous
experience.
, so I'm doing my best there.
If you feel it's going too slowly, sorry.
You just have to suck it up.
We can't go to much faster because there are people
with no Java.
If you feel it's going too fast, come and talk
to me.
I can't make it go much more slowly because we've
got the material to get through.
But we can put things in place to to go
over things that you might feel we've gone through too
quickly.
.
BA ba ba ba.
What was the other thing I wanted to pick up
on?
, so somebody made the point that the stuff in
the lectures is quite easy.
And when you go on to tutorials and labs and
assessment, it's much harder.
So there's a bit of a disconnect.
, so to some extent this is intentional.
The tutorials you're with the tutors.
So the the lectures are about getting the basic materials
in.
So you know, the stuff, the tutorials about putting that
into practice, that does sometimes mean doing harder things.
And that's what the tutors are there for to provide
that structure.
And it's the same with the labs.
The demonstrators are there.
The lab sessions are not well used.
So if you find the labs, it's a bit harder
than what we're doing in lectures.
Yes, it is, because it's putting into practice what we've
done.
If you're not clear on that, go to the lectures.
The assessment again, this is a balance.
It's pushing a little bit further than we've done in
the lectures.
But it shouldn't be really overwhelming.
We I think assignment the first assignment does contain material
up to the end of the week for.
So if you're trying to do it now, it will
contain things we haven't taught.
We're only just teaching now.
, but you have plenty of time to get on
with that after this stuff has been taught.
So we need to look at the assignments and try
to make sure that we're not asking too much.
, but anyway, thanks for that.
, yeah.
Yeah.
Okay.
I think that's all the main things I want to
bring up.
Okay, let's get back here.
Oh.
Okay.
So right to go back to this issue if you're
struggling.
So first of all with just thinking about everyone B
there's a lot of stuff going on in this course.
Maybe ideally you have time to do everything that
we suggest, but not that's not always the case.
For whatever reason, you have a lot of assessment in
another course.
You're not well, you've been partying too much, you're really
involved in your societies, whatever, and you don't have as
much time as usual.
What should you prioritise?
So do prioritise your well-being first.
Do not work yourself into the ground.
This will not put you in in good stead for
the rest of the semester, and for life in general.
Do use the channels for getting help.
Don't spend ages struggling on your lab assessment or just
think this is too hard.
I can't do it.
Go along to the drop in sessions and get some
support.
, pay attention to lectures.
Either come along or make sure you watch them.
If you have done this before, that's quite tart
because you should know a lot of it.
But still check in because we we're likely to be
doing some things you haven't done before or talking about
in a different way.
If you haven't done it before, this is really important.
, do go to tutorials.
This is required.
We take attendance.
You'll get cross emails if you don't go.
No, not cross emails with concern for your wellbeing and
why you're not engaging.
But also this is this is the best place to
put in practice things you learn, particularly the tutorials relating
to the assignments which will be coming up later on
in the semester.
Do keep a consistent practice on the assignment throughout the
semester.
We do have a kind of time allowance for three
hours a week the whole time, so don't try not
to do all of the final week because that's really
stressful.
And then the lab exercises are really important, the core
and the foundation parts.
I would say up to this bit.
Just do all of these if you possibly can.
It's going to get harder if you're not keeping up
with these.
And if you get a bit behind.
Go back to the weeks before and do those optional
lab exercises are optional.
Don't worry so much about those, but they're good practice
if you have time spending additional time on your assignments.
Okay, I know you guys are all super ambitious and
they all want to get really high grades.
And that's okay if you want to spend more time
than we suggesting to try and get those extra grades,
but don't prioritise this over keeping up with course material,
otherwise you're going to get into trouble later on.
Do the reading.
So the reading is definitely less important than the practice.
The reading in a way, is not necessary.
We're teaching you everything, pretty much everything you need to
know in the course.
The reading can be really useful because it can be
really useful to see a different way of talking about
it.
, and kind of more thorough explanations, sometimes a bit
more time, but I wouldn't prioritise that.
And then things outside the course of what you're learning
could be useful.
Not so much of a priority.
Okay.
If you need academic help, if you're struggling with it
from B, as I say all the time, go to
the lab sessions every day.
They're in Appleton, so they're really easy for you to
get to.
, do go to your tutorials, I know that.
I mean, at the moment I think we're at about
two thirds of you going to tutorials, which is okay,
but it's not enough.
You should all be going to tutorials.
This is where you learn do use Piazza.
Piazza is not used nearly enough, you can get answers
really quickly to any questions, whether it's a question about
how things work or a question about logistics of the
course or anything is monitored by the Tas.
But also students are on that all the time, and
they're asking if they're answering each other's questions.
So it's really useful for you to answer other people's
questions as well.
And also we have Q&A in the lecture okay.
In general, not about things, not about everyone.
First point of contact is your student advisor who here
knows who their student advisor is.
Most of you, not all of you.
Who knows how to find the student advisors?
Okay, so the student advisors are in Appleton Tower on
the sixth floor.
They're in that room right opposite 606.
They're there all the time during office hours.
You don't need to know who your own personal student
advisor is.
You can just drop in.
There'll always be students advisors there.
If your own one's not there, they'll just.
Somebody else will help you.
They're really, really useful.
If you have academic questions about courses and stuff, your
cohort lead, you probably don't know your co-leads so well.
You should have met them in Welcome Week.
But you can see on Euclid, but also your student
advisor can put you in touch with the cohort leader,
which is probably the easiest way.
, if you feel you need support with wellbeing, then
student advisors can can refer you to the wellbeing service.
, but also there is this page, the health and
wellbeing service at the University of Edinburgh.
If you just Google health and Wellbeing at Edinburgh, you'll
get this.
You can book in for appointments.
There's lots of resources I think.
Where are they based?
I can't remember actually, but they'll say say here.
So this is really useful.
Okay, so now on some important stuff, which is what
biscuits we're going to have.
, so I've also I've put an option down here
that I could bring fruit if people don't want biscuits
every week.
So you can choose that if you that.
I'm just going to leave that up when I move
on to doing other things.
I don't know if you know what Scottish biscuits are.
I don't think that's their proper name.
They're the ones with raisins in there called, ,
I don't know what they're called.
My sister always called them Scottish fly biscuits.
Okay.
So what are we doing now?
We are moving on to do some Java.
We are doing the Java API this week, so this
is stuff.
We've a little bit touched on this before, and this
is about some of the functionality of how we do
things in Java.
But this also carries over to a lot of other
programming languages okay.
So built in classes.
So we've already used built in classes.
We talked a little bit last week about built in
classes.
Right.
And this is the Java API is the class library
of all the things that are built into Java and
that you can use without having to worry about how
they're implemented.
So again, we saw a diagram this a couple
of weeks ago or last week or something.
I don't know about how you interact with the implementation.
So the point of the API here is to protect
the user from the implementation, right?
So when we're doing print print stuff, whatever, we
don't care how that's implemented.
I don't want to go into the code to see
how it's printed out.
I just want to know this is the thing I
can use that's going to do the thing that I
want, right?
So the API is what allows me to me to
interact with the implementation without actually having to care about
what's in the implementation.
So this just makes it way easier for me.
But also it means that the underlying implementation can be
changed without affecting the user.
So all you need to keep the same, you need
to keep the basic functionality, what it's doing the same,
and the inputs and outputs are the same.
If you're changing those, then you're going to be screwing
up things for users.
But if you keep those the same and you change
how it's implemented, then that's not the concern of the
user, which makes life way, way easier.
Okay.
So some of the things that we've looked at already.
So print , strings generating random numbers, all of this
stuff.
Now clearly we don't want every user to just be
figuring all this out from, from, , from basics.
We we want this built in so that because people
are doing it all the time, it's a total waste
of time to get every user to do this.
And generally, people want to do this in exactly the
same way as all the other users.
All the other.
All the all the things that you're coding yourself are
things that you're particularly coding for, the things that you
want to achieve.
And you might be conceiving this in different ways to
other people.
You might be doing different things with them so they
wouldn't be in the library.
But the things that are just general people are going
to want to do the same things with them, and
they're going to want to do it a lot.
This is the kind of thing you get in the
library.
Okay, so packages we haven't talked about packages, I don't
think.
But packages are how you organise classes together.
Right.
So we've talked quite a lot about what you want
to change together stays together or code where the logic
is , whether logically similar or they belong together, you
keep the code in the same place and this is
what classes are for.
But then classes also work together and you can put
these in packages, okay.
The code that needs to be chained together live together
classes are not enough because.
Because you might want to change classes together.
Oh, this is quite out of date, sorry I did.
I did mean to update this, but in the end
I thought, I mean it's just it's just illustrative.
Illustrative.
Illustrative.
How do I say that?
Illustrative.
Anyway, , I didn't update it because it's the same
point, but this is basically showing you that there's tons
and tons of classes in the library.
It actually got a little bit less between 10 and
11 because I did a bit of organisation.
So sometimes periodically things go through, people go go through.
And some of the old classes aren't used, but generally
there's a lot of stuff you can use and it's
growing over time.
Okay.
So you don't just want thousands and thousands of classes
all over the place.
You want to organise them into packages.
Okay.
So think of packages as subfolders.
, and within those are the classes.
Okay.
So for example we've got the Java.lang package that has
various classes for using things integers or integer maths
and strings.
So remember , string is not a primitive, but it
is something that you can just use without doing the
coding yourself.
That's because it's in java.lang.
, Java util has got res and date arrays and
dates and scanners and various other things, utility things.
So you think these are all utility things?
These are all things to do with language.
Put them in a package that's relevant okay.
And you can see the naming convention.
We've seen this dot.
This dot does a lot of heavy lifting in Java.
We use it for a lot of things here.
We're using it to indicate that this is what
the package name is.
The package name is util or the package name is
lang.
Okay.
So let's have a look at this okay I'll just
get my notes out.
Remind me what it is that I want to do
okay.
So let's go to IntelliJ and have a look at
this.
And I'm going to I'm going to actually actually I'm
going to bring up calculator.
First of all just to show you an example of
something we've looked at before okay.
And I'm going to get rid of this okay.
So I've changed it to dark I think that's what
people indicate a preference for.
But if if you don't the dark just
let me know.
Is that okay?
Can you see that?
All right.
Yeah.
Okay.
All right.
So here we're using this built in method to string.
Right.
So at the moment it's complaining that it doesn't know
what two string is okay.
And this is because two string is in a package
and I haven't I haven't imported that package.
So if you're using a built in package you have
to import it so that , so that the code
can access it.
It's not automatically accessing everything in the library.
, it's only accessing the things you're telling it to
import that keeps it.
It helps with memory and it's more organised.
So I have to tell it where to look for
this.
Right.
And this is in the class arrays okay.
So here first of all it's I don't know
what two string is.
But now it's okay you've told me where two
string is, but I don't know what arrays are.
And that's because I haven't imported, , the util, which
is the package in which arrays can be found.
Now because intelligence is very useful.
I don't have to do this myself.
I can ask it to do it for me.
So here where it says cannot resolve symbol arrays, it
gives me the option to import class.
So if I import it, it just it knows where
this is.
It's in the utils class.
So I'm not importing all of util.
I'm just importing class arrays which is in the package
util and now is happy with this.
It's not happy here because I still haven't told it
where to look for it, but now I'm telling it.
Yeah, this this is in the class arrays and it
knows where that is because I've imported the package in
which it can be found.
Okay.
Oh, interesting.
Fruit is the clear winner.
Okay.
I'm bringing too many biscuits.
Maybe I'll bring some grapes this time then.
, okay, so now we'll look at the date printer.
I'm going to start.
I'm going to start a new project here.
I haven't actually done that for a while.
, and I'm going to call it Date Printer five.
Okay.
And here I'm going to create a new Java class,
Us, which is also going to be called deep into
five.
, okay.
Not sure why I was doing that.
All right.
So what I want to do here, I just simply
want to find out what the day to day is.
And I'm going to do that by creating a new
instance of date.
What data date and doesn't this?
Because I haven't told it.
The class and the class is date.
So I want to create a new instance of something.
, there's of type date and I'm not giving it
so data something that doesn't need any arguments because what
it does is it just fetches whatever the current date
and time is.
And then I'm going to print that out.
Oops.
Oh yeah okay.
It's not going to complete it.
Let me so it doesn't it's not going to let
you complete things you don't that you can't do that.
So it's upset about this.
And why is it upset about this.
It's upset about this because I haven't told it where
it doesn't know I'm using a method doesn't know where
it is.
So if this is a message, I'm sorry, a method
I'm defining myself.
I then need to do what we've seen before.
Also, sorry I haven't put a main method in which
is a bit of a problem.
Okay, so now actually might might allow me to print
stuff out.
Okay.
, okay.
So I have to tell it what it needs to
know what date is.
This is not something I'm defining myself.
I don't have to create this method.
I have to tell it where to find it.
So there's two ways I can do it.
I can just say, right, this is in Java util.
So I can just do Java util date there and
over here okay.
And this can be a useful way to do it
if you're only referring it to a once.
But it gets a little bit unwieldy because every time
you want to use anything in here, you have to
type it out and fill.
So what I can do instead is I can just
use the import statement and then I don't need these.
And again IntelliJ can help me with that.
And it's asking me do I want to import the
class.
Again there's two different kinds of dates.
There's one in util and the one in SQL package,
and I want to import the one that's in the
util package.
So it will then here import this this class for
me.
And then the package the class within the package.
And then if I run that it's going to work.
So this is what it inputs.
This is what outputs.
It tells me that this is the date.
Thursday February the 6th.
Then this is the time.
And that's just the format that it automatically does it
in date, although there's ways to change that.
Okay.
So and this is exactly what I was saying.
You're creating this new instance of date and you're telling
it the package.
But the easier way is to import the package before
you start.
You can.
So you can see here it's importing the specific class.
You can use the star to import everything.
It's not considered best practice because , then you're just
importing a ton of stuff you don't use.
It's better just to import the stuff that you do
use, but it's workable and you can do it.
Oh, that reminds me.
I didn't answer the questions from last week.
There was something similar to that in there.
I must remember to do that before the end of
the lecture.
The questions that came up in woohoo clap last time.
Okay.
And here we've got another example of static inputs.
So static inputs allow you to skip class identifiers for
calling class methods or using static constants.
Okay.
So here we've got.
Okay.
So we're creating we're importing the calendar package.
And we're saying here that within that we want to
find.
So there's a static constant inside calendar.
And year is something that you'll find is a
constant that you're going to find in calendar.
, and here.
So the point here is that you have to every
time you're doing this, you have to put this dot
calendar and to say that this is where the static
constant will be.
, but here we can import static.
Right.
And that's going to we're importing all of the static
constants in calendar.
And now when we look at getting the year, the
month and the day of the month, we don't have
to put dot calendar.
So here what we're doing here is we're importing the
class with the methods.
And here we're importing the static constants okay.
So we will we'll look at more examples of
that later if that's not completely clear.
Okay.
So as you've seen we're using string and math a
lot.
But we never but we don't have to import anything.
Why is that.
You don't have to import java.lang.
, we've used if you look back at some of
the coding that's using strings and stuff, we haven't imported
anything.
Java.lang is just imported invisibly all the time.
It can always access anything in Java.lang without importing.
So that's why you don't need import statements.
Okay, so we can create our own package.
So say we are creating a data app and we
want to put different classes in it.
So one of these, this class here, , that ,
so date printer, this is something that we're going to
want to put into a package.
Right.
So here you can see there's just, just a class
on its own.
But we want to make a package and we'll put
other things around the data now.
So this is just one of the classes that we
want to have in our thing in our little date
app.
So I'm going to create a package or I'm going
to set a tell.
I'm going to tell Java that this is part
of a package.
And we're going to call it this.
Dot out.
This is the output okay.
Is in this.
Right.
So Java is not happy about it.
IntelliJ is not happy.
, let's see why it isn't happy because , I've
told it that Date Printer five is in this data
package, but it's , well, it's not this is this
is the structure, right?
It isn't in a package.
So I'm telling you what I'm telling it is not
true.
But because IntelliJ is very useful, it will it will
do this for me.
So it says, do you want me to move this
to the right package?
If I can get the mouse to work properly.
Okay.
So I can just click this and it's going to
do that.
And now sorry I didn't actually that was really unclear.
I should have I should have clicked on source.
Sorry.
That was super unhelpful.
, because I wasn't actually showing you this at all.
So Date Printer five is now a class within this
package, and this has just appeared as you couldn't see
because I hadn't got that expanded.
But if I'd have shown you this before I did
that import, , this line here would not have existed,
right?
This is something that's just the structure has been changed
by IntelliJ because I'm here explicitly changing the structure by
saying, actually, I want to put this into a package
or a subfolder.
That's all about things for dates.
So I'm putting these things together.
Well, I say these things.
There's only one class there at the moment, but you
would do that if you wanted to create a lot
of other classes related to them.
Okay, so here you can see under source in this
example we've got various packages.
We've got an error package.
so yeah we've got an error package.
We've got exec.
We've got other classes that are not packaged.
So the structure of this of packages can get quite
complex.
And depending I mean as with everything, don't overcomplicate things
because it gets harder to maintain.
But in some situations you might want quite a bit
of different packages.
You might even want layers and packages.
So, , yeah, you, , you can do that.
Okay.
So packages maintain their own isolated namespaces.
So, , normally start with calm.
We've seen a bit why this is true.
This is because of how it relates to HTTP.
, but classes with the same name can coexist in
the same program if they're in different packages.
So that can be quite useful.
You can call things the things the same name if
you put them in different packages.
So here we've got utils, we've got two different utils
and one is utils for graphics and one is utils
for io.
So that could be useful with basic package names.
Okay.
So we can go to the.
So being aware of Java the Java API API
documentation is a really important part of being a coder.
So I actually just noticed that this was really out
of date in the slides I originally had up.
I've updated this to the most recent one.
, if you downloaded the slides before about an hour
ago, this will link to the out-of-date one.
Doesn't actually make really any difference for what I'm trying
to show you.
, okay, so if you go to Java API, this
is what it looks .
So these are all the things that are built in.
So let's have a little look at for example string
because strings something we've done stuff about.
So it's saying write string is a class within the
lang package.
So let's have a look at the documentation in here.
So class string is defining what a class string is.
There's a lot of documentation here that you can read
about explains what strings are.
And then here you get the different constructors.
So we have only ever looked at one way of
constructing a string.
And that is just this string with no arguments.
We're just saying this thing is a string.
There is actually lots of different ways you can do
this with bytes and all sorts of things, which we
may look at later on, but we won't look at
anything from B in in from B just this is
the only constructor we're looking at.
But the point is classes can have lots of different
constructors depending on what you actually want to do with
objects in that class.
You'll also see this deprecated stuff.
, this is old methods that did exist and are
not being used anymore.
They keep them in the documentation so that you can
see why.
Perhaps legacy code isn't working because they say, oh well,
that was using this and now it's been deprecated.
So these are all the methods , and you can
look at different, you can look at different categories and
they'll have all the deprecated methods in there, which is
useful if you're trying to find where something doesn't work.
, some of these you're familiar with what we've looked
at.
So equals equals.
So this is saying equals is something that takes in
an object and it returns a boolean.
, and what it's actually doing is it's comparing the
string to the specified object.
So whatever object you pass on pass in does it.
Is it the same as the string we've seen that
we've seen.
Let's me see we've seen length.
so length doesn't take in any arguments.
You just apply it to a string and it returns
an integer which is the length.
So some of you may have come across things
char at I think some of you were using that
in tutorials, which returns the index at a character at
a particular values at.
So there's loads and loads of these compared to concat.
These are all most of these are useful.
Some of these you'll use a lot.
So if you're trying to do things with strings, the
first thing you do is go to the API and
see what built and stuff it has that you can
already use.
All right.
So let's try using some of those.
Let's.
Have a look at string test one.
Okay.
So I'm going to do a little bit of coding
about to determine whether a string is a palindrome.
So who knows what a palindrome is.
Okay.
Okay.
Does anyone want to explain for people who don't.
Okay I'll explain.
So a palindrome is just something that reads the same
forwards or backwards, whether you start at the beginning of
the end.
So for example, simply the name Anna is a palindrome
because whichever way you read it, it's the same.
You can have or it could be they're either got.
They are either the same up into the middle, or
they've got a middle, , a middle character that.
So it doesn't matter how long it is.
Is what I'm saying.
This is also a palindrome.
You can have much longer things a man.
A plan, a canal.
Panama.
That's quite pertinent at the moment with all the stuff
about Panama.
So if you look at the letters, you can see
that they, , they're all the same either way.
And they end in this middle letter C.
So that is what a palindrome is.
So what we're going to do is we're going to
write a little method to have a look at, to
test whether we're passing in a string.
And we're going to return a boolean value as to
whether or not it's a palindrome.
Okay.
So what I want to do is I'm going to
find out how long this string is and then go
in from the answer from from one side and from
the other side, and check whether the characters are the
same.
So I need to know the length.
, so integer n is , string length.
Okay.
So already I'm using this built in thing that you
saw in the API.
And I have a for loop.
So for integer I equals zero.
And they want to keep going half way through because
I'm coming at both ends at the same time.
So I only need to go halfway through the string
until I get to the middle.
So I want to keep going for until it's less
than n divided by two.
, and I want to iterate each time.
Okay.
And what I want to say is if I'm looking
at the first letter and the last letter, if these
are not the same, it's not a palindrome.
Forget it.
If they are the same, maybe it's a palindrome.
Let's keep on looking at the next ones.
So if these are not the same.
So I want to first check for when they're not
the same because then I can immediately jump out of
the testing.
So if strings are at.
So here we're using a built in method chart at
which is going to.
So if I go back to documentation.
So char at I need to give it an integer
and it's going to return whatever character is at that
point at that index in the string.
So I want the first one, which is whatever's at
I.
And I want this not to be equal to.
You haven't seen this before.
But exclamation equal means not.
I mean, generally explanation means not.
Exclamation mark means not.
And I've got string char at.
So n minus one minus I puts me in the
right place if that's not clear.
Have a think about that.
, then what do I want to do?
I want to return false.
These are not the same.
It's not a palindrome.
And I go through that whole loop.
And if I never jump out, if it's ever not
right, I'm going to jump out.
If I never jump out, then that means it is
a palindrome.
So I'm going to return true.
Okay.
So either way there's a boolean outcome for this.
So all the red stuff has disappeared is happy with
this now.
Okay.
Why have I got all these brackets.
Okay.
so now I'm going to send something to it.
.
Let's say answer equals is palindrome.
, I'm going to put a string here.
Is palindrome string.
And then print that out.
Answer.
And what.
So what is the type of answer.
What do I need to put here?
Brilliant.
Yeah that's right.
It's a boolean.
Okay.
And now I need to put in.
Oh, sorry.
That should not be uppercase.
Let's just call this str, okay?
So what do we want to check.
Give me give me something we want to check whether
it's palindrome or not.
Taco cat.
Very good.
Okay.
Is this a palindrome?
Yes, this is a palindrome, but if I do Taco
cat two.
This is not a palindrome.
I could also take out the middle letter of Taco
cat and just have tat cat.
Is that.
Is that a palindrome?
That is a palindrome.
Okay, so this is just a little example of using
some of these built in things to make life way
easier for you if you're trying to do that without
using that, that would be fiddly and annoying.
Okay, so these are all things that might be useful.
We've looked at char at concat we can do.
Let's just have a look at concat.
So we've looked at using the plus which is fine
way to do it.
But you can also use the built in method.
So.
Right.
Give me a string someone.
Just a word or an expression.
Tree okay.
And now I'm going to make string two, which is
going to be a string one concatenated with another, ,
string.
Give me another string.
Huh.
Apple.
Okay.
And then I'm going to print out string two.
What was the answer.
Tree.
Apple okay.
So it's just putting these together exactly as we would
with.
Plus sometimes it's easy to do.
Plus sometimes using plus gets really messy.
And it's easier to use this built in method there.
Okay.
Compared to ends with ends with is really useful.
What's the final oh does does a string that's
boolean.
Does a, does a string end with a certain thing
that you pass into it.
What is the index of.
So here index of.
This is a good example of when things are overloaded.
Overloaded means it's doing more than one thing .
Plus is introducing integer addition and string concatenation and so
forth.
So here Indexof either takes one argument which is a
string and it returns.
So say we're doing.
Let me just show you this.
oops.
Integer index equals , let's say string one dot index
of.
okay.
What let's do two.
And then we're going to just print our index.
Oh sorry.
That makes no sense.
, yeah.
No, sorry.
That's not how you use it.
Have a look at the, .
So minus one means that it doesn't exist.
Have a look at what it's actually saying.
What I'm supposed to be passing in is the string
that I'm trying to find out where this index is.
So I'm going to say E.
Okay.
What's the index of E?
Okay.
So.
So it sends.
So it gives me two.
Right.
But E is actually at two and three.
So if we just put an index of with just
the string, that means the very first time that string
occurs.
But also I can have an index of with an
integer I, which means start searching at a particular place.
So I'm going to say start searching at two and
then tell me the next time you find an E.
Start searching at three because if you start at two
it's going to find that two.
And now it's saying okay, there's also one at three.
But if I was, for example, looking for a T
or an R in index three, it's going to say
minus one doesn't exist.
Whereas if I get rid of this and I say
just look anywhere in that string, it should give me
an answer.
Yeah, it's going to say it's a position one.
, an index of.
An index of gun.
Okay.
So there's various ways you can do these.
.
There's lots.
So there's about five different ways you can do index
of.
Okay.
So there's lots these these things are all useful.
You'll get really familiar with them okay.
But in Java just just as a point to remember
strings are immutable.
But that means you can't change strings using these operations.
You're just finding out things about these operations okay.
So code for this.
Let me just check the time okay.
Oh that's fine.
, so this is a palindrome when we looked at
this is extracting file names and extension from a command
line argument.
So here we want to look at substrings of we're
using index of so we're trying to find we've
got a long string of things.
We're trying to find the dot.
And then we're looking at what comes before the dot
and what comes after the dot.
So that's quite a common thing to do with strings.
, what's happening here.
So here we're using read line.
Okay.
So we're printing all lines from standard input containing the
string info.
Okay.
So we're reading each line and then we're saying does
this line contain info.
If so, print it.
If not, ignore it.
So we're looking for all the things.
So we might have tag things with info.
That's what we want to print out.
Other things are not relevant.
here we're looking for , URLs from Edinburgh.
Oh no.
Any academic URL.
So we want a URL that's we want something that
starts with HTTP and it's going to end with UK.
That's, that means that's what we're looking for.
So here we're using starts with and ends with.
So using these built in things we can do lots
of interesting and fun things.
Okay.
So now we're looking at something a little bit different
which is about formatting strings.
So some of you were using this I think this
came up a little bit in the tutorial.
so print that's we've mostly we've only done printing
so far with print Lynn or just print.
So, so this is print is just the basic functionality.
LNE means add a return line afterwards.
So you have to pass it in everything you want.
Right?
But so here we can use concatenation to make a
longer string.
, and this is okay in simple cases if we
just want to say the student name Lee is aged
18, this is what we can do.
, but it's a little bit inelegant.
And if we have tons of these things, that can
be really annoying.
So there's nicer ways of formatting this stuff, and we
do.
So this is the this is the string that we
want to produce.
, and so this is the basic string.
And into this we want to slot variables.
We want we want lots of maybe lots of examples
of this with different instantiations of that.
And so what we use are these format specifiers.
And those are percentage.
So the percentage indicates something is going to go here.
So you're waiting for a variable to fill in a
space.
That's what percentage means in a string this.
, and s means the kind of thing that it's
expecting.
So.
S means it's expecting that to be a string now.
I've said before that strings are kind of black box.
And when you're doing things with it, Java's not looking
inside the string.
It's just treating it as a whole object.
This is an exception to that case.
Right.
So if you have a percentage it's going to look
in and it's going to know that that means something
specific and it's going to behave differently.
Okay.
So the percentage is a placeholder is a placeholder.
And percentage S is a placeholder for a string.
And these are called format specifiers.
And when you actually do something with it the format
specifier will be replaced by an actual value.
Okay.
So here we're using string dot format.
So the command is format.
And we have.
This is the string we want to create with the
gaps.
And then after that we have as many arguments as
we have percentage signs which is telling us what is
going to go in there.
So here something called name is going to go in
the first one and something called age is going to
go in the second one.
And these have got to be the the types have
got to match.
So these have both got to be strings and name
clearly is a string.
Age might be a string or it might be an
integer, probably.
And that's fine.
It doesn't mind if it's an integer because it will
automatically convert an integer to a string.
But if I put in, well, I'll show you that
in a minute.
So let's just have a look at this in IntelliJ.
We'll just do it in here.
So string one is now going to be.
Okay.
So I'm going to do string is string dot format.
So I'm saying the method I want you to apply
here is format.
What is format is something that you find defined within
the class string.
So the student named what is the name.
It's going to be a string I'm passing in.
So percentage s o.
And I think we had for some I don't really
know why there's a single quote marks around those, but
we'll just do that anyway.
To show that that can work is age percentage s.
And then I'm going to have.
And now I'm going to pass in a name and
an age.
Or I could just do this directly.
Right.
Give me a, give me a name someone might have.
James.
Okay.
And this has been named how old is James?
40.
Okay.
Mature student.
Awesome.
This is not happy here.
We know why that is because I haven't told it
what the type is.
And then I'm going to, , let's print out.
, string.
Okay.
So if we print that out.
The student named James is age 40.
Okay.
Now, obviously there's no point doing this if we're just
immediately putting what we want to be printed out inside
the format statement.
The point of this is that you can do with
variables.
So we can say here name is James.
And age is 40 and name is a string, and
age is an integer.
And then.
Name and age in here.
Okay.
And that does exactly the same thing.
So now we can see we could be passing in
arrays with tons of data or whatever.
And it's going to do the same thing for all
of these.
Very useful.
So very often you want to create strings that are
formatted this.
But in this case all we're doing is we're creating
the string and we're printing it out.
So then we don't actually need to create the string
separately.
We can create this within a print statement.
So this time instead of doing print Len we do
print f.
This means this is a kind of print statement in
which formatting string formatting will occur.
So all I'm going to do is put in into
that printf statement exactly what I put into the format
statement.
Get rid of that.
Don't need that.
Oops.
Okay.
So that does exactly the same thing.
So if if it's easy enough to do it within
the print statement, you don't need to create this string
and then print it just to just do all that
work within the print printf statement.
, but if you want to do other things with
the string then probably using format is useful.
Okay.
Printf statements.
, okay.
So here we've got an example.
This again this is expecting type string.
And we're sending it a character.
That's okay because Java can convert a character to a
string.
So it's not going to complain about this.
here we are using doubles doubles.
It cannot convert to a string.
So if we say here H is 40.5.
So I'm going to do that.
, because whoops that's a problem there.
Is this not going to work.
Oh that is going to work actually.
So it will.
Okay.
So we'll convert.
It will convert the double into a string.
Apologies about that.
But sometimes you don't want it to.
Right.
Sometimes you actually want it to be a double.
So what we're going to do here is we're going
to say, , the value of pi is.
, percentage f.
, and then what we're passing into that is ,
pi the value of pi, which is math dot pi.
So this is saying pi is a constant that is
defined within the maths package.
Oh sorry.
Yeah that's fine.
It's going to print it out.
Okay.
So another useful thing you can see this chooses a
fairly arbitrary number of decimal points to print it out
to.
I don't know how it chooses that, but say we
wanted we only wanted two decimal places.
We can put in here two.
Right.
So percentage two with f so f.
By the way remember that this stands for float which
is kind of the same as a double.
A double is a float that has twice as much
storage.
For some reason, it's always double that we use for
the type and f for the to specify here.
So what we're doing here with the point two C
is just pointing out to two decimal places.
We can also put a slash n.
That means new line.
And that's going to well actually.
Oh sorry.
That's the right kind of slash.
Otherwise it's just a string.
And you can see this creates an empty line there
okay.
So just really quickly looking at code documentation we haven't
got very much time to do this.
okay.
So code documentation is really really, really important.
You have to tell people what's going on in your
code.
You have to tell yourself what's going on in your
code.
But when you come back to it, otherwise your code
is really, really hard to use.
Okay.
So there's some basic ways of doing this.
So the easiest way is just to put in something
here with double slash you can say this is my
comment.
Or if it's over multiple lines, you do slash star.
And that automatically creates a closing dash star.
And you can say this is a comment okay.
So this is useful just for yourself.
If you want a little aside to yourself to remember
what's going on.
But the main thing you should be doing is you
should be creating Java documentation.
Okay.
So this is if we put dash star star, this
creates Java documentation.
And actually let's just show it in here.
This is going to work better here as an example.
So I've got this method is palindrome I'm going to
put in my Java documentation.
Okay.
That's not a very good example because it's not bringing
up the parameters.
Okay I'm not quite sure what's going on there.
okay.
So.
Java documentation is automatically converted into HTML.
, so it contains , so you can put HTML
tags in.
But this is creating documentation that's similar to what you
will see in the Java API.
You create your own stuff for your own methods.
And this is really easy to do.
You just have to use Java Doc and it does
it all for you.
, so it should be.
I'm not quite sure why it's not.
Why is Param not coming up?
Am I putting it in some wrong place?
Oh, yeah, I am.
Sorry.
Ah.
Live coding.
Such a pain.
Okay.
So sorry.
I was putting it inside the method.
That's not right.
You put it above the method.
Now here it's automatically providing param and return.
So.
Right.
It knows that something's coming in and it's a string.
And it knows that there is a return value.
So I put the string I want to check.
Put it in.
And you probably want to put more, , more
specific things, but but it gets you to explain what
goes in and what comes out, and then you want
more documentation explaining what's actually happening.
, so and the three things it automatically does is
parameter return and throw.
So throws as if there's any exception.
Here we look briefly at throwing.
This is throwing a null pointer exception.
So you need to explain that in the documentation.
an IDE will automatically bring these things up for
you.
okay.
So how much commenting do you need.
Every method, class and field contents should have Javadoc.
It will create this interface that's really useful within the
code.
How much you need?
Not very much.
, sometimes it's useful, so don't do it for super
simple things.
That's pointless.
This is really simple.
People can figure that out.
Don't waste time with commenting.
, don't say things that aren't true.
This sounds really obvious, but actually this is part of
code maintenance.
As you change your code, some of the documentation is
not going to be accurate.
It's really important to change the code documentation as you
change the code.
, so sometimes things get it makes it clearer.
But you should .
Okay.
So sometimes you can just do this by using sensible
names.
Right.
If you can do that, give things names that are
meaningful, then you don't have to put as much documentation
in.
, that's kind of self commenting code, which is a
bit of a I mean, it's a bit of an
exaggeration.
Sometimes you need comments, but the more so here we've
got p names.
Then you don't need to explain that it's the names
of the participants that's kind of obvious.
, don't do stuff this.
It's very tempting, but it's kind of annoying and it's
not considered good practice.
Even though you will be, , sometimes commenting or sometimes
working with code.
That's really annoying.
So every method, class and field within code just to
explain it.
If it's not obvious and you need to know, all
right, , and do consistent coding style just makes it
much easier to read.
You can have a look at the info and b
coding conventions, documents, , third party libraries that are not
done by by Oracle who maintains Java.
Not done by you, but other people.
You can import those.
We'll look at those later.
They're jar files.
Okay.
So that's the summary.
Sorry.
That was right up against it.
, packages are really important for organisation.
API is really useful for building stuff and do comment
properly.
I'm just going.
You can start picking it up.
I'm just going to go to those a couple of
questions on Google Apps I should have looked at at
the beginning.
Bring fruit on Monday.
.
Oh, I forgot to put it on.
I should have put it on, too.
, okay.
All right.
I'll go through things later.
I've also forgot to put it on, for I was
still on the biscuits, so probably nobody's asked any questions.
That's my bad.
Okay, we'll do that properly on Monday.
Sorry about that.
See you on Monday.
Apropos, but not very not very information.
First and second is Glasgow, which are guitar.
Guitar.
Do you know what that means?
Howling.
Abyss.
Fair enough.
All right.
Okay.
The red light is on.
So let's let's start the lecture.
So I'm just going to leave that up for a
minute or two.
A couple of things I want to say.
So first of all there's been this lack of clarity
around labs.
So for reasons I don't completely understand, you've all been
allocated a specific lab in your timetable.
Okay.
This is not reflective of reality.
In reality, there are five labs that all drop in.
You never need to go to any lab.
You can go to any as many as you .
Right.
And I would strongly recommend you do sometimes go to
labs.
As I said on Monday, it's a really great place
to get support, but you've been allocated a specific one
and you can just ignore that.
Go to any of them.
We will and I'll send an email about this.
We will actually have to be starting the Monday lunchtime,
one a little later.
That's scheduled for 310.
We're having to put it back to 330, because there's
been some big mess up in another course, and they
don't have the proper rooms allocated, so they've had to
ask for 20 minutes of our session.
It's a two hour session, so this shouldn't really impact
anyone.
But if you go at 110, be aware there will
be another class in there until 130.
, tutorials and labs are not assessed.
All the lab exercises are for your own practice.
Right.
We're not going to be looking at them.
You can go through them with a demonstrator in a
lab session if you want feedback on them, but they're
not assessed if you don't do them.
There's no direct drawback of that.
There's a lot of indirect drawbacks because this is really
important part of how you're going to develop your Java
skills, which is really necessary for later years.
But it's not it's not going to impact your grades.
Actually.
It will impact your grade indirectly because you won't be
you won't find the assessment as easy, but it's not
directly assessed.
Tutorials.
Different matter.
I don't know whether the allocation has been done yet.
I know all the details are with timetabling.
They might not be in your time.
I don't think they're in your timetables yet.
They start in week three.
Those are compulsory.
They're not assessed, but they're compulsory.
And you must.
You will be assigned a specific tutorial, which should be
mostly with other people in your academic family.
You must go to that tutorial.
If you can't go to that tutorial, then timetable will
let you know how to ask for a different slot.
Okay.
So difference between labs and tutorials.
All right.
If anyone's unclear.
Keep posting on Piazza.
I hope Piazza is going well so far.
So we've got almost completely new team in it from
B.
I'm the only person who's continuing.
So the people who are covering it are just kind
of picking it up.
They're not used to it.
So maybe some things are slipping through the gaps.
If you feel the responses are not quick enough
on Piazza or anything, let me know.
We we are intentionally, not immediately answering questions to help
that student dialogue, but they should be answered fairly promptly.
, also, ah, there have been two screw ups with
times for assessments on different parts of the web page.
I'm really sorry about this.
This is not really okay.
K , there's so many moving parts in this course
and so many different places we need to put this
information.
So there was originally an error in the course time
player on learn about the about the dates, submission dates
of the later quizzes.
Not the current quizzes but the ones later in the
semester.
And there was also an error on the schedule where
the information about assignment 2.1 was in the correct week,
but the dates associated from it were incorrect because they've
been copied over from last year, and I hadn't noticed
that that hadn't been updated.
That's all updated now.
Pretty sure there's no more errors.
I'm really sorry about that.
That really shouldn't happen.
Thank you very much to the people who noticed that
and let me know.
So the thing I'm most do not want is people
complaining about stuff but not telling me, right?
If there's things that are wrong or things you don't
, you need to tell me and I can hopefully
do something about it, especially if something's wrong.
I need to do something about it.
So please just put a put a, put a post
on Piazza, come to my office or email me, talk
to me at the end of the lecture or whatever.
But just let the team know and we can make
changes, Okay.
Right.
So now I have to keep a much better eye
on time.
So last, last Monday, very unlike me, I completely lost
track of time.
And that meant we didn't have time for any Q&A.
So sorry about that, but we will time it better
today.
Let me just get my phone out so I can
keep an eye on the time.
It's always in front of me.
That'd be much easier.
Okay, good.
Okay, so let's go on to the next slide.
Our head of the lecture.
So this is Stevie.
Stevie's named after Stevie Nicks.
How many people here know who Stevie Nicks is?
Whoa.
Not that many.
Well, maybe I don't know.
People have quite low hands up.
So Stevie Nicks, she's awesome.
She was a singer songwriter.
She did a lot of work with Fleetwood Mac, but
also a lot of solo stuff, mostly in the 70s.
But she was really seminal and really important for women
in music and did some great stuff.
So Stevie, the cat named after her, that's super cool.
I've already got quite a lot of pictures of pets.
That's great.
What I'm going to do for now is just go
through one per lecture.
Everybody who sends me a picture will get it in
the lecture.
I don't want to flood them all at once because
then I might run out.
But if I keep getting more in, then I will
maybe put up more than one per lecture.
Okay.
Burnside.
Kaylee.
Do you guys know that there's a Burnside Kaylee.
Next Friday?
Okay.
There is.
There's posters up around it.
Okay.
Who has been to Kaylee?
Okay.
We had a Kaylee the first semester.
Okay.
Well, Kaylee's are, I think, really fun.
Particularly if you dancing.
It's traditional Scottish dancing.
You don't have to know anything.
It'll all be set up for people who have not
done Kaitlyn before.
Here is the QR code.
I'll leave that up for a second.
, there's a limit on numbers about.
I think it's 100 max.
You have to pay for the ticket.
Â£5.
You get lots of food and drink for that.
The main reason that we are charging, I mean, it's
partly to cover all the food and drink, but also
because what happens at the Helper's, Kaylee, is that we
sell, sell tickets really quickly.
But attendance was quite low, so a lot of people
really wanted to come.
Couldn't get tickets and then people with tickets didn't come.
So if people have small amounts of payment, encourage you
to come.
So if you do get a ticket, please do.
, please do actually come.
Or if you can't come, let us know.
We might be able to resell it.
Please don't get a ticket and then not come unless
obviously sometimes totally unexpected things pop up, but it's just
a waste.
It's a shame for people who can't get tickets anyway.
I'll be there.
It's going to be lots of fun.
Right.
My office, our.
I will send this round on email, and I will
also put it up on the open course page.
And I will remind you on Mondays lecture.
But it's going to be 4:00 on Mondays in 606
in Appleton Tower.
This was the most popular slot.
If you can't make it, I'm really sorry, but come
to me any lecture or drop me an email, that's
totally fine.
But if you can come try and focus questions during
office hours, because that's just much easier.
I'm going to bring out biscuits.
I don't actually know exactly what kind of business I'm
going to get, but they're going to be somehow OAP
biscuits.
.
Oh, this I should I don't know why this is
all shoved up on one side.
Okay.
What I realised I should have talked about in the
first lecture and I didn't.
Is Gen I and I'm from B, so this was
beginning to be obviously a real issue last year.
It hasn't previously been an issue in the same way
that it is now.
So as you know, Jen, I is very good at
doing a lot of the stuff that we're doing, whether
that's I mean, ChatGPT is quite good at this sort
of stuff, co-pilot etc..
Okay.
And of course, as you go into your careers, whatever
career you have, using AI is going to be really,
really important.
And some things you're going to be focusing on later
on in your degree is going to be looking at
how you use AI as a code effectively, right.
And maybe if you go into coding, a lot of
what you're going to be doing in coding is prompt
engineering, rather than doing the coding from scratch yourself as
you would traditionally have done.
This is really important.
However, this is not what we're learning in from B,
right?
So even though there's fantastic tools to help you with
coding, even though you could get AI to do most
of this course for you, if you ever want to
get into be a good coder, you have to understand
the stuff yourself, right?
You can't just get.
I see it completely and never think about it.
If you do prompt engineering later, you get all these
much more complex results back.
You need to be able to analyse it, you need
to be able to understand it.
And that is why we continue to teach these basic
skills without AI, even though I could do it because
you have to develop these skills.
It's kind of , you know, even though we have
calculators, we still teach arithmetic to kids, because actually that
ability to do things in your head is an important
part of cognitive development.
So you are not allowed to use JNI in the
assessments that we give you.
I have to double check if there's any exceptions to
that with the people who are.
If there's any exceptions in the assessment, they'll let you
know.
But in general, this has got to be your own
work.
Okay.
Now there's a move to do.
Go away completely from coursework and do everything in exam
conditions, because then it means that you can't use JNI.
And we haven't done this in this course yet, partly
because it actually takes ages.
By the way, the seats down at the front, if
you want to sit down, there's quite a few over
here.
And if you're right on the end, can you can
you maybe move up a bit?
, yeah.
And leave those open.
So, , yeah.
So we're not doing that partly because it takes I
mean, it takes such a long time to get these
things through Board of Studies, but also because I think
sitting in an exam doing coding is not really a
good way to assess coding.
So I have to admit that our ability to detect
you using this as not as high as we would
.
So there's a bit of an element of honour around
this.
, but all I would say, I mean, I know
that it's really tempting to to I mean, this is
cheating using DNA.
It's really tempting.
You get really stressed, the deadlines coming up.
It's just you can get away with it to some
extent.
Maybe not necessarily, but it's.
I can't emphasise enough that what you're doing in this
course is laying the foundations for your degree.
And if you do that by just getting ChatGPT to
do it and not learning it yourself or whatever it
might be you're using, this is really going to come
back to bite you in later years.
So please take this seriously.
You have to develop these skills and if you just
don't do this.
It's going to be a problem.
Okay.
All right.
No, that's for later in the lecture.
Right.
So we did awkwardly stop right in the middle last
time I was not expecting to get to the end
of all of the contents of the first lecture, because
we have to do all the admin stuff, but I
wasn't really intending to stop in the middle of a
sentence.
But anyway, we're now what we're going to do.
What's the time?
20 pass okay, that gives us plenty of time.
We're going to finish the first lecture, and then we're
going to move on to loops that we're doing that
we're planning to do in the second lecture.
So if you remember what we got to I think
this is where we got to, we were looking at
string concatenation.
So we're looking at how you can use the plus
sign to do integer addition.
But also if you if you use a plus sign
and you're passing in strings, it's going to interpret the
plus sign as string concatenation.
Okay.
So what happens if we mix this up a little
bit.
Let's say is that you double O.
And then we're going to put in an integer here.
So we've got an integer between two strings.
So this string here and this string is telling this
plus symbol that telling Java Plus should be interpreted interpreted
as string concatenation.
But here we have an integer which is saying you
have to interpret this as integer addition.
So what is IntelliJ.
What's Java going to do with this.
So if we run it we see that that works
fine.
Okay.
So what is happening here is that Java is recognising
this as an integer, but is trying to do something
that's incompatible.
Right.
You can't you can't have plus being both integer addition
and string concatenation.
So what will Java will do in certain kind of
specific situations.
It'll try to be helpful by seeing what is possible.
Now it's always possible to turn pretty much anything into
a string just by putting quotation marks around it.
At least that's what it looks to us.
It's not what's happening under the hood, but you can
turn things into strings.
You can't obviously turn strings into integers.
So it's just turning this into a string and then
doing string concatenation.
But by the way, what would happen if we took
these zeros out and put them in here?
What's going to happen here?
So if we run that, we see the two zeros
are dropped, right?
And this is because Java's first looking in this as
an integer and 007 as an integer is the same
as seven is most easily expressed as seven.
And that's why it's returning it.
So it's dealing with an integer and then turning it
into a string.
Whereas if you put this in a string, obviously Java's
not looking inside the string to see what that means.
It's just treating it as a whole thing.
All right.
Okay.
So let's move on to variables.
Let me just get the oh sorry.
Let me I should not be up.
Get rid of that.
.
, what can I do?
Let me do a full screen mode.
Okay.
Okay, so now we're going to look at the basic
definitions.
The structure of Java code.
Okay.
So we're going to go back to look at numbers.
And this time we're going to be printing out.
So we're going to.
Okay.
So what we've all we've been looking at so far
is just print statements.
It's not doing anything other than printing stuff out.
Okay.
In fact I think that's what we got to.
Yeah.
Okay.
So now we're going to look at variables.
Okay.
So we're going to have an integer variable.
Okay.
So let's think of an integer value for this.
What value should we give a three.
Okay.
And we're going to have b.
What value are we going to be 17.
Awesome.
Thank you.
Right.
We didn't do this on Monday did we.
No no.
Okay good.
Just make sure.
Okay.
Then what we're going to print out here is a
plus B right.
So the print statement is now taking in data that's
coming further higher up in the program and doing something
with it.
Okay.
So you can see there's this red appearing.
What happens if you have red.
We'll try and run it.
Okay.
It's not going to run.
If you have red in your program, you can't run
it.
And here you can see the name of the file
is underlined in red.
That means something really bad is wrong.
We can't run it.
So what?
What is the problem?
So IntelliJ has lots of really useful ways of finding
out what's going on.
So wherever there's a problem, there's a little bar next
to it on the right hand side of the screen.
And you can hover over that and it'll tell you.
So this is saying cannot resolve symbol A.
This is also what it's saying down here when I
try and run it.
And if I look up here I've got lots of
problems.
And again if I click on that it'll show me
what these are.
So the problem is that it can't resolve the symbol.
Right.
What that means is that Java is saying I don't
know what A is, what is a right.
So in some languages.
So we can see here we've told that A is
equal to three.
Now some languages would say well three is an integer.
And I'm saying that a is equal to three.
So a must be an integer.
That's fine.
You don't need to tell it.
It's just going to assume it.
Java does not do that.
Java likes everything to be very neat and very clear
and very explicit and it will force you to tell
it right.
So I have to tell Java before I introduce a
I have to say before I try and give a
value to it, I have to say what what a
is.
So I just put a B here.
And what this is saying is I'm introducing two variables
and their names and their they're called a and b
and they're both integers.
That's their type.
They're both of type integer.
And now I'm going to assign a value to it.
So say if I wanted to assign it the
string three, it's not going to this because it
was well you have told me that a is
an integer and now you're giving it a value of
a string.
That's not that's not possible.
Integers kind of values that are strings.
So Java really cares about this.
, so there's kind of mixed views about whether this
is a good thing.
It's kind of easier when you don't have to do
this explicit declaration, and you can just make assumptions based
on what you assign things.
But doing this all explicitly, it keeps you right.
It makes it more difficult to it's more difficult to
make mistakes, and it's easier to understand things when you
come and look at it later on.
So there's pros and cons to doing it.
But in Java you have to do it.
There's two different ways of declaring things.
You can declare them right at the beginning or at
any point before you use them on a separate line.
Or you can do what we call we can.
You can declare it as you introduce it, and you
can do this all on the same line.
And we're saying, here's a and it's got this value.
And oh, by the way it's an integer.
So you can do either way.
That's fine.
And then if we run that it's going to do
the addition for us.
okay.
So just a bit of oh.
And we all also can say instead of doing a
plus B in the print statement, which is kind of
always fixing us to, that's going to be the one
we're looking at.
We can have C in here, another variable.
And we can say C is a plus B.
And usually usually you don't want to do too much
in print statements because it makes it more difficult to
follow.
It's usually useful to do it here.
And again we have to initialise a c.
So we're going to say that's also an integer okay.
So this is an assignment statement here, where you're declaring
a variable and you're assigning a value to it.
That's an assignment statement.
These here 17 and three are what we call literals.
And that means they're specific values that you're assigning to
variables.
And these things are variables which means as you probably
all know they can take on different values.
All right.
Okay.
So.
And here is all this in slides.
So you know that okay.
And then there's other ways we can.
So we had a look at Hello World where we
were doing it in the print statement.
But equally we can just say we're going to print
out a message.
And here we're going to say message is hello world
okay.
And again it's not happy because I haven't told it.
The type of message.
What's the type of message string okay.
So string is capitalised.
Integer is not capitalised.
We'll get on in a little while to why that
is.
For now don't worry about it.
And this is an advantage because then we can print
out whatever we right.
So we can send in different values.
different values for message, and it'll print it out.
Whereas if we just say hello, world, that's all that's
ever going to do.
Okay.
So built in data types very important in Java.
So there's quite a lot of them.
These are the ones you'll be using most often.
So characters are individual letters or symbols.
Individual symbols I guess which can be letters.
They can be blank space can be dollar signs and
that sort of stuff.
These are done in Java with single quotation marks.
Strings are sequences of characters and they're done with double
quotation marks.
Integers.
You know, integers are whole numbers.
, then floating point numbers are their type is double.
This is kind of I always find this quite annoying.
This is a hangover from the old days.
So the basic, , the so double has you can
have bigger numbers than double, and the basic one is
float.
And it used to be back in the day, ,
memory was a real issue.
You really don't want to use up a lot of
memory because machines don't have a lot of memory.
So you would only use float.
And then if you had a really big if you
really needed to, you'd use double.
And that means it's got double the storage space.
So you can get a double as much data into
a double as you can in float.
Nowadays, no one cares about memory at that level because
we've got way more memory.
So nobody ever uses float.
You just use double.
But if you're wondering why is it called double?
That's what it means.
So it's just decimal numbers.
Boolean is also something you'll use a lot, which is
truth values whether something is true or not okay.
So integer operations.
So we've had a look at plus but everything else
works in a way you'd expect minus multiplication division.
So we looked at integers division.
There's no fractional part in integer integer division because it's
only dealing with integers.
Integers can't have parts.
But if you're doing it with doubles of course doubles
have decimal parts.
And so it is.
You get the exact response rather than rounded up to
the nearest whole number.
The remainder.
We didn't look at that.
Let's have a look at that.
So we did.
Let's see.
What do we do.
Let's say int a equals five.
Int b equals two.
In c equals a divided by b.
Spaces in something that looks nice.
And we're going to print out c.
Okay.
So that gives us two because five divided by two
is 2.5.
And the integer part of that is two.
And then this is the remainder operation.
And a five remainder two is one.
If you remember your math that's because if you divide
it, if you keep dividing by two essentially two times
two is four.
And then there's there's one remainder between 5 and 4.
Okay.
Hopefully that makes sense.
Okay, so what happens?
Let's have a look if we change this.
So we've said this is so we haven't told it.
It's institute division.
It's interpreting it as integer division because all of the
components are integers.
So what happens if we make this instead of an
integer.
Let's make it a double okay.
So first of all it's not going to that
because I've told it that a is an integer.
And then I'm assigning a value that's not an integer.
So I have to change the type of a double
okay.
Now it doesn't this line because I'm saying c
is an integer.
, but I'm doing I'm not doing integer division here
because I've got a double coming in.
So that doesn't make sense either.
So I can change this to double.
And then when I do this division it'll tell me
2.5.
So even though B is still an integer A it's
got some of the data coming in is A is
a double.
So it will do double division.
So the one of the principles in Java is that
it does not want to throw away data.
Right.
So it does.
It never wants to convert a double into an integer
because you're losing data there.
Whereas if you convert an integer into a double, that's
okay.
You're not losing any data.
You're not using any information.
So it can just convert 2 to 2.0 and then
do double division.
Yeah.
Oh yeah.
Okay.
That's a good question.
So if this is an integer and I just put
this in here, but I've told it that C is
a double.
What's it going to do.
Let's have a look.
Okay.
So this is kind of interesting.
Actually what it does is it does.
It's being told here this is integer division because it's
not looking at C when it's doing the division it
evaluates on the right first.
Right.
So it's got two integers coming in.
It's doing integer division and the outcome is two.
But now I'm saying okay but C is actually a
double.
So it has to convert to an integer into a
double.
And that is 2.0.
So information is being lost there.
Well it's not being lost because these are both integers.
But yeah that's what happens.
It does.
this evaluates this first and then it converts it to
a double.
, okay.
Now, there are ways around here around this.
So say we're going to go back to this being
a double and we're going to make this an integer.
And it's really not happy about this.
Now generally if it's if it's complaining about stuff generally
it has good principles.
And if you're getting this you're oh yeah, okay,
I am losing data.
Thanks very much, Java.
I'm going to change that.
But sometimes there are there is a reason why you
really want this to be an integer, maybe, or for
whatever reason, you want to force it to be something
that isn't.
Naturally, you're allowed to do this.
This is called casting.
So what you do here is you say, right, here's
this division, whatever it is, and I want this to
be an integer.
I want an integer output for this.
Right.
So it's essentially saying do this division however you
and then make this into an integer.
And then I can assign it to something that is
an integer.
This is called casting.
And if we do this it's going to give us
an integer value.
It's going to give us two.
Even though A is a double it's throwing away that
data because I'm explicitly telling it that that's what I
wanted to do.
You won't come across as all this often, all that
often, but it is something that does come up.
So you need to know what this is about.
You have it on the right hand side to say
to do the casting before you do the assignment.
Okay.
So we've done the remainder to go back to all
these integer operations.
Of course, if you divide by zero that's a runtime
error because it's not possible to divide by zero.
So how you organise these things are there is the
precedence that Java uses is just the same as the
normal mathematical way you do preference.
However, I would strongly recommend against working out precedents and
doing it that way.
Put things in brackets.
If you want things to happen first, put them in
brackets.
Whether or not it would do that automatically.
Because if you use brackets to clearly show which bits
go together.
It's so much easier to read.
It's much easier to know what you're intending to do,
but it will work without using brackets if you get
the precedent right.
So what I would do here is I would put
three times five in brackets and then minus two to
show you do the three times first first, three times
five first and then you minus two.
It knows that anyway because that's that's bonus.
But it's just so much easier to read.
And you don't have to be thinking about this when
you're trying to interpret it.
Oh yeah.
We've got some practice, some examples here.
Okay.
The double I've mentioned that here are some expressions.
Yeah I don't think we need to go through those
right now.
Okay.
So we talked a little bit about converting.
This happens automatically if you're not losing precision.
Or it can always convert anything into a string.
And you can explicitly cast it if you want it
to be something that is naturally not.
So here we're rounding.
So this is an example of If we want to
round a decimal number to an integer and we can
cast that to an int.
Okay.
So if you want , right.
So if you want a floating point result from the
division, you have to make at least one of the
operands a double.
And it will happen anyway.
All right.
So let's just practice a little bit of that.
Whereas we've gone this is we can just think about
this.
Okay.
So here are some kind of arithmetic operators.
Which of these is going to have an output type
of double.
And you should be able to vote for multiple.
Also.
Whew.
As far as I can tell, does not have a
setting where you can hide people's results until a lot
of people have tried it, which means you can see
what everyone else is doing, which tends to massively bias
in favour of what most people want.
And then you want to be able Okay.
Maybe you can come up afterwards and show me how
to do that.
I used to do it on mentally tone.
It's much easier.
I don't really Root Club, but yeah, if somebody
knows how to do that, let me know because it's
much easier these things.
Okay, this is coming out pretty clearly.
, is five divided by two is a is this
number one, is this a double?
No, it's not because it's two integers coming in.
So it's going to be an integer coming out.
what about number two.
The same thing.
Two instances going in instead of coming out.
But we're then casting it to a double.
So correct.
That will be a double , five divided by 2.0.
One of the things coming in is a double.
So it's going to have a double coming out.
And here we've got the remainder.
These are both integers.
So this is an integer operation.
And also it doesn't really make any sense for a
remainder to have a two to be a double.
okay.
Okay.
So what is the output.
This is C we've got the character C and we're
multiplying it by ten.
What is the outcome of that going to be.
Okay, so most people, almost everyone is saying for type
mismatch error, okay, that is not the correct answer.
That is definitely the the one you should guess.
If you don't know what's going on here.
This is completely non-intuitive.
But just to show you what's happening here, let's try
this out.
, let's just do it in the print statement.
So we're going to do C character times ten okay.
And what is that going to provide.
It's going to provide.
So the answer to C times ten is 990 okay.
Does anyone have any idea what's going on there.
Yeah.
Yeah.
And it's multiplying that.
Exactly.
So this is about Ascii which I actually had up
in the last lecture and I don't have up now.
So ask you for those of you who don't know,
this is basically a way of assigning.
So every character has a numerical Miracle value.
So here you can see it's lowercase.
See this.
This value in Ascii is 99.
So what Java is doing here is it's saying oh
I know that all characters.
There is a way to convert those into integers.
So I'm just going to be helpful.
I see that this is possible with that conversion.
So it's converting this into an integer and then multiplying
it by another integer.
So the outcome is actually going to be an integer.
That's a bit.
That's actually something quite useful that you're going to use
later on.
But if you don't already know that you would never
guess that.
Okay.
Let's see.
000 okay.
Right on the left.
Wait.
So up to the to the to.
To this way.
Yeah.
No.
What?
Go to this.
Yeah.
Now go down.
Down that way.
Oh, okay.
Right.
Thanks.
Okay.
Sorry.
I'm really bad with the left and right.
Especially when it's on the screen.
I'm facing it the other way.
I'm just teaching my daughter to drive right now, and
it's such a night because I keep saying, okay, turn
left here, and then she's going.
I'm , no, no, this way, this way.
I'm , no, no, I didn't mean right.
It's really confusing.
And she gets very annoyed with me anyway.
Okay.
What about this one?
We've got some stuff going on here in a bracket.
Haven't actually got any brackets I just told you.
You really should.
.
What's going to happen here?
Okay, I've got 70.
I've got loads of responses.
Let's see what people are saying.
Most people are saying character.
Okay.
That's right.
Everything going on here is completely.
This is all integer stuff and integers we can translate
into characters.
So we're going to cast this to a character because
it knows how to do that.
okay.
So now here we've got a character.
We've got this is a more complicated thing going on
in here with some integers.
We've got a character.
We're dividing all this by all this thing, and then
we're doing a bit of multiplication.
So where is that going to leave us at the
end?
What kind of type is that going to lead to.
Okay.
Most people are saying double.
That is correct.
All of this is integer integer operations.
Then we convert x to an integer and this becomes
integer division.
Then we're multiplying it by a double.
So that means that this final operation up around here
is going to be interpreted as a double opera, as
an operation for doubles.
Okay.
Let's just see this quickly.
This is going to be an integer right.
Yeah.
Because this is all integer stuff.
Then we're then we're casting it to a double and
then we're recasting the double to an integer.
So we're going to end up with an integer okay.
Oh yes that's fine I'm going to leave this up.
So this is for questions.
You can start putting questions in.
But what I'm going to do now is I'm going
to go on to the next thing, which is loops.
Actually, sorry.
Let me just look at this.
So is there anything I want to say about this?
Okay.
So to go back to the very introductory stuff, ,
Java is imperative is a list of statements essentially that
goes step by steps and it's based on objects.
Objects carry state and they have behaviour.
And a lot of what we're going to do on
this course is try and get your head around what
that means to be object oriented.
Actually, in the first weeks, what we're doing is mostly
the basic structural stuff and not too much about objects.
And then we get onto the object orientation stuff later
on.
Some people find object orientation quite hard to get their
head around initially, but after a while you'll get very
used to it.
You have to have this main, main method in your
class.
, and I think everything else we've just been doing.
So you can look over that summary if you want,
but I think that's all covered.
Okay.
So now what we're going to look or look at
is conditionals and loops.
Okay.
This is very, very basic structures.
If you've done any coding, you've done much coding before.
This will be very, very familiar to you if you
haven't.
This is really important stuff to get your head around.
And nothing is happening in Java.
That's particularly different to happening in other languages.
The same kind of general ideas apply.
Okay.
So the control flow.
So we've already said it's imperative.
That means you do one statement and then another and
then another.
All in steps okay.
But sometimes these these steps that you do are not
just simply do this and then move on.
They're more , there's more stuff going on, which is
what happens with conditionals and loops.
Okay.
So this allows us to choreograph control flow so you
can go around do things more than once.
You can do things under certain conditions and do different
things under other conditions and so forth.
All right.
So let's go.
Let's do an if statement.
Where are my notes for this.
All right.
Let's get rid of all of this.
We don't need this anymore.
So we're just going to start off by saying very
simple.
If an if statement starts off with a condition that
you're checking.
So if X is less than y.
Then we open the curly braces and we say what
we want to do.
If x is less than y, we're just going to
print out that this is the case.
So we're going to say y is bigger than x
okay.
Oh I forgot my plus here.
I've got to tell a way to join this number
to this string.
So I've got to have my plus there.
And it's not very happy because I'm using x and
Y and I haven't declared them.
So I'm going to say x and y are integers
okay.
This is getting a little bit out of sync because
of I've chopping about okay.
Now let's see what happens.
Oh what's the problem here.
Oh the problem here is I'm trying to get it
to say whether two integers are bigger or not, but
I haven't told them what value those integers have.
So let's put some values in here actually.
So instead of doing that I'll do x.
What is it x equal Then ten.
Cool.
And why is 27 cool?
Okay, so now I'm getting a yellow thing here.
And the yellow thing, what is the yellow thing saying?
It says condition X less than y is always true,
right?
So I've given it fixed values for x and y.
And then I put in some code to see which
one is bigger.
Right.
I don't need to do that.
I can see which one is bigger.
This is fixed.
All right.
So normally when you're doing this you wouldn't be fixing
these values before you're checking.
These would be changing in different places or you'd be
passing them in right now I'm just going to fix
them in here because I'm just showing the for the
loop.
So let's run that.
So if it's got yellow objections it means it is
going to run it.
But it doesn't think it's that well written.
If it's got red objections it's not going to run
okay 27 is bigger than ten.
Awesome okay.
What happens if x is bigger X is now 30.
What happens is nothing, right.
Because I've just said if this is true then print
something out.
That's it.
If it's not true, I haven't said what to do.
There's nothing for it to do if this isn't true.
So often that's what we want to do.
Only do something under one condition.
And if that condition is not true, do nothing.
But quite often we want to say if something is
true, do a.
And if it's not true, do be right.
So what are we going to do?
If it is not true, then we're going to say
else we're going to print this out the other way
around.
And we're going to have X is bigger than Y.
Okay.
So now if we run that.
It's going to print out 30 is bigger than 27.
So whichever way around we're going to get the print.
We're going to get it to print out something.
That's true.
We haven't actually looked at the case where they're both
the same, but we won't be worrying about that right
now.
, okay.
So that is a bit oh my goodness.
Right.
Okay.
, by the way, people, I do tend to get
a lot of crazy nonsense in the questions.
I don't really mind people putting nonsense, particularly in the
word cloud.
If you want to put nonsense, whatever.
If you if you spam the QA thing with nonsense.
I can't actually see any actual questions in there, so
I would recommend not doing that too much.
That's kind of annoying for people who want actual answers.
Okay.
So this is all just stating what's true.
As usual, I will do this in live coding.
I think that's more useful, but the slides are there
for you to look through if you want.
Okay.
, and this is all exactly what we've done before.
So looking at some examples of this.
, if x is less than y, return x.
Otherwise return minus x.
This is an if statement you might want to put
in.
If you always want a positive number and you don't
know whether you're going to have it positive or negative.
What this one is doing.
Again, this would be really familiar if you've done some
coding because this is a traditional thing to do.
You're swapping the values around.
Have a look at that to see in detail if
you're not clear on how that's working.
, so these are just little examples.
It might be worth having a look through on your
own to figure out how you how you can do
it.
Maybe just try it out in Java.
, this this this is basic error checking.
So this isn't probably usually the way you'd want to
do error checking.
We'll we'll do error checking in a later lecture.
But it is sometimes quite useful to do this.
So say for example you're doing division.
And you know that you don't know what's going to
come in, but you know that it might be zero.
, what you can do, you can check whether it
is zero.
And then if it is, you don't try and do
the division.
You just do something else.
Maybe just print out an error message or something.
And if it because you don't want the whole program
to break, you want you want to pick up that
up sensibly.
So.
So an if statement is one way that you might
want to do that.
Okay.
So loops loops things keep on happening again and
again and again until a certain thing happens.
So let's program a while loop.
Okay.
So we'll get rid of this.
Okay.
So while so in while loops and for for loops
which we'll get into in a minute.
You generally you have an iterator and that the point
of an iterator is it's counting how many times you've
been through the loop, right?
And the iterator is usually just called.
I, , and with a while loop.
There's lots of ways you can do this.
We're very common to say, well, whilst the iterator is
less than a certain number, i.e. once a number of,
as long as the number of times you've been through
a loop is less than the total number of times
you want to go through the loop, you keep going.
So we're going to say whilst AI is less than
or equal to n, so n is some number we
will give it.
Then we do some stuff.
Now of course, as always we have to initially initially
initialise this.
So we're going to say I is an integer.
And you would normally want to start the iterator at
zero.
How many times have you already been through the loop
zero.
So that's standard.
Although in some circumstances you might want to do something
different.
And how many times do you want to go through
the loop?
This can be anything you .
How many times do we want to go through our
loop?
Ten times.
Fine.
So we're going to go through we're going to keep
going through until we've gone through ten times okay.
So what we're going to do is we're going to
do some, , we're going to do multiples.
We're going to print out all the powers of two.
That's what we're going to do this time.
So we need to be carrying data over between loops.
So we need to have something that is contained as
carrying the value of where we are so far.
So we're going to call this val val is an
integer.
And what's it going to start at.
Okay.
What would be a good starting value for this.
Yeah one.
Okay.
So sometimes you want that to be zero.
But we're doing powers of two.
Obviously if we're multiplying something that's starting a zero by
two we're never going to get anywhere.
So because it's multiplication we want it to start at
one.
All right.
So we're going to print out.
we're going to print out how many times we've
gone through the loop and the current value.
And I'm going to put a string in there with
just a space so that these aren't smushed together.
It'll be much easier to read.
This is where we are so far.
Okay.
So that's what we're doing in the loop, right?
So if we just run that, what's it going to
do?
right?
It's just going to keep going forever and it's going
to print out I0 and value is one.
These are just initial initial values because we're not actually
doing anything.
So of course we have to do the the sums.
So we need a new value.
And we're going to say value equals value times two.
Okay.
So again if you're used to coding reading the statement
is probably quite clear.
If you're not used to this way of doing things
that might look kind of weird right.
Because this is in maths we're used to this used
to this being an equal sign.
And what this is saying is something is equal to
twice itself, which makes no sense okay.
But that is not what it's doing in Java or
commonly in coding languages.
What this is doing is assigning values.
So as we saw before with the instant division, you
first of all evaluate the right hand side.
So what this is doing is saying right.
First of all evaluate this.
What is val.
Val is whatever we've got to so far.
So on the first round time round it's just going
to be one okay.
We're going to get this value from from wherever from
where it's stored the current value.
We're going to multiply it by two.
So in the first loop that's going to give us
a value of two.
And then we're going to give that value to whatever's
on the left hand side.
So the fact that these are the same it doesn't
matter.
They look the same, but they're actually not quite the
same because this is in the first time round.
And this is after we've done the operation.
Okay.
This will become really, really familiar to you.
It's a bit non-intuitive to begin with.
So there we're changing the value.
And now we have to let it know we have
to change the iterator because we're going through the loop.
We've been through the loop in extra time.
So we're going to say the iterator is now I
equals I plus one right.
Just add one to wherever we are.
And now let's run that.
And this is doing exactly what we want.
Here are this is how many times we've been around.
And here are all the powers of two.
Awesome.
And actually, because iteration is so common, there's a shortcut
you don't have to put I equals I plus one.
You can just put I plus plus it means exactly
the same.
And that will do exactly the same thing.
Okay.
Now what would happen.
So we've got these curly brackets here.
Right.
What happens if we take this out.
Let's run that and see.
Have a think what you think might happen.
Let's see.
Oh.
Okay.
So what is going to happen is what happened before
we put any of this other code in?
It's just printing.
It's doing the first line.
And the reason for that is that in Java, if
you don't have the curly braces, it just assumes that
the first line is the loop.
Everything else is outside the loop.
So it's interpreting this as if it's this.
Now if you're used to something Python, you might
be used to languages where indentation is actually meaningful.
And the language will say, well, look, this is all
indented.
So this is clearly all part of the loop.
That spacing is important.
It's not in Java.
It doesn't care about the indentation at all.
The indentation is not there for the interpretation by the
machine.
The indentation is there to make it human readable, so
it's easy for us to see what the loop is.
But Java does not care about that.
So you have to put in these curly braces.
And that's again this is the same sort of thing.
It's Java's much more much stricter than other languages, which
is kind of annoying but also potentially quite useful.
Okay.
So we'll quickly go on to four and then we're
going to stop for some questions.
There's a couple more things I want to do about
loops, but we can fit those in on the Monday
lecture.
But before loop let's look at the structure of a
for loop.
Okay.
So a for loop is a little bit different.
Now a for loop has a more complicated header but
makes things a bit simpler in other ways.
So first of all we initialise we we initialise the
iterator within the loop right.
So we start off with this into I equals zero.
That means we don't have to do it here.
Then we say what we would have in the while
loop.
How long are we doing it for I less than
or equal to n.
And then the third thing is how are we going
to change it on each loop.
Right.
I++.
And then obviously we don't also want to do that
within the loop.
So.
And if we run that we should see that's giving
us exactly the same.
So essentially the difference between a for loop and a
while loop is that the for loop is tidying these
things up a little bit.
It's putting it all in the header.
And it's clearer and more difficult to make mistakes.
So if you can use a for loop and don't
use a while loop.
Right.
Does anybody know when you might not be able to
do that.
And you might need to use a while loop.
Yeah.
Mhm.
Yeah.
When it's indefinite.
Right.
So here I know how many times I need to
go around.
Right.
I need to go around n times I can do
this n times so I can put this in here.
That's fine.
and so in the previous while loop, we didn't
need that to be a while.
It could be a for loop, but sometimes we don't
actually don't know how many times we're going to go
around.
Could we put the umbrella up when it starts raining?
I don't know when that's going to happen.
Right.
Or something can happen, you know, as soon as 20
people.
Yeah.
As soon as soon as something happens, there's Is unpredictable.
Then you do something.
Then you can't use a for loop.
You use a while loop.
But if you know how many times you're going to
go round.
Use a for loop.
Okay, so that's the main things I want to cover
I will.
There's, as I said, a couple of examples of that
that we'll do on on on Monday.
But let me just see if I can get anything
useful out of this.
I don't think there.
Are there any useful questions?
Okay.
If you have a useful question, put your hand up.
I will go through all of the questions and see
if there are sensible things and email people.
Squid game.
Oh my god, who's watching Squid Game?
I've just I watched the first episode and then I
was , oh God, I don't I don't know if
I've got the strength to watch this.
I'm now on the second one.
It's so good.
But it's it's so bleak.
, okay.
Why do we learn Java and not machine codes?
I mean, machine code is really, really difficult because it's
completely unintuitive.
You don't need to know machine code anymore.
So go and learn machine code if you want to.
Absolutely.
Fine.
But it's not necessary.
And it's really difficult.
Okay.
All right.
I think it's easier if I just, .
Oh.
Where can we find the PowerPoint slides?
So this is actually a useful question.
So the PowerPoint slides where I go through the where
all the content is.
Those are on open course.
Right.
So have I got open course up.
Yeah.
Here we go.
Open course.
So if you go to schedule.
So this is the the schedule is the overview telling
you what's going on each week.
If you then when you click on schedule you'll then
see all these detailed weeks popping up.
So if you click on that this was going to
give you the link to the lectures.
These will give you the lecture slides.
, and also the information you need for tutorials which
you haven't got yet.
But that's where you get those lecture slides from.
I don't put the woo clap slides up because it's
usually just , the questions.
Pictures of people's pets.
Maybe people would those somewhere they can access them.
If you have any ideas about the organisation, let me
know.
But in the meantime, that's the end for today.
Thank you so much.
Please go to lab sessions if you need help.
There's been loads of questions on Piazza.
Oh, thanks.
Thank you.
Thank you.
So there's lots of questions about on Piazza, about set
up.
If you're getting the answers you need from there.
Perfect.
But if that's if it's easier to just go to
lab sessions, get someone to help you.
See you on Monday.
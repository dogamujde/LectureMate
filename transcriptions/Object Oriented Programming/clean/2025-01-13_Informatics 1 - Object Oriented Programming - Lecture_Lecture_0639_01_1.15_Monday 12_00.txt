Too many spaces, so there's room for people to come
in who are late.
All right, so the red light is on.
That means we're recording so we can get started with
the lecture.
So welcome to Thrombi.
It's really great to see everyone.
I'm always quite excited at the beginning of this course
because I don't teach first semester, so I've not been
teaching since I'm from B last year.
So it's really nice just to see a whole bunch
of students and to start doing some, , well, I
hope it's going to be interesting stuff with you.
So I really this course.
, oh, we've got some more people coming in, so,
, it's very full in here.
You're going to have to find there are there are
seats available, but people might have to budge up.
If you're sitting next to an empty space, can you
budge up a bit?
So the empty spaces are on the end?
Yeah, there's some down here.
There's about three, I think, down here and a couple
there.
Okay.
This is going to be really cosy.
Well I'm really happy to see so many people here
in person, which isn't always the way.
Okay.
, okay.
If you're sitting next to an empty space, can you
put.
Oh, do you guys have got to see you?
You're good.
Yeah.
Any more empty seats?
You're looking for seats.
There's.
Okay.
There's a seat over here.
Thank you.
Oh, there's one there too.
Okay, so hopefully we won't get two more people coming
in.
, there should be enough spaces for everyone.
, yeah.
Anyway, so I'm excited to start this course.
I hope that everybody's had a really good break, and,
, is ready to feeling a bit energised and ready
to go.
Okay.
Can you put your hand up if you're near an
empty seat?
There's one down here.
Yeah, there's a few.
Okay.
Thanks.
, yeah.
So this is this is in from B.
So, , I to put word clouds up to
begin to see how people are feeling.
People are feeling locked in and they're feeling Kanya and
Sigma.
I don't really know any of those things mean, but,
.
Anyway, so normally in this we get a mix between
a quite an interesting insight into how people are actually
feeling and then all the , nonsense words that people
really enjoy putting in these sorts of things, which is
fine.
, okay.
So today is going to be a little bit of
a oh, no, actually, why don't we just start?
I just leave this up for now.
You can start voting on which I'm going to leave
my office out open.
You can vote on when you want the office to
be.
So it suits the most number of people.
But what we're going to be doing today is mostly
kind of add many stuff talking about how the course
is going to work, making sure that everybody's set up
with everything they need to be set up with.
, and can you put your hand up if you're
near an empty space?
There's one over there, actually.
Oh, yeah.
You're good.
, and make sure everybody's on the right track.
So there's a lot of moving parts in and from
B, there's also quite a lot of, , stuff you
need to have installed.
So how many people here have worked through the Getting
Started materials.
Put your hands up.
Okay.
Quite a few.
That's great, but quite a few haven't.
That's also completely fine.
So in order to do in front be, you need
to work through the Getting Started materials, which are available
on the course website.
So let's start off by having a look at the
course website and just getting you oriented.
So a lot of courses now we have two
different sites.
This is super annoying.
This is how we have to do it because we
want to make our materials available, but we're not allowed
to make learn available.
So we have to have a learn page with the
assessment in.
We can't put the assessment on open course because it's
too open.
But all the materials are on on open course.
So if you go to open course everybody should be
familiar with this.
This is where most this is mostly what we use.
But you will need to go to learn for assessment
primarily.
And also this has got the technical things.
And the the coursework planner.
You can get all the information on assessment here.
But most of the materials are on the open course
page.
So this tells you a little bit about what Thrombi
is all about.
Now the important thing that I want to share with
you is that this is about software engineering.
This is a kind of beginning to think about
how you code from a kind of more of a
software engineering point of view.
So, yeah, so it's not really a software engineering course,
but we're trying to develop those skills that are going
to help you improve in that way.
So it's all about coding.
It's all about learning to code.
But it's not just about hacking out code that works.
It's about learning how to write good code, and it's
about learning how to communicate about code.
And all of these things are really important.
, so there's a huge mix of experiences.
Some of you will have done advanced higher or or
A-level, maybe doing Java as part of that, and we'll
know most of what's in this course, probably not all
of it.
And I would still encourage you to stay focussed, if
that's you, because you might learn approaches and techniques that
you don't already know, but you may know a lot
of it.
Others of you haven't done any Java or any object
or object oriented programming.
Some of you have never done any coding at all
before last semester.
That's also common.
And then a lot of you in the middle.
So it's designed to suit all.
All of you obviously that's really difficult.
If you haven't done any coding before.
It is quite a steep learning curve.
You will have a lot to do and keeping up
to speed is really important with that.
If you've done a lot before, you might find this
quite slow moving and quite easy.
So that's kind of a nice, easy thing for you.
You can just kind of take your foot off the
accelerator a little bit, but do keep and do keep
in touch with the course and make sure you're paying
attention.
Okay.
So the learning objectives are about implementing object oriented programming.
But they're also demonstrating an awareness of good practice, being
able to communicate about code and so forth.
Anyway, here we are.
This is the course page.
You can read all of this.
The second page is the getting started materials.
So if you have not set up either your own
machine or a dice machine you want to work on
to have all the tools you need.
Go to this page.
Start working through it.
So this is going to be your first task.
You really should try to get this done this week.
Ideally, or at least by next week.
Hopefully the materials are quite self-explanatory.
So for those of you who've already done it, did
you find it okay?
Yeah.
Yeah.
Okay.
Some people have struggled with this, and if you're getting
stuck with it, please don't just sit around being stuck
with it.
Go along to a lab session.
We have lab sessions every day except Thursdays.
We've got two on Wednesdays, so just go along and
the demonstrators will be able to help you do this.
Or put questions on Piazza.
Don't just get stuck with it.
So that's the first thing you need to do.
So this has got everything on it.
So the materials the easiest place to go for that
is the schedule.
If you click on the schedule then you get all
the different weeks down here.
So this will tell you what's going on in lectures,
what's happening with tutorials, what labs you're supposed to be
doing and what's going on with assessment.
, so we're already starting on assessment, but so far
the assessment is fairly easy.
The bigger assessments are not going to kick in until
week five.
I think assessment one is, , released in week.
Oh.
Sorry.
No.
Week three.
Week three.
Release.
Assessment one.
But at the moment we've got the quizzes starting.
So we do quizzes every week.
There's ten quizzes across the whole semester.
One of these is the Getting Starter quiz.
And this is super easy if you've done the installation,
because all you need to do is check to say
that you've done the installation and you already get 2%
of the course.
So that's a really good place to start getting some
marks.
And then every week we have a quiz which is
really lightweight.
It shouldn't take you very long.
It's really just checking that you've accessed the lecture materials.
You have a kind of idea of where we are,
you know, the basic core things that we're trying to
convey in the lectures.
And then so all of these weekly quizzes together are
worth 20%.
If you get over 80%, you get 2%.
If you get between 50 and 79, you get 1%.
That sounds really demanding, but these should not be difficult
questions.
It's just a matter of checking with the slides and
then the assessment.
That's where we're we're checking your skills and helping you
learn in a bit more detail.
So you'll find all of this on the on the
open course under the schedule.
If you click on the individual week, then you can
see this is where you can get the slides from.
, and then there's tabs for assessment.
In the tutorials you can get all the tutorial material.
We put solutions up here as you go through.
So in retrospect you can look at the solutions.
But we don't release those until the tutorial itself.
so that's where you find those things.
And then on learn.
, so how many people put your hands up if
you've joined Piazza already?
Okay.
Quite a lot of you.
That's great.
I really would all of you to be on
Piazza.
Piazza is such a useful source of information.
So, by the way, can you put your hands up
if you've got if you're next to an empty space
again?
Okay, so there's a few more spaces.
If you guys want to sit down, you can find
there are seats in here.
I don't think I've ever taught in quite such a
full lecture room.
Maybe we should have had the Spill-over room, but that
is also really annoying.
, so to join Piazza, you must go through and
click on Piazza.
That will take you to Piazza.
After that, there's a link on Open Course.
You can go through that as well, but you can
only sign up initially through through the learn web page.
So please join Piazza if you have any questions you
can ask them.
But you can also see the questions other people are
asking and how they're helping each other solve those problems.
And that's a really, really useful part of learning.
So we have Tas who are on Piazza a lot,
but they usually hang back and don't answer questions immediately
because it's actually really useful for you guys to answer
each other's questions.
And people get a lot of learning that done that
way.
So we'll have we have Tas on every day or
every other day.
So questions won't be left hanging.
But do jump in and and answer other people's questions.
So this year we are allowing anonymous submissions.
Usually we just we allow it so you can be
anonymous to other students but not to staff.
But I know that some people feel really that makes
people hesitant about putting questions on.
So we've decided to I've decided that I want to
allow you to do it anonymously if you want to.
That means no bad behaviour.
We have very occasionally in the past had people put
really inappropriate things on Piazza and that sort of thing.
And that's why people are anxious about it being completely
anonymous.
But I don't think that's going to happen.
I think you can all be relied on to behave
in a responsible way.
So please behave responsibly.
And this is the assessment tab.
So when you're doing any assessment this is where you
have to go.
And you can see already the weekly quizzes are up
there.
Oh sorry.
This is and this is not what it looks
for you.
I should have put in student preview.
So for you there's just just loads less junk.
So if you go to assessment you'll be able to
see the weekly quizzes.
You can click on that.
You can start doing the Getting Started quiz.
I know a lot of you have already done that,
and the week one quiz is going to be available
after this lecture, possibly not immediately after this lecture, because
we're just kind of getting up to speed.
But but soon.
, all right.
So let me go to the introductory slides.
I've got sort of two different lectures we're doing today.
Probably should have just started straight off with this.
Okay.
so this is who we are.
I've already talked for about ten minutes before even introducing
myself.
So I'm Fiona.
I'm the course organiser and I'm also a lecturer.
I will do most of the lectures.
I've been teaching this course for.
This is my fifth year.
Now I really this course.
I really working with first year students.
One of my main research interests is transition from school
to university, which is actually kind of a hard transition.
It's such a different environment from school to uni.
So we do what we can to kind of scaffold
that change a bit, but I think it's still really
quite tough.
And you probably a lot of you will have found
that last semester and maybe continuing to find that it
is really demanding you're treated in such a different way
at university.
So my research historically, my research was in AI and
data integration, but I do more and more in computing
education.
So I'm really interested these days and how people learn
computing, how we can make inclusive environments in computing and
make it a bit more accessible.
So the other two lectures we have on Inf1 are
James and Adriana, and they are both doing the assessment.
So they're going to be setting the assignments that you
do, and they will.
You may not meet them face to face, but you
will certainly be hearing from them later on as we
come to that.
And then we have two course Tas.
, Crystal.
So those of you who are not Scottish may that
may be a bit counterintuitive how you pronounce the surname,
but the z is not pronounced.
It's DL and colt and butter.
So they're both fantastic.
Colt.
And you'll see on Piazza a lot, , Chris is
doing more of the assessment stuff.
So they're always around to, to help you out.
So that's the team.
All right.
This is my dog.
, I always say I really pets.
I know students really love pets as well.
When I sometimes teach remotely and the dog ever comes
in, everybody gets really excited about my dog.
So I put up a picture of my dog.
But what I'd really love to have is pictures of
other people's pets.
So I usually do a pet of the lecture.
So if anybody has got a pet at home that
you're kind of missing, , and would to show
everyone, whether it's a dog or a gerbil or a
goldfish or whatever, or it doesn't even have to be
your own pet, just any animal you're fond of.
Just email me.
And every.
Every lecture.
I put up at least one pet.
But if you email it, it's not a competition.
I'm not choosing the cutest pet.
If you email me a picture of your pet, I
will put it up at least at some stage through
the course.
So, .
So I always to see at the beginning of
the lecture because I love to see other people's pets.
, okay.
So I've already covered a lot of this.
So this is a this is a really mixed group
of students, not in terms of ability.
Everybody here is very, very talented.
It's really hard to get a place in informatics.
Whatever your background, whatever you're from, if you've got a
place in informatics, it's because you have really good potential,
but you have very wide range of abilities of of
experience, and that can make it feel if you're someone
who hasn't done a lot, it can make you feel
that you're not very good at this, and you're not
going to learn this because you're mixing with people who've
been doing this for years.
And that's that's a false impression.
But it's really easy to feel that.
So just try and always remind yourself that it's because
of the mixed experience.
It's not because of mixed ability.
And this this evens out over time during a degree.
agree.
So why are we doing object oriented programming?
It's a really common programming paradigm.
A lot of languages are object oriented and Java is
a really popular language.
It's well supported.
, it's well, we'll see.
We'll see as we go along.
Whether you Java or not, there's always a lot
of questions about what we should be teaching in first
year.
And we're actually really we're rethinking first year now and
we might change the language.
I always used to think we should move away from
Java, but now I feel more and more.
I think actually Java is quite a good learning language.
So okay, so this I'm just going to put I
don't want you to look at this in much detail,
but I've already been talking a bit about what it's
for people who haven't programmed.
So what is this?
This is a graph of the sort of concepts you
will learn in an introductory programming course.
Right.
This is complex.
There's tons of stuff on it.
If you know, if you already know programming and you
look at this, you'd be , yeah, I mean, these
are kind of I know all these all these concepts
are really obvious.
It's really this is really clear because you already have
this conceptualised in your brain.
That is why it shouldn't be too challenging for you
to to do this course if you've not done programming
or not done a lot of programming or not done
in this paradigm of programming, you're kind of constructing this
as you go along, so you shouldn't worry about it.
This will come with practice.
It's about learning.
The concepts of this kind of just falls into place
naturally.
Don't anybody, please don't ever try and memorise this, but
just be aware that conceptually, there's a lot of stuff
going on when you're programming.
And that's why introductory programming can be quite challenging to
begin with.
You're getting all these things in place.
Okay.
So this is about this is a practical course.
This is about learning how to do good code.
Understanding and knowing stuff is only useful to the extent
that you can put it into practice.
Yeah, you definitely need to understand the concepts you need
to be.
You need to know stuff, but if you can't put
that into practice, it's not really very helpful and you're
not going to get a great mark in the course.
So practice is absolutely the core of this.
That means your tutorial exercises.
It means your lab exercises.
That is where you get the practice in.
So keep practising.
That is what makes you a good programmer.
That's how you learn.
these complicated concepts.
They just come naturally as you practice them.
So we want good.
What is the difference in good code and function in
code?
We'll talk about this quite a lot.
So this is all about how easy it is to
reuse, how easy it is for other people to have
a look at it and understand what you're doing.
There's a lot of bad code out there.
Somebody hacked something together and it works great.
But if it can't be reused, if you can't go
back to it in a few months and extend it
or whatever, which, by the way, you'll feel when you're
writing code, it's so familiar and you think you know
it really well.
If you if you go away from it, even for
a couple of weeks, you come back to it and
you're , oh God, what was I doing here?
If you've written it well, you will know.
If you've written it badly.
It'll just be really difficult.
So it's all about how you write good code.
And if you want a career that involves coding at
all, being able to write good code is very important.
Don't make more bad code.
, yeah.
We're not.
It's not about hacking.
It's about design.
, okay, so you probably know all of this.
We have the two lectures a week.
They're all in here.
One tutorial a week.
They haven't done the allocations yet, I don't think.
This will be based largely in academic families influencers.
So hopefully the groups will be fairly similar that we
have different sizes, so it won't be quite the same.
But you should be with a lot of familiar people.
, the approach is very different to anyone.
A you don't need to prepare for tutorials, you do
it in the tutorial.
Tutorials are not assessed, they are compulsory.
We do take attendance.
If you're not attending, it'll be followed up.
If you're on certain kinds of visas, that's a real
problem for you.
If you're not, you know it's less of a problem,
but it is a real problem for the course because
this is absolutely fundamental to tutorials.
So please go to the tutorials.
, a lot of them are about working with other
people.
We have pair programming that sort of stuff, discussing things
in groups.
, and that kind of interaction is a really important
part of exactly everything I've been talking about, the kind
of software engineering side of things.
We also have lab exercises.
These are also not assessed, and that means that people
tend not to do them.
But this is where you get your practice in.
If you want to practice.
If you want to improve your skills.
Do the lab exercises.
We have the drop in labs five times a week.
, they don't exactly correspond.
You don't have to be going there to do your
lab exercises.
You don't have to only ask about lab exercises during
the lab sessions.
You can ask about any aspect of the course, but
the demonstrators in the labs will be particularly prepared to
help with the lab exercises.
If you've got questions about tutorials.
Ask a tutor.
But if you've got general questions about the course, well,
I'll probably put them on Piazza.
But you can also ask the demonstrators.
So the labs are in 606, , which is an
open lab.
I've had complaints in the past from students that they
went along and there were no demonstrators there.
That I don't think has ever actually been true, but
sometimes it's really hard to see who the demonstrators are.
So you might think there's no demonstrators.
So I've told them that they need to wear badges.
So I've got to actually on my way back, I've
got to go and pick up some stickers so that
they can write their name on and then say that
there are demonstrators.
So they should be really easy to see.
, if you're having problems, please let me know and
I will harass them about doing that.
And then you have your weekly quizzes.
You can earn badges, you earn a mastery badge if
you get 80% sorry.
Yeah, 80% or over, which is your 2% of grades
or making Progress badge if you get over 50.
Some people love badges.
I'm I'm such a sucker for gamification.
I always love to , collect things.
Some people don't care, but you also get your point.
So that's why we're doing that.
So also I put survey questions onto the weekly quizzes
just to touch in to see how people are feeling
about things, to see how everything's going.
Obviously, those survey questions are not assessed.
I mean, they're not associated with marks, but it's really,
really helpful way for me to kind of keep in
touch.
One of the things I do really large class
teaching, but it means it's really difficult to, you know,
I don't get to know you personally.
Really.
, so it's a really good way for me to
get a feel for how the class is feeling.
Obviously the class reps are really useful for that as
well.
If you come up, please, if you have any thoughts
or anything to say, please come up and talk to
me afterwards.
Please come to my office hour.
But in general, it's hard to get to know everyone,
so that's really useful.
But, but so I do my office out in 606
because that's where you guys are mostly hanging out.
And I always bring biscuits.
So please come and talk to me sometimes.
I have lots of people coming to talk to me,
and sometimes when they do, do come along.
And also, just from a sort of incentivization point of
view, often people are wanting references for if you're applying
for an internship or whatever.
And that's really hard when people don't know you that
well, which is usually the case in first because you're
in big classes.
So the more you interact with staff, the easier it
is to to get those kind of personalised references that
really help.
And I'll be able to do that if I know
you, if you just , well, I was in your
class.
, I can't really say anything beyond looking at your
grades.
So always look for those opportunities to build connections.
It's really useful.
And also Piazza is really useful for saying anything you
want to say about the course.
Okay, Cabe, we've had loads of complaints from people about
Cabe and I.
Totally.
I'm totally with you on this.
I kind of really annoys me that I have to
come out to Cabe to teach.
I know that it's drawbacks.
So we've had complaints that there's nowhere to sit.
There's not enough seating in here.
You guys are sitting on the floor if you've got
in between lectures and it's not great.
, so we are the college really wants us to
teach out here so that all the science engineering students,
students are together.
We're I hope that we'll be able to move back
to Central Area next year.
I don't know if that's possible, but we're kind of
hoping working on it.
That's not going to help you this year, though.
So in the meantime, I've decided that lectures are going
to be live streamed.
Normally, I don't do this because I really think there's
a lot of value in actually coming along.
You'll see it's to some extent interactive.
I think being here is really useful, but at the
same time, I don't want to put the burden on
people if you're spending hours commuting or whatever.
All the lectures are recorded anyway, but usually they're only
available later on, whereas now they are being live streamed
so that you don't have to come to QUB if
you don't want to.
But do still try and make the effort if you
can, but also if you're hanging out, there's nowhere to
sit.
Maybe try Jnb maybe try merkerson house.
I don't know if any of you have tried those.
So we are we're there in the nucleus where the
star is.
So, Jacob, see, the little diagonal bit is, , the
main entrance.
If you go straight across, you get to Jacob.
There's a cafe there, and there's quite a lot of
seating or merkerson houses just where the buses come in
on West Main roads.
And there's also a cafe and quite a bit of
seating and some little side rooms you can go into
up there as well.
So if you're looking for somewhere to hang out, try
that.
Okay, officer, we have a poll going on.
How have people voted in the poll?
Let me see.
Mhm.
Okay.
It's quite tied.
Okay.
So I will select from these whichever is I think
it's just Monday afternoon is the best one.
Okay.
So I will email to confirm that and let
you know.
Oh and now I'll do the biscuit vote.
What biscuit should I bring.
So I bring along biscuits for anyone who comes.
But I also leave them in the kitchen there.
So if you have a favourite biscuit just go ahead
and vote.
Okay, so I think I've really gone through all of
this.
Lectures are really important.
I try and do a lot of live coding.
Live coding is really hard.
So even when I'm doing super basic things, I'm constantly
making mistakes.
But this is a really good opportunity for you to
help debugging.
, okay.
All right.
Settle down.
I assume you're all talking about biscuits, but think about
that later.
You can vote every week on biscuits.
You don't need to get your favourite biscuit in this
week.
Don't worry.
, so these are the lab sessions.
You should have these all in your timetable.
These are drop in.
Just go to anyone.
Go as often as you .
, they're often not that well attended, which seems a
real waste to me because it's a really good opportunity
to work through stuff you're doing.
If you're not 100% sure of anything, just work through
it with one of the demonstrators.
They're paid to help you so you can get 1
to 1 tutoring quite often, because if it's not that
full, they can just be there to help you.
So do go along.
Okay, so let me show you which one, what the
lab exercises are .
Oh Ooh, raisin.
Interesting.
So you can get.
So you get to the lab exercises from this lab
site on Open Course.
I don't know what's going on there, but if you
follow this link, it will take you to the right
place.
Okay.
So you can see every week you have a mix
of let's say week three overview.
So there's a mix between warm up core and optional.
So.
So in week three for example there's three warm up
three core and one optional.
So I would strongly recommend that every week you do
the warm up, which is stuff that should be familiar
to you from past weeks.
The core which is really what we're learning at the
moment.
Try and do those.
If you have time to do the optional great, that's
less of a priority.
But these warm up and core exercises should really be
things you prioritise about this course.
There's a lot of different aspects to this course and
people sometimes wonder what to prioritise.
I would absolutely prioritise warm up and core lab exercises.
We also have down here advanced exercises.
These are not part of the course.
These are not really so connected with lectures.
These are beyond what we're doing in class.
These are just they're if you've done tons of Java,
you want to do something interesting.
Here's something for you to try.
If you're not super experienced with Java, just ignore
all of that.
Okay?
, yeah.
Tutorials, cooperative learning, lots of debugging and testing and stuff.
I think we've done all of this and you'll be
assigned so they come later in the week.
That is because.
So we have , I think six.
They're not every week.
So they start in week three and they finish in
week ten.
, I think there's six tutorials that are kind of
core material.
We also have tutorials that focus on assessment.
So there'll be preparation for assessments that are coming up.
But also the second assignment is in two parts.
You do the first bit and then you get feedback.
You go it's marked for you although there's no grades
associated with it.
And then in a tutorial we'll go through that and
then you improve it for resubmission.
So I'll talk about that in here at the time.
So we've got three pieces of coursework starting in week
320%, 20% and 40%.
So although it's 100% coursework, the final piece of assessment
is during the exam period.
And that is because we used to do it all
in a semester.
And it was just so intense.
It was really ridiculous.
We've dropped a little bit of the assessment.
So the assignment three is now shorter.
And that is because it was just too intense.
We got a lot of feedback from students that there
was just too much assessment during the course.
I think it's really important that it's not too overwhelming.
So we've dropped that a little bit.
So hopefully you'll find it a bit more manageable.
And then we have the continuous assessment and the weekly
quizzes, which is worth up to 20%.
And the weekly quizzes are released on the Monday after
the first lecture of the week.
So in week one, we released the week one quiz
today, and then you have the whole of that week
and the next week to do it.
So a week one quiz is due lunchtime on Friday
in week two.
So for example, the week six quiz is released Monday
week six and it's due Friday week seven.
Okay, so I would definitely recommend doing it the week
that it's for.
After the lecture you'll remember it easier more easily.
But if for some reason you don't have time or
you're away, or you're not feeling well or whatever, you
have that week's grace.
They really should not be difficult or time consuming or
stressful.
Okay, so how do you do well in this course?
So you will see on the open course page, I
have given some suggestions about how much how you should
allow allocate your time.
, you don't have to stick to this, but I
think you hopefully will find it quite helpful.
, what did I say?
Tending lectures.
Really important.
Whether that's in person or online, in person, preferably attending
tutorial, working on your lab exercises, reading set texts.
I put 1.5 hours.
Actually, I might change that.
That seems way too much for reading set text because
as I said, reading is you need to know stuff,
and sometimes it's useful to read different explanations of what
you've got in lectures.
But practice is a really important stuff.
So have a look at those hours if you're doing
something completely different to those hours, maybe think about whether
you've got the balance right.
So do not work really long hours.
some lecturers are really encouraging to work very long
hours.
I don't think that's a good idea.
Right.
This is your first year at uni.
You should be having a good time.
There's lots of other things to do.
You should be joining clubs and societies if you're into
that sort of thing, or doing whatever it is that
you're interested in, you also should be having plenty of
rest.
It's really important that you get that balance right.
It can be really tempting just to well, for some
of you, I never really have this problem.
I'm good at work life balance because I really
having time off.
But some people, you know, do get really into it.
I just really want to do a bit better.
I'm going to work more hours.
Overall.
That's really unhelpful.
This is a you know, you're here for four years.
If you work really intensely, you're going to burn yourself
out and you're not going to enjoy it.
So don't do that.
And it's okay.
You know, you don't have to do perfectly in everything.
You don't have to get a perfect grade in the
course.
It doesn't matter if things slip a little bit.
I mean, yes, keep keep focussed on the work you
have to do, but just don't give yourself a hard
time.
Sometimes you're going to get behind.
Maybe you've been ill or something's happened to you about
to go away.
Or maybe you've just been, , not focusing or doing
other things.
That's okay.
Don't stress.
It's really important if you get behind.
Take steps to get up to speed.
Go along to the lab sessions.
Talk to me.
Come along to my office hours.
Think about.
So what often happens is that people get behind and
then they're, , embarrassed about it.
And they feel I can't go because I haven't
even done anything since week one, and they'll think I'm
an idiot and whatever.
We're here to help you.
So if you get behind, just get the support you
need.
The support you need is there.
Just make sure you access it.
, and if you're worried about it, just practice.
Get that practice in.
And this is about laying the foundations for the future.
It's not about getting 100%.
Now, those of you who've been in Scottish school system
and the English school system and probably a lot of
other school systems, you're so trained to the grade my
daughter is doing.
She's an S6 now.
That's her final year.
And it's kind of amazing to me how absolutely focus
everything she does on is on getting that extra point.
Phrasing things exactly right.
So the examining board is going to give the mark.
Okay.
That's not what we're doing here.
We're doing this is about learning.
Nobody's ever going to really care about your first year
grade.
If you if you want to do a year abroad,
maybe it's a little bit more pressure.
But generally the grading first is not that important.
It's not part of your overall degree.
It's about getting the learning in right.
So don't obsess about getting every mark.
Think about are you getting underlining principles?
And by the way, , oh, actually I'm going to
talk about AI in the next lecture.
, I haven't got anything that.
Yeah.
Anyway, so.
So the more you get other people, including automated things,
to do the work for you, the easier it is
to get good grades, but the less you're laying the
foundations for the future.
So you're going to get into second year.
You're developing really important skills here.
And if you shortcut that, you're going to really struggle
later on.
So think of this as about laying the foundations for
your future learning.
Okay.
So how do you know if you're doing well, if
you're getting really good grades and everything and you're not
cheating or you're not getting too much assistance where that's
not right, then that's great.
You're doing well.
But if you're starting from without any experience, you're not.
You're very unlikely to be getting amongst the highest grades.
That doesn't mean it's not going well if you're laying
the foundations, if you're learning more, if you're getting, say,
a poorer grade, but understanding afterwards why that happened and
how you can improve.
This is all good.
This is what this course is for.
, okay.
Bla bla bla.
So just remember again the marking criteria may be a
little bit used to this after semester one, but it's
really different to what most of you will be used
to in schools where if you're a very strong student,
you're probably expecting to get 80s and 90s.
Everything you need is not really set up that.
It's set up so that anything over 70 is considered
excellent.
And if you're coming at this without any program experience
and you're getting in the 60s, that's a really, really
good effort.
So you have to adjust your, , expectations a little
bit.
Having said that, we do get a lot of very
high grades in that course.
And that's because a lot of this is very familiar
to the people who've done it already.
, uncommon grade.
Yeah.
So Inf1 is a core course.
You cannot proceed to second year unless you pass in
from B.
That means you have to get 40% overall to pass.
If you don't do that in during the semester with
the with the assessments, there is a reset in the
summer, which is probably going to be a take home
exam.
, but you must pass this to go into sorry
if you're an informatics student, by the way.
If you're not, if you're in a different school, it's
a little bit different.
But for an informatics student you have to pass it
to progress.
Yeah.
Okay.
So we'll talk about that.
And this is okay.
So if you need help these are all the people
go to Piazza.
All these things you can see these on the slides.
I've already talked about this, but also there's a lot
of really helpful stuff.
Comp SoC and hoppers, if you're engaged in those communities
that can be really helpful in pals is really helpful.
Has anybody.
Okay.
Hands up here if you've ever engaged with him for
pals.
Oh, okay.
Hardly anybody.
That's a real shame because they're doing really useful stuff.
I'll get in and talk about what they're doing.
This is really useful stuff.
I would really recommend doing this.
Okay, so I think that is everything I want to
say about the logistics.
Let me see.
Where are we with biscuits.
Out.
What is even.
What does that even mean.
And that's just that seems really generic.
That's not a specific kind of biscuit.
I can get some biscuits without it.
I'm quite tempted to just go for Jammie Dodgers.
Everyone loves the Jammy Dodger.
, okay.
Right.
Okay.
So what are we doing?
We've got about just under 20 minutes.
So now we're going to actually start the course.
, we may not get through the whole lecture.
That's quite normal in the first lecture, but because I
think it is really important to give the groundwork, I
really want everyone to be on the same page with
what this course is about and how you have to
fit everything together.
If anything I've said is unclear.
There'll be a Q&A at the end.
Whew.
Which we have to use these days is really annoying
for Q&A.
It's not as good as the mental metre, which I
used to use, but there is an opportunity for that.
Come and talk to me afterwards.
Put questions on Piazza.
All right, so let's get started.
So put your hands up.
How many people have programmed in Java before?
Okay, so maybe a third.
How many people have done any sort of object oriented
programming, including Python and stuff?
Okay, so that's maybe more could be two thirds,
but there's still a lot of people who haven't.
Fine.
Okay.
So these are , oh, that's weird.
Why is it displaying that?
Oh, that's because I'm in tech shop.
Sorry.
I want to do it from tech shop.
It's.
All right.
Settle down.
Time to start listening.
Oh, maybe.
But what?
What's going on?
Why is that blank?
Okay.
Oh.
Why is it going back when I put it in
full screen mode?
What's that about?
All right.
No worries.
We'll do it.
Not in full screen mode.
Sorry about that.
I have no idea what's going on there.
That's very weird.
Okay, let's just maximise it and do it this.
All right.
So in from B is a course that we've taught
for many years.
It's been we've been refined and tweaked and, and altered
over the years to incorporate best practice and different approaches.
But basically teaching Java as a fundamental language as an
entry language is is a is a thing people have
been doing for a long time, and it's still a
thing.
A lot of people are doing I've actually been recently.
I've been in the States last semester and I visited
a lot of universities, talked about first year teaching, and
Java is pretty common.
A lot of people use Python, use Python, a lot
of people use Java.
These are probably the two most common languages.
I also found somewhere else that used Haskell, which I
was quite surprised about.
But there is, I think it was.
Was it Stanford or Berkeley?
Somebody else is using Haskell.
Anyway, Java is a is a good starting language.
I don't know what is going on with Acrobat.
Okay.
Let me just kill Acrobat and try and open it
again.
Okay.
Go away.
All right.
So Java is an imperative language.
That means imperative is about you give something.
A list of things to do, and it goes through
the list and it does it.
So a lot of things we do in everyday life
are imperative.
For example, cooking, cooking recipes are usually imperative.
They'll have a list of things to do and you
go through in the right order.
If you try and do things out of order, well,
sometimes it's fine actually, but generally it's set up so
that you do things in the right order and that
can be quite important.
So see processing step by step.
Now in object oriented programming it's all based around objects.
And objects live in classes.
So we're thinking when the the mindset of object oriented
programming is thinking about what sort of things exist in
the world, right.
So that might be we might be talking about different
kinds of students.
We might be talking about physical things.
These are objects.
And object oriented programming is all about how objects interact
with one another.
And objects are organised into classes and objects.
Do what we carry states.
That means they remember things about themselves.
So they Day.
So?
So they they know where you've got to.
If you're going through a recipe there will know.
Okay.
Actually this is not a very clear explanation.
So an object knows.
For example, if an object is a car, it will
know its own speed.
Or maybe it'll know whether its you know its own
colour.
It will know the state that it's in.
So objects are able to carry state.
, okay.
So the idea is that the program is structured
the real world into objects, which are organised into classes
of things that are the same kind of things.
So they store data about themselves.
, they can they have behaviour, which means they can
do things in response to messages.
So you can send the message to an object and
it'll carry out certain behaviour.
They also have identity.
That means that you can have two objects that have
exactly the same state, but they are different objects and
they can be treated differently.
Now, all of this might seem a little unclear if
you don't.
If you've never done this before.
But don't worry, this will.
We'll be going over this.
We'll be seeing lots of examples of this.
This will become much more familiar.
So state behaviour and identity.
These are the three things about objects.
But they don't have to.
They might not have any state.
They might not have any behaviour that might be empty.
There might be nothing they can actually do.
But these are all things you can associate with objects.
And objects are always oriented in classes.
Okay.
So let's start off.
So I'm going to start off by okay.
So let me just talk about okay.
So right creating a new class.
So in Java code sits inside a class.
So you'll be doing a lot of creating classes.
Classes have names.
It's a convention that they use CamelCase.
So they start with a capital letter.
And every new word has a capital letter.
It's not it's not going to force you to do
it.
But you always should do it that.
And it goes into its own file.
Usually as you get much more complex, you'll find that's
not always true.
But from the point of view of this class and
of course, and mostly what you're doing.
Each class has a file of its own and it
ends in Java.
So I'm going to start using Visual Studio Code instead
of .
So mostly we're going to be using IntelliJ.
If you've done the Getting Started materials then you will
be familiar with IntelliJ.
let's do so I'm going to do a new
file.
I'm going to call it Hello world.
So you see I'm using CamelCase here with my capital
H and my capital W.
And I'm going to call it Java okay.
And I'm going to put that in.
, let's just I'll just save it in here.
That's fine.
Okay.
So.
I've got to start off.
So I'm going to start off this is, this is
the class file.
So I'm going to call it a class.
And the name of the class is hello world.
And it should be the same.
Generally the convention is that the name of the class
is going to be the same as the name of
the file you've stored it in, and I have my
curly braces now Also, when I declare a class, I
have to say how accessible it is.
So for now, I'm going to put public.
We'll look at what that means later on.
Now all classes have to have a main message main
method.
So you usually always start off defining a class by
defining the main method.
So you have to call it main.
And then main methods always take in an array of
strings.
That's called args.
So this is what's coming into the method.
And again there's certain things we have to declare about
a method.
And don't worry about the details.
We'll get on to this later.
But I'm going to say this is public.
Anyone can see it.
It's static.
We'll talk about what that means later.
And then I have to say what sort of thing
is this method going to return?
So what I want to do with Hello World is
I just want to print out a statement.
I don't want to return anything to the program.
I just want to print it out and stop.
So I don't want anything to be returned.
So I'm going to put void in here.
And then I'm going to open my curly braces and
print.
And in Java printing is System.out.println.
Learn and it's.
I'm going to put a string.
So in Java you always put strings and double braces.
Sorry.
Not double braces.
Double quotation marks I'm going to say hello world okay.
And statements in Java always end in a semicolon.
So unless I've got a typo in that, which is
very common when I'm doing when you're doing live coding,
it's almost impossible not to get loads of typos.
So let me see.
It's a hello world.
Okay, so you can see here I've got this hello
world Java.
So Java is a compiled language right?
So how many people put your hands up if you're
familiar with what it means to be a compiled language
okay.
So lots of people but a lot of people aren't.
So what this means is it takes something that's more
or less machine readable.
So you can see what I've written here.
Sorry, more or less human readable.
This is written in in stuff that's very accessible to
humans, and it turns it into something that's machine readable.
That's the first step.
It will first compile it.
And then once you have the compiled code, you can
run it.
So to compile it I need to say it's Java.
C is a command and I put hello world Java.
Okay, so what's it saying?
Can't find some stupid typo.
Okay.
Can anybody debug this for me?
What have I done?
I don't know what I've done.
Oh, yeah.
Thanks.
It's not strings, it's string.
Thank you very much.
Is that going to help?
Okay, great.
So we do a lot of live debugging because it's
really it's just even typing your name when loads of
people are watching you is really difficult.
And however many times I practice I'm always , okay,
so we've compiled it.
Now if we see what we've got, we've got this
hello world class.
And we've also got Hello World Java.
So I wrote the Hello World Java.
Hello world class has appeared when I compiled it.
So if we look at Hello World Java okay.
That's just what we, what we typed.
I don't know if you can even see this.
This is maybe too small, but if we look at
what's in.
Hello world class.
This is a binary file.
So if we look at that you can see that's
unintelligible to to a human that is machine readable.
okay.
So now we can just run it.
We just use Java and then the name of the
class.
And now it's done the printing.
So it's actually run it.
Okay.
So this is maybe so you don't need to think
about this very much because we're using Ides.
But I think it's really important just to begin with
to, to show you what that means to be a
compiled language.
We'll talk later on about pros and cons of why
you might want to use a compiled language.
, but that is what it means.
It's this two step process.
However, mostly what we're going to do is use IntelliJ,
and IntelliJ does a lot of stuff for you.
And that means that although it's still a compiled language
and these two steps are still happening, you're not aware
of that.
You just press run and it'll do that for you
without you having to be involved in that.
Okay.
So this is IntelliJ.
I'm going to start a new project and I'm going
to do the Hello World project in here.
So again I'm going to create this file called Hello
World.
Okay.
now let me make this bigger.
So often it's kind of, , quite I don't always
think as much as I should do about how visible
things are to you and stuff, so if it's not
visible, please just shout out.
, I have to.
How do I make this bigger?
Actually, I should know this.
It's not okay.
So I'm going to get the main screen and then
see if I can make that bigger.
So to make a new class, this is slightly unintuitive
actually, even though Java is largely very intuitive.
I mean, IntelliJ is largely very intuitive.
You have to go to source and then you right
click.
And you choose New Java class.
And I'm going to call this Hello World again.
And it automatically creates this class.
Okay.
So let me see.
Is that.
Why is it not getting bigger?
Can you see that?
Okay, I might practice.
I don't really know why.
Why?
It's not responding to the Apple Plus, but I will
practice making that bigger in case it's not clear.
Okay, so it's already filled this with it knows it's
a class.
It's making it public.
And now I need to add the main method.
So I just have to put mine in.
And as if by magic, all of that stuff I
talked about automatically appears.
And then I'm going to do the printing.
Hello world.
Already.
The semicolon is there.
So it already gives me all this stuff.
So to run it I just press the green arrow
and I can either run the whole class, the whole
the whole class, or I can run just the method.
In this case, it doesn't make any difference because there
only is one method, but later on you'll be doing
classes with more than one method.
So I'm going to run that okay.
And then what.
The output appears down here.
So you can see this is what it's actually doing.
And as you can see, the compilation and the running
happened at the same time.
You don't notice that happening.
All right.
So that is how you do that in IntelliJ.
So let's go back to the slides.
Okay.
So we've had a look at what this means.
And we've had so generally I do a lot of
things using live coding.
So I'm just going to flick through the slides.
I'm not going to say everything I've just said as
I'm coding, but it's in the slides so that you
can if you want to go back and refer to
it in the slides, it's all there.
But if you just prefer to watch the video, you
don't have to see me going through everything twice.
So everything I should have already said here.
, okay.
So the edit compile run cycle, which again, if you're
using an IDE, it's really just an edit run cycle.
But the point is so you you create your program,
or you change your program and then you compile it
and then you run it.
But the kind of the point I'm trying to make
here is that this is a cycle.
And this should be happening really, really frequently.
, the golden rules of programming are save regularly, run
it often.
Okay.
Because if you make 1 or 2 changes and then
you run it and it breaks, it's not very difficult
to figure out what went wrong because there's only 1
or 2 things it could be.
If you've been coding for half an hour or an
hour and you run it and it doesn't run, it's
a nightmare because there's so many different things it could
be.
And that could put I mean, it's just it's just
a nightmare.
So the more often you run it, the more sure
you are of where things are going.
And we'll talk about these different kinds of correctness later
on.
Okay.
So let's have some basic functionality.
Let's do some.
I'm going to keep this in the hello world class,
which is not very good practice because the class should
always do something relating to its name.
And now I'm going to be doing some arithmetic, but
I'm just doing this for demonstration purposes.
Okay.
So I'm going to print out, The sum of.
Right.
Give me an integer.
Three.
Okay.
Another integer.
Two.
Cool.
So I'm printing out a string there.
You can tell it's a string because it's in double
quotation marks.
This means that Java is not going to evaluate that.
It's just prints as is.
Now I'm going to get Java to do a little
bit more work on the printing out.
So I'm going to put three plus two.
So slightly annoyingly IntelliJ always comes up with these these
pop up things which can be useful.
But sometimes they just get in the way.
So what's going to happen when I run this.
So it prints out the string.
And then with this this is not a string.
So it's looking at what's going on here.
It can tell that these are numbers.
It knows what plus means.
So it's doing the work here.
It's doing the evaluation and then it's printing it out.
And actually so I can get rid of the LN
means add a new line.
So usually we use println because you always want a
new line.
But here we don't want a new line.
Okay, so that's doing the sum.
, and let me just show you the quotient.
So three divided by two.
Okay.
What do people think?
The answer of this is going to be.
Any idea what this is going to be 3 to
3 divided by two.
Anyone know?
Yeah.
One.
The answer is one.
Okay.
So if you're not familiar with what we're doing, that
might seem a little bit weird.
From a math point of view, the answer is obviously
1.5.
But if we run that, we're going to see the
answer is one.
Okay.
So why is that happening?
Now this is to do with types.
Typing in Java is really important.
Three is an integer.
Two is an integer.
So when Java is interpreting what it actually should do
with this, the the class of the arguments of this
function are important.
So it's interpreting this as integer division.
So if you just put integers in this means it's
an integer operation.
It will only return integers.
So it works out it's 1.5.
It'll return that as an integer and it always rounds
down.
So the answer it returns is one.
Okay.
Let's have a look at different things we can do
with this.
So the name is bond.
And that's one string.
And then I'm going to put another string in.
Okay.
Let's get rid of that.
We don't need that anymore.
Okay.
So this plus we've already seen this is doing integer
addition.
But now I'm passing in two strings.
So what on earth is it going to do with
two strings.
So if we run that we're going to see oh
it's at 1:00 already okay.
All right.
Sorry everyone.
I totally ran out of time.
I thought we had loads more time than that.
I'm really sorry about that.
, we'll finish this lecture next time.
, but in the meantime, just email me if you
have any questions or come up.
I don't know how I lost track of time there.
That was really confusing.
Thanks very much for coming.
I'll see you on Thursday.
I feel I don't deserve clapping for that time
misjudgement anyway.
So we do have a you can ask questions on
here if you want, but.
Or also just put them in piazza.